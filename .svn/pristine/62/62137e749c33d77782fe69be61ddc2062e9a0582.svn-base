/*
Navicat MySQL Data Transfer

Source Server         : my
Source Server Version : 50528
Source Host           : 127.0.0.1:3306
Source Database       : teacher

Target Server Type    : MYSQL
Target Server Version : 50528
File Encoding         : 65001

Date: 2018-06-11 23:35:04
*/

SET FOREIGN_KEY_CHECKS=0;

-- ----------------------------
-- Table structure for activities
-- ----------------------------
DROP TABLE IF EXISTS `activities`;
CREATE TABLE `activities` (
  `activitiesID` int(11) NOT NULL AUTO_INCREMENT COMMENT '活动ID',
  `activitiesName` varchar(255) NOT NULL COMMENT '活动名称',
  `beginDate` datetime DEFAULT NULL COMMENT '开始时间',
  `endDate` datetime DEFAULT NULL COMMENT '结束时间',
  `applyBeginDate` datetime DEFAULT NULL COMMENT '报名开始时间',
  `applyEndDate` datetime DEFAULT NULL COMMENT '报名结束时间',
  `teacherID` int(11) DEFAULT NULL COMMENT '发布人',
  `peopleCount` int(255) DEFAULT NULL COMMENT '需要人数',
  `visibleLevel` varchar(255) DEFAULT NULL COMMENT '可见级别',
  PRIMARY KEY (`activitiesID`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8 COMMENT='志愿服务';

-- ----------------------------
-- Records of activities
-- ----------------------------
INSERT INTO `activities` VALUES ('8', '精英挑战赛志愿者', '2018-05-23 00:00:00', '2018-05-25 00:00:00', '2018-05-23 00:00:00', '2018-05-25 00:00:00', '2', '3', '老师,学生');
INSERT INTO `activities` VALUES ('9', '拔河比赛', '2018-05-03 00:00:00', '2018-05-06 00:00:00', '2018-05-01 00:00:00', '2018-05-02 00:00:00', '1', '10', '老师,学生');
INSERT INTO `activities` VALUES ('10', '模拟面试', '2018-06-01 09:00:00', '2018-06-01 13:00:00', '2018-05-30 00:00:00', '2018-05-31 00:00:00', '2', '5', '老师,学生');
INSERT INTO `activities` VALUES ('11', '520UI设计大赛', '2018-05-20 00:00:00', '2018-05-20 00:00:00', '2018-05-15 00:00:00', '2018-05-18 00:00:00', '3', '20', '老师,学生');
INSERT INTO `activities` VALUES ('12', 'UI讲座', '2018-06-08 00:00:00', '2018-06-09 00:00:00', '2018-06-05 00:00:00', '2018-06-07 00:00:00', '5', '30', '老师,学生');

-- ----------------------------
-- Table structure for activitiesdetail
-- ----------------------------
DROP TABLE IF EXISTS `activitiesdetail`;
CREATE TABLE `activitiesdetail` (
  `detailID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `activitiesID` int(11) DEFAULT NULL COMMENT '活动编号',
  `teacherID` int(11) DEFAULT NULL COMMENT '老师编号',
  `studentID` int(11) DEFAULT NULL COMMENT '学生编号',
  `parentID` int(11) DEFAULT NULL COMMENT '家长编号',
  `phone` varchar(11) DEFAULT NULL COMMENT '联系电话',
  `createDate` datetime DEFAULT NULL COMMENT '报名时间',
  PRIMARY KEY (`detailID`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8 COMMENT='志愿服务明细';

-- ----------------------------
-- Records of activitiesdetail
-- ----------------------------
INSERT INTO `activitiesdetail` VALUES ('1', '8', null, '2', null, '18811447594', '2018-05-23 11:28:30');
INSERT INTO `activitiesdetail` VALUES ('2', '8', null, '3', null, '13582469258', '2018-05-23 10:25:30');
INSERT INTO `activitiesdetail` VALUES ('3', '8', null, '6', null, '15885147594', '2018-05-24 13:28:30');
INSERT INTO `activitiesdetail` VALUES ('4', '8', null, '7', null, '18811498294', '2018-05-23 11:29:30');
INSERT INTO `activitiesdetail` VALUES ('5', '8', null, '8', null, '18369498294', '2018-05-24 09:29:30');
INSERT INTO `activitiesdetail` VALUES ('6', '9', '3', null, null, '13056988882', '2018-05-01 09:29:30');
INSERT INTO `activitiesdetail` VALUES ('7', '9', null, '2', null, '18811447594', '2018-05-01 09:20:32');
INSERT INTO `activitiesdetail` VALUES ('8', '10', null, '6', null, '13569696813', '2018-05-30 12:30:12');
INSERT INTO `activitiesdetail` VALUES ('9', '10', null, '7', null, '18811498294', '2018-05-30 14:30:12');

-- ----------------------------
-- Table structure for approval
-- ----------------------------
DROP TABLE IF EXISTS `approval`;
CREATE TABLE `approval` (
  `approvalID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `approvalType` int(11) DEFAULT NULL COMMENT '请假类型',
  `beginDate` datetime DEFAULT NULL COMMENT '开始时间',
  `endDate` datetime DEFAULT NULL COMMENT '结束时间',
  `diffDate` double DEFAULT NULL COMMENT '差异时间',
  `reason` varchar(255) DEFAULT NULL COMMENT '请假事由',
  `image` varchar(255) DEFAULT NULL COMMENT '图片（病假条）',
  `approvalJY` int(11) DEFAULT NULL COMMENT '审批的教员',
  `approvalBZR` int(11) DEFAULT NULL COMMENT '审批的班主任',
  `jyAgree` int(255) DEFAULT NULL COMMENT '教员是否同意',
  `bzrAgree` int(11) DEFAULT NULL COMMENT '班主任是否同意',
  `jyAgreeDate` datetime DEFAULT NULL COMMENT '教员审批时间',
  `bzrAgreeDate` datetime DEFAULT NULL COMMENT '班主任审批时间',
  `studentId` int(11) DEFAULT NULL,
  PRIMARY KEY (`approvalID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='待我审批';

-- ----------------------------
-- Records of approval
-- ----------------------------
INSERT INTO `approval` VALUES ('1', '19', '2018-06-08 08:30:00', '2018-06-08 12:15:00', '3.75', '发烧，请假去医院', 'jiatiao1.jpg', '1', '4', '1', null, '2018-06-10 00:13:59', null, '1');
INSERT INTO `approval` VALUES ('2', '20', '2018-06-07 08:30:00', '2018-06-07 17:30:00', '7.5', '参见哥哥婚礼', 'shijia1.jpg', '1', '4', '0', null, '2018-06-09 15:49:54', null, '2');
INSERT INTO `approval` VALUES ('3', '19', '2018-06-09 13:45:00', '2018-06-09 17:30:00', '3.75', '中吃海鲜，过敏', 'jiatiao2.jpg', '1', '4', '1', null, '2018-06-09 15:49:49', null, '3');
INSERT INTO `approval` VALUES ('4', '20', '2018-06-06 08:30:00', '2018-06-09 17:30:00', '22.5', '回老家参见姐姐婚礼', 'shijia2.jpg', '1', '4', null, null, null, null, '9');
INSERT INTO `approval` VALUES ('5', '19', '2018-06-05 08:30:00', '2018-06-05 12:15:00', '3.75', '发烧，请假去医院', 'jiatiao3.jpg', '1', '4', '1', null, '2018-06-09 16:15:58', null, '10');

-- ----------------------------
-- Table structure for article
-- ----------------------------
DROP TABLE IF EXISTS `article`;
CREATE TABLE `article` (
  `articleID` int(11) NOT NULL AUTO_INCREMENT COMMENT '文章编号',
  `articleTitle` varchar(500) DEFAULT NULL COMMENT '标题',
  `image` varchar(255) DEFAULT NULL COMMENT '图片',
  `articleContent` varchar(5000) DEFAULT NULL COMMENT '文章内容',
  `articleType` int(11) DEFAULT NULL COMMENT '文章类型（说句心里话，班级新鲜事)',
  `createDate` datetime DEFAULT NULL COMMENT '创建时间',
  `author` varchar(255) DEFAULT NULL COMMENT '作者',
  PRIMARY KEY (`articleID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='文章';

-- ----------------------------
-- Records of article
-- ----------------------------

-- ----------------------------
-- Table structure for attendancel
-- ----------------------------
DROP TABLE IF EXISTS `attendancel`;
CREATE TABLE `attendancel` (
  `attendanceID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `classID` int(11) DEFAULT NULL COMMENT '班级',
  `studentID` int(11) DEFAULT NULL COMMENT '学号',
  `toSchool` datetime DEFAULT NULL COMMENT '来校时间',
  `leaveSchool` datetime DEFAULT NULL COMMENT '离校时间',
  `state` int(11) DEFAULT NULL COMMENT '考勤状态(正常，请假，迟到，早退，旷课)',
  `classDate` datetime DEFAULT NULL COMMENT '上课日期',
  PRIMARY KEY (`attendanceID`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 COMMENT='学生考勤';

-- ----------------------------
-- Records of attendancel
-- ----------------------------
INSERT INTO `attendancel` VALUES ('1', '1', '1', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('2', '1', '2', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '15', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('3', '1', '3', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '17', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('4', '1', '4', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('5', '1', '5', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('6', '1', '6', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('7', '2', '7', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('8', '2', '8', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('9', '2', '9', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('10', '2', '10', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('11', '1', '1', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('12', '1', '2', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('13', '1', '3', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('14', '1', '4', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('15', '1', '5', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('16', '1', '6', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('17', '2', '7', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('18', '2', '8', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('19', '2', '9', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('20', '2', '10', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('21', '2', '7', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('22', '2', '8', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('23', '2', '9', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('24', '2', '10', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('25', '2', '7', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('26', '2', '8', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('27', '2', '9', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('28', '2', '10', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('29', '2', '7', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');
INSERT INTO `attendancel` VALUES ('30', '2', '8', '2018-06-01 14:25:24', '2018-06-01 18:25:27', '14', '2018-06-01 14:27:00');

-- ----------------------------
-- Table structure for blog
-- ----------------------------
DROP TABLE IF EXISTS `blog`;
CREATE TABLE `blog` (
  `blogID` int(11) NOT NULL AUTO_INCREMENT COMMENT '博客编号',
  `title` varchar(255) DEFAULT NULL COMMENT '标题',
  `articleType` int(11) DEFAULT NULL COMMENT '文章类型',
  `blogType` int(11) DEFAULT NULL COMMENT '博客分类',
  `summary` varchar(500) DEFAULT NULL COMMENT '摘要',
  `studentID` int(255) DEFAULT NULL COMMENT '学生编号',
  `teacherID` int(11) DEFAULT NULL COMMENT '老师编号',
  `thumbnail` varchar(255) DEFAULT NULL COMMENT '缩略图',
  `content` varchar(5000) DEFAULT NULL COMMENT '内容',
  `clickCount` int(11) DEFAULT NULL COMMENT '点击次数',
  `isRecommended` int(11) DEFAULT NULL COMMENT '是否推荐',
  `isTop` int(11) DEFAULT NULL COMMENT '是否置顶',
  `isEnabled` int(11) DEFAULT NULL COMMENT '是否启用',
  `createDate` datetime DEFAULT NULL COMMENT '创建日期',
  `classId` int(11) DEFAULT NULL COMMENT '班级',
  PRIMARY KEY (`blogID`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='博客';

-- ----------------------------
-- Records of blog
-- ----------------------------
INSERT INTO `blog` VALUES ('1', 'Java应该如何去学习？', '21', '2', '引言:做为一名程序员,都是真心的想把自己的东西分享出来,供大家一起学习探讨,一起提高技能,一起涨工资,呵  这一系列的文章都是关于Javascript 基础的 当然...', '1', '2', 'http://p0.so.qhimgs1.com/bdr/_240_/t01dc0cba5301b28e24.jpg', '做为一名程序员，都是真心的想把自己的东西分享出来，供大家一起学习探讨，一起提高技能，一起涨工资，呵\r\n  这一系列的文章都是关于Javascript 基础的 当然文章当中穿插了些我自己的理解，希望可以帮助一些刚开始的童鞋！\r\n  废话不多说我们开始吧！  我们先从最简单的数据类型开始吧！\r\n\r\n    首先请记住javascript 有5种基本数据类型和1种复杂数据类型，至于为什么只有这六种，大家可以去翻翻W3C的资料哈！', '1111', '1', '1', '1', '2018-06-09 00:00:00', '1');
INSERT INTO `blog` VALUES ('2', '最棒的Java开发指南', '22', '1', '在过去的一年间(2017年),我们对比了近24000篇 JavaScript 文章,并从中挑选出了最好的55篇。我们做了这个目录,认为阅读有经验的程序员写的文章是一个很好的学习...', '2', '3', 'http://p4.so.qhmsg.com/bdr/_240_/t01b25bdc358a9c7b09.jpg', '在过去的一年间（2017年），我们对比了近24000篇 JavaScript 文章，并从中挑选出了最好的55篇。我们做了这个目录，认为阅读有经验的程序员写的文章是一个很好的学习方式。在学习了一两门课程之后，您可能在构建和发布实际应用时面临许多挑战。通过这个目录，您可以更轻松地找到去年的最佳 JavaScript 教程，在这里有经验的开发人员会分享他们学习 JavaScript 的课程、见解和遇到的错误。\r\n\r\n　　这个目录有15个关键的主题，如下所示。他们分别是学习指南、新人上手、Webpack、性能、基础概念、函数式编程、面试、教程案例、Async Await、并发、V8、机器学习、数据可视化、调试、单元测试。', '22222', '1', '1', '1', '2018-06-09 00:00:00', '1');
INSERT INTO `blog` VALUES ('3', 'Web前端开发准备什么呢？', '21', '1', 'Web前端岗位面试题有哪些？ - 汪汪的回答 - 知乎 https://www.zhihu.com/question/41466747/answer/132562725', '3', '5', 'http://p3.so.qhimgs1.com/bdr/_240_/t014450104a597292c3.jpg', '腾讯面试对基础比较看重，然后需要你有两三个比较好的项目，一面重视面试者对前端基础的把握，还要手写代码，不过不难，二面部门的leader面，这一面比较难，面试官会对你的项目细节进行深挖，所以说项目要牛逼一点，最后还会有一道逻辑题（我没有答上来），三面是HR面，如果你想进大公司的话，下面这些技术是肯定要掌握的：html5，css3，JavaScript，略懂一点jQuery源码，Node.js，express，mongoose，数据库mongodb。大公司问的核心在于JavaScript。如果下面的知识点你都可以打上来，恭喜你拿下bat不是问题--2016-11-11写\n\n作者：汪汪\n链接：https://www.zhihu.com/question/41466747/answer/132562725\n来源：知乎\n著作权归作者所有。商业转载请联系作者获得授权，非商业转载。', '2655', '1', '1', '1', '2018-06-09 00:00:00', '1');
INSERT INTO `blog` VALUES ('4', 'Android编程技巧', '22', '3', '原文出处 : Android 蓝牙开发之搜索、配对、连接、通信大全 蓝牙( Bluetooth®):是一种无线技术标准,可实现固定设备、移动设备和楼宇个人域网之间的短距离数据 ...', '4', '6', 'http://p1.so.qhmsg.com/bdr/_240_/t01abc457f32e86e726.jpg', '蓝牙（ Bluetooth®）：是一种无线技术标准，可实现固定设备、移动设备和楼宇个人域网之间的短距离数据\r\n\r\n交换（使用2.4—2.485GHz的ISM波段的UHF无线电波）。蓝牙设备最多可以同时和7个其它蓝牙设备建立连接，进\r\n\r\n行通信，当然并不是每一个蓝牙都可以达到最大值。下面，我们从蓝牙的基本概念开始，一步一步开始了解蓝牙。', '26646', '1', '1', '1', '2018-06-09 00:00:00', '1');
INSERT INTO `blog` VALUES ('5', 'Android 移动开发编程之各种布局属性', '22', '3', 'android:background android:clickable android:fadingEdge android:fadingEdgeLength android:focusable android:longClickable android:minHeight/android:minWidth android:nextFocusDown android:nextFo', '4', '6', 'http://p0.so.qhmsg.com/bdr/_240_/t01416184db82314bf5.jpg', 'Android系统运行的应用程序，可以通过PackageManager类获得相关信息：\r\npackageManager.getInstalledApplications(0) 这个方法会返回一个list，包含所以程序包括系统程序。\r\n\r\n通过for (ApplicationInfo app : listAppcations)遍历所有信息\r\n\r\n通过app.flag标示可以判断当前程序是系统程序还是第三方程序，还是手机卡上的程序：\r\n(app.flags & ApplicationInfo.FLAG_SYSTEM) != 0 表示系统程序\r\n\r\n(app.flags & ApplicationInfo.FLAG_SYSTEM) <= 0  表示第三方应用程序\r\n\r\n(app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) != 0  表示系统程序被手动更新后，也成为第三方应用程序\r\n\r\n((app.flags & ApplicationInfo.FLAG_EXTERNAL_STORAGE) != 0  表示安装在SD卡上的应用程序\r\n\r\n程序的相关信息：\r\npackageManager.getApplicationLabel(app) 得到当前程序的名字\r\n\r\npackageManager.getApplicationIcon(app); 得到当前程序的ICON\r\n\r\napp.uid  得到当前程序的UID\r\n\r\napp.packageName  得到当期程序的包名', '26646', '1', '1', '1', '2018-06-09 00:00:00', '1');

-- ----------------------------
-- Table structure for blogmessage
-- ----------------------------
DROP TABLE IF EXISTS `blogmessage`;
CREATE TABLE `blogmessage` (
  `messageID` int(11) NOT NULL AUTO_INCREMENT COMMENT '留言ID',
  `blogID` int(11) NOT NULL COMMENT '博客编号',
  `personID` int(11) DEFAULT NULL COMMENT '留言人ID',
  `messageContent` varchar(255) DEFAULT NULL COMMENT '留言内容',
  `createDate` datetime DEFAULT NULL COMMENT '留言时间',
  `parentID` int(11) DEFAULT NULL COMMENT '父级留言人',
  PRIMARY KEY (`messageID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='博客留言';

-- ----------------------------
-- Records of blogmessage
-- ----------------------------

-- ----------------------------
-- Table structure for class
-- ----------------------------
DROP TABLE IF EXISTS `class`;
CREATE TABLE `class` (
  `classId` int(11) NOT NULL AUTO_INCREMENT COMMENT '班级编号',
  `className` varchar(20) NOT NULL COMMENT '班级名称',
  `teacherId` int(11) NOT NULL COMMENT '教员',
  `headTeacherId` int(11) NOT NULL COMMENT '班主任',
  `isEnabled` smallint(5) unsigned DEFAULT '1' COMMENT '是否启用',
  `remark` varchar(100) DEFAULT '无' COMMENT '备注',
  `stage` int(11) DEFAULT NULL COMMENT '阶段',
  PRIMARY KEY (`classId`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 COMMENT='班级';

-- ----------------------------
-- Records of class
-- ----------------------------
INSERT INTO `class` VALUES ('1', 'TCMP058', '1', '4', '1', '无', null);
INSERT INTO `class` VALUES ('2', 'TCMP062', '1', '4', '1', '无', null);
INSERT INTO `class` VALUES ('19', 'KGUT1029', '13', '15', '1', '无', null);
INSERT INTO `class` VALUES ('20', 'KGUT1026', '14', '16', '1', '无', null);
INSERT INTO `class` VALUES ('21', 'KWFT1007', '18', '17', '1', '无', null);
INSERT INTO `class` VALUES ('22', '大数据软件基础班', '2', '4', '1', '无', null);
INSERT INTO `class` VALUES ('23', 'KWFT1006', '18', '15', '1', '无', null);
INSERT INTO `class` VALUES ('24', 'KGUT1027', '19', '20', '1', '无', null);
INSERT INTO `class` VALUES ('25', 'TCMP061', '21', '22', '1', '无', null);
INSERT INTO `class` VALUES ('26', 'TCAY2177', '21', '22', '1', '无', null);
INSERT INTO `class` VALUES ('27', '工作室', '19', '15', '1', '无', null);
INSERT INTO `class` VALUES ('28', 'TCMP066', '24', '22', '1', '无', null);
INSERT INTO `class` VALUES ('29', 'KGJT001', '1', '4', '1', '无', null);
INSERT INTO `class` VALUES ('30', '综合预科班', '23', '20', '1', '无', null);

-- ----------------------------
-- Table structure for classroom
-- ----------------------------
DROP TABLE IF EXISTS `classroom`;
CREATE TABLE `classroom` (
  `roomID` int(11) NOT NULL AUTO_INCREMENT COMMENT '教室编号',
  `roomName` varchar(255) DEFAULT NULL COMMENT '教室名称',
  `monitoringURL` varchar(255) DEFAULT NULL COMMENT '摄像头URL',
  `userName` varchar(255) DEFAULT NULL COMMENT '用户名',
  `password` varchar(255) DEFAULT NULL COMMENT '密码',
  `port` varchar(255) DEFAULT NULL COMMENT '端口号',
  `classID` int(11) DEFAULT NULL COMMENT '班级编号',
  PRIMARY KEY (`roomID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='班级关联摄像头';

-- ----------------------------
-- Records of classroom
-- ----------------------------

-- ----------------------------
-- Table structure for customtest
-- ----------------------------
DROP TABLE IF EXISTS `customtest`;
CREATE TABLE `customtest` (
  `customId` int(11) NOT NULL AUTO_INCREMENT COMMENT '定制测试编号',
  `questionId` int(11) NOT NULL COMMENT '试卷编号',
  `startDate` datetime DEFAULT NULL COMMENT '开始时间',
  `endDate` datetime DEFAULT NULL COMMENT '结束时间',
  `studentName` varchar(100) DEFAULT NULL COMMENT '可以参加考试的学员姓名',
  `createdBy` int(11) DEFAULT NULL COMMENT '出题人',
  `creationDate` datetime DEFAULT NULL COMMENT '创建时间',
  `classId` int(11) DEFAULT NULL COMMENT '班级编号',
  `isEnable` int(11) DEFAULT NULL COMMENT '是否启用',
  `examType` int(11) DEFAULT NULL COMMENT '考试分类(日考，周考，月考)',
  `isNotice` int(255) DEFAULT NULL COMMENT '是否通过成绩群发通知了家长',
  PRIMARY KEY (`customId`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8 COMMENT='定制测试';

-- ----------------------------
-- Records of customtest
-- ----------------------------
INSERT INTO `customtest` VALUES ('1', '1', '2018-05-26 01:05:28', '2018-05-30 01:05:30', '全部', '1', '2018-05-26 01:05:39', '1', '0', null, null);
INSERT INTO `customtest` VALUES ('2', '2', '2018-05-26 01:27:59', '2018-05-30 01:28:02', '全部', '1', '2018-05-26 01:28:09', '2', '0', null, null);
INSERT INTO `customtest` VALUES ('3', '1', '2018-05-26 01:07:28', '2018-05-30 01:05:30', '全部', '1', '2018-05-26 01:05:39', '2', '0', null, null);
INSERT INTO `customtest` VALUES ('4', '2', '2018-04-16 01:27:59', '2018-05-30 01:28:02', '全部', '1', '2018-05-26 01:28:09', '1', '0', null, null);
INSERT INTO `customtest` VALUES ('5', '3', '2018-06-03 14:03:48', '2018-06-03 16:03:51', '全部', '2', '2018-06-02 09:05:12', '1', '1', '3', '1');
INSERT INTO `customtest` VALUES ('6', '3', '2018-06-03 14:03:48', '2018-06-03 16:03:51', '全部', '2', '2018-06-02 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('7', '4', '2018-06-04 14:03:48', '2018-06-04 16:03:51', '全部', '2', '2018-06-03 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('8', '4', '2018-06-04 14:03:48', '2018-06-04 16:03:51', '全部', '2', '2018-06-03 09:05:12', '1', '1', '3', '1');
INSERT INTO `customtest` VALUES ('9', '5', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '2', '2018-06-03 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('10', '5', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '2', '2018-06-03 09:05:12', '1', '1', '3', '1');
INSERT INTO `customtest` VALUES ('11', '6', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '2', '2018-06-03 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('12', '6', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '2', '2018-06-03 09:05:12', '1', '1', '3', '1');
INSERT INTO `customtest` VALUES ('13', '7', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '2', '2018-06-03 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('14', '7', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '2', '2018-06-03 09:05:12', '1', '1', '3', '1');
INSERT INTO `customtest` VALUES ('15', '8', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '3', '2018-06-03 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('16', '8', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '3', '2018-06-03 09:05:12', '1', '1', '3', '1');
INSERT INTO `customtest` VALUES ('17', '9', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '3', '2018-06-03 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('18', '9', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '3', '2018-06-03 09:05:12', '1', '1', '3', '1');
INSERT INTO `customtest` VALUES ('19', '10', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '3', '2018-06-03 09:05:12', '2', '1', '3', '1');
INSERT INTO `customtest` VALUES ('20', '10', '2018-06-05 14:03:48', '2018-06-05 16:03:51', '全部', '3', '2018-06-03 09:05:12', '1', '1', '3', '1');

-- ----------------------------
-- Table structure for custromjl
-- ----------------------------
DROP TABLE IF EXISTS `custromjl`;
CREATE TABLE `custromjl` (
  `testId` int(11) NOT NULL AUTO_INCREMENT COMMENT '记录编号',
  `customId` int(11) DEFAULT NULL COMMENT '定制测试编号',
  `studentId` int(11) DEFAULT NULL COMMENT '学生编号',
  `score` int(11) DEFAULT NULL COMMENT '考试成绩',
  PRIMARY KEY (`testId`)
) ENGINE=InnoDB AUTO_INCREMENT=31 DEFAULT CHARSET=utf8 COMMENT='定制测试记录';

-- ----------------------------
-- Records of custromjl
-- ----------------------------
INSERT INTO `custromjl` VALUES ('6', '1', '1', '14');
INSERT INTO `custromjl` VALUES ('7', '1', '3', '89');
INSERT INTO `custromjl` VALUES ('8', '1', '2', '85');
INSERT INTO `custromjl` VALUES ('9', '1', '5', '87');
INSERT INTO `custromjl` VALUES ('10', '1', '4', '96');
INSERT INTO `custromjl` VALUES ('11', '1', '6', '78');
INSERT INTO `custromjl` VALUES ('12', '2', '7', '14');
INSERT INTO `custromjl` VALUES ('13', '2', '8', '89');
INSERT INTO `custromjl` VALUES ('14', '2', '9', '85');
INSERT INTO `custromjl` VALUES ('15', '2', '10', '87');
INSERT INTO `custromjl` VALUES ('16', '4', '1', '96');
INSERT INTO `custromjl` VALUES ('17', '4', '2', '78');
INSERT INTO `custromjl` VALUES ('18', '4', '3', '14');
INSERT INTO `custromjl` VALUES ('19', '4', '4', '89');
INSERT INTO `custromjl` VALUES ('20', '4', '5', '85');
INSERT INTO `custromjl` VALUES ('21', '4', '6', '87');
INSERT INTO `custromjl` VALUES ('22', '3', '7', '96');
INSERT INTO `custromjl` VALUES ('23', '3', '8', '78');
INSERT INTO `custromjl` VALUES ('24', '3', '9', '14');
INSERT INTO `custromjl` VALUES ('25', '3', '10', '89');
INSERT INTO `custromjl` VALUES ('26', '6', '6', '33');
INSERT INTO `custromjl` VALUES ('27', '7', '7', '60');
INSERT INTO `custromjl` VALUES ('28', '8', '8', '22');
INSERT INTO `custromjl` VALUES ('29', '5', '9', '90');
INSERT INTO `custromjl` VALUES ('30', '7', '10', '90');

-- ----------------------------
-- Table structure for day
-- ----------------------------
DROP TABLE IF EXISTS `day`;
CREATE TABLE `day` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `studentId` int(11) NOT NULL COMMENT '学生编号',
  `dayScore` double DEFAULT NULL COMMENT '日考成绩',
  `dayId` int(255) NOT NULL,
  `examDate` datetime DEFAULT NULL COMMENT '考试时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1 COMMENT='日考记录表';

-- ----------------------------
-- Records of day
-- ----------------------------
INSERT INTO `day` VALUES ('1', '1', null, '1', '2018-06-06 18:14:08');
INSERT INTO `day` VALUES ('2', '2', null, '1', '2018-03-13 18:14:58');

-- ----------------------------
-- Table structure for dictionary
-- ----------------------------
DROP TABLE IF EXISTS `dictionary`;
CREATE TABLE `dictionary` (
  `dictionaryID` int(11) NOT NULL AUTO_INCREMENT COMMENT '字典编号',
  `dictionaryName` varchar(255) DEFAULT NULL COMMENT '名称',
  `dictionaryCode` varchar(255) DEFAULT NULL,
  `isEnabled` int(11) DEFAULT '1' COMMENT '是否启用',
  PRIMARY KEY (`dictionaryID`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8 COMMENT='数据字典';

-- ----------------------------
-- Records of dictionary
-- ----------------------------
INSERT INTO `dictionary` VALUES ('1', '考试类型', 'examType', '1');
INSERT INTO `dictionary` VALUES ('2', '职务类型', 'teacherType', '1');
INSERT INTO `dictionary` VALUES ('3', '题目类型', 'opictypeType', '1');
INSERT INTO `dictionary` VALUES ('4', '考勤类型', 'arriveType', '1');
INSERT INTO `dictionary` VALUES ('5', '请假类型', 'leaveType', '1');
INSERT INTO `dictionary` VALUES ('6', '博客类型', 'blogType', '1');

-- ----------------------------
-- Table structure for dictionarydetail
-- ----------------------------
DROP TABLE IF EXISTS `dictionarydetail`;
CREATE TABLE `dictionarydetail` (
  `detailID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `dictionaryID` int(11) DEFAULT NULL COMMENT '字典编号',
  `attrName` varchar(255) DEFAULT NULL COMMENT '属性名称',
  `showOrder` int(11) DEFAULT NULL COMMENT '显示顺序',
  `isEnabled` int(11) DEFAULT '1' COMMENT '是否启用',
  PRIMARY KEY (`detailID`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=utf8 COMMENT='数据字典明细';

-- ----------------------------
-- Records of dictionarydetail
-- ----------------------------
INSERT INTO `dictionarydetail` VALUES ('1', '1', '日考', '1', '1');
INSERT INTO `dictionarydetail` VALUES ('2', '1', '周考', '2', '1');
INSERT INTO `dictionarydetail` VALUES ('3', '1', '月考', '3', '1');
INSERT INTO `dictionarydetail` VALUES ('4', '2', '校长', '3', '1');
INSERT INTO `dictionarydetail` VALUES ('5', '2', '教学主管', '2', '1');
INSERT INTO `dictionarydetail` VALUES ('6', '2', '就业主管', '3', '1');
INSERT INTO `dictionarydetail` VALUES ('7', '2', '教员', '4', '1');
INSERT INTO `dictionarydetail` VALUES ('8', '2', '班主任', '5', '1');
INSERT INTO `dictionarydetail` VALUES ('9', '3', '选择', '1', '1');
INSERT INTO `dictionarydetail` VALUES ('10', '3', '填空', '2', '1');
INSERT INTO `dictionarydetail` VALUES ('11', '3', '判断', '3', '1');
INSERT INTO `dictionarydetail` VALUES ('12', '3', '简答', '4', '1');
INSERT INTO `dictionarydetail` VALUES ('13', '3', '上机', '5', '1');
INSERT INTO `dictionarydetail` VALUES ('14', '4', '正常', '1', '1');
INSERT INTO `dictionarydetail` VALUES ('15', '4', '迟到', '2', '1');
INSERT INTO `dictionarydetail` VALUES ('16', '4', '请假', '3', '1');
INSERT INTO `dictionarydetail` VALUES ('17', '4', '旷课', '4', '1');
INSERT INTO `dictionarydetail` VALUES ('18', '4', '早退', '5', '1');
INSERT INTO `dictionarydetail` VALUES ('19', '5', '病假', '1', '1');
INSERT INTO `dictionarydetail` VALUES ('20', '5', '事假', '2', '1');
INSERT INTO `dictionarydetail` VALUES ('21', '6', '原创', '1', '1');
INSERT INTO `dictionarydetail` VALUES ('22', '6', '转载', '2', '1');
INSERT INTO `dictionarydetail` VALUES ('23', '6', '翻译', '3', '1');

-- ----------------------------
-- Table structure for duty
-- ----------------------------
DROP TABLE IF EXISTS `duty`;
CREATE TABLE `duty` (
  `dutyId` int(11) NOT NULL COMMENT '职务编号',
  `dutyName` varchar(255) DEFAULT NULL COMMENT '职务名称',
  PRIMARY KEY (`dutyId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='职务';

-- ----------------------------
-- Records of duty
-- ----------------------------
INSERT INTO `duty` VALUES ('1', '教员');
INSERT INTO `duty` VALUES ('2', '班主任');
INSERT INTO `duty` VALUES ('3', '校长');
INSERT INTO `duty` VALUES ('4', '教务');
INSERT INTO `duty` VALUES ('5', '财务');
INSERT INTO `duty` VALUES ('6', '市场');

-- ----------------------------
-- Table structure for employment
-- ----------------------------
DROP TABLE IF EXISTS `employment`;
CREATE TABLE `employment` (
  `employmentID` int(11) NOT NULL AUTO_INCREMENT COMMENT '情况编号',
  `studentID` int(11) DEFAULT NULL COMMENT '学号',
  `classID` int(11) DEFAULT NULL COMMENT '班级',
  `company` varchar(255) DEFAULT NULL COMMENT '入职企业',
  `internship` double DEFAULT NULL COMMENT '实习期工资',
  `positive` double DEFAULT NULL COMMENT '转正工资',
  `post` varchar(255) DEFAULT NULL COMMENT '职位',
  `trialDate` int(11) DEFAULT NULL COMMENT '试用时间',
  `dateEntry` datetime DEFAULT NULL COMMENT '入职日期',
  `isQuality` int(11) DEFAULT NULL COMMENT '是否优质',
  PRIMARY KEY (`employmentID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='就业情况';

-- ----------------------------
-- Records of employment
-- ----------------------------

-- ----------------------------
-- Table structure for evaluation
-- ----------------------------
DROP TABLE IF EXISTS `evaluation`;
CREATE TABLE `evaluation` (
  `evaluationID` int(11) NOT NULL AUTO_INCREMENT COMMENT '评价编号',
  `evaluationType` int(11) DEFAULT NULL COMMENT '评价类型',
  `questionID` int(11) DEFAULT NULL COMMENT '试卷编号',
  `comments` varchar(255) DEFAULT NULL COMMENT '评价内容',
  `sendType` int(11) DEFAULT NULL COMMENT '消息类型(1、邮箱 2、短信)',
  PRIMARY KEY (`evaluationID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='老师点评';

-- ----------------------------
-- Records of evaluation
-- ----------------------------

-- ----------------------------
-- Table structure for evaluationdetail
-- ----------------------------
DROP TABLE IF EXISTS `evaluationdetail`;
CREATE TABLE `evaluationdetail` (
  `detailID` int(11) NOT NULL AUTO_INCREMENT COMMENT '明细编号',
  `studentID` int(11) NOT NULL COMMENT '学生编号',
  `parentID` int(11) NOT NULL COMMENT '家长编号',
  `evaluationID` int(11) NOT NULL COMMENT '评价编号',
  PRIMARY KEY (`detailID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='老师点评明细';

-- ----------------------------
-- Records of evaluationdetail
-- ----------------------------

-- ----------------------------
-- Table structure for evaluationteacher
-- ----------------------------
DROP TABLE IF EXISTS `evaluationteacher`;
CREATE TABLE `evaluationteacher` (
  `evaluationID` int(11) NOT NULL AUTO_INCREMENT COMMENT '评价编号',
  `teacherID` int(11) DEFAULT NULL COMMENT '被评价的老师编号',
  `createDate` datetime DEFAULT NULL COMMENT '测评时间',
  `classID` int(11) DEFAULT NULL COMMENT '测评班级',
  `advice` varchar(600) DEFAULT NULL COMMENT '所有同学建议',
  `studentCount` int(255) DEFAULT NULL COMMENT '测评人数',
  `average` double DEFAULT NULL COMMENT '平均分',
  `diffName` varchar(255) DEFAULT NULL COMMENT '未参加测评学员姓名',
  PRIMARY KEY (`evaluationID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='评教评学（老师测评）';

-- ----------------------------
-- Records of evaluationteacher
-- ----------------------------

-- ----------------------------
-- Table structure for evateacherdetail
-- ----------------------------
DROP TABLE IF EXISTS `evateacherdetail`;
CREATE TABLE `evateacherdetail` (
  `etID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `teacherID` int(11) DEFAULT NULL COMMENT '教师编号',
  `studentID` int(11) DEFAULT NULL COMMENT '学生编号',
  `classID` int(11) DEFAULT NULL COMMENT '班级编号',
  `score` double DEFAULT NULL COMMENT '成绩',
  `advice` varchar(255) DEFAULT NULL COMMENT '意见建议',
  `evaluationID` int(11) NOT NULL COMMENT '评价编号',
  PRIMARY KEY (`etID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='测评明细';

-- ----------------------------
-- Records of evateacherdetail
-- ----------------------------

-- ----------------------------
-- Table structure for exam
-- ----------------------------
DROP TABLE IF EXISTS `exam`;
CREATE TABLE `exam` (
  `dayId` int(11) NOT NULL AUTO_INCREMENT,
  `examContent` varchar(255) CHARACTER SET utf8 NOT NULL,
  PRIMARY KEY (`dayId`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1 COMMENT='考试表';

-- ----------------------------
-- Records of exam
-- ----------------------------
INSERT INTO `exam` VALUES ('1', 'mybatis整合');
INSERT INTO `exam` VALUES ('2', 'ssm整合');

-- ----------------------------
-- Table structure for graduationexam
-- ----------------------------
DROP TABLE IF EXISTS `graduationexam`;
CREATE TABLE `graduationexam` (
  `graduationExamID` int(255) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `classID` int(11) DEFAULT NULL COMMENT '班级',
  `studentID` int(11) DEFAULT NULL COMMENT '学号',
  `machine` int(11) DEFAULT NULL COMMENT '机试成绩',
  `written` int(11) DEFAULT NULL COMMENT '笔试成绩',
  `through` int(11) DEFAULT NULL COMMENT '是否通过',
  `scholarshipType` int(11) DEFAULT NULL COMMENT '奖学金类型',
  `phaseType` int(11) DEFAULT NULL COMMENT '阶段(S1,S2,Y2)',
  PRIMARY KEY (`graduationExamID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='结业考试';

-- ----------------------------
-- Records of graduationexam
-- ----------------------------

-- ----------------------------
-- Table structure for homework
-- ----------------------------
DROP TABLE IF EXISTS `homework`;
CREATE TABLE `homework` (
  `workid` int(11) NOT NULL AUTO_INCREMENT COMMENT '作业编号',
  `workname` varchar(255) DEFAULT NULL COMMENT '作业名称',
  `classid` int(11) DEFAULT NULL COMMENT '班级编号',
  `remark` varchar(500) DEFAULT NULL COMMENT '备注',
  `workdetail` varchar(255) DEFAULT NULL COMMENT '作业详情',
  `sendType` varchar(255) DEFAULT NULL COMMENT '发送类型（1,2,3,4）',
  PRIMARY KEY (`workid`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8 COMMENT='家庭作业';

-- ----------------------------
-- Records of homework
-- ----------------------------
INSERT INTO `homework` VALUES ('1', 'TCMP058班18年06月7日的作业', '1', null, '1、这是作业明细TCMP058班18年06月7日的作业这是作业明细这是作业明细2、TCMP058班18年06月7日的作业这是作业明细这是作业明细TCMP058班18年06月7日的作业这是作业明细这是作业明细TCMP058班18年06月7日的作业3、这是作业明细这是作业明细TCMP058班18年06月7日的作业这是作业明细这是作业明细TCMP058班18年06月7日的作业这是作业明细这是作业明细TCMP058班18年06月7日的作业这是作业明细这是作业明细TCMP058班18年06月7日4的作业这是作业明细', null);
INSERT INTO `homework` VALUES ('2', 'TCMP062班18年06月7日的作业', '2', null, '这是作业明细TCMP062班18年06月7日的作业这是作业明细', null);
INSERT INTO `homework` VALUES ('3', 'TCMP058班18年05月8日的作业', '1', null, '这是作业明细TCMP058班18年05月8日的作业这是作业明细', null);
INSERT INTO `homework` VALUES ('4', 'TCMP062班18年05月8日的作业', '2', null, '这是作业明细TCMP062班18年05月8日的作业这是作业明细', null);

-- ----------------------------
-- Table structure for lesson
-- ----------------------------
DROP TABLE IF EXISTS `lesson`;
CREATE TABLE `lesson` (
  `lessonID` int(11) NOT NULL AUTO_INCREMENT COMMENT '课表编号',
  `lessonDate` datetime DEFAULT NULL COMMENT '日期',
  `subjectNameA` varchar(255) DEFAULT NULL COMMENT '课程名称',
  `roomIDA` varchar(255) DEFAULT NULL COMMENT '教室',
  `classIDA` int(11) DEFAULT NULL,
  `teacherIDA` int(11) DEFAULT NULL,
  `subjectNameB` varchar(255) DEFAULT NULL,
  `roomIDB` varchar(255) DEFAULT NULL,
  `classIDB` int(11) DEFAULT NULL,
  `teacherIDB` int(11) DEFAULT NULL,
  `subjectNameC` varchar(255) DEFAULT NULL,
  `roomIDC` varchar(255) DEFAULT NULL,
  `classIDC` int(11) DEFAULT NULL,
  `teacherIDC` int(11) DEFAULT NULL,
  `subjectNameD` varchar(255) DEFAULT NULL,
  `roomIDD` varchar(255) DEFAULT NULL,
  `classIDD` int(11) DEFAULT NULL,
  `teacherIDD` int(11) DEFAULT NULL,
  PRIMARY KEY (`lessonID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='班级课表';

-- ----------------------------
-- Records of lesson
-- ----------------------------

-- ----------------------------
-- Table structure for mailbox
-- ----------------------------
DROP TABLE IF EXISTS `mailbox`;
CREATE TABLE `mailbox` (
  `mailboxID` int(11) NOT NULL COMMENT '信箱编号',
  `teacherID` int(11) DEFAULT NULL COMMENT '老师编号',
  `studentID` int(11) DEFAULT NULL COMMENT '学生编号',
  `parentID` int(11) DEFAULT NULL COMMENT '家长编号',
  `content` varchar(500) DEFAULT NULL COMMENT '留言内容',
  `createDate` datetime DEFAULT NULL COMMENT '创建时间',
  `title` varchar(255) DEFAULT NULL COMMENT '标题',
  `replyContent` varchar(500) DEFAULT NULL COMMENT '回复内容',
  `replyDate` datetime DEFAULT NULL COMMENT '回复时间',
  `isAnonymous` int(11) DEFAULT NULL COMMENT '是否匿名',
  PRIMARY KEY (`mailboxID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='校长信箱';

-- ----------------------------
-- Records of mailbox
-- ----------------------------

-- ----------------------------
-- Table structure for notice
-- ----------------------------
DROP TABLE IF EXISTS `notice`;
CREATE TABLE `notice` (
  `noticeID` int(11) NOT NULL AUTO_INCREMENT COMMENT '公告ID',
  `noticeTitle` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '公告标题',
  `noticePic` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '图片',
  `attachment` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '附件',
  `createDate` datetime DEFAULT NULL COMMENT '发布时间',
  `visibleLevel` varchar(255) COLLATE utf8_bin DEFAULT NULL COMMENT '可见级别',
  `informWay` varchar(255) COLLATE utf8_bin DEFAULT '' COMMENT '通知方式',
  `content` varchar(255) COLLATE utf8_bin DEFAULT NULL,
  `teacherID` int(11) DEFAULT NULL COMMENT '发布人',
  PRIMARY KEY (`noticeID`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8 COLLATE=utf8_bin COMMENT='公告通知';

-- ----------------------------
-- Records of notice
-- ----------------------------
INSERT INTO `notice` VALUES ('17', '课工场第一届拔河比赛', null, null, '2018-05-03 00:00:00', '老师,家长,学生', '网站,微信', '第一届拔河比赛', '2');
INSERT INTO `notice` VALUES ('18', '校园招聘', null, null, '2018-05-10 00:00:00', '老师,家长,学生', '网站,微信', null, '1');
INSERT INTO `notice` VALUES ('19', '母亲节', null, null, '2018-05-11 00:00:00', '老师,家长,学生', '网站,微信', null, '3');
INSERT INTO `notice` VALUES ('20', '课工场520UI狂欢节', null, null, '2018-05-20 00:00:00', '老师,家长,学生', '网站,微信', null, '4');
INSERT INTO `notice` VALUES ('21', 'IT精英挑战赛校区评审', null, null, '2018-05-26 00:00:00', '老师,家长,学生', '网站,微信', null, '2');
INSERT INTO `notice` VALUES ('22', '高考加油', null, null, '2018-06-06 00:00:00', '老师,家长,学生', '网站,微信', null, '2');
INSERT INTO `notice` VALUES ('23', '端午节活动通知', null, null, '2018-06-09 11:15:52', '老师,家长,学生', '网站,微信', null, '3');
INSERT INTO `notice` VALUES ('24', '宿舍大扫除', null, null, '2018-05-12 00:00:00', '老师,家长,学生', '网站,微信', null, '5');

-- ----------------------------
-- Table structure for opictype
-- ----------------------------
DROP TABLE IF EXISTS `opictype`;
CREATE TABLE `opictype` (
  `opicTypeId` int(11) NOT NULL AUTO_INCREMENT COMMENT '题目类型编号',
  `opicTypeName` varchar(50) NOT NULL COMMENT '题目类型名称',
  PRIMARY KEY (`opicTypeId`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 COMMENT='题目类型';

-- ----------------------------
-- Records of opictype
-- ----------------------------
INSERT INTO `opictype` VALUES ('1', '选择题');
INSERT INTO `opictype` VALUES ('2', '判断题');
INSERT INTO `opictype` VALUES ('3', '填空题');
INSERT INTO `opictype` VALUES ('4', '简答题');
INSERT INTO `opictype` VALUES ('5', '上机题');

-- ----------------------------
-- Table structure for parent
-- ----------------------------
DROP TABLE IF EXISTS `parent`;
CREATE TABLE `parent` (
  `parentId` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `parentName` varchar(20) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '家长名字',
  `password` varchar(20) CHARACTER SET utf8 NOT NULL DEFAULT '' COMMENT '密码',
  `address` varchar(11) CHARACTER SET utf8 NOT NULL COMMENT '地址',
  `loginIp` varchar(100) CHARACTER SET utf8 NOT NULL COMMENT '最后登录ip',
  `lastLoginTime` datetime NOT NULL COMMENT '最后登录时间',
  `phone` varchar(100) CHARACTER SET utf8 DEFAULT '无' COMMENT '电话',
  `remark` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '备注',
  `uuid` int(11) DEFAULT NULL COMMENT '人脸识别的uuid',
  `isEnabled` smallint(5) NOT NULL COMMENT '是否启用',
  `email` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '邮箱',
  `parentCode` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '家长用户名',
  `openID` varchar(100) CHARACTER SET utf8 DEFAULT NULL COMMENT '微信标志',
  `accid` varchar(200) CHARACTER SET utf8 DEFAULT NULL COMMENT '聊天编号',
  `token` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '聊天记号',
  PRIMARY KEY (`parentId`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=latin1 COMMENT='家长表';

-- ----------------------------
-- Records of parent
-- ----------------------------
INSERT INTO `parent` VALUES ('1', '王琴', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('2', '黄海波', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('3', '余里', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('4', '姚正勇', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('5', '李海琴', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('6', '孙国威', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('7', '王裕', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('8', '李自强', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('9', '刘凤霞', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);
INSERT INTO `parent` VALUES ('10', '杨国荡', '123123123', '北京', '143.162.02.3', '2018-06-01 11:30:08', '13800138000', '无', null, '1', '55778042@163.com', '223685', null, null, null);

-- ----------------------------
-- Table structure for progress
-- ----------------------------
DROP TABLE IF EXISTS `progress`;
CREATE TABLE `progress` (
  `progressId` int(11) NOT NULL AUTO_INCREMENT COMMENT '进度编号',
  `topicId` int(11) NOT NULL COMMENT '题目编号',
  `skillId` int(11) NOT NULL COMMENT '知识点编号',
  `opicTypeId` int(11) NOT NULL COMMENT '题目类型',
  `studentId` int(11) NOT NULL COMMENT '学号',
  `classId` int(11) NOT NULL COMMENT '班级',
  `studyTime` int(11) DEFAULT NULL COMMENT '时差',
  `startDate` datetime DEFAULT NULL COMMENT '开始时间',
  `endDate` datetime DEFAULT NULL COMMENT '结束时间',
  PRIMARY KEY (`progressId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='自学进度';

-- ----------------------------
-- Records of progress
-- ----------------------------

-- ----------------------------
-- Table structure for questiondetail
-- ----------------------------
DROP TABLE IF EXISTS `questiondetail`;
CREATE TABLE `questiondetail` (
  `detailId` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `questionId` int(11) NOT NULL COMMENT '试卷编号',
  `skillId` int(11) NOT NULL COMMENT '知识点编号',
  `topicId` int(11) NOT NULL COMMENT '题目编号',
  PRIMARY KEY (`detailId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='定制试卷明细表';

-- ----------------------------
-- Records of questiondetail
-- ----------------------------

-- ----------------------------
-- Table structure for questionpaper
-- ----------------------------
DROP TABLE IF EXISTS `questionpaper`;
CREATE TABLE `questionpaper` (
  `questionId` int(11) NOT NULL AUTO_INCREMENT COMMENT '试卷编号',
  `questionName` varchar(50) NOT NULL DEFAULT '' COMMENT '试卷名称',
  `answerDate` int(11) DEFAULT NULL COMMENT '答题时间',
  `topicCount` int(11) NOT NULL COMMENT '题目数量',
  `sumScore` int(11) NOT NULL COMMENT '总分',
  `allocation` int(11) NOT NULL COMMENT '分值分配',
  `createdBy` int(11) NOT NULL COMMENT '创建人',
  `creationDate` datetime DEFAULT NULL COMMENT '创建时间',
  `remark` varchar(255) DEFAULT NULL COMMENT '备注',
  `quertionType` int(11) DEFAULT NULL COMMENT '试卷内试题类型',
  PRIMARY KEY (`questionId`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COMMENT='定制试卷表';

-- ----------------------------
-- Records of questionpaper
-- ----------------------------
INSERT INTO `questionpaper` VALUES ('1', 'Java基础（一）', '60', '50', '100', '2', '1', '2018-05-26 01:05:05', '全部', '1');
INSERT INTO `questionpaper` VALUES ('2', 'Java基础（二）', '60', '50', '100', '2', '2', '2018-05-26 01:21:06', '全部', '2');
INSERT INTO `questionpaper` VALUES ('3', 'Java基础（三）', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');
INSERT INTO `questionpaper` VALUES ('4', 'Java基础（四）', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');
INSERT INTO `questionpaper` VALUES ('5', 'JavaOOP（一）', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');
INSERT INTO `questionpaper` VALUES ('6', 'JavaOOP（二）', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');
INSERT INTO `questionpaper` VALUES ('7', 'JavaOOP（三）', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');
INSERT INTO `questionpaper` VALUES ('8', 'Linux基础 (一)', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');
INSERT INTO `questionpaper` VALUES ('9', 'Linux基础 (二)', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');
INSERT INTO `questionpaper` VALUES ('10', 'Linux基础 (三)', '60', '50', '100', '2', '1', '2018-05-28 22:06:18', '', '1');

-- ----------------------------
-- Table structure for selftest
-- ----------------------------
DROP TABLE IF EXISTS `selftest`;
CREATE TABLE `selftest` (
  `testId` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `topicId` int(11) NOT NULL COMMENT '题目编号',
  `skillId` int(11) NOT NULL COMMENT '知识点编号',
  `studentId` int(11) NOT NULL COMMENT '学号',
  `classId` int(11) NOT NULL COMMENT '年级',
  `modelAnswer` int(10) DEFAULT NULL COMMENT '标准答案',
  `timeCount` int(11) DEFAULT NULL COMMENT '自测用时时间',
  `testDate` datetime DEFAULT NULL COMMENT '开始时间',
  `endDate` datetime DEFAULT NULL COMMENT '结束时间',
  `studentAnswer` varchar(10) DEFAULT NULL COMMENT '学生答案',
  PRIMARY KEY (`testId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='自测表';

-- ----------------------------
-- Records of selftest
-- ----------------------------

-- ----------------------------
-- Table structure for situation
-- ----------------------------
DROP TABLE IF EXISTS `situation`;
CREATE TABLE `situation` (
  `situationID` int(11) NOT NULL AUTO_INCREMENT COMMENT '情况id',
  `studentID` int(11) DEFAULT NULL COMMENT '学生编号',
  `classID` int(11) DEFAULT NULL COMMENT '班级编号',
  `degree` int(11) DEFAULT NULL COMMENT '学历',
  `duty` int(11) DEFAULT NULL COMMENT '职务',
  `level` int(11) DEFAULT NULL COMMENT '学习程度',
  `attendance` int(11) DEFAULT NULL COMMENT '出勤情况',
  `comments` varchar(500) DEFAULT NULL COMMENT '评语',
  PRIMARY KEY (`situationID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='学员情况';

-- ----------------------------
-- Records of situation
-- ----------------------------

-- ----------------------------
-- Table structure for skill
-- ----------------------------
DROP TABLE IF EXISTS `skill`;
CREATE TABLE `skill` (
  `skillId` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `skillName` varchar(20) DEFAULT NULL COMMENT '知识点名称',
  `fatherId` int(11) NOT NULL COMMENT '上级编号',
  `isEnabled` smallint(6) DEFAULT '1' COMMENT '是否启用',
  PRIMARY KEY (`skillId`)
) ENGINE=InnoDB AUTO_INCREMENT=178 DEFAULT CHARSET=utf8 COMMENT='知识点';

-- ----------------------------
-- Records of skill
-- ----------------------------
INSERT INTO `skill` VALUES ('1', 'java开发', '0', '1');
INSERT INTO `skill` VALUES ('2', '大数据', '0', '1');
INSERT INTO `skill` VALUES ('3', 'Android', '0', '1');
INSERT INTO `skill` VALUES ('4', 'Database数据库', '0', '1');
INSERT INTO `skill` VALUES ('5', 'Linux操作系统', '0', '1');
INSERT INTO `skill` VALUES ('6', 'Web前端', '0', '1');
INSERT INTO `skill` VALUES ('7', '团队工具', '0', '1');
INSERT INTO `skill` VALUES ('8', 'java基础', '1', '1');
INSERT INTO `skill` VALUES ('9', 'MyBatis', '1', '1');
INSERT INTO `skill` VALUES ('10', 'Spring', '1', '1');
INSERT INTO `skill` VALUES ('11', 'SM整合', '1', '1');
INSERT INTO `skill` VALUES ('12', 'SpringMVC', '1', '1');
INSERT INTO `skill` VALUES ('13', 'SSM整合', '1', '1');
INSERT INTO `skill` VALUES ('14', 'Hibernate', '1', '1');
INSERT INTO `skill` VALUES ('15', 'Struts2', '1', '1');
INSERT INTO `skill` VALUES ('16', 'SSH整合', '1', '1');
INSERT INTO `skill` VALUES ('17', ' SpringBoot', '1', '1');
INSERT INTO `skill` VALUES ('18', 'SpringCloud', '1', '1');
INSERT INTO `skill` VALUES ('19', 'Hadoop', '2', '1');
INSERT INTO `skill` VALUES ('20', 'HDFS实现分布式存储', '2', '1');
INSERT INTO `skill` VALUES ('21', 'MapReduce实现分布式计算', '2', '1');
INSERT INTO `skill` VALUES ('22', ' HBase数据库', '2', '1');
INSERT INTO `skill` VALUES ('23', 'Android 概述', '3', '1');
INSERT INTO `skill` VALUES ('24', ' Android 架构', '3', '1');
INSERT INTO `skill` VALUES ('25', 'Oracle', '4', '1');
INSERT INTO `skill` VALUES ('26', 'MySql', '4', '1');
INSERT INTO `skill` VALUES ('27', 'SqlServer', '4', '1');
INSERT INTO `skill` VALUES ('28', 'Redis', '4', '1');
INSERT INTO `skill` VALUES ('29', 'MongoDB', '4', '1');
INSERT INTO `skill` VALUES ('30', 'Linux初级', '5', '1');
INSERT INTO `skill` VALUES ('31', 'Linux中级', '5', '1');
INSERT INTO `skill` VALUES ('32', 'Linux高级', '5', '1');
INSERT INTO `skill` VALUES ('33', '前端框架', '6', '1');
INSERT INTO `skill` VALUES ('34', 'JavaScript&JQuery', '6', '1');
INSERT INTO `skill` VALUES ('35', 'HTML5&CSS3', '6', '1');
INSERT INTO `skill` VALUES ('36', '正则表达式', '6', '1');
INSERT INTO `skill` VALUES ('37', 'SVN', '7', '1');
INSERT INTO `skill` VALUES ('38', 'Maven', '7', '1');
INSERT INTO `skill` VALUES ('39', 'Git', '7', '1');
INSERT INTO `skill` VALUES ('40', '封装', '8', '1');
INSERT INTO `skill` VALUES ('41', '继承', '8', '1');
INSERT INTO `skill` VALUES ('42', '多态', '8', '1');
INSERT INTO `skill` VALUES ('43', '接口', '8', '1');
INSERT INTO `skill` VALUES ('44', '异常', '8', '1');
INSERT INTO `skill` VALUES ('45', '集合', '8', '1');
INSERT INTO `skill` VALUES ('46', '多线程', '8', '1');
INSERT INTO `skill` VALUES ('47', 'File I/O', '8', '1');
INSERT INTO `skill` VALUES ('48', 'JDBC', '8', '1');
INSERT INTO `skill` VALUES ('49', 'JSP/Servlet', '8', '1');
INSERT INTO `skill` VALUES ('50', '其他', '8', '1');
INSERT INTO `skill` VALUES ('51', 'MyBatis基础', '9', '1');
INSERT INTO `skill` VALUES ('52', 'SQL映射文件', '9', '1');
INSERT INTO `skill` VALUES ('53', '动态SQL', '9', '1');
INSERT INTO `skill` VALUES ('54', '其他', '9', '1');
INSERT INTO `skill` VALUES ('55', 'Spring基础', '10', '1');
INSERT INTO `skill` VALUES ('56', 'IOC和AOP', '10', '1');
INSERT INTO `skill` VALUES ('57', '拆分配置文件', '10', '1');
INSERT INTO `skill` VALUES ('58', '其他 I/O', '10', '1');
INSERT INTO `skill` VALUES ('59', '声明式事务', '11', '1');
INSERT INTO `skill` VALUES ('60', 'DBCP数据源', '11', '1');
INSERT INTO `skill` VALUES ('61', '其他', '11', '1');
INSERT INTO `skill` VALUES ('62', 'SpringMVC基础', '12', '1');
INSERT INTO `skill` VALUES ('63', 'SpringMVC标签', '12', '1');
INSERT INTO `skill` VALUES ('64', '请求流程', '12', '1');
INSERT INTO `skill` VALUES ('65', 'MVC模式的概念和特点', '12', '1');
INSERT INTO `skill` VALUES ('66', '异常处理', '12', '1');
INSERT INTO `skill` VALUES ('67', '其他', '12', '1');
INSERT INTO `skill` VALUES ('68', 'SSM整合步骤', '13', '1');
INSERT INTO `skill` VALUES ('69', '其他', '13', '1');
INSERT INTO `skill` VALUES ('70', 'Hibernate基础', '14', '1');
INSERT INTO `skill` VALUES ('71', 'Hibernate关联映射', '14', '1');
INSERT INTO `skill` VALUES ('72', 'HQL语句', '14', '1');
INSERT INTO `skill` VALUES ('73', '其他', '14', '1');
INSERT INTO `skill` VALUES ('74', '拦截器', '15', '1');
INSERT INTO `skill` VALUES ('75', 'OGNL表达式', '15', '1');
INSERT INTO `skill` VALUES ('76', 'Struts2基础', '15', '1');
INSERT INTO `skill` VALUES ('77', 'Struts2标签', '15', '1');
INSERT INTO `skill` VALUES ('78', '其他', '15', '1');
INSERT INTO `skill` VALUES ('79', '其他', '16', '1');
INSERT INTO `skill` VALUES ('80', 'SSH整合步骤', '16', '1');
INSERT INTO `skill` VALUES ('81', 'Hadoop体系结构', '19', '1');
INSERT INTO `skill` VALUES ('82', 'Hadoop集群的配置', '19', '1');
INSERT INTO `skill` VALUES ('83', 'Hadoop命令', '19', '1');
INSERT INTO `skill` VALUES ('84', 'Hadoop的数据类型', '19', '1');
INSERT INTO `skill` VALUES ('85', '其他', '19', '1');
INSERT INTO `skill` VALUES ('86', 'HDFS体系结构', '20', '1');
INSERT INTO `skill` VALUES ('87', '命令行操作', '20', '1');
INSERT INTO `skill` VALUES ('88', 'HDFS文件块', '20', '1');
INSERT INTO `skill` VALUES ('89', '分布式存储其他', '20', '1');
INSERT INTO `skill` VALUES ('90', 'MapReduce架构设计', '21', '1');
INSERT INTO `skill` VALUES ('91', 'MapReduce编程模型', '21', '1');
INSERT INTO `skill` VALUES ('92', 'MapReduce工作原理', '21', '1');
INSERT INTO `skill` VALUES ('93', '分布式计算其他', '21', '1');
INSERT INTO `skill` VALUES ('94', 'HBase体系结构', '22', '1');
INSERT INTO `skill` VALUES ('95', 'HBase数据模型', '22', '1');
INSERT INTO `skill` VALUES ('96', 'HBase数据存储管理API', '22', '1');
INSERT INTO `skill` VALUES ('97', 'HBase数据库其他', '22', '1');
INSERT INTO `skill` VALUES ('98', 'Android开发优势', '23', '1');
INSERT INTO `skill` VALUES ('99', 'Android的特性', '23', '1');
INSERT INTO `skill` VALUES ('100', 'API级别', '23', '1');
INSERT INTO `skill` VALUES ('101', 'Android程序库', '24', '1');
INSERT INTO `skill` VALUES ('102', 'SQL语句进行CRUD操作', '25', '1');
INSERT INTO `skill` VALUES ('103', 'SQL函数', '25', '1');
INSERT INTO `skill` VALUES ('104', '数据类型', '25', '1');
INSERT INTO `skill` VALUES ('105', '事务，视图，索引', '25', '1');
INSERT INTO `skill` VALUES ('106', '建库，建表，建约束', '25', '1');
INSERT INTO `skill` VALUES ('107', 'PL/SQL编程', '25', '1');
INSERT INTO `skill` VALUES ('108', 'Oracle其他', '25', '1');
INSERT INTO `skill` VALUES ('109', 'SQL语句进行CRUD操作', '26', '1');
INSERT INTO `skill` VALUES ('110', 'SQL函数', '26', '1');
INSERT INTO `skill` VALUES ('111', '数据类型', '26', '1');
INSERT INTO `skill` VALUES ('112', 'SQL操作符', '26', '1');
INSERT INTO `skill` VALUES ('113', '事务，视图，索引', '26', '1');
INSERT INTO `skill` VALUES ('114', '建库，建表，建约束', '26', '1');
INSERT INTO `skill` VALUES ('115', 'SQL编程', '26', '1');
INSERT INTO `skill` VALUES ('116', 'MySql其他', '26', '1');
INSERT INTO `skill` VALUES ('117', 'SQL语句进行CRUD操作', '27', '1');
INSERT INTO `skill` VALUES ('118', 'SQL函数', '27', '1');
INSERT INTO `skill` VALUES ('119', '数据类型', '27', '1');
INSERT INTO `skill` VALUES ('120', 'SQL操作符', '27', '1');
INSERT INTO `skill` VALUES ('121', '事务,视图,索引', '27', '1');
INSERT INTO `skill` VALUES ('122', '建库,建表,建约束', '27', '1');
INSERT INTO `skill` VALUES ('123', 'SQL编程', '27', '1');
INSERT INTO `skill` VALUES ('124', 'SqlServer其他', '27', '1');
INSERT INTO `skill` VALUES ('125', 'Redis命令', '28', '1');
INSERT INTO `skill` VALUES ('126', 'Redis高级', '28', '1');
INSERT INTO `skill` VALUES ('127', 'Redis其他', '28', '1');
INSERT INTO `skill` VALUES ('128', 'MongoDB增删改查', '29', '1');
INSERT INTO `skill` VALUES ('129', 'MongoDB高级', '29', '1');
INSERT INTO `skill` VALUES ('130', 'MongoDB其他', '29', '1');
INSERT INTO `skill` VALUES ('131', 'Linux系统安装', '30', '1');
INSERT INTO `skill` VALUES ('132', 'Linux图形界面使用', '30', '1');
INSERT INTO `skill` VALUES ('133', 'Linux常用命令', '30', '1');
INSERT INTO `skill` VALUES ('134', 'Linux其他', '30', '1');
INSERT INTO `skill` VALUES ('135', 'Linux用户和文件系统管理', '31', '1');
INSERT INTO `skill` VALUES ('136', 'Linux软件安装配置', '31', '1');
INSERT INTO `skill` VALUES ('137', 'Linux网络管理', '31', '1');
INSERT INTO `skill` VALUES ('138', 'Linux系统维护', '31', '1');
INSERT INTO `skill` VALUES ('139', 'Shell编程', '31', '1');
INSERT INTO `skill` VALUES ('140', 'Linux其他', '31', '1');
INSERT INTO `skill` VALUES ('141', '服务器维护', '32', '1');
INSERT INTO `skill` VALUES ('142', 'Linux高级其他', '32', '1');
INSERT INTO `skill` VALUES ('143', '响应式布局', '33', '1');
INSERT INTO `skill` VALUES ('144', '移动web页面', '33', '1');
INSERT INTO `skill` VALUES ('145', '移动web特效', '33', '1');
INSERT INTO `skill` VALUES ('146', 'BootStrap', '34', '1');
INSERT INTO `skill` VALUES ('147', 'Vue', '34', '1');
INSERT INTO `skill` VALUES ('148', '前端框架其他', '34', '1');
INSERT INTO `skill` VALUES ('149', 'JS操作BOM', '35', '1');
INSERT INTO `skill` VALUES ('150', 'JS操作DOM', '35', '1');
INSERT INTO `skill` VALUES ('151', 'JS面向对象', '35', '1');
INSERT INTO `skill` VALUES ('152', 'jQuery选择器', '35', '1');
INSERT INTO `skill` VALUES ('153', 'jQuery中的事件与动画', '35', '1');
INSERT INTO `skill` VALUES ('154', 'jQuery操作DOM', '35', '1');
INSERT INTO `skill` VALUES ('155', '表单校验', '35', '1');
INSERT INTO `skill` VALUES ('156', 'Ajax交互', '35', '1');
INSERT INTO `skill` VALUES ('157', 'JavaScript&jQuery其他', '35', '1');
INSERT INTO `skill` VALUES ('158', 'HTML5 标签', '36', '1');
INSERT INTO `skill` VALUES ('159', 'HTML5 属性', '36', '1');
INSERT INTO `skill` VALUES ('160', 'HTML5 事件', '36', '1');
INSERT INTO `skill` VALUES ('161', 'HTML5 视频/音频', '36', '1');
INSERT INTO `skill` VALUES ('162', 'HTML5 画布', '36', '1');
INSERT INTO `skill` VALUES ('163', 'HTML5 其他', '36', '1');
INSERT INTO `skill` VALUES ('164', 'CSS3 选择器', '37', '1');
INSERT INTO `skill` VALUES ('165', 'CSS3 盒模型', '37', '1');
INSERT INTO `skill` VALUES ('166', 'CSS3 背景和边框', '37', '1');
INSERT INTO `skill` VALUES ('167', 'CSS3 文字特效', '37', '1');
INSERT INTO `skill` VALUES ('168', 'CSS3 2D/3D转换', '37', '1');
INSERT INTO `skill` VALUES ('169', 'CSS3 动画', '37', '1');
INSERT INTO `skill` VALUES ('170', 'CSS3 多列布局', '37', '1');
INSERT INTO `skill` VALUES ('171', 'CSS3 用户界面', '37', '1');
INSERT INTO `skill` VALUES ('172', 'CSS3 其他', '37', '1');
INSERT INTO `skill` VALUES ('173', '正则表达式语法', '38', '1');
INSERT INTO `skill` VALUES ('174', '运算符优先级', '38', '1');
INSERT INTO `skill` VALUES ('175', '元字符', '38', '1');
INSERT INTO `skill` VALUES ('176', '匹配规则', '38', '1');
INSERT INTO `skill` VALUES ('177', '正则表达式其他', '38', '1');

-- ----------------------------
-- Table structure for specialtrain
-- ----------------------------
DROP TABLE IF EXISTS `specialtrain`;
CREATE TABLE `specialtrain` (
  `specialtrainId` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `skillId` int(11) DEFAULT NULL COMMENT '知识点编号',
  `count` int(11) DEFAULT NULL COMMENT '本次做题数',
  `correctCount` int(11) DEFAULT NULL COMMENT '本次正确数',
  `studentId` int(11) DEFAULT NULL COMMENT '学号',
  `classId` int(11) DEFAULT NULL COMMENT '班级编号',
  `skillIdcount` int(11) DEFAULT NULL COMMENT '完成数',
  `totalTime` int(11) DEFAULT NULL COMMENT '总用时',
  `submitTime` datetime DEFAULT NULL,
  `specialtraintestId` int(11) DEFAULT NULL COMMENT '对应技能自测主表的id',
  PRIMARY KEY (`specialtrainId`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8 COMMENT='技能自测明细';

-- ----------------------------
-- Records of specialtrain
-- ----------------------------
INSERT INTO `specialtrain` VALUES ('1', '40', '20', '18', '1', '1', '20', '13', '2018-06-09 14:30:16', null);
INSERT INTO `specialtrain` VALUES ('2', '75', '20', '17', '1', '1', '20', '12', '2018-06-08 10:30:16', null);
INSERT INTO `specialtrain` VALUES ('3', '88', '20', '15', '1', '1', '20', '10', '2018-06-09 10:49:16', null);
INSERT INTO `specialtrain` VALUES ('4', '120', '20', '19', '1', '1', '20', '10', '2018-06-05 18:18:50', null);
INSERT INTO `specialtrain` VALUES ('5', '150', '20', '20', '1', '1', '20', '11', '2018-06-07 22:21:44', null);
INSERT INTO `specialtrain` VALUES ('6', '44', '20', '20', '2', '1', '20', '9', '2018-06-09 14:29:25', null);
INSERT INTO `specialtrain` VALUES ('7', '69', '20', '18', '2', '1', '20', '12', '2018-06-09 15:00:21', null);
INSERT INTO `specialtrain` VALUES ('8', '99', '20', '16', '2', '1', '20', '8', '2018-06-09 16:12:58', null);
INSERT INTO `specialtrain` VALUES ('9', '170', '20', '19', '2', '1', '20', '13', '2018-06-08 18:12:16', null);
INSERT INTO `specialtrain` VALUES ('10', '177', '20', '19', '2', '1', '20', '14', '2018-06-07 11:59:01', null);
INSERT INTO `specialtrain` VALUES ('11', '49', '20', '20', '3', '1', '20', '10', '2018-06-09 14:29:25', null);
INSERT INTO `specialtrain` VALUES ('12', '66', '20', '14', '3', '1', '20', '9', '2018-06-09 15:00:21', null);
INSERT INTO `specialtrain` VALUES ('13', '80', '20', '19', '3', '1', '20', '11', '2018-06-09 16:12:58', null);
INSERT INTO `specialtrain` VALUES ('14', '126', '20', '19', '3', '1', '20', '17', '2018-06-08 18:12:16', null);
INSERT INTO `specialtrain` VALUES ('15', '144', '20', '19', '3', '1', '20', '13', '2018-06-07 11:59:01', null);
INSERT INTO `specialtrain` VALUES ('16', '45', '20', '17', '4', '1', '20', '12', '2018-06-06 16:16:57', null);
INSERT INTO `specialtrain` VALUES ('17', '82', '20', '20', '4', '1', '20', '10', '2018-06-07 17:30:16', null);
INSERT INTO `specialtrain` VALUES ('18', '90', '20', '19', '4', '1', '20', '9', '2018-06-08 18:20:20', null);
INSERT INTO `specialtrain` VALUES ('19', '111', '20', '18', '4', '1', '20', '14', '2018-06-05 16:30:16', null);
INSERT INTO `specialtrain` VALUES ('20', '156', '20', '17', '4', '1', '20', '8', '2018-06-06 21:29:22', null);
INSERT INTO `specialtrain` VALUES ('21', '50', '20', '20', '5', '1', '20', '13', '2018-06-07 13:30:16', null);
INSERT INTO `specialtrain` VALUES ('22', '67', '20', '20', '5', '1', '20', '15', '2018-06-07 14:30:16', null);
INSERT INTO `specialtrain` VALUES ('23', '96', '20', '19', '5', '1', '20', '12', '2018-06-07 18:30:16', null);
INSERT INTO `specialtrain` VALUES ('24', '125', '20', '20', '5', '1', '20', '19', '2018-06-07 19:30:16', null);
INSERT INTO `specialtrain` VALUES ('25', '175', '20', '20', '5', '1', '20', '12', '2018-06-08 22:30:16', null);
INSERT INTO `specialtrain` VALUES ('26', '24', '3', '1', '1', '1', '3', null, null, null);

-- ----------------------------
-- Table structure for specialtrainscore
-- ----------------------------
DROP TABLE IF EXISTS `specialtrainscore`;
CREATE TABLE `specialtrainscore` (
  `scoreId` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `studentId` int(11) DEFAULT NULL COMMENT '学号',
  `topicId` int(11) DEFAULT NULL COMMENT '题目编号',
  `studentAnswer` varchar(255) DEFAULT NULL COMMENT '学生答案',
  `isEnable` int(11) DEFAULT NULL COMMENT '是否启用',
  `testId` int(11) DEFAULT NULL COMMENT '测试编号',
  PRIMARY KEY (`scoreId`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COMMENT='技能自测成绩';

-- ----------------------------
-- Records of specialtrainscore
-- ----------------------------
INSERT INTO `specialtrainscore` VALUES ('1', '1', '5591', 'C', '0', '1');
INSERT INTO `specialtrainscore` VALUES ('2', '1', '5037', 'C', '0', '1');
INSERT INTO `specialtrainscore` VALUES ('3', '1', '6241', 'C', '0', '1');

-- ----------------------------
-- Table structure for specialtraintest
-- ----------------------------
DROP TABLE IF EXISTS `specialtraintest`;
CREATE TABLE `specialtraintest` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `specialtrainName` varchar(255) DEFAULT NULL COMMENT '技能自测名称',
  `studentId` varchar(255) DEFAULT NULL COMMENT '学号',
  `count` int(11) DEFAULT NULL COMMENT '总答题数',
  `score` varchar(255) DEFAULT NULL COMMENT '实际答题数',
  `createTime` datetime DEFAULT NULL COMMENT '创建时间',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8 COMMENT='技能自测主表';

-- ----------------------------
-- Records of specialtraintest
-- ----------------------------
INSERT INTO `specialtraintest` VALUES ('1', ' Android 架构（0-3）', '1', '3', '1', '2018-06-10 01:08:34');

-- ----------------------------
-- Table structure for student
-- ----------------------------
DROP TABLE IF EXISTS `student`;
CREATE TABLE `student` (
  `studentId` int(11) NOT NULL AUTO_INCREMENT COMMENT '学号',
  `studentName` varchar(20) NOT NULL DEFAULT '' COMMENT '姓名',
  `studentPassword` varchar(20) NOT NULL DEFAULT '' COMMENT '密码',
  `emergencyNumber` varchar(20) DEFAULT '' COMMENT '紧急电话',
  `phone` varchar(20) DEFAULT '' COMMENT '联系电话',
  `classId` int(11) DEFAULT NULL COMMENT '班级',
  `isEnabled` smallint(5) unsigned DEFAULT '0' COMMENT '是否启用',
  `lastLoginTime` datetime DEFAULT NULL COMMENT '最后登录时间',
  `loginIp` varchar(20) DEFAULT '' COMMENT '最后登录ip',
  `remark` varchar(200) DEFAULT '这个人很懒，什么人都没留下.....' COMMENT '备注',
  `uuId` varchar(500) DEFAULT NULL COMMENT '人脸识别图片id',
  `studentCode` varchar(255) DEFAULT NULL COMMENT '登录用户名',
  `email` varchar(255) DEFAULT '' COMMENT '邮箱',
  `address` varchar(255) DEFAULT '' COMMENT '地址',
  `age` int(11) DEFAULT '0' COMMENT '年龄',
  `custromjCount` int(11) DEFAULT '0',
  `imgFilePath` varchar(500) DEFAULT NULL COMMENT '头像',
  `sw` decimal(20,10) DEFAULT NULL COMMENT '经度',
  `ng` decimal(20,10) DEFAULT NULL COMMENT '纬度',
  `idCard` varchar(18) DEFAULT NULL COMMENT '身份证号',
  `openID` varchar(100) DEFAULT NULL COMMENT '微信标志',
  `accid` varchar(200) DEFAULT NULL COMMENT '聊天编号',
  `token` varchar(255) DEFAULT NULL COMMENT '聊天记号',
  PRIMARY KEY (`studentId`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COMMENT='学生表';

-- ----------------------------
-- Records of student
-- ----------------------------
INSERT INTO `student` VALUES ('1', '黄保霖', 'root', '138001380000', '13800139000', '1', '0', '2018-05-30 10:59:52', ' 192.168.137.146', '这个人很懒，什么人都没留下.....', '9250b3d7_18dd_4ae4_a023_eb083305f59e', 'huangbaolin', '555558042@qq163.com', '北京', '18', '4', '8000119a-b71c-4a2d-9db8-b59b7c9dbaa0', '116.5792465609', '39.9194934704', '413026199702087255', null, null, null);
INSERT INTO `student` VALUES ('2', '姚国旺', '111111', '138001380000', '13800139000', '1', '1', '2018-05-28 10:59:47', ' 192.168.137.146', '这个人很懒，什么人都没留下.....', '22be44ec_c345_46ef_8ec1_0fceb6340169', 'yaoyao', '55778042@qq.com', '北京', '20', '1', 'logo', '116.6095209960', '39.9046861042', '413026199903067455', null, null, null);
INSERT INTO `student` VALUES ('3', '孙田阳', 'suntianyang', '138001380000', '13800139000', '1', '1', '2018-04-02 17:42:52', ' 192.168.137.146', '这个人很懒，什么人都没留下.....', null, 'suntianyang', '55888042@qq.com', '南京', '17', '0', null, '116.5930285904', '39.9076484912', '413026199903067455', null, null, null);
INSERT INTO `student` VALUES ('4', '李浩', 'lihao', '138001380000', '13800138000', '1', '1', '2018-06-01 10:59:23', ' 192.168.137.146', '这个人很懒，什么人都没留下.....', null, 'lihao', '55668042@qq.com', '北京', '19', '0', null, '116.6054954656', '39.9150663789', '413026199903067455', null, null, null);
INSERT INTO `student` VALUES ('5', '杨海军', 'yanghaijun', '138001380000', '13800138000', '1', '1', '2018-06-01 11:00:45', '192.168.137.146', '这个人很懒，什么人都没留下.....', null, 'yanghaijun', '55998042@qq.com', '北京', '21', '0', null, '116.6054954656', '39.9166400000', '413026199903067455', null, null, null);
INSERT INTO `student` VALUES ('6', '刘少鸿', 'liushoahong', '138001380000', '13800138000', '1', '1', '2018-05-09 11:03:37', '192.168.138.145', '这个人很懒，什么人都没留下.....', null, 'liushaohong', '55008042@qq.com', '北京', '20', '0', null, '116.6054955656', '39.9106657800', '413026199903067455', null, null, null);
INSERT INTO `student` VALUES ('7', '余海军', 'liuhaijun', '138001380000', '138001380000', '2', '1', '2018-06-08 11:42:11', '192.168.138.145', '这个人很懒，什么人都没留下.....', null, 'liuhaijun', '55228042@qq.com', '北京', '21', '0', null, '116.6054956656', '39.9506667890', '413026199903067455', null, null, null);
INSERT INTO `student` VALUES ('8', '傅元', 'fuyuan', '138001380000', '138001380000', '2', '1', null, '', '这个人很懒，什么人都没留下.....', null, null, '', '', '0', '0', null, '116.6054957656', '39.9156677890', null, null, null, null);
INSERT INTO `student` VALUES ('9', '崔智', 'cuizhi', '138001380000', '138001380000', '2', '1', '2018-06-08 11:42:11', '192.168.138.145', '这个人很懒，什么人都没留下.....', '', 'liuhaijun', '55228042@qq.com', '北京', '21', '0', '', '116.6054958656', '39.9066878900', '413026199903067455', null, null, null);
INSERT INTO `student` VALUES ('10', '郑高明', 'zhenggaoming', '138001380000', '138001380000', '2', '0', null, '', '这个人很懒，什么人都没留下.....', null, null, '', '', '0', '0', null, '116.6054959656', '39.9109789000', null, null, null, null);

-- ----------------------------
-- Table structure for stuparent
-- ----------------------------
DROP TABLE IF EXISTS `stuparent`;
CREATE TABLE `stuparent` (
  `stuParentID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `studentID` int(11) DEFAULT NULL COMMENT '学生编号',
  `parentID` int(11) DEFAULT NULL COMMENT '家长编号',
  PRIMARY KEY (`stuParentID`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COMMENT='学生家长关联表';

-- ----------------------------
-- Records of stuparent
-- ----------------------------
INSERT INTO `stuparent` VALUES ('1', '1', '1');
INSERT INTO `stuparent` VALUES ('2', '2', '2');
INSERT INTO `stuparent` VALUES ('3', '3', '3');
INSERT INTO `stuparent` VALUES ('4', '4', '4');
INSERT INTO `stuparent` VALUES ('5', '5', '5');
INSERT INTO `stuparent` VALUES ('6', '6', '6');
INSERT INTO `stuparent` VALUES ('7', '7', '7');
INSERT INTO `stuparent` VALUES ('8', '8', '8');
INSERT INTO `stuparent` VALUES ('9', '9', '9');
INSERT INTO `stuparent` VALUES ('10', '10', '10');

-- ----------------------------
-- Table structure for task
-- ----------------------------
DROP TABLE IF EXISTS `task`;
CREATE TABLE `task` (
  `taskID` int(11) NOT NULL AUTO_INCREMENT COMMENT '任务编号',
  `taskName` varchar(255) DEFAULT NULL COMMENT '任务名称',
  `beginDate` datetime DEFAULT NULL COMMENT '开始时间',
  `endDate` datetime DEFAULT NULL COMMENT '结束时间',
  `studentID` int(11) DEFAULT NULL COMMENT '负责人',
  `taskState` int(11) DEFAULT NULL COMMENT '任务状态',
  `remark` varchar(255) DEFAULT NULL COMMENT '任务描述',
  `visibleLevel` int(255) DEFAULT NULL COMMENT '可见性级别',
  PRIMARY KEY (`taskID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='任务计划';

-- ----------------------------
-- Records of task
-- ----------------------------

-- ----------------------------
-- Table structure for taskdetail
-- ----------------------------
DROP TABLE IF EXISTS `taskdetail`;
CREATE TABLE `taskdetail` (
  `detailID` int(11) NOT NULL AUTO_INCREMENT COMMENT '明细编号',
  `workID` int(11) DEFAULT NULL COMMENT '任务编号',
  `studentID` int(11) DEFAULT NULL COMMENT '参与人',
  `isComplete` int(11) DEFAULT NULL COMMENT '是否完成',
  `completeDate` datetime DEFAULT NULL COMMENT '完成日期',
  `isDelay` int(11) DEFAULT NULL COMMENT '是否延期',
  PRIMARY KEY (`detailID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='任务明细';

-- ----------------------------
-- Records of taskdetail
-- ----------------------------

-- ----------------------------
-- Table structure for teacher
-- ----------------------------
DROP TABLE IF EXISTS `teacher`;
CREATE TABLE `teacher` (
  `teacherId` int(11) NOT NULL AUTO_INCREMENT COMMENT '教员编号',
  `teacherName` varchar(20) NOT NULL DEFAULT '' COMMENT '教员姓名',
  `password` varchar(20) NOT NULL DEFAULT '' COMMENT '密码',
  `phone` varchar(20) NOT NULL DEFAULT '' COMMENT '手机号',
  `dutyId` int(11) NOT NULL COMMENT '职务编号',
  `isEnabled` smallint(5) unsigned DEFAULT '1' COMMENT '是否启用',
  `lastLoginTime` datetime NOT NULL COMMENT '最后一次登录时间',
  `loginIp` varchar(20) NOT NULL DEFAULT '' COMMENT '登录IP',
  `remark` varchar(100) DEFAULT '无' COMMENT '备注',
  `teacherUUID` varchar(200) DEFAULT NULL,
  `openID` varchar(100) DEFAULT NULL COMMENT '微信标志',
  `accid` varchar(200) DEFAULT NULL COMMENT '聊天编号',
  `token` varchar(255) DEFAULT NULL COMMENT '聊天记号',
  PRIMARY KEY (`teacherId`)
) ENGINE=InnoDB AUTO_INCREMENT=25 DEFAULT CHARSET=utf8 COMMENT='教师信息';

-- ----------------------------
-- Records of teacher
-- ----------------------------
INSERT INTO `teacher` VALUES ('1', '马守彬', 'mashoubin', '13800138000', '1', '1', '2017-12-22 16:06:04', '192.168.137.146', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('2', '宋作振', 'songzuozhen', '13800138000', '1', '1', '2018-05-05 18:09:09', '192.168.137.146', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('3', '崔立宝', 'cuilibao', '13800138000', '1', '1', '2018-05-27 18:09:38', '192.168.137.146', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('4', '姚平', 'yaoping', '13800138000', '2', '1', '2018-05-18 18:10:12', '192.168.137.146', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('5', '郝龙女', 'haolongnv', '13800138000', '2', '1', '2018-05-24 18:11:11', '192.168.137.146', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('13', '秦龙', 'qinlong', '13800139000', '1', '1', '2018-06-09 17:42:19', '192.168.137.146', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('14', '姜南', 'jiangnan', '13800139000', '1', '1', '2018-06-09 17:43:06', '192.168.137.146', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('15', '智静', 'zhijing', '13800139000', '2', '1', '2018-06-09 17:43:43', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('16', '刘国荣', 'liuguorong', '13800139000', '2', '1', '2018-06-09 17:44:11', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('17', '张泽', 'zhangze', '13800139000', '2', '1', '2018-06-09 17:44:40', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('18', '任小梅', 'renxiaomei', '13800139000', '1', '1', '2018-06-09 17:45:05', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('19', '燕斌', 'yanbin', '13800139000', '1', '1', '2018-06-09 17:45:47', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('20', '熊蓉', 'xiongrong', '13800139000', '2', '1', '2018-06-09 17:46:22', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('21', '祝铁芳', 'zhutiefang', '13800139000', '1', '1', '2018-06-09 17:46:49', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('22', '郝龙女', 'haolongnv', '13800139000', '2', '1', '2018-06-09 17:47:50', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('23', '许春艳', 'xuchunyan', '13800139000', '1', '1', '2018-06-09 18:17:02', '', '无', null, null, null, null);
INSERT INTO `teacher` VALUES ('24', '刘红娟', 'liuhongjuan', '13800139000', '1', '1', '2018-06-09 18:36:04', '', '无', null, null, null, null);

-- ----------------------------
-- Table structure for testbg
-- ----------------------------
DROP TABLE IF EXISTS `testbg`;
CREATE TABLE `testbg` (
  `id` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `topicId` int(11) DEFAULT NULL COMMENT '题目编号',
  `choose` varchar(255) DEFAULT NULL,
  `inTest` int(11) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='统一测试报告表';

-- ----------------------------
-- Records of testbg
-- ----------------------------

-- ----------------------------
-- Table structure for testscore
-- ----------------------------
DROP TABLE IF EXISTS `testscore`;
CREATE TABLE `testscore` (
  `scoreId` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `customId` int(11) DEFAULT NULL COMMENT '定制测试编号',
  `studentId` int(11) DEFAULT NULL COMMENT '学号',
  `topicId` int(11) DEFAULT NULL COMMENT '题目编号',
  `studentAnswer` varchar(10) DEFAULT NULL COMMENT '学生答案',
  `isEnable` int(11) DEFAULT NULL COMMENT '是否启用',
  PRIMARY KEY (`scoreId`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='定制测试明细表';

-- ----------------------------
-- Records of testscore
-- ----------------------------

-- ----------------------------
-- Table structure for topic
-- ----------------------------
DROP TABLE IF EXISTS `topic`;
CREATE TABLE `topic` (
  `topicId` int(11) NOT NULL AUTO_INCREMENT COMMENT '题目编号',
  `skillId` int(11) NOT NULL COMMENT '知识点编号',
  `opicTypeId` int(11) NOT NULL COMMENT '题型编号',
  `topicName` varchar(2000) NOT NULL COMMENT '题目名称',
  `topicImg` varchar(500) DEFAULT NULL COMMENT '缩略图',
  `optionA` varchar(2000) DEFAULT '' COMMENT '选项A',
  `optionB` varchar(2000) DEFAULT '' COMMENT '选项B',
  `optionC` varchar(2000) DEFAULT '' COMMENT '选项C',
  `optionD` varchar(2000) DEFAULT '' COMMENT '选项D',
  `optionE` varchar(2000) DEFAULT '' COMMENT '选项E',
  `optionF` varchar(2000) DEFAULT '' COMMENT '选项F',
  `modelAnswer` varchar(2000) DEFAULT NULL COMMENT '标准答案',
  `topicAnalysis` varchar(2000) DEFAULT NULL COMMENT '试题解析',
  `topicErroCount` int(50) DEFAULT NULL COMMENT '纠错次数',
  `creationDate` datetime DEFAULT NULL COMMENT '创建时间',
  `createdBy` int(11) DEFAULT NULL COMMENT '创建人',
  `isEnabled` smallint(6) DEFAULT NULL COMMENT '是否启用',
  PRIMARY KEY (`topicId`)
) ENGINE=InnoDB AUTO_INCREMENT=7558 DEFAULT CHARSET=utf8 COMMENT='试题信息';

-- ----------------------------
-- Records of topic
-- ----------------------------
INSERT INTO `topic` VALUES ('2', '18', '4', '在 Linux 中什么是平均负载？', 'ab4e6c10-3b98-4107-8159-33cb3deecebf.', null, null, null, null, null, null, '平均负载被定义为在1分钟，5分钟和15分钟内等待在运行队列中的进程数目和当前正在执行的进程数目之和的平均值。使用 ‘TOP’ 和 ‘UPTIME’ 命令我们可以查询一个 LINUX 服务器的平均负载。\r\n', '', '0', '2017-12-22 18:45:42', '46', '1');
INSERT INTO `topic` VALUES ('3', '18', '4', 'Puppet Master 在哪里存储证书？', 'c8854f4b-87a8-4da8-8beb-042db23da81b.', null, null, null, null, null, null, '/VAR/LIB/PUPPET/SSL/CA/SIGNED', '', '0', '2017-12-22 18:46:47', '46', '1');
INSERT INTO `topic` VALUES ('4', '18', '4', '\r\n在 Puppet 服务器中哪一个命令用于给请求的证书签名？', 'd7c8f616-c6ca-4a92-883b-e40182c15659.', null, null, null, null, null, null, '在2.X中使用 ‘PUPPETCA  –SIGN HOSTNAME-OF-AGENT’ \r\n在3.X中使用 ‘PUPPET CA  SIGN HOSTNAME-OF-AGENT’\r\n', '', '0', '2017-12-22 18:48:13', '46', '1');
INSERT INTO `topic` VALUES ('5', '18', '3', '在Linux系统中，以 _______ 方式访问设备 。', '773712da-9355-4613-b41c-17babfd679eb.', null, null, null, null, null, null, '文件 ', '', '0', '2017-12-22 18:51:10', '46', '1');
INSERT INTO `topic` VALUES ('6', '18', '3', 'Linux内核引导时，从文件 ______ 中读取要加载的文件系统', '81996718-536e-4a85-a43b-b1a6ebf0e93c.', null, null, null, null, null, null, '/ETC/FSTAB', '', '0', '2017-12-22 18:52:32', '46', '1');
INSERT INTO `topic` VALUES ('7', '18', '4', '简述安装Slackware Linux系统的过程。', 'cc4fa1e4-32f0-4871-9ebf-d4911e3384e1.', null, null, null, null, null, null, ' （1）对硬盘重新分区。\r\n\r\n（2）启动LINUX系统（用光盘、软盘等）。 （\r\n\r\n3）建立LINUX主分区和交换分区。\r\n\r\n（4）用SETUP命令安装LINUX系统。\r\n\r\n（5）格式化LINUX主分区和交换分区\r\n\r\n（6）安装LINUX软件包\r\n\r\n（7）安装完毕，建立从硬盘启动LINUX系统的LILO启动程序，或者制作一张启动LINUX系统的软盘。重新启动LINUX系统。', '', '0', '2017-12-22 18:54:14', '46', '1');
INSERT INTO `topic` VALUES ('8', '18', '4', '进程的查看和调度分别使用什么命令？', '79b31db4-8f69-4f81-965f-8ac561f5f421.', null, null, null, null, null, null, '进程查看的命令是PS和TOP。 进程调度的命令有AT，CRONTAB，BATCH，KILL', '', '0', '2017-12-22 18:55:15', '46', '1');
INSERT INTO `topic` VALUES ('9', '18', '4', '如何在不解压tar包的前提下，查看包里的内容？', '4f76a8eb-6e35-4958-a8ad-792ca28738dd.', null, null, null, null, null, null, '使用\'TAR -TVF\'。选项‘T’(显示内容)，‘V’（详细报告TAR处理的文件信息），‘F’（使用档案文件或者设备）', '', '0', '2017-12-22 18:59:03', '46', '1');
INSERT INTO `topic` VALUES ('10', '18', '4', '在/root分区运行\'fsck\'命令的最低要求是什么？', '1763a3c5-bc64-402e-943f-4839613e5430.', null, null, null, null, null, null, '/ROOT分区必须挂载为只读模式，而不是读写模式', '', '0', '2017-12-22 19:00:08', '46', '1');
INSERT INTO `topic` VALUES ('11', '18', '1', '关闭linux系统（不重新启动）可使用命令', '68e99dcb-ef04-46e6-9f1d-9a1ef1e2a460.', ' Ctrl+Alt+Del', 'halt', 'shutdown -r now', 'reboot', '', '', 'B', 'shutdown -r 重启系统\r\nhalt 等同于 shutdown -l 即彻底关闭\r\nreboot 重启', '0', '2017-12-22 19:05:30', '46', '1');
INSERT INTO `topic` VALUES ('12', '18', '1', '实现从IP地址到以太网MAC地址转换', '3b27882c-d4d5-4ec8-9d04-cd1f936dd609.', 'ping', 'ifconfig', 'arp', 'traceroute', '', '', 'CD', '暂无解析', '0', '2017-12-22 19:23:38', '46', '2');
INSERT INTO `topic` VALUES ('13', '18', '1', '删除文件命令为', 'bbb9e711-a017-4e41-89ee-ca9f82135a89.', 'mkdir', 'rmdir', 'mv', 'rm', '', '', 'D', 'mkdir：是创建文件夹\r\nrmdir：删除空文件夹\r\nmv：重命名和剪切\r\nrm：删除文件（有提示的）', '0', '2017-12-22 19:28:27', '46', '1');
INSERT INTO `topic` VALUES ('14', '18', '1', '下面的网络协议中,面向连接的的协议是：', '2c3dcad7-fca9-435d-89d9-c884f8b8c55d.', ' 传输控制协议 ', '用户数据报协议 ', ' 网际协议 ', ' 网际控制报文协议', '', '', 'A', '', '0', '2017-12-22 19:31:35', '8', '1');
INSERT INTO `topic` VALUES ('15', '18', '1', ' 在/etc/fstab文件中指定的文件系统加载参数中, （ ）参数一般用于CD-ROM等移动设备.', 'eee79bb4-dcc0-4e4e-bbc8-b74ce5b2a685.', 'defaults ', 'sw', 'sw和ro', 'noauto', '', '', 'D', '', '0', '2017-12-22 19:32:48', '8', '1');
INSERT INTO `topic` VALUES ('16', '18', '1', '在下列的名称中，不属于DNS服务器类型的是', 'abc34c07-57db-41b8-b511-bf5e9ddcb419.', 'Primary Master Server', 'Secondary Master Server\r\n', 'samba', 'Cache_only Server', '', '', 'CD', '暂无', '0', '2017-12-22 19:33:16', '46', '2');
INSERT INTO `topic` VALUES ('17', '18', '1', ' Linux文件权限一共10位长度,分成四段,第三段表示的内容是 ', 'ec83cd99-39fb-4622-a599-7eaf365f3ec6.', '文件类型 ', '文件所有者的权限 ', '文件所有者所在组的权限', '其他用户的权限', '', '', 'C', '', '0', '2017-12-22 19:34:05', '8', '1');
INSERT INTO `topic` VALUES ('18', '18', '1', ' 终止一个前台进程可能用到的命令和操作', '01446152-ffb3-4e88-bcc6-e38697abab69.', 'kill', 'CTRL + C', 'shut down', 'halt', '', '', 'B', '', '0', '2017-12-22 19:35:24', '8', '1');
INSERT INTO `topic` VALUES ('19', '18', '1', '在使用mkdir命令创建新的目录时,在其父目录不存在时先创建父目录的选项是', '12a21476-9d8b-460f-97c7-3a87728527c6.', '-m', '-d', '-f', '-p', '', '', 'D', '', '0', '2017-12-22 19:35:56', '8', '1');
INSERT INTO `topic` VALUES ('20', '18', '1', '下面关于i节点描述错误的是', 'b94f762b-745b-4761-bb09-ce242834a68d.', 'i节点和文件是一一对应的', 'i节点能描述文件占用的块数', 'i节点描述了文件大小和指向数据块的指针', '通过i节点实现文件的逻辑结构和物理结构的转换', '', '', 'A', '', '0', '2017-12-22 19:36:28', '8', '1');
INSERT INTO `topic` VALUES ('21', '18', '1', ' 一个文件名字为rr.Z,可以用来解压缩的命令是', '6b512261-0aa5-4f8a-bbab-ebb5050afabd.', 'tar', 'gzip', 'compress', 'uncompress', '', '', 'D', '', '0', '2017-12-22 19:37:00', '8', '1');
INSERT INTO `topic` VALUES ('22', '18', '1', '网络管理员对WWW服务器进行访问、控制存取和运行等控制，这些控制可在什么文件中体现？', '3afa9484-d5d4-499a-9ebe-c3205a672123.', 'httpd.conf', 'lilo.conf', 'inetd.conf', 'resolv.conf', '', '', 'A', '暂无', '0', '2017-12-22 19:37:14', '46', '1');
INSERT INTO `topic` VALUES ('23', '18', '1', '具有很多C语言的功能,又称过滤器的是', '8cabd07c-6d2c-4301-98d2-8e859e28b682.', 'csh', 'tcsh', 'awk', 'sed', '', '', 'C', '', '0', '2017-12-22 19:37:32', '8', '1');
INSERT INTO `topic` VALUES ('24', '18', '1', ' 一台主机要实现通过局域网与另一个局域网通信,需要做的工作是', '09da75d2-00a0-4094-9c9c-49380fd0c562.', '配置域名服务器', '定义一条本机指向所在网络的路由', '定义一条本机指向所在网络网关的路由', '定义一条本机指向目标网络网关的路由', '', '', 'C', '', '0', '2017-12-22 19:38:49', '8', '1');
INSERT INTO `topic` VALUES ('25', '18', '1', ' 建立动态路由需要用到的文件有 ', '8e6976ab-3ffd-4d68-899f-ac7c084eb9da.', '/etc/hosts ', ' /etc/HOSTNAME ', '/etc/resolv.conf', '/etc/gateways', '', '', 'D', '', '0', '2017-12-22 19:39:19', '8', '1');
INSERT INTO `topic` VALUES ('26', '18', '1', ' 局域网的网络地址192.168.1.0/24,局域网络连接其它网络的网关地址是192.168.1.1.主机192.168.1.20访问172.16.1.0/24网络时,其路由设置正确的是', '012d7c2f-3191-4346-ab83-3803a729a0c8.', 'route add &ndash;net 192.168.1.0 gw 192.168.1.1 netmask 255.255.255.0 metric 1', 'route add &ndash;net 172.16.1.0 gw 192.168.1.1 netmask 255.255.255.255 metric 1', 'route add &ndash;net 172.16.1.0 gw 172.16.1.1 netmask 255.255.255.0 metric 1', ' route add default 192.168.1.0 netmask 172.168.1.1 metric 1', '', '', 'B', '', '0', '2017-12-22 19:39:54', '8', '1');
INSERT INTO `topic` VALUES ('27', '18', '1', '下列提法中,不属于ifconfig命令作用范围的是', '19cb63e9-d403-45c1-ab5f-1eb6955a5e27.', '配置本地回环地址', '配置网卡的IP地址', '激活网络适配器', '加载网卡到内核中', '', '', 'D', '', '0', '2017-12-22 19:40:27', '8', '1');
INSERT INTO `topic` VALUES ('28', '18', '1', '下列关于链接描述,错误的是', '4a957896-8535-4055-9c2a-e0218a7e2984.', '硬链接就是让链接文件的i节点号指向被链接文件的i节点', '硬链接和符号连接都是产生一个新的i节点', '链接分为硬链接和符号链接 ', '硬连接不能链接目录文件', '', '', 'B', '', '0', '2017-12-22 19:41:59', '8', '1');
INSERT INTO `topic` VALUES ('29', '18', '1', '在局域网络内的某台主机用ping命令测试网络连接时发现网络内部的主机都可以连同,而不能与公网连通,问题可能是', '140677c4-144b-4201-b81b-d33359c6a2f5.', '主机IP设置有误', '没有设置连接局域网的网关', '局域网的网关或主机的网关设置有误', '局域网DNS服务器设置有误', '', '', 'C', '', '0', '2017-12-22 19:42:59', '8', '1');
INSERT INTO `topic` VALUES ('30', '18', '1', '下列文件中,包含了主机名到IP地址的映射关系的文件是', '0e59c47c-ce6b-449a-9d43-7aedaf24dab3.', '/etc/HOSTNAME ', '/etc/hosts', '/etc/resolv.conf ', ' /etc/networks', '', '', 'B', '', '0', '2017-12-22 19:43:32', '8', '1');
INSERT INTO `topic` VALUES ('31', '18', '1', '不需要编译内核的情况是', 'a5a5b52f-342d-4ab9-a9ea-224da73a8947.', '删除系统不用的设备驱动程序时', '升级内核时', '添加新硬件时', '将网卡激活', '', '', 'D', '', '0', '2017-12-22 19:44:05', '8', '1');
INSERT INTO `topic` VALUES ('32', '18', '1', '在shell中变量的赋值有四种方法,其中,采用name=12的方法称', 'a8f6a396-18eb-4d8a-8292-42c8bb7e1efe.', '直接赋值', '使用read命令', '使用命令行参数', '使用命令的输出', '', '', 'A', '', '0', '2017-12-22 19:45:14', '8', '1');
INSERT INTO `topic` VALUES ('33', '18', '1', '( )命令可以从文本文件的每一行中截取指定内容的数据', '76f0e296-51a4-48e4-aed9-62a40081b371.', 'cp', 'dd', 'fmt', 'cut', '', '', 'D', '', '0', '2017-12-22 19:45:45', '8', '1');
INSERT INTO `topic` VALUES ('34', '18', '1', '下列不是Linux系统进程类型的是', '59a4fc08-47a5-4baa-bdb6-6d8a4244d930.', '交互进程 ', '批处理进程', ' 守护进程', ' 就绪进程（进程状态）', '', '', 'D', '', '0', '2017-12-22 19:46:14', '8', '1');
INSERT INTO `topic` VALUES ('35', '18', '1', '配置Apache 1.3.19服务器需要修改的配置文件为', '22a9d6f0-be1b-45cd-a916-37a35e134bab.', 'httpd.conf', 'access.conf', 'srm.conf', 'named.conf', '', '', 'A', '', '0', '2017-12-22 19:46:53', '8', '1');
INSERT INTO `topic` VALUES ('36', '18', '4', '如何暂停一个正在运行的进程，把其放在后台（不运行）？', 'f7c137ce-e31e-4d71-ba46-73276aa75a82.', null, null, null, null, null, null, '为了停止正在运行的进程，让其在后台（不运行），我们可以使用组合键 CTRL+Z。（LCTT译注：如果希望其在后台运行，还需要使用BG命令并指定其CTRL+Z得到的任务号，才可以在后台运行。）', '', '0', '2017-12-22 19:52:35', '8', '1');
INSERT INTO `topic` VALUES ('37', '18', '4', '什么是安装Linux所需的最小分区数量，以及如何查看系统启动信息？', 'f9bced5a-18b4-48d8-9a2a-7ed69b11e504.', null, null, null, null, null, null, '单独一个“/”根分区足以执行所有的系统任务，但是强烈建议安装LINUX时，需要至少三个分区：/、/BOOT 和 SWAP分区。一个IDE硬盘驱动器支持高达63个分区，SCSI硬盘驱动器支持超过15个分区。（LCTT译注：此处原文表述有误，径改）\r\n为了检查启动信息，我们可以使用CAT或者DMESG命令，如下所示：\r\n    #CAT /VAR/LOG/MESSAGES\r\n或者\r\n    #DMESG', '', '0', '2017-12-22 19:53:13', '8', '1');
INSERT INTO `topic` VALUES ('38', '18', '4', '在你的Linux机器上跟踪系统事件的守护进程名是什么？', '0673d862-cbc9-420c-bfab-bb55f1b9bcd1.', null, null, null, null, null, null, '\'SYSLOGD\'，它负责跟踪系统信息，并将跟踪日志存储在特定的日志文件里。', '', '0', '2017-12-22 19:53:39', '8', '1');
INSERT INTO `topic` VALUES ('40', '18', '3', '网络管理的重要任务是：_____ 和 ______', '51f39abf-365e-42fe-8d5f-250dab8926ca.', null, null, null, null, null, null, '控制  监控', '', '0', '2017-12-22 20:01:42', '46', '1');
INSERT INTO `topic` VALUES ('41', '18', '4', '如何按层次结构复制/home目录到另一个目录？', '8910f206-a051-4963-8c86-417db2f8c636.', null, null, null, null, null, null, 'LINUX的\'CPIO\'命令可以实现效果。\'CPIO\'可以按层次结构地复制文件和目录层次结构到另一个位置。（LCTT译注：实际上使用CPIO的很少，而是使用CP -R较多）', '', '0', '2017-12-22 20:04:26', '8', '1');
INSERT INTO `topic` VALUES ('42', '18', '4', ' 在Linux中，怎样实现日志文件的自动循环？', 'ec527453-1349-4380-850b-efe31a5173a9.', null, null, null, null, null, null, '\'LOGROTATE\'提供日志自动循环功能（LCTT译注：将旧的日志切断，保存为.1，.2之类的文件名，并在下次切断时，逐个覆盖，并丢弃最老的）。', '', '0', '2017-12-22 20:05:15', '8', '1');
INSERT INTO `topic` VALUES ('43', '18', '4', ' 怎样知道Linux中是谁在调度工作？', 'f3252c5d-a593-4bec-acd2-9b1fa9a80dc6.', null, null, null, null, null, null, '使用\'AT\'命令加上\'-L\'选项，就可以查出。', '', '0', '2017-12-22 20:05:29', '8', '1');
INSERT INTO `topic` VALUES ('44', '18', '4', '什么是页面错误，它是怎么发生的？', '56e55374-8b45-4fa9-8595-4f19eeb41b80.', null, null, null, null, null, null, '当一个程序请求内存中不存在的数据时，就会产生页面错误，导致的结果就是程序停止。', '（LCTT译注，此处page fault页面错误，和内存页未命中的页面错误，不是一回事。）', '0', '2017-12-22 20:07:14', '8', '1');
INSERT INTO `topic` VALUES ('45', '18', '4', '什么是在程序中返回码？', '76b101d7-3098-4bfc-a5e5-996de05f62bf.', null, null, null, null, null, null, '返回码是SHELL的特性。返回码显示了程序的状态，一个成功的程序执行后返回‘0’，&&可以用来决定那个应用程序先执行。（LCTT译注，据网友反馈，其实返回码不仅仅是SHELL的特性，而应该是POSIX系统的系统级特性。）', '', '0', '2017-12-22 20:07:48', '8', '1');
INSERT INTO `topic` VALUES ('47', '18', '4', '某一天突然发现Linux系统文件只读，该怎么办呢？', '287b556a-56d3-4632-8f9e-97d096c4c01f.', null, null, null, null, null, null, '首先把系统关机，然后以光盘启动进入救援模式(LINUX RESCUE),执行\"FSCK.EXT3 -Y /DEV/SDA2\" （假如只读的分区类型为EXT3，分区为/DEV/SDA2）', '', '0', '2017-12-22 20:09:18', '8', '1');
INSERT INTO `topic` VALUES ('48', '18', '4', '如何修改Linux启动级别为字符模式并永久生效，如何临时、永久关闭selinux及防火墙，请分别写出操作方法。', '0a795397-425e-40ac-96fe-53375d3359fd.', null, null, null, null, null, null, '更改字符模式：修改/ETC/INITTAB一行为 ID:3:INITDEFAULT:\r\n临时关闭SELINNUX  SETENFORCE 0\r\n临时关闭防火墙    IPTABLES -F\r\n永久关闭SELINUX   修改/ETC/SELINUX/CONFIG一行为 SELINUX=PERMISSIVE\r\n永久关闭防火墙   IPTABLES -F;/ETC/INIT.D/IPTABLES SAVE', '', '0', '2017-12-22 20:10:01', '8', '1');
INSERT INTO `topic` VALUES ('49', '18', '1', '对文件进行归档的命令为', '2d5eb5c3-cf56-4d13-9a3c-f35c71e2c07c.', 'dd', 'cpio', 'gzip', 'tar', '', '', 'D', 'dd:用于读取、转换并输出数据\r\ncpio:用于备份文件\r\ngzip:压缩文件\r\ntar:备份文件', '0', '2017-12-22 20:10:08', '46', '1');
INSERT INTO `topic` VALUES ('50', '18', '4', '在这个月内，每天的早上 6 点到 12 点中，每隔 2 小时创建一个test.txt文件，内容为ok，如何实现？', '72e16117-6f81-421e-9621-18f508fa5643.', null, null, null, null, null, null, '在这个月内，每天的早上 6 点到 12 点中，每隔 2 小时创建一个TEST.TXT文件，内容为OK，如何实现？', '', '0', '2017-12-22 20:10:30', '8', '1');
INSERT INTO `topic` VALUES ('51', '18', '4', '将/usr/local/test目录下大于100K 的文件转移到/tmp 目录下。', '9314e325-b0bd-4009-bc53-3c9705517241.', null, null, null, null, null, null, 'FIND /USR/LOCAL/TEST -TYPE F -SIZE +100K -EXEC MV {} /TMP \\;', '', '0', '2017-12-22 20:10:52', '8', '1');
INSERT INTO `topic` VALUES ('52', '18', '4', '如何将本地80端口的请求转发到8080端口,当前主机IP为192.168.16.1,其中本地网卡eth0:', 'acccb550-523f-4763-aeff-0fc83649b64f.', null, null, null, null, null, null, '如何将本地80端口的请求转发到8080端口,当前主机IP为192.168.16.1,其中本地网卡ETH0:', '', '0', '2017-12-22 20:11:21', '8', '1');
INSERT INTO `topic` VALUES ('53', '18', '4', 'linux系统中如何获取pid为100的进程所监听的tcp端口，请给出详细命令？', '7e33d756-b3e1-44fa-bbd8-6d55b2c31df6.', null, null, null, null, null, null, 'NETSTAT -NLPT |GREP 100', '', '0', '2017-12-22 20:11:39', '8', '1');
INSERT INTO `topic` VALUES ('54', '18', '4', '当用户在浏览器当中输入一个网站，说说计算机对dns解释经过那些流程？注：本机跟本地dns还没有缓存。', '8fbe8807-add2-4514-8f7b-892b4c84241f.', null, null, null, null, null, null, '当用户在浏览器当中输入一个网站，说说计算机对DNS解释经过那些流程？注：本机跟本地DNS还没有缓存。', '', '0', '2017-12-22 20:12:31', '8', '1');
INSERT INTO `topic` VALUES ('55', '18', '4', '描述Linux shell中单引号、双引号及不加引号的简单区别', '25f4475a-39f7-4806-89d6-e2aad5edb55f.', null, null, null, null, null, null, '单引号：所见即所得，即将单引号内的内容原样输出，或者描述为单引号里面看到的是什么就输出什么。\r\n双引号：把双引号里面的内容给输出出来，如果内容中有命令、变量等，会先把，变来那个、命令解析出结果，然后输出最终内容。\r\n双引号内的命令或者变量写法’命令或变量’或$(命令或变量)\r\n无引号：把内容输出出来，可能不会键含有空格的字符串，视为一个整体输出，如果内容中有命令、变量等，会先把变量、命令解析出来，然后输出最终内容，如果字符串中带有空格等特殊字符，则不能完整输出，需要改加双引号。一般连续的字符串，数字，路径等可以用，不过最好用双引号，替代之。', '', '0', '2017-12-22 20:13:59', '8', '1');
INSERT INTO `topic` VALUES ('56', '18', '4', '在mysql客户端查询工具中，如何获取当前的所有连接进程信息', 'a8d29875-6e05-45fd-861e-1786995612d3.', null, null, null, null, null, null, 'MYSQL> SHOW FULL PROCESSLIST;', '', '0', '2017-12-22 20:14:15', '8', '1');
INSERT INTO `topic` VALUES ('57', '18', '4', '驱动中操作物理绝对地址为什么要先ioremap? ', '53c1cfc9-6c75-40e6-bdc2-c7a42cf25a63.', null, null, null, null, null, null, '因为内核没有办法直接访问物理内存地址，必须先通过IOREMAP获得对应的虚拟地址', '', '0', '2017-12-22 20:14:31', '8', '1');
INSERT INTO `topic` VALUES ('58', '18', '4', '查询file1 以abc 结尾的行', '2274fffd-190c-45f3-976c-0a61833da71d.', null, null, null, null, null, null, 'GREP ABC$ FILE1', '', '0', '2017-12-22 20:15:13', '8', '1');
INSERT INTO `topic` VALUES ('59', '18', '4', '如何查看占用端口8080 的进程', 'a00df37f-e0c7-4fd9-b8cf-ed4f70807560.', null, null, null, null, null, null, 'LSOF -I:8080', '', '0', '2017-12-22 20:15:28', '8', '1');
INSERT INTO `topic` VALUES ('60', '18', '4', 'SWAP分区的作用？', '2b2d6483-de53-4f79-96bf-822ea13e3db2.', null, null, null, null, null, null, 'SWAP:俗名成为交换分区，它是系统经常不执行的程序放在SWAP分区中，给内存腾出一部分空间来执 行系统要执行的那些程序', '', '0', '2017-12-22 20:15:42', '8', '1');
INSERT INTO `topic` VALUES ('61', '18', '4', '常见的Linux系统有哪些？请举例说明？', '0a3217dc-0d32-4307-8a2f-bd521e507240.', null, null, null, null, null, null, 'RED HAT 和 CENTOS', '', '0', '2017-12-22 20:16:28', '8', '1');
INSERT INTO `topic` VALUES ('67', '18', '1', '在下列命令中，不能显示文本文件内容的命令是', '2990da1d-84f6-4aef-b761-c53c2fb071e3.', 'more', 'less', 'tail', 'join', '', '', 'D', 'join:将两个文件中，指定栏位内容相同的行连接起来', '0', '2017-12-22 20:20:24', '46', '1');
INSERT INTO `topic` VALUES ('69', '18', '4', '举出两个主流代理服务器，简述工作模式和优缺点？', '0c72c6f8-401f-4b8b-84f1-68c0f7e9df53.', null, null, null, null, null, null, 'NGINX、SQUID', '', '0', '2017-12-22 20:20:57', '8', '1');
INSERT INTO `topic` VALUES ('70', '18', '4', '举出两个负载均衡的软件，并简述工作模式和优缺点？', 'cb8a65fc-f91f-4b6c-be8d-d98e7e7bd94b.', null, null, null, null, null, null, 'NGINX、LVS、HAPROXY', '', '0', '2017-12-22 20:21:40', '8', '1');
INSERT INTO `topic` VALUES ('71', '18', '4', '如何更改linux主机名？', '228562fc-f289-4374-83e2-ee91ecb1b0bc.', null, null, null, null, null, null, '编辑配置文件 /ETC/SYSCONFIG/NETWORK    \r\n更改HOSTSNAME，保存退出后重启生效；', '', '0', '2017-12-22 20:21:59', '8', '1');
INSERT INTO `topic` VALUES ('72', '18', '4', '如何用yum安装/删除一个软件包？如何查看某个软件包是否已经安装', '97ba48af-c802-4d3f-992d-922c29a901ed.', null, null, null, null, null, null, 'YUM INSTALL\r\nYUM LOCALINSTALL   安装本地RPM包\r\nYUM REMOVE \r\nRPM -QA 软件包名  或 RPM -QA | GREP  ', '', '0', '2017-12-22 20:22:18', '8', '1');
INSERT INTO `topic` VALUES ('73', '18', '4', 'cp一个目录中的文件需要什么权限，mv呢？touch呢？rm呢？', '560be495-6ee8-440a-85d8-689f54037571.', null, null, null, null, null, null, 'CP一个目录中的文件，需要对这个目录有X权限，对这个文件有R权限\r\nMV、TOUCH、RM，都需要对这个目录有W和X权限，对文件权限没有要求', '', '0', '2017-12-22 20:22:34', '8', '1');
INSERT INTO `topic` VALUES ('74', '18', '4', '在不umount的情况下，如何重新设置mount的参数。', 'ddc05f8b-4b67-4524-8945-803754f98994.', null, null, null, null, null, null, 'MOUNT -O REMOUNT,RW /', '', '0', '2017-12-22 20:22:51', '8', '1');
INSERT INTO `topic` VALUES ('75', '18', '4', 'linux文件的权限位x对目录和文件有何不同？', 'd68edd2d-2cbb-4c6f-a778-e671350a3104.', null, null, null, null, null, null, 'X权限对目录而言，表示这个用户可以进入该目录（浏览，即可以LS列出目录下的东西）\r\n     对文件而言，表示对文件有可执行权限', '', '0', '2017-12-22 20:23:24', '8', '1');
INSERT INTO `topic` VALUES ('76', '18', '4', '如何查找某一文件被哪个进程打开？', '01ff9d6d-7cf5-48a2-b6c8-8e3b652c950a.', null, null, null, null, null, null, '比如查看/USR/BIN/MYSQLD_SAFE这个文件是被哪个进程打开的，可以使用命令：\r\nLSOF /USR/BIN/MYSQLD_SAFE', '', '0', '2017-12-22 20:23:53', '8', '1');
INSERT INTO `topic` VALUES ('78', '18', '4', 'exec和souce区别', '37f00213-6355-4f81-a0aa-7d821fd4c208.', null, null, null, null, null, null, '所谓 SOURCE 就是让 SCRIPT 在当前 SHELL 内执行、而不是产生一个 SUB-SHELL 来执行。\r\nEXEC 也是让 SCRIPT 在同一个行程上执行，但是原有行程则被结束了。\r\n他们的最大区别就是在于：原有行程会否终止。', '', '0', '2017-12-22 20:31:52', '8', '1');
INSERT INTO `topic` VALUES ('79', '18', '1', '内核不包括的子系统是', '3e874819-c6c2-4b6d-aeba-3c74425f9adf.', '进程管理系统', '内存管理系统', 'I/O管理系统 ', '硬件管理系统', '', '', 'D', '', '0', '2017-12-22 20:33:39', '8', '1');
INSERT INTO `topic` VALUES ('80', '18', '1', '在日常管理中,通常CPU会影响系统性能的情况是：', '3fcd0c97-9506-4a8b-8212-174069c14158.', 'CPU已满负荷地运转', 'CPU的运行效率为30%', 'CPU的运行效率为50%', 'CPU的运行效率为80%', '', '', 'A', '', '0', '2017-12-22 20:34:16', '8', '1');
INSERT INTO `topic` VALUES ('81', '18', '1', '若一台计算机的内存为128MB,则交换分区的大小通常是', '3b7dc6b0-86ec-44e6-8a48-466b1597851b.', '64MB', '128MB', '256MB', '512MB', '', '', 'C', '', '0', '2017-12-22 20:34:49', '8', '1');
INSERT INTO `topic` VALUES ('82', '18', '1', '在Shell 脚本中，用来读取文件内各个域的内容并将其赋值给Shell 变量的命令是', '8bb8fa7f-390e-4bb5-8597-a19e759b01e6.', 'fold', 'join', 'tr', 'read', '', '', 'D', '暂无解析\r\n', '0', '2017-12-22 20:35:12', '46', '1');
INSERT INTO `topic` VALUES ('83', '18', '1', '在安装Linux的过程中的第五步是让用户选择安装方式,如果用户希望安装部分组件（软件程序）,并在选择好后让系统自动安装,应该选择的选项是 （ ）', 'b39a2a9b-913f-427c-8036-fab6a411184f.', 'full', 'expert', 'newbie', 'menu', '', '', 'D', '', '0', '2017-12-22 20:35:21', '8', '1');
INSERT INTO `topic` VALUES ('84', '18', '1', 'Linux有三个查看文件的命令,若希望在查看文件内容过程中可以用光标上下移动来查看文件内容,应使用( )命令', 'a0e2a13d-d6f1-467a-8b0d-2deebffec698.', 'cat', 'more', 'less', 'menu', '', '', 'C', '', '0', '2017-12-22 20:35:54', '8', '1');
INSERT INTO `topic` VALUES ('85', '18', '1', '退出交互模式的shell，应输入', '2f104395-ecee-4e07-b4eb-dca6c8df4021.', ';', '^q', 'exit', 'quit', '', '', 'C', '暂无解析', '0', '2017-12-22 20:37:06', '46', '1');
INSERT INTO `topic` VALUES ('86', '18', '1', '下列信息是某系统用ps &ndash;ef命令列出的正在运行的进程,( )进程是运行Internet超级服务器,它负责监听Internet sockets上的连接,并调用合适的服务器来处理接收的信息.', '6439700f-70cb-460c-a62f-4c577c2f887b.', 'root 1 4.0 0.0 344 204? S 17:09 0:00 init ', 'root 2 0.0 0.1 2916 1520? S 17:09 0:00 /sbin/getty ', ' root 3 0.0 0.2 1364 632? S 17:09 0:00 /usr/sbin/syslogd ', ' root 4 0.0 1344 1204? S 17:09 0:10 /usr/sbin/inetd ', '', '', 'D', '', '0', '2017-12-22 20:37:28', '8', '1');
INSERT INTO `topic` VALUES ('87', '18', '1', '在TCP/IP模型中,应用层包含了所有的高层协议,在下列的一些应用协议中, ( ) 是能够实现本地与远程主机之间的文件传输工作.', 'b98fb302-38d5-4f47-92d9-5b5bd99fa1df.', 'telnet', 'FTP', 'SNMP', 'NFS', '', '', 'B', '', '0', '2017-12-22 20:38:25', '8', '1');
INSERT INTO `topic` VALUES ('88', '18', '1', '下列变量名中有效的shell 变量名是', '306a0396-c38c-4a00-af7a-11762d8ddfc4.', '-2-time', '_2$3', 'trust_no_1', '2004file', '', '', 'C', '暂无', '0', '2017-12-22 20:39:23', '46', '1');
INSERT INTO `topic` VALUES ('89', '18', '1', '当我们与某远程网络连接不上时,就需要跟踪路由查看,以便了解在网络的什么位置出现了问题,满足该目的的命令是( )', '25e6a954-bf1a-456c-b423-cc25d1f05ec4.', 'ping', 'ifconfig', 'traceroute', 'netstat', '', '', 'C', '', '0', '2017-12-22 20:40:03', '8', '1');
INSERT INTO `topic` VALUES ('90', '18', '1', '对名为fido的文件用chmod 551 fido 进行了修改,则它的许可权是( )', '291c68f5-f996-4d6d-8b45-e11e7d1eab08.', '-rwxr-xr-x', '-rwxr--r--', '-r--r--r--', '-r-xr-x-x', '', '', 'D', '', '0', '2017-12-22 20:40:46', '8', '1');
INSERT INTO `topic` VALUES ('91', '18', '1', '在i节点表中的磁盘地址表中,若一个文件的长度是从磁盘地址表的第1块到第11块,则该文件共占有 ( ) 块号.', '3bc0d1c3-d2e9-4c00-9460-6348e7976d33.', '256', '266', '11', '256', '', '', 'B', '', '0', '2017-12-22 20:41:21', '8', '1');
INSERT INTO `topic` VALUES ('92', '18', '1', '用ls &ndash;al 命令列出下面的文件列表, ( ) 文件是符号连接文件', '20339877-154b-413e-a530-6d7d48697ebd.', '-rw-rw-rw- 2 hel-s users 56 Sep 09 11:05 hello', '-rwxrwxrwx 2 hel-s users 56 Sep 09 11:05 goodbey', 'drwxr--r-- 1 hel users 1024 Sep 10 08:10 zhang', 'lrwxr--r-- 1 hel users 2024 Sep 12 08:12 cheng', '', '', 'D', '', '0', '2017-12-22 20:42:15', '8', '1');
INSERT INTO `topic` VALUES ('93', '18', '1', 'DNS域名系统主要负责主机名和 ( ) 之间的解析', '814d6d47-068c-4952-9863-081ccc734fa2.', 'IP地址', 'MAC地址', '网络地址', '主机别名', '', '', 'A', '', '0', '2017-12-22 20:43:12', '8', '1');
INSERT INTO `topic` VALUES ('94', '18', '1', 'WWW服务器是在Internet上使用最为广泛,它采用的是 ( ) 结构', '7009820b-5935-4073-b39c-1efc3e2f798c.', '服务器/工作站', 'B/S', '集中式', '分布式', '', '', 'B', '', '0', '2017-12-22 20:43:54', '8', '1');
INSERT INTO `topic` VALUES ('95', '18', '1', 'Linux系统通过 C 命令给其他用户发消息.', '0cd956ef-54e5-4196-bda9-2399e63693e4.', 'less', 'mesg y', 'write', 'echo to', '', '', 'C', 'mesg [y|n] 所有使用者 决定是否允许其他人传讯息到自己的终端机介面 ]', '0', '2017-12-22 20:45:01', '8', '1');
INSERT INTO `topic` VALUES ('96', '18', '1', '下列对shell 变量FRUIT 操作，正确的是', '27399ca5-3166-414b-8333-1434a9802ab4.', '为变量赋值：$FRUIT=apple', '显示变量的值：fruit=apple', '显示变量的值：echo $FRUIT', '判断变量是否有值：[ -f ―$FRUIT‖ ]', '', '', 'C', '暂无', '0', '2017-12-22 20:45:33', '46', '1');
INSERT INTO `topic` VALUES ('97', '18', '1', 'NFS是 ( ) 系统', '8270e430-fa8f-4918-877d-4fac558e68e4.', '文件', '磁盘', '网络文件', '操作', '', '', 'C', '', '0', '2017-12-22 20:45:44', '8', '1');
INSERT INTO `topic` VALUES ('98', '18', '1', '( )命令可以在Linux的安全系统中完成文件向磁带备份的工作', '51d51905-1e0d-45c9-990f-3eccffb1188a.', 'cp', 'tr', 'dir', 'cpio', '', '', 'B', '', '0', '2017-12-22 20:46:41', '8', '1');
INSERT INTO `topic` VALUES ('99', '18', '1', '/etc目录的标准应用是用于', '91543fb5-925e-4438-9bbc-57fbe514da7f.', '安装附加的应用程序', '存放可执行程序、系统管理工具和库 ', '设置用户的主目录', '存放用于系统管理的配置文件', '', '', 'D', '暂无', '0', '2017-12-22 20:48:08', '46', '1');
INSERT INTO `topic` VALUES ('101', '18', '1', 'Linux文件系统的文件都按其作用分门别类地放在相关的目录中,对于外部设备文件,一般应将其放在( )目录中', 'd3aeff4a-109e-479f-9b21-29363d60ccd3.', '/bin', '/etc', '/dev', '/lib', '', '', 'C', '', '0', '2017-12-22 20:54:52', '8', '1');
INSERT INTO `topic` VALUES ('102', '18', '1', '在安装Linux操作系统时，必须创建的两个分区是：', '05bcb6b3-9907-428b-b069-74048d29440c.', '/和/boot', '/和/swap', '/home和/usr', '/var和/trap', '', '', 'B', '在安装Linux操作系统时，配置分区是最重要的步骤。在此步骤中，必须告诉安装程序要在哪里安装系统，即在将要安装Linux的一个或多个磁盘分区上定义挂载点', '0', '2017-12-22 20:57:44', '46', '1');
INSERT INTO `topic` VALUES ('104', '18', '1', 'Linux系统的开发模型是', '726e3b3f-b015-4d59-bcda-b8be726b6c6e.', '教堂模型', '集市模型', '层次模型', '网状模型', '', '', 'B', '暂无解析', '0', '2017-12-22 21:01:36', '46', '1');
INSERT INTO `topic` VALUES ('105', '18', '1', '在Linux中，进程优先级的相关参数有多个，与实时进程优先级相关的参数是', '931d047e-d689-4303-b3bd-80b86c3e3ca9.', 'policy', 'counter', 'priority', 'rt_priority', '', '', 'D', '暂无解析', '0', '2017-12-22 21:04:34', '46', '1');
INSERT INTO `topic` VALUES ('106', '18', '1', '当登录Linux时，一个具有唯一进程ID号的shell将被调用，这个ID是什么', '0d794232-b851-4e91-ab5f-b806172eded8.', 'NID', 'PID', 'UID', 'CID', '', '', 'B', '暂无', '0', '2017-12-22 21:07:47', '46', '1');
INSERT INTO `topic` VALUES ('107', '18', '1', '局域网的网络设备通常有', 'a8251e7e-cbf3-4f99-a181-9a9e8a994785.', '交换机', '路由器', '网桥', '双绞线', 'HUB ', '', 'ABCDE', 'HUB是一个多端口的转发器，在以HUB为中心设备时，即使网络中某条线路产生了故障，并不影响其它线路的工作。所以HUB在局域网中得到了广泛的应用', '0', '2017-12-22 21:14:39', '46', '1');
INSERT INTO `topic` VALUES ('108', '18', '1', '用 \"rm -i\",系统会提示什么来让你确认', '5051e5f8-47fd-4464-935f-b90793f6d2ea.', '命令行的每个选项', '是否真的删除', '是否有写的权限', '文件的位置', '', '', 'B', 'rm-i\'中的i代表interactive，即需要与用户交互的意思，就是确认', '0', '2017-12-22 21:35:28', '46', '1');
INSERT INTO `topic` VALUES ('109', '18', '1', '以下哪个命令可以终止一个用户的所有进程', 'cb081ec1-9bd0-441d-a31f-6feac50688e6.', 'skillall', 'skill', 'kill', 'killal', '', '', 'D', 'killall用于杀死指定名字的进程（kill processes by name）。', '0', '2017-12-22 21:39:04', '46', '1');
INSERT INTO `topic` VALUES ('110', '18', '1', 'vi中哪条命令是不保存强制退出', '1ad42295-1677-46a4-81d9-f48056c6ec47.', ':wq', ':wq!', ':q! ', ':quit ', '', '', 'C', '退出编辑状态（esc）\r\n退出文件编辑并保存（wq!）\r\n退出文件编辑不保存（q!）', '0', '2017-12-22 21:43:43', '46', '1');
INSERT INTO `topic` VALUES ('111', '18', '1', '在下列分区中，Linux默认的分区是', '3035ec3b-c8f4-43ed-9e9b-597c2b111273.', 'FAT32 ', 'EXT3', 'FAT', 'NTFS', '', '', 'B', 'EXT3是第三代扩展文件系统（英语：Third extended filesystem，缩写为ext3），是一个日志文件系统，常用于Linux操作系统', '0', '2017-12-22 21:46:28', '46', '1');
INSERT INTO `topic` VALUES ('112', '18', '1', '若要将鼠标从VM中释放出来，可按什么键来实现', '2a9f82fb-08b1-4dfa-93d2-6d8368ca18da.', 'Ctrl + Alt', 'Ctrl +Alt +Del', 'Ctrl +Alt +Enter', 'Ctrl +Enter', '', '', 'A', '暂无', '0', '2017-12-22 21:50:45', '46', '1');
INSERT INTO `topic` VALUES ('113', '18', '1', '如果用户想对某一命令详细的了解，可用', '25cc7b93-e6d1-4deb-a882-6889a2893b44.', 'ls', 'help （内部）', 'man（列举的信息多）', 'dir ', '', '', 'C', '暂无', '0', '2017-12-22 21:55:26', '46', '1');
INSERT INTO `topic` VALUES ('114', '18', '1', 'Samba服务器的配置文件是', 'dbe6dc79-9c4e-45ff-944b-8948b3eba695.', 'httpd.conf', 'inetd.conf ', 'rc.samba', 'smb.conf', '', '', 'D', '暂无', '0', '2017-12-22 21:59:50', '46', '1');
INSERT INTO `topic` VALUES ('115', '18', '1', '下面哪个命令是用来定义shell的全局变量', '4a1f84bc-4599-406d-9ef1-a7732670f3ba.', 'exportfs', 'alias', 'exports', 'export', '', '', 'D', '定义shell的全局变量用export命令。\r\n它可以用于导出全局变量 。', '0', '2017-12-22 22:02:43', '46', '1');
INSERT INTO `topic` VALUES ('116', '18', '1', '在重新启动Linux系统的同时把内存中的信息写入硬盘,应使用 ( ) 命令实现', '61acda38-c948-4c55-b2fb-d508db456471.', 'reboot', 'halt', 'shutdown -rnow', 'shutdown', '', '', 'D', '', '0', '2017-12-22 22:14:36', '8', '1');
INSERT INTO `topic` VALUES ('117', '18', '1', '网络管理具备以下几大功能：配置管理、 ( ) 、性能管理、安全管理和计费管理等.', '2320a703-d5ff-4209-a682-740767db54c5.', '故障管理', '日常备份管理', '升级管理', '发送邮件', '', '', 'A', '', '0', '2017-12-22 22:15:07', '8', '1');
INSERT INTO `topic` VALUES ('118', '18', '1', '关于代理服务器的论述,正确的是', '1a98c899-55e6-475b-b7f3-8dd9942c80bb.', '使用internet上已有的公开代理服务器,只需配置客户端', '代理服务器只能代理客户端http的请求', '设置好的代理服务器可以被网络上任何主机使用', '使用代理服务器的客户端没有自己的ip地址', '', '', 'A\r\n', '', '0', '2017-12-22 22:15:46', '8', '1');
INSERT INTO `topic` VALUES ('121', '18', '1', '在vi编辑器中的命令模式下,键入 ( ) 可在光标当前所在行下添加一新行', '10f520ab-cfde-4018-b281-7604e8eca1fa.', '〈a〉', '〈o〉', '〈I〉', ' A', '', '', 'B', '', '0', '2017-12-22 22:17:33', '8', '1');
INSERT INTO `topic` VALUES ('122', '18', '1', '在vi编辑器中的命令模式下,删除当前光标处的字符使用 ( ) 命令', 'e7b75e0c-ec77-476e-9ea7-ac452d09a74a.', '〈x〉', '〈d〉;〈w〉', '〈D〉', '〈d〉;〈d〉', '', '', 'A', '', '0', '2017-12-22 22:18:25', '8', '1');
INSERT INTO `topic` VALUES ('123', '18', '1', '在vi编辑器中的命令模式下,重复上一次对编辑的文本进行的操作,可使用 ( ) 命令', '7b94a172-4be1-4aa3-80cb-74b6d9003bfe.', '上箭头', '下箭头', '〈.〉', '〈*〉', '', '', 'C', '', '0', '2017-12-22 22:18:57', '8', '1');
INSERT INTO `topic` VALUES ('124', '18', '1', '用命令ls -al显示出文件ff的描述如下所示,由此可知文件ff的类型为( ).\r\n-rwxr-xr-- 1 root root 599 Cec 10 17:12 ff', '4cd96bfb-c6d2-4f7d-aabb-2282f3baf281.', '普通文件', '硬链接', '目录', '符号链接', '', '', 'C', '', '0', '2017-12-22 22:19:33', '8', '1');
INSERT INTO `topic` VALUES ('128', '18', '1', '邮件转发代理也称邮件转发服务器,它可以使用SMTP协议,也可以使用 ( ) 协议', '28fc0d22-652d-42e6-9670-f422a9c91d48.', 'FTP', 'TCP', 'UUCP', 'POP', '', '', 'C', '', '0', '2017-12-22 22:21:47', '8', '1');
INSERT INTO `topic` VALUES ('129', '18', '1', '默认情况下管理员创建了一个用户，就会在什么目录下创建一个用户主目录', 'd83c55ee-500b-4954-b17c-9f1da51f6bf3.', '/usr', '/home', '/root', '/etc', '', '', 'B', '暂无解析', '0', '2017-12-22 22:33:46', '46', '1');
INSERT INTO `topic` VALUES ('130', '18', '1', '当使用mount进行设备或者文件系统挂载的时候，需要用到的设备名称位于什么目录', '6f980e6c-233e-480e-bb4b-edd299f95eab.', '/home', '/bin', '/etc', '/dev', '', '', 'D', '暂无解析', '0', '2017-12-22 22:35:44', '46', '1');
INSERT INTO `topic` VALUES ('131', '18', '1', '如果要列出一个目录下的所有文件需要使用命令行', '4d387897-c867-431f-978c-f41599a992fc.', 'ls –l', 'ls', 'ls –a', 'ls –d', '', '', 'C', 'ls是列出一般的文件和文件夹，\r\nls -a是列出所有的，包括隐藏文件和隐藏文件夹；\r\nls -l是列出文件的详细信息；\r\nls -la就是上面两个的叠加效果啦', '0', '2017-12-22 22:37:45', '46', '1');
INSERT INTO `topic` VALUES ('132', '18', '1', '哪个命令可以将普通用户转换成超级用户', 'c7354e65-41bd-4fc1-822e-426311e50036.', 'super', 'passwd', 'tar', 'su', '', '', 'D', '普通用户要切换为管理员需要使用su命令：\r\n1、使用下面命令：su - root 中间的“-”会把环境变量也换成root的环境变量', '0', '2017-12-22 22:39:06', '46', '1');
INSERT INTO `topic` VALUES ('133', '18', '1', '除非特别指定，cp假定要拷贝的文件在下面哪个目录下', '88cddb62-51b9-42de-804b-c65f67b0c55e.', '用户目录', 'home目录', 'root目录', '当前目录', '', '', 'D', '没有缺省的目录信息。\r\n如果不指定目标路径信息的话，cp指令将出错。', '0', '2017-12-22 22:41:27', '46', '1');
INSERT INTO `topic` VALUES ('134', '18', '1', '在vi编辑器里，命令\"dd\"用来删除当前的', '6631c1f3-dced-45e1-bfa2-587ffa750878.', '行', '变量', '字', '字符', '', '', 'A', '普通模式下 光标移到要删除行 dd 删除该行普通模式在普通模式中，用户可以执行一般的编辑器命令，比如移动光标，删除文本等等', '0', '2017-12-22 22:44:05', '46', '1');
INSERT INTO `topic` VALUES ('135', '18', '3', 'Linux文件系统中每个文件用___ ____来标识', 'f22eaadb-9740-4774-a264-d187ecdb3444.', null, null, null, null, null, null, 'I节点', '', '0', '2017-12-22 22:45:42', '46', '1');
INSERT INTO `topic` VALUES ('136', '18', '3', '某文件的权限为：d-rw-_r--_r--，用数值形式表示该权限644,该文件属性是 ', 'b5eb42c2-3851-444d-90a3-7d5d679c1cc0.', null, null, null, null, null, null, '目录', '', '0', '2017-12-22 22:46:25', '46', '1');
INSERT INTO `topic` VALUES ('137', '18', '3', '静态路由设定后，若网络拓扑结构发生变化，需由_____修改路由的设置', '03dcb3ac-1320-4856-a49f-8e3f9a41f6ff.', null, null, null, null, null, null, '系统管理员', '', '0', '2017-12-22 22:47:07', '46', '1');
INSERT INTO `topic` VALUES ('139', '18', '3', '安装Linux系统对硬盘分区时，必须有两种分区类型：_______ 和 ___________ ', '6a00c52b-bc67-4f3b-a410-913892cd2630.', null, null, null, null, null, null, '文件系统分区、交换分区', '', '0', '2017-12-22 22:49:28', '46', '1');
INSERT INTO `topic` VALUES ('140', '18', '3', '编写的Shell程序运行前必须赋予该脚本文件_____权限', 'd1701fdc-6a6e-41a9-b41b-ae1916b31905.', null, null, null, null, null, null, '执行', '', '0', '2017-12-22 22:49:55', '46', '1');
INSERT INTO `topic` VALUES ('143', '18', '1', '以下那个环境变量表示当前路径', 'a4e5b339-026b-4dd7-8605-38e709213971.', 'PATH', 'PWD', 'HOME', 'ROOT', '', '', 'B', 'pwd：是查看当前路径\r\nroot:是系统管理员的家目录\r\nhome:是普通用户的家目录\r\npath：就是你执行的那些命令，系统会先去PATH所指定的路径下面找', '0', '2017-12-22 23:06:16', '46', '1');
INSERT INTO `topic` VALUES ('144', '18', '4', '在底半技术中把一个中断处理分为哪几部分？为什么采用这种技术？', '497e153f-077c-4019-a6aa-a3f3aaacab0c.', null, null, null, null, null, null, '1、在底半技术中把一个中断处理分为2部分：顶半部分和底半部分。\r\n2、采用这种技术可以：使中断的总延迟时间最小化，加快对中断请求的响应速度，合并某些中断处理。', '', '0', '2017-12-22 23:08:37', '46', '1');
INSERT INTO `topic` VALUES ('145', '18', '4', '论述实时信号、非实时信号、可靠信号、不可靠信号四个概念。', 'ae8ff343-01d0-4b3f-af68-7e21837de0d2.', null, null, null, null, null, null, '实时信号目前未用，非实时信号编号1～31、0表示空信号\r\n非实时信号没有排队机制，可能丢失 \r\n可靠信号0～31、可靠信号32～63\r\n 不可靠信号每次处理完信号后，都将对信号的响应设置为默认动作，需要在结尾再次安装信号；可靠信号和不可靠信号的安装函数也不同。两者的区别主要在于信号类型取值，而不在于操纵他们的AP', '', '0', '2017-12-22 23:11:33', '46', '1');
INSERT INTO `topic` VALUES ('146', '18', '1', '启动samba服务器进程,可以有两种方式：独立启动方式和父进程启动方式,其中前者是在 ( ) 文件中以独立进程方式启动.', '6f843eae-1899-438d-9e05-2a5d94e87e81.', '/usr/sbin/smbd ', '/usr/sbin/nmbd', 'rc.samba', '/etc/inetd.conf', '', '', 'C', '', '0', '2017-12-22 23:30:00', '8', '1');
INSERT INTO `topic` VALUES ('147', '18', '1', 'DHCP是动态主机配置协议的简称,其作用是可以使网络管理员通过一台服务器来管理一个网络系统,自动地为一个网络中的主机分配( )地址', '7bbf88cf-0a02-4f5e-9152-2eb3445189d8.', '网络', 'MAC', 'TCP', 'IP', '', '', 'D', '', '0', '2017-12-22 23:30:42', '8', '1');
INSERT INTO `topic` VALUES ('148', '18', '1', '为了保证在启动服务器时自动启动DHCP进程,应将( )文件中的dhcpd=no改为dhcpd=yes', 'b38a25d4-cfe5-404a-aec2-e2d23c8dbabb.', 'rc.inet1', 'lilo.conf', 'inetd.conf', 'httpd.conf', '', '', 'A', '[注： 英文原义：RC中文释义：含有程序（应用程序甚至操作系统）启动指令的脚本文件注解：这一文件在操作系统启动时会自动执行,它含有要运行的指令（命令或其它脚本）列表.]', '0', '2017-12-22 23:32:39', '8', '1');
INSERT INTO `topic` VALUES ('149', '18', '1', '改变文件所有者的命令为', '975d3f2b-4546-489c-a82e-cdcbd39bf4de.', 'chmod', 'touch', 'chown', 'cat', '', '', 'C', '', '0', '2017-12-22 23:33:08', '8', '1');
INSERT INTO `topic` VALUES ('150', '18', '1', '在给定文件中查找与设定条件相符字符串的命令为', 'aa7234c5-a8cb-4fae-97e0-b84b15d2faea.', 'grep', 'gzip', 'find', 'sort', '', '', 'A', '', '0', '2017-12-22 23:33:32', '8', '1');
INSERT INTO `topic` VALUES ('151', '18', '1', '建立一个新文件可以使用的命令为 ', 'a409fabf-a784-4079-846f-63089e27d8a5.', 'chmod', 'more', 'cp', 'touch', '', '', 'D', '', '0', '2017-12-22 23:33:57', '8', '1');
INSERT INTO `topic` VALUES ('153', '18', '1', '在使用匿名登录ftp时,用户名为:', '5eb927c5-ad2a-447a-b563-71eecaa8f780.', 'users', 'anonymous', 'root', 'guest', '', '', 'B', '', '0', '2017-12-22 23:35:51', '8', '1');
INSERT INTO `topic` VALUES ('154', '18', '1', '在实际操作中,想了解命令logname 的用法,可以键入 ( ) 得到帮助', 'a059614a-966c-4706-b2a1-0c3fda013af2.', 'logname --man', 'logname/？', 'help logname', 'logname --help', '', '', 'D', '', '0', '2017-12-22 23:36:24', '8', '1');
INSERT INTO `topic` VALUES ('155', '18', '1', '如果LILO被安装在MBR,使用 A 命令即可卸载LILO.', '3cba0089-d1be-4a37-a698-ab089eede913.', 'lilo -u', 'lilo -c', 'lilo -v', 'lilo -V', '', '', 'A', '', '0', '2017-12-22 23:39:29', '8', '1');
INSERT INTO `topic` VALUES ('156', '18', '1', '当用命令ls &ndash;al查看文件和目录时,欲观看卷过屏幕的内容,应使用组合键（ ）', '8ae447e7-a43a-4ffb-9b90-0dc599200089.', 'Shift Home', 'Ctrl PgUp', 'Alt PgDn', 'Shift PgUp', '', '', 'D', '', '0', '2017-12-22 23:40:03', '8', '1');
INSERT INTO `topic` VALUES ('157', '18', '1', 'mc是UNIX风格操作系统的（ ）', '85def6ac-fc34-40b4-b853-437e5fe9cae0.', '文件编辑器/程序编译器', '配置网络的窗口工具', '目录浏览器/文件管理器', 'Samba服务器管理工具', '', '', 'C', '', '0', '2017-12-22 23:40:45', '8', '1');
INSERT INTO `topic` VALUES ('158', '18', '1', 'i节点是一个 （ ） 长的表,表中包含了文件的相关信息', 'bc1dcff8-3520-430f-9137-a3c1070a4dac.', '8字节', '16字节', '32字节', '64字节', '', '', 'D', '', '0', '2017-12-22 23:41:51', '8', '1');
INSERT INTO `topic` VALUES ('159', '18', '1', '文件权限读、写、执行的三种标志符号依次是 （ ）', '411241d3-fc50-4dfa-9731-b39bf253d6e5.', 'rwx', 'xrw', 'rdx', 'srw', '', '', 'A', '', '0', '2017-12-22 23:42:20', '8', '1');
INSERT INTO `topic` VALUES ('160', '18', '1', 'Linux 文件名的长度不得超过 （ ） 个字符', '0997d706-d59c-406d-a5fe-c7b80e06260c.', '64', '128', '256', '512', '', '', 'C', '', '0', '2017-12-22 23:42:51', '8', '1');
INSERT INTO `topic` VALUES ('161', '18', '1', '进程有三种状态：（ ）', '6d614bbb-40d7-4cc6-b160-50035dec199a.', '准备态、执行态和退出态', '精确态、模糊态和随机态', '运行态、就绪态和等待态', '手工态、自动态和自由态', '', '', 'C', '', '0', '2017-12-22 23:43:28', '8', '1');
INSERT INTO `topic` VALUES ('162', '18', '1', '从后台启动进程,应在命令的结尾加上符号：（ ）', '7ed9f423-d2d0-4a3a-9385-8fe4b4030d08.', '&amp;', '@', '#', '$', '', '', 'A', '', '0', '2017-12-22 23:44:06', '8', '1');
INSERT INTO `topic` VALUES ('163', '18', '1', '( )不是邮件系统的组成部分', '170acc12-90cd-45f8-80f5-1f07682b63c2.', '用户代理', '代理服务器', '传输代理', '投递代理', '', '', 'B', '', '0', '2017-12-22 23:44:37', '8', '1');
INSERT INTO `topic` VALUES ('165', '18', '1', 'crontab文件由六个域组成,每个域之间用空格分割,其排列如下：( )', '004c0d8e-d484-4ac2-bb3b-cd2e6143cd04.', 'MIN HOUR DAY MONTH YEAR COMMAND', 'MIN HOUR DAY MONTH DAYOFWEEK COMMAND', 'COMMAND HOUR DAY MONTH DAYOFWEEK', 'COMMAND YEAR MONTH DAY HOUR MIN', '', '', 'B', '', '0', '2017-12-22 23:47:42', '8', '1');
INSERT INTO `topic` VALUES ('166', '18', '1', '用ftp进行文件传输时,有两种模式：( )', 'd6c39af1-6a2e-45af-a552-3529c0639fc6.', 'Word和binary', 'txt和Word Document ', 'ASCII和binary', 'ASCII和Rich Text Format', '', '', 'C', '', '0', '2017-12-22 23:48:14', '8', '1');
INSERT INTO `topic` VALUES ('167', '18', '1', '某文件的组外成员的权限为只读；所有者有全部权限；组内的权限为读与写,则该文件的权限为:( )', 'b57f7167-2431-4bb2-80d3-24e913d4091e.', '467', '674', '476', '764', '', '', 'D', '', '0', '2017-12-22 23:48:41', '8', '1');
INSERT INTO `topic` VALUES ('168', '18', '1', '在DNS系统测试时,设named进程号是53,命令 ( ) 通知进程重读配置文件.', 'e808d51e-f653-49d2-9625-8d105b599f0a.', 'kill &ndash;USR2 53', 'kill &ndash;USR1 53 ', 'kill -INT 63', 'kill &ndash;HUP 53', '', '', 'D', '', '0', '2017-12-22 23:49:15', '8', '1');
INSERT INTO `topic` VALUES ('169', '18', '1', 'Apache服务器默认的接听连接端口号是:( )', 'ee5ff668-b39f-42ec-b99a-4817a21ca0dd.', '1024', '800', '80(http)', '8', '', '', 'C', '', '0', '2017-12-22 23:49:55', '8', '1');
INSERT INTO `topic` VALUES ('170', '18', '1', 'PHP和MySQL的联合使用解决了:( )', 'd6ad0123-a22a-4ad8-8cfa-f47aed3dbeed.', '在Proxy上处理数据库的访问问题', '在WWW服务器上处理黑客的非法访问问题', '在WWW服务器上处理数据库的访问问题', '在Sendmail邮件系统上处理数据库的访问问题', '', '', 'C', '', '0', '2017-12-22 23:50:31', '8', '1');
INSERT INTO `topic` VALUES ('171', '18', '1', 'OpenSSL是一个( )', '64737f2b-f348-4cdc-8d27-4063ed5f1e76.', 'httpd.conf', 'inetd.conf', 'rc.samba', 'smb.conf', '', '', 'D', '', '0', '2017-12-22 23:51:06', '8', '1');
INSERT INTO `topic` VALUES ('174', '18', '1', '将Windows C:盘(hda1)安装在Linux文件系统的/winsys目录下,命令是:( )', 'bff95c87-b26d-4342-b8b1-bdb56ff9385e.', 'root@l04.edu.cn:~#mount dev/had1 /winsys ', 'root@l04.edu.cn:~#mount /dev/had1 /winsys', 'root@l04.edu.cn:~#mount /dev/had1 winsys', 'root@l04.edu.cn:~#mount dev/had1 winsys', '', '', 'B', '', '0', '2017-12-22 23:52:49', '8', '1');
INSERT INTO `topic` VALUES ('175', '18', '1', '设超级用户root当前所在目录为：/usr/local,键入cd命令后,用户当前所在目录为:( )', '6ad59b80-88a4-42a4-aa5e-12798f1e1c8c.', '/home', '/root', '/home/root', '/usr/local', '', '', 'B', '', '0', '2017-12-22 23:53:22', '8', '1');
INSERT INTO `topic` VALUES ('176', '18', '1', '字符设备文件类型的标志是:( )', '7489e81c-432c-450b-ba75-2cf179ef2040.', 'p', 'c', 's', 'l', '', '', 'B', '', '0', '2017-12-22 23:53:52', '8', '1');
INSERT INTO `topic` VALUES ('177', '18', '1', '将光盘CD-ROM（hdc）安装到文件系统的/mnt/cdrom目录下的命令是:( )', '1731b2ac-e172-44ce-bdc1-f1a5ca5e1295.', 'mount /mnt/cdrom ', 'mount /mnt/cdrom /dev/hdc', 'mount /dev/hdc /mnt/cdrom', 'mount /dev/hdc', '', '', 'C', '', '0', '2017-12-22 23:54:27', '8', '1');
INSERT INTO `topic` VALUES ('178', '18', '1', '将光盘/dev/hdc卸载的命令是:( )', '305db7c9-8272-434b-8baf-5685413e8db3.', 'umount /dev/hdc', 'unmount /dev/hdc', 'umount /mnt/cdrom /dev/hdc', 'unmount /mnt/cdrom /dev/hdc', '', '', 'C', '', '0', '2017-12-22 23:55:08', '8', '1');
INSERT INTO `topic` VALUES ('179', '18', '1', '在/home/stud1/wang目录下有一文件file,使用 ( ) 可实现在后台执行命令,此命令将file文件中的内容输出到file.copy文件中', '74d7de44-10d3-42d8-a5a4-155ab084ebae.', 'cat file 〉;file.copy', 'cat 〉;file.copy', 'cat file file.copy &amp;', 'at file 〉;file.copy &amp;', '', '', 'D', '', '0', '2017-12-22 23:55:56', '8', '1');
INSERT INTO `topic` VALUES ('180', '18', '1', '在DNS配置文件中,用于表示某主机别名的是：( )', 'c3e17962-3c29-430e-a3c1-1b62da46d65d.', 'NS', 'CNAME', 'NAME', 'CN', '', '', 'B', '', '0', '2017-12-22 23:56:23', '8', '1');
INSERT INTO `topic` VALUES ('181', '18', '1', '可以完成主机名与IP地址的正向解析和反向解析任务的命令是：( )', '6604b80f-0403-4c3a-9021-38ad1a4d2b7a.', 'nslookup', 'arp', 'ifconfig', 'dnslook', '', '', 'A', '', '0', '2017-12-22 23:56:45', '8', '1');
INSERT INTO `topic` VALUES ('183', '18', '1', 'qmail是', '92af034d-085c-4b3f-b9fb-fc426710597f.', '收取邮件的协议', '邮件服务器的一种', '发送邮件的协议', '邮件队列', '', '', 'B', '', '0', '2017-12-22 23:57:39', '8', '1');
INSERT INTO `topic` VALUES ('184', '18', '1', '已知某用户stud1,其用户目录为/home/stud1.分页显示当前目录下的所有文件的文件或目录名、用户组、用户、文件大小、文件或目录权限、文件创建时间等信息的命令是:( )', '1273b743-f4f7-466a-9be2-b709d5875bc4.', 'more ls &ndash;al', 'more &ndash;al ls', 'more 〈 ls &ndash;al', 'ls &ndash;al | more ', '', '', 'D', '', '0', '2017-12-22 23:58:17', '8', '1');
INSERT INTO `topic` VALUES ('185', '18', '1', '关于进程调度命令, ( ) 是不正确的.at--定期执行程序的调度命令', '51ef15dd-548a-4ee6-87e2-50d39a67bda1.', '当日晚11点执行clear命令,使用at命令：at 23:00 today clear', '每年1月1日早上6点执行date命令,使用at命令：at 6am Jan 1 date', '每日晚11点执行date命令,crontab文件中应为：0 23 * * * date', '每小时执行一次clear命令,crontab文件中应为：0 */1 * * * clear', '', '', 'B', '', '0', '2017-12-22 23:59:40', '8', '1');
INSERT INTO `topic` VALUES ('186', '18', '1', '系统中有用户user1和user2,同属于users组.在user1用户目录下有一文件file1,它拥有644的权限,如果user2用户想修改user1用户目录下的file1文件,应拥有 ( ) 权限', '7e5ee334-58f3-4eb6-bf57-699ad73b5d68.', '744', '664', '646', '746', '', '', 'B', '', '0', '2017-12-23 00:00:14', '8', '1');
INSERT INTO `topic` VALUES ('187', '18', '1', '如果想配置一台匿名ftp服务器,应修改 ( ) 文件', '5905a6e8-f8e6-4462-ba38-3a7618b2c60c.', '/etc/gateway', '/etc/ftpservers', '/etc/ftpusers', '/etc/inetd.conf', '', '', 'C', '', '0', '2017-12-23 00:00:49', '8', '1');
INSERT INTO `topic` VALUES ('188', '18', '1', 'Samba服务器的进程由( )两部分组成', '555469d9-7f39-483d-ad2b-5fbb782c4ca4.', 'named和sendmail', 'smbd和nmbd', 'bootp和dhcpd', 'httpd和squid', '', '', 'B', '', '0', '2017-12-23 00:01:46', '8', '1');
INSERT INTO `topic` VALUES ('189', '18', '1', '要配置NFS服务器,在服务器端主要配置 ( ) 文件', '44e2bcf6-5962-40bd-a516-cd84cc584e57.', '/etc/rc.d/rc.inet1', '/etc/rc.d/rc.M', '/etc/exports', '/etc/rc.d/rc.S', '', '', 'C', '', '0', '2017-12-23 00:02:27', '8', '1');
INSERT INTO `topic` VALUES ('190', '18', '1', '为保证在启动服务器时自动启动DHCP进程,应对( )文件进行编辑', '237ff01b-5796-40cc-9fd1-9c198de54755.', '/etc/rc.d/rc.inet2', '/etc/rc.d/rc.inet1', '/etc/dhcpd.conf', '/etc/rc.d/rc.S', '', '', 'B', '', '0', '2017-12-23 00:03:09', '8', '1');
INSERT INTO `topic` VALUES ('191', '18', '1', '在配置代理服务器时,若设置代理服务器的工作缓存为64MB,配置行应为:( )', '84c98bb6-5aa0-48c4-8980-ba30120de4ab.', 'cache 64MB', 'cache_dir ufs /usr/local/squid/cache 10000 16 256', 'cache_ mgr 64MB', 'cache_ mem 64MB', '', '', 'D', '', '0', '2017-12-23 00:03:44', '8', '1');
INSERT INTO `topic` VALUES ('192', '18', '1', '安全管理涉及的问题包括保证网络管理工作可靠进行的安全问题和保护网络用户及网络管理对象问题. ( )属于安全管理的内容', '779a5fd7-79ac-4e2d-894b-e03b6e2f85be.', '配置设备的工作参数', '收集与网络性能有关的数据 ', '控制和维护访问权限', '监测故障', '', '', 'C', '', '0', '2017-12-23 00:04:18', '8', '1');
INSERT INTO `topic` VALUES ('193', '18', '1', '以下命令对中,正确的是：( )', 'd812ed1e-0671-4415-91e4-6d5ad690426f.', 'ls和sl', 'cat和tac', 'more和erom', 'exit和tixe', '', '', 'B', 'cat是显示文件夹的命令,这个大家都知道,tac是cat的倒写,意思也和它是相反的.cat是从第一行显示到一行,而tac是从一行显示到第一行,而rev 则是从一个字符显示到第一个字符', '0', '2017-12-23 00:06:11', '8', '1');
INSERT INTO `topic` VALUES ('194', '18', '1', '( )命令是在vi编辑器中执行存盘退出', '79dc7682-0845-4fcd-adbc-9e7b1a2b176b.', ':q', ':wq', ':q!', ':WQ', '', '', 'B', '', '0', '2017-12-23 00:07:59', '8', '1');
INSERT INTO `topic` VALUES ('195', '18', '1', '下列关于/etc/fstab文件描述,正确的是:( )', '88da3c8d-7061-4ff5-b45f-e784386599f0.', 'fstab文件只能描述属于linux的文件系统', 'CD_ROM和软盘是自动加载的', 'fstab文件中描述的文件系统不能被卸载', '启动时按fstab文件描述内容加载文件系统', '', '', 'D', '', '0', '2017-12-23 00:08:44', '8', '1');
INSERT INTO `topic` VALUES ('196', '18', '1', '通过文件名存取文件时,文件系统内部的操作过程是通过:( )', 'e7d25feb-7b00-47c4-8747-3450663f5a34.', '文件在目录中查找文件数据存取位置.', '文件名直接找到文件的数据,进行存取操作.', '文件名在目录中查找对应的I节点,通过I节点存取文件数据.', '文件名在中查找对应的超级块,在超级块查找对应i节点,通过i节点存取文件数据', '', '', 'C', '', '0', '2017-12-23 00:09:24', '8', '1');
INSERT INTO `topic` VALUES ('197', '18', '1', 'Linux将存储设备和输入/输出设备均看做文件来操作,( )不是以文件的形式出现', '74e686ec-32de-4cc1-8818-acda5e4ebe4d.', '目录', '软链接', 'i节点表', '网络适配器', '', '', 'C', '', '0', '2017-12-23 00:10:06', '8', '1');
INSERT INTO `topic` VALUES ('198', '18', '1', '关于i节点和超级块,下列论述不正确的是:( )', '2cf5b3b2-dedd-481a-9a72-7eb38f8ad485.', 'i节点是一个长度固定的表 ', '超级块在文件系统的个数是唯一的', 'i节点包含了描述一个文件所必需的全部信息', '超级块记录了i节点表和空闲块表信息在磁盘中存放的位置', '', '', 'B', '', '0', '2017-12-23 00:10:40', '8', '1');
INSERT INTO `topic` VALUES ('199', '18', '1', '( )设备是字符设备.', '868d0d0d-fc6a-45a6-985c-95ef409242ca.', 'hdc', 'fd0 ', 'hda1', 'tty1', '', '', 'D', '(A,B,C为块设备)', '0', '2017-12-23 00:11:57', '8', '1');
INSERT INTO `topic` VALUES ('200', '18', '1', '( )目录存放着Linux的源代码', '9f5d3cbf-ed88-4130-80fe-55afe061b273.', '/etc', '/usr/src ', '/usr', '/home', '', '', 'B', '', '0', '2017-12-23 00:12:53', '8', '1');
INSERT INTO `topic` VALUES ('201', '18', '1', '关于文件系统的安装和卸载,下面描述正确的是 :( )', 'ba320666-3f33-4468-9130-d803d6dd8505.', '如果光盘未经卸载,光驱是打不开的 ', '安装文件系统的安装点只能是/mnt下', '不管光驱中是否有光盘,系统都可以安装CD-ROM设备', 'mount /dev/fd0 /floppy 此命令中目录/floppy是自动生成的', '', '', 'A', '', '0', '2017-12-23 00:13:27', '8', '1');
INSERT INTO `topic` VALUES ('202', '18', '1', '( )不是进程和程序的区别', 'ce7e5876-a070-4e98-85e5-e8c35d691081.', '程序是一组有序的静态指令,进程是一次程序的执行过程', '程序只能在前台运行,而进程可以在前台或后台运行', '程序可以长期保存,进程是暂时的', '程序没有状态,而进程是有状态的', '', '', 'B', '', '0', '2017-12-23 00:13:57', '8', '1');
INSERT INTO `topic` VALUES ('203', '18', '1', '文件exer1的访问权限为rw-r--r--,现要增加所有用户的执行权限和同组用户的写权限,下列命令正确的是:( )', '5cc9e8c3-a1e1-4b3c-a65c-10ddbd142572.', 'chmod a x g w exer1', 'chmod 765 exer1', 'chmod o x exer1', 'chmod g w exer1', '', '', 'A', '', '0', '2017-12-23 00:15:09', '8', '1');
INSERT INTO `topic` VALUES ('204', '18', '1', '有关归档和压缩命令,下面描述正确的是:( )', '565daaed-8bee-470e-99f8-81d6b4e83735.', '用uncompress命令解压缩由compress命令生成的后缀为.zip的压缩文件', 'unzip命令和gzip命令可以解压缩相同类型的文件', 'tar归档且压缩的文件可以由gzip命令解压缩', 'tar命令归档后的文件也是一种压缩文件', '', '', 'C', '', '0', '2017-12-23 00:15:53', '8', '1');
INSERT INTO `topic` VALUES ('205', '18', '1', '不是shell具有的功能和特点的是 :( )', '269b59d1-2ed6-42d3-ba4e-b1c4ab012eb0.', '管道', '输入输出重定向', '执行后台进程', '处理程序命令', '', '', 'C', '', '0', '2017-12-23 00:16:17', '8', '1');
INSERT INTO `topic` VALUES ('210', '18', '3', '全部磁盘块由四个部分组成,分别为（ ）和数据存储块.', 'd53b02ef-5978-469a-8be5-490d2bcfec09.', null, null, null, null, null, null, '引导块,专用块,I节点表', '', '0', '2017-12-23 00:21:28', '8', '1');
INSERT INTO `topic` VALUES ('211', '18', '3', '链接分为：（ ）', '0d10ce00-bcea-4a3d-957b-528041007715.', null, null, null, null, null, null, '硬链接  和  符号链接', '', '0', '2017-12-23 00:21:55', '8', '1');
INSERT INTO `topic` VALUES ('212', '18', '3', '超级块包含了（ ）等重要的文件系统信息.', '2c1d45d9-70db-425a-b18d-883684640367.', null, null, null, null, null, null, 'I节点表  和  空闲块表  ', '', '0', '2017-12-23 00:22:31', '8', '1');
INSERT INTO `topic` VALUES ('214', '18', '3', '前台起动的进程使用（ ）终止', '771852ab-614e-43ca-a979-d7870cf37793.', null, null, null, null, null, null, 'CTRL C', '', '0', '2017-12-23 00:23:47', '8', '1');
INSERT INTO `topic` VALUES ('219', '18', '3', '系统管理的任务之一是能够在（ ）环境中实现对程序和数据的安全保护、备份、恢复和更新.', '180d79c6-8a72-452f-82ed-0655a0e5583c.', null, null, null, null, null, null, '分布式', '', '0', '2017-12-23 00:26:07', '8', '1');
INSERT INTO `topic` VALUES ('220', '18', '3', '系统交换分区是作为（ ）的一块区域.', '62a1e6a5-441a-49f6-8a1a-d53d8363ac1e.', null, null, null, null, null, null, '系统虚拟存储器', '', '0', '2017-12-23 00:26:38', '8', '1');
INSERT INTO `topic` VALUES ('221', '18', '3', '内核分为（  ， ， ， ）等四个子系统', '39a9be33-8fcc-4f20-a36f-377fc243648b.', null, null, null, null, null, null, '进程管理系统,内存管理系统,I/O管理系统和文件管理系统', '', '0', '2017-12-23 00:27:47', '8', '1');
INSERT INTO `topic` VALUES ('222', '18', '3', '内核配置是系统管理员在改变系统配置（ ）时要进行的重要操作', '3f7b170e-add3-4362-af80-9cbf30a90ce0.', null, null, null, null, null, null, '硬件', '', '0', '2017-12-23 00:28:10', '8', '1');
INSERT INTO `topic` VALUES ('223', '18', '3', '在安装Linux系统中,使用netconfig程序对网络进行配置,该安装程序会一步步提示用户输入主机名、域名、域名服务器、IP地址、（  ， ）等必要信息', '0a139344-c187-478e-a794-c0428d45f9b5.', null, null, null, null, null, null, '   网关地址 和 子网掩码   ', '', '0', '2017-12-23 00:28:55', '8', '1');
INSERT INTO `topic` VALUES ('224', '18', '3', '唯一标识每一个用户的是（ ）', '133b092d-ee1f-4deb-9940-d7001a66e660.', null, null, null, null, null, null, '用户ID和用户名', '', '0', '2017-12-23 00:29:26', '8', '1');
INSERT INTO `topic` VALUES ('225', '18', '3', '（ ）协议是最为普遍的一种内部协议,一般称为动态路由信息协议', '3f1dd623-1940-4b6f-8756-11ac01bc6b34.', null, null, null, null, null, null, 'RIP', '', '0', '2017-12-23 00:29:54', '8', '1');
INSERT INTO `topic` VALUES ('226', '18', '3', '在Linux系统中所有内容都被表示为文件,组织文件的各种方法称为（ ）', '5a341fba-58c3-4cac-81c9-cdb095b52c30.', null, null, null, null, null, null, '文件系统', '', '0', '2017-12-23 00:30:11', '8', '1');
INSERT INTO `topic` VALUES ('227', '18', '3', 'DHCP可以实现动态（ ）地址分配', '31b2a482-fd38-41ec-82e1-0824b5e65b22.', null, null, null, null, null, null, 'IP', '', '0', '2017-12-23 00:30:30', '8', '1');
INSERT INTO `topic` VALUES ('228', '18', '3', '系统网络管理员的管理对象是（ ），用户和服务器的进程以及系统的各种资源.', '103465d7-06e1-45f7-8f1f-7bdc1acf8e95.', null, null, null, null, null, null, '服务器,用户和服务器的进程', '', '0', '2017-12-23 00:57:17', '8', '1');
INSERT INTO `topic` VALUES ('229', '18', '3', '网络管理通常由（ ， ， ）三部分组成,其中（ ）是整个网络管理的中心.', '050f4a35-8c7f-42d6-b146-7cb4e4e6252a.', null, null, null, null, null, null, '监测、传输和管理     管理部分', '', '0', '2017-12-23 00:58:27', '8', '1');
INSERT INTO `topic` VALUES ('230', '18', '3', '当想删除本系统用不上的  设备驱动程序  时编译（ ），当内核不支持系统上的设备驱动程序时,对（ ）升级', 'db666ec4-f3b7-44e2-9d54-0c96dadb815d.', null, null, null, null, null, null, '内核，内核', '', '0', '2017-12-23 00:59:43', '8', '1');
INSERT INTO `topic` VALUES ('231', '18', '3', 'Ping命令可以测试网络中本机系统是否能到达 （ ） ,常常用于测试网络的（ ）', 'c01160a8-aae5-41f8-b16c-e1e727f2ee57.', null, null, null, null, null, null, '一台远程主机 连通性', '', '0', '2017-12-23 01:00:14', '8', '1');
INSERT INTO `topic` VALUES ('232', '18', '3', 'vi编辑器具有两种工作模式：（  ， ）', '6d00b783-d12c-4dbb-9ca8-db4a5826ab42.', null, null, null, null, null, null, '命令模式和输入模式 ', '', '0', '2017-12-23 01:00:59', '8', '1');
INSERT INTO `topic` VALUES ('233', '18', '3', '可以用（ ）命令来观察文件的权限,每个文件的权限都用（ ）位表示,并分为（ ）段,其中第一段占（  ）位,表示（ ）,第二段占3位,表示（ ）对该文件的权限.', '967e82da-bb71-45f8-b0ff-0451e93e41a1.', null, null, null, null, null, null, 'LS &NDASH;AL  10  4  1   文件类型  文件所有者  ', '', '0', '2017-12-23 01:02:51', '8', '1');
INSERT INTO `topic` VALUES ('234', '18', '3', '进程与程序的区别在于其动态性,动态的产生和终止,从产生到终止进程可以具有的基本状态为（ ）', '4b95931c-534b-4cdc-9675-e2efeba1141e.', null, null, null, null, null, null, '运行态,就绪态和等待态（阻塞态）', '', '0', '2017-12-23 01:03:17', '8', '1');
INSERT INTO `topic` VALUES ('235', '18', '3', 'DNS实际上是分布在internet上的主机信息的数据库,其作用是实现（ ）之间的转换.', '9b4c5d59-2883-4f24-bd06-325d048aaf21.', null, null, null, null, null, null, 'IP地址和主机名', '', '0', '2017-12-23 01:11:36', '8', '1');
INSERT INTO `topic` VALUES ('236', '18', '3', 'Apache是实现WWW服务器功能的应用程序,即通常所说的\"浏览web服务器\",在服务器端为用户提供浏览（ ）的就是apache应用程序', '644f7da2-a5b2-4cf0-b30e-ad1781c8a254.', null, null, null, null, null, null, 'WEB服务 ', '', '0', '2017-12-23 01:12:08', '8', '1');
INSERT INTO `topic` VALUES ('237', '18', '3', '在Linux系统上做备份可以有两种类型：系统备份和用户备份.其中前者是指对（ ）的备份,后者是指对（ ）的备份', '1f5109f5-7d92-4e5c-9477-a4cfa538634a.', null, null, null, null, null, null, '操作系统  应用程序和用户文件', '', '0', '2017-12-23 01:13:12', '8', '1');
INSERT INTO `topic` VALUES ('238', '18', '3', 'CD-ROM标准的文件系统类型是（ ）', '11efbe07-795c-4a05-8e38-6074dc3cc67e.', null, null, null, null, null, null, 'ISO9660', '', '0', '2017-12-23 01:13:47', '8', '1');
INSERT INTO `topic` VALUES ('239', '18', '3', '当lilo.conf配置完毕后,使之生效,应运行的命令及参数是（ ）', '19fea060-4e7d-41b9-af84-0baddb37e07d.', null, null, null, null, null, null, 'LILO', '', '0', '2017-12-23 01:14:09', '8', '1');
INSERT INTO `topic` VALUES ('240', '18', '3', '在使用ls命令时,用八进制形式显示非打印字符应使用参数（ ）', '3d11e7c6-e0c9-4b9a-974c-a7c04922c5f7.', null, null, null, null, null, null, '-B', '', '0', '2017-12-23 01:14:25', '8', '1');
INSERT INTO `topic` VALUES ('241', '18', '3', 'Linux使用支持Windows 9.x/2000长文件名的文件系统的类型是（ ）', '169407af-c9f2-46ae-9a5d-87b8adac1648.', null, null, null, null, null, null, 'VFAT', '', '0', '2017-12-23 01:14:48', '8', '1');
INSERT INTO `topic` VALUES ('242', '18', '3', '设定限制用户使用磁盘空间的命令是（ ）', '74ba777e-662c-4b66-9fcb-520f81081e6b.', null, null, null, null, null, null, 'QUOTA', '', '0', '2017-12-23 01:15:05', '8', '1');
INSERT INTO `topic` VALUES ('243', '18', '3', '在Linux系统中,用来存放系统所需要的配置文件和子目录的目录是（ ）', '6581b42a-2e0f-4b49-b56f-3217612db3bd.', null, null, null, null, null, null, '/ETC', '', '0', '2017-12-23 01:15:33', '8', '1');
INSERT INTO `topic` VALUES ('244', '18', '3', '硬连接只能建立对（ ）链接.符号链接可以跨不同文件系统创建', '7eff63fb-6352-4105-b152-18cb92a2fe9c.', null, null, null, null, null, null, '文件', '', '0', '2017-12-23 01:15:57', '8', '1');
INSERT INTO `topic` VALUES ('245', '18', '3', '套接字文件的属性位是（ ）', '47584fe7-51fe-4878-aa69-678277f8ff10.', null, null, null, null, null, null, 'S', '', '0', '2017-12-23 01:16:21', '8', '1');
INSERT INTO `topic` VALUES ('246', '18', '3', '结束后台进程的命令是（ ）', 'f50713cb-472c-4f06-bd71-ee47e58d9ef7.', null, null, null, null, null, null, 'KILL', '', '0', '2017-12-23 01:16:35', '8', '1');
INSERT INTO `topic` VALUES ('247', '18', '3', '进程的运行有两种方式,即（ ）', '4bd0c0c2-ad27-458c-8931-9b6e7d4f054b.', null, null, null, null, null, null, '独立运行和使用父进程运行', '', '0', '2017-12-23 01:17:02', '8', '1');
INSERT INTO `topic` VALUES ('248', '18', '3', 'Links分为硬链接和（ ）', 'a6a6c63f-cdb1-4e04-b5cf-377eca36e758.', null, null, null, null, null, null, '符号链接（软链接）', '', '0', '2017-12-23 01:17:43', '8', '1');
INSERT INTO `topic` VALUES ('249', '18', '3', '在超级用户下显示Linux系统中正在运行的全部进程,应使用的命令及参数是（ ）', 'd80d5183-b641-4ea0-9eeb-e0806a81b20a.', null, null, null, null, null, null, 'PS -AUX', '', '0', '2017-12-23 01:18:04', '8', '1');
INSERT INTO `topic` VALUES ('251', '18', '3', '将前一个命令的标准输出作为后一个命令的标准输入,称之为（ ）', '500c41fa-e1e8-4926-9881-aed4cdddec5b.', null, null, null, null, null, null, '管道', '', '0', '2017-12-23 01:18:34', '8', '1');
INSERT INTO `topic` VALUES ('252', '18', '3', '为脚本程序指定执行权的命令及参数是', 'a4b3eb34-3599-4dab-aafc-bfdfcd373b2b.', null, null, null, null, null, null, 'CHMOD A X FILENAME ', '', '0', '2017-12-23 01:18:48', '8', '1');
INSERT INTO `topic` VALUES ('253', '18', '3', '进行远程登录的命令是（ ）', 'b909a0b1-c663-4a63-8f48-bb7c62c5b272.', null, null, null, null, null, null, 'TELNET', '', '0', '2017-12-23 01:19:07', '8', '1');
INSERT INTO `topic` VALUES ('254', '18', '3', ' 欲发送10个分组报文测试与主机abc.tuu.edu.cn的连通性,应使用的命令和参数是：（ ）', '7ba12616-2bd4-4bb5-8eef-6dfb68d12eea.', null, null, null, null, null, null, 'PING ABC.TUU.EDU.CN &NDASH;C 10', '', '0', '2017-12-23 01:19:38', '8', '1');
INSERT INTO `topic` VALUES ('255', '18', '3', ' DNS服务器的进程命名为named,当其启动时,自动装载 /etc目录下的（ ）文件中定义的DNS分区数据库文件', '056f3b27-b5ef-480a-863c-dc5e02d7223c.', null, null, null, null, null, null, 'NAMED.CONF', '', '0', '2017-12-23 01:20:07', '8', '1');
INSERT INTO `topic` VALUES ('256', '18', '3', 'Apache服务器进程配置文件是（ ）', 'd91d78fe-37d1-4e4f-a54e-3b17c856930d.', null, null, null, null, null, null, 'HTTPD.CONF', '', '0', '2017-12-23 01:20:31', '8', '1');
INSERT INTO `topic` VALUES ('257', '18', '3', '在Linux系统中,压缩文件后生成后缀为.gz文件的命令是（ ）', 'b493112e-71ea-45ae-8e6c-d70fbbb9027a.', null, null, null, null, null, null, 'GZIP', '', '0', '2017-12-23 01:20:51', '8', '1');
INSERT INTO `topic` VALUES ('258', '18', '3', '在用vi编辑文件时,将文件内容存入test.txt文件中,应在命令模式下键入：（ ）', 'f2f29d3a-6553-49ed-a967-1c3d3b0e9eb0.', null, null, null, null, null, null, 'W TEST.TXT', '', '0', '2017-12-23 01:21:50', '8', '1');
INSERT INTO `topic` VALUES ('259', '18', '3', '可以在标准输出上显示整年日历的命令及参数是', '34508c10-216f-4b8c-82b0-bf221e90aee9.', null, null, null, null, null, null, 'CAL -Y', '', '0', '2017-12-23 01:22:02', '8', '1');
INSERT INTO `topic` VALUES ('260', '18', '3', '在shell编程时,使用方括号表示测试条件的规则是：方括号两边有（ ）', 'c84a962f-5b10-4c1f-a2c7-34673e4d3279.', null, null, null, null, null, null, '空格', '', '0', '2017-12-23 01:22:19', '8', '1');
INSERT INTO `topic` VALUES ('261', '18', '3', '检查已安装的文件系统/dev/had5是否正常,若检查有错,则自动修复,其命令及参数是（ ）', 'a7bd9a3b-f6c4-4590-8ab2-1af12b8ed98a.', null, null, null, null, null, null, 'FSCK &NDASH;A /DEV/HAD5', '', '0', '2017-12-23 01:22:38', '8', '1');
INSERT INTO `topic` VALUES ('262', '18', '3', '在Windows9.x环境下共享Unix/Linux中的用户目录的一个工具是（ ）', '9d81874f-00e2-409d-8b34-86084e4ab008.', null, null, null, null, null, null, 'SAMBA服务器', '', '0', '2017-12-23 01:23:14', '8', '1');
INSERT INTO `topic` VALUES ('263', '18', '3', '系统管理员的职责是进行 （ ）、系统性能管理、设备管理、安全管理和系统性能监测', 'c3319308-78dd-477a-b7d7-0234e1e652aa.', null, null, null, null, null, null, '系统资源管理', '', '0', '2017-12-23 01:23:54', '8', '1');
INSERT INTO `topic` VALUES ('264', '18', '3', '在Linux系统中,测试DNS服务器是否能够正确解析域名的的客户端命令,使用命令（ ）', 'f6124b48-202e-4676-a893-a0e6fbf3605d.', null, null, null, null, null, null, 'NSLOOKUP', '', '0', '2017-12-23 01:24:29', '8', '1');
INSERT INTO `topic` VALUES ('265', '18', '3', '在Linux系统下,第二个IDE通道的硬盘（从盘）被标识为（ ）', '25e8ec9f-344e-47af-a84b-e6e60a0fd02c.', null, null, null, null, null, null, 'HDB', '', '0', '2017-12-23 01:25:00', '8', '1');
INSERT INTO `topic` VALUES ('266', '18', '3', '当系统管理员需升级内核版本和改变系统硬件配置时,应该（ ）', '7b1a73bd-d09b-4793-a008-4205cf71baeb.', null, null, null, null, null, null, '重新编译内核', '', '0', '2017-12-23 01:25:18', '8', '1');
INSERT INTO `topic` VALUES ('267', '18', '3', '如果只是要修改系统的IP地址,应修改（ ）配置文件', '6779beb6-8de1-44bc-9d11-cdf597747cfb.', null, null, null, null, null, null, '/ETC/RC.D/RC.INET1', '', '0', '2017-12-23 01:25:41', '8', '1');
INSERT INTO `topic` VALUES ('268', '18', '3', '当LAN内没有条件建立DNS服务器,但又想让局域网内的用户可以使用计算机名互相访问时,应配置（ ）文件', '9486cabd-f4d6-4ba4-be8d-b860c1fb8c95.', null, null, null, null, null, null, '/ETC/HOSTS', '', '0', '2017-12-23 01:26:05', '8', '1');
INSERT INTO `topic` VALUES ('269', '18', '3', '在vi编辑环境下,使用（ ）进行模式转换', 'c32bf5f1-459e-4729-93c5-137cee44a7e8.', null, null, null, null, null, null, 'ESC键', '', '0', '2017-12-23 01:26:40', '8', '1');
INSERT INTO `topic` VALUES ('270', '18', '3', 'Slackware Linux 9.0通常使用（ ）文件系统,系统的全部磁盘块由（ ）部分组成', '79e9ae43-cc9d-4e90-9e88-80b3a821aa59.', null, null, null, null, null, null, 'EXT3   4', '', '0', '2017-12-23 01:27:33', '8', '1');
INSERT INTO `topic` VALUES ('271', '18', '3', '将/home/stud1/wang目录做归档压缩,压缩后生成wang.tar.gz文件,并将此文件保存到/home目录下,实现此任务的tar命令格式（ ）', 'ee7bccd7-cc42-4616-afd2-f06a5b4e9df5.', null, null, null, null, null, null, 'TAR ZCVF /HOME/WANG.TAR.GZ /HOME/STUD1/WANG', '', '0', '2017-12-23 01:27:55', '8', '1');
INSERT INTO `topic` VALUES ('272', '18', '3', '管道就是将前一个命令的（ ）作为后一个命令的（ ）', '9e5707a1-f6b5-4e97-8bbc-4b3f9e6a04e3.', null, null, null, null, null, null, '标准输出  标准输入', '', '0', '2017-12-23 01:28:30', '8', '1');
INSERT INTO `topic` VALUES ('273', '18', '3', '在使用手工的方法配置网络时,可通过修改（ ）文件来改变主机名,若要配置该计算机的域名解析客户端,需配置（ ）文件', 'e5cf1fc9-2cc5-490e-aa9c-1f764a7d62b1.', null, null, null, null, null, null, '/ETC/HOSTNAME   /ETC/RESOLV.CONF', '', '0', '2017-12-23 01:29:23', '8', '1');
INSERT INTO `topic` VALUES ('274', '18', '3', '启动进程有手动启动和调度启动两种方法,其中调度启动常用的命令为（ ）', '52b57383-6f1d-4e87-b880-2fa448eeb4b9.', null, null, null, null, null, null, 'AT,BATCH和CRONTAB', '', '0', '2017-12-23 01:30:07', '8', '1');
INSERT INTO `topic` VALUES ('275', '18', '3', 'test.bns.com.cn的域名是（ ）,如果要配置一域名服务器,应在（ ）文件中定义DNS数据库的工作目录', '058b5bda-62ef-4164-9980-4a8b25ffa4d9.', null, null, null, null, null, null, 'BNS.COM.CN  NAMED.CONF', '', '0', '2017-12-23 01:30:43', '8', '1');
INSERT INTO `topic` VALUES ('276', '18', '3', 'Sendmail邮件系统使用的两个主要协议是：（ ） ,前者用来发送邮件,后者用来接收邮件.', 'd0d73ad8-dd40-402c-bf13-a3a75922189d.', null, null, null, null, null, null, 'SMTP和POP', '', '0', '2017-12-23 01:31:22', '8', '1');
INSERT INTO `topic` VALUES ('277', '18', '3', ' DHCP是动态主机配置协议的简称,其作用是：（ ）', '89799282-cf7c-49f4-bb6e-7d6efe75e7cc.', null, null, null, null, null, null, '为网络中的主机分配IP地址', '', '0', '2017-12-23 01:31:40', '8', '1');
INSERT INTO `topic` VALUES ('278', '18', '3', '目前代理服务器使用的软件包有很多种,教材中使用的是（ ）', '2fffe44c-9dec-491f-9a9d-2f891b8e016f.', null, null, null, null, null, null, 'SQUID', '', '0', '2017-12-23 01:31:57', '8', '1');
INSERT INTO `topic` VALUES ('279', '18', '3', 'rm命令可删除文件或目录,其主要差别就是是否使用递归开关（ ）', '141e77bd-9ce6-468b-a188-8676a68a7905.', null, null, null, null, null, null, '-R或-R', '', '0', '2017-12-23 01:32:16', '8', '1');
INSERT INTO `topic` VALUES ('280', '18', '3', '（ ）命令可以移动文件和目录,还可以为文件和目录重新命名', 'be1dfb7b-3b05-4f28-870b-04bf1cf551af.', null, null, null, null, null, null, 'MV', '', '0', '2017-12-23 01:32:30', '8', '1');
INSERT INTO `topic` VALUES ('281', '18', '3', ' 路由选择协议（RIP）的跳数表示到达目的地之前通过的（ ）数,RIP接受的最长距离是（ ）', '5cadf89b-9bb6-4d10-b75d-b90518f4624c.', null, null, null, null, null, null, '网关  15跳', '', '0', '2017-12-23 01:33:01', '8', '1');
INSERT INTO `topic` VALUES ('282', '18', '3', '（ ）命令用于测试网络的连通性,（ ）命令通过  ICMP协议 （internet控制信息协议）来实现', '29eda443-7522-4287-bb1a-d398b3e755dd.', null, null, null, null, null, null, 'PING  PING', '', '0', '2017-12-23 01:33:41', '8', '1');
INSERT INTO `topic` VALUES ('283', '18', '3', '（ ）协议用于实现Unix（/linux）主机之间的文件系统共享', 'b2d89482-1068-417f-b580-a55e6867bfb7.', null, null, null, null, null, null, 'NFS', '', '0', '2017-12-23 01:33:56', '8', '1');
INSERT INTO `topic` VALUES ('284', '18', '3', '在Linux操作系统中,设备都是通过特殊的（ ）来访问', '38394e61-d5b5-4809-b6a9-ce082a16f67c.', null, null, null, null, null, null, '文件', '', '0', '2017-12-23 01:34:15', '8', '1');
INSERT INTO `topic` VALUES ('285', '18', '3', '（ ）不仅是用户命令的解释器 ,它同时也是一种功能强大的编程语言.（ ）是Linux的缺省shell', '41f4cc3e-310f-4d40-b90e-2444e66a08c9.', null, null, null, null, null, null, 'SHELL  BASH', '', '0', '2017-12-23 01:34:42', '8', '1');
INSERT INTO `topic` VALUES ('286', '18', '3', '用（ ）符号将输出重定向内容附加在原文的后面', '1c3c6b27-4991-404b-9624-ae6a309effb0.', null, null, null, null, null, null, '〉;〉;', '', '0', '2017-12-23 01:35:03', '8', '1');
INSERT INTO `topic` VALUES ('287', '18', '3', '增加一个用户的命令是：（ ）', 'd7f146c1-8cf9-43d5-9436-ce09d890cc58.', null, null, null, null, null, null, 'ADDUSER或USERADD', '', '0', '2017-12-23 01:35:17', '8', '1');
INSERT INTO `topic` VALUES ('288', '18', '3', '进行字符串查找,使用（ ）命令', 'f8c75997-6bb5-4e3b-a1a6-7e1a8eca78cd.', null, null, null, null, null, null, 'GREP', '', '0', '2017-12-23 01:35:32', '8', '1');
INSERT INTO `topic` VALUES ('289', '18', '3', '使用（ ）符号每次匹配若干个字符', '3bea4058-3870-4a4d-9995-9a85dad1f8cc.', null, null, null, null, null, null, '*', '', '0', '2017-12-23 01:35:57', '8', '1');
INSERT INTO `topic` VALUES ('290', '18', '3', '（ ）目录用来存放系统管理员使用的管理程序', '4d22f728-e36d-4d94-9cf8-805832450e3b.', null, null, null, null, null, null, '/SBIN', '', '0', '2017-12-23 01:36:15', '8', '1');
INSERT INTO `topic` VALUES ('291', '18', '4', '起初，Linux 是为 Intel X86 架构编写的，但是后来比其他操作系统移植的硬件平台都多，是这样吗 ？', '9e081305-9cb3-4674-8422-4cbaba564576.', null, null, null, null, null, null, '是的，我同意。LINUX那时候是为X86机器写的，而且现已移至到所有类型的平台。今天超过90%的超级计算机都在使用LINUX。LINUX在移动手机和平板电脑领域前景广阔。事实上我们被LINUX包围着，远程遥控，太空科学，研究，WEB，桌面计算等等，举之不尽。', '', '0', '2017-12-23 01:40:38', '8', '1');
INSERT INTO `topic` VALUES ('292', '18', '4', '编辑 Linux 内核合法吗?', 'b4e3c94a-727b-4a8d-a12e-add2e9e1a53f.', null, null, null, null, null, null, '合法，内核基于GPL发布，任何人都可以基于GPL允许的权限随意编辑内核。LINUX内核属于免费开源软件（FOSS）。', '', '0', '2017-12-23 01:41:04', '8', '1');
INSERT INTO `topic` VALUES ('293', '18', '4', 'UNIX和Linux操作系统，本质上的不同在哪里？', '52fafad4-a97e-4122-9d71-b04f34b69aed.', null, null, null, null, null, null, 'LINUX操作系统属于免费开源软件，内核是由 LINUS TORVALDS 和开源社区共同开发的。当然我们不能说UNIX操作系统和免费开源软件（FOSS）无关，BSD 就是基于 FOSS 范畴的 UNIX 的变种。而且大公司如 APPLE，IBM，ORACLE，HP等，都在为UNIX内核贡献代码。', '', '0', '2017-12-23 01:41:24', '8', '1');
INSERT INTO `topic` VALUES ('294', '18', '4', 'Linux 不会感染病毒吗?', 'f2c2a6d4-e7a6-4963-b121-d14cf048f7be.', null, null, null, null, null, null, '当然会! 这个地球上不存在不会感染病毒的操作系统。但是LINUX以迄今为止病毒数量少而著称，是的，甚至比UNIX还要少。LINUX榜上有名的病毒只有60-100个，而且没有一个病毒在传播蔓延。UNIX粗略估计有85-120个。', '', '0', '2017-12-23 01:41:52', '8', '1');
INSERT INTO `topic` VALUES ('295', '18', '1', 'Linux 属于哪种类型的操作系统?', 'e5498910-6efc-49a7-beb3-6cf6a38bf2ed.', '多用户', '多任务', '多线程', '以上所有', '以上都不是', '', 'D', 'Linux是一个支持多用户，可以同时运行多个进程执行多个任务的操作系统。', '0', '2017-12-23 01:42:58', '8', '1');
INSERT INTO `topic` VALUES ('296', '18', '1', '一般的 Linux 命令的语法格式是：', '40d12c65-9392-4bd6-a0af-5bd6d4888d36.', 'command [选项] [参数]', 'command 选项 [参数]', 'command [选项] [参数]', 'command 选项 参数', '', '', 'C', '', '0', '2017-12-23 01:43:36', '8', '1');
INSERT INTO `topic` VALUES ('297', '18', '1', '挑出来一个与众不同的来.', '11fadb36-2bf5-4dcb-a24a-da9dc24e24f8.', 'Vi', 'vim', 'cd', 'nano', '', '', 'C', 'cd 与其他命令不同。Vi，vim和 nano都是编辑器，用于编辑文档，而cd是用于切换目录的命令', '0', '2017-12-23 01:44:14', '8', '1');
INSERT INTO `topic` VALUES ('298', '18', '1', '下列哪项与其它的不同', '35399afa-3d56-4c17-abdb-5445f10f39c2.', 'HP-UX', 'AIX', 'OSX', 'Slackware', 'Solaris', '', 'D', 'Slackware。 HP-UX, AIX, OSX, Solaris 分别是由 HP, IBM, APPLE, Oracle 开发的，并且都是UNIX的变种. Slackware 则是一个Linux操作系统.', '0', '2017-12-23 01:45:21', '8', '1');
INSERT INTO `topic` VALUES ('299', '18', '1', 'Linus Torvalds 都创建过什么？', '1ee8df34-3b2e-4a60-86c2-6cd4ec7fbcd0.', 'Fedora', 'Slackware', 'Debian', 'Gentoo', 'Linux', '', 'E', 'Linux Torvalds 创建了Linux，Linux是所有上述操作系统的核心，同样也是其他一些Linux 操作系统的核心', '0', '2017-12-23 01:46:29', '8', '1');
INSERT INTO `topic` VALUES ('300', '18', '1', 'Linux 操作系统的核心是什么?', '5e2faf45-3c84-44aa-ab23-dac27ab0bcd4.', 'Shell', 'Kernel', 'Command', 'Script', 'Terminal', '', 'B', ' 内核(Kernel)是Linux 操作系统的核心。Shell是一个命令行解释器，命令（Command）是针对计算机的指令，脚本(Script)是存储在文件中的命令的集合，终端(Termial)是命令行接口', '0', '2017-12-23 01:47:05', '8', '1');
INSERT INTO `topic` VALUES ('311', '18', '4', '简述一下常用的开源软件有哪些？', '21be85db-9d2e-4c8a-a9e4-d45bb5194e07.', null, null, null, null, null, null, '操作系统方面：LINUX\r\nWEB服务器方面：APACHE(HTTP)\r\n动态网页方面（JSP):TOMCAT', '', '0', '2017-12-23 01:56:22', '8', '1');
INSERT INTO `topic` VALUES ('312', '18', '4', 'Linux内核版本表示方法\r\n例如：2.6.18-348.el53版本号', '97cb809f-b951-48d1-a6a5-2f1bae133291.', null, null, null, null, null, null, '2：表示主要版号\r\n6：表示次版本号 次版本好为偶数的表示稳定版，为技术的表示开发版；\r\n18：表示修订版本号\r\n348.EL53表示红帽对该版本修订了348次', '', '0', '2017-12-23 01:56:59', '8', '1');
INSERT INTO `topic` VALUES ('313', '18', '4', '/boot目录有什么作用', '58b239a4-0c82-4eac-96f3-bc8e0f9d8d0c.', null, null, null, null, null, null, '存放与系统启动相关的文件', '', '0', '2017-12-23 01:57:52', '8', '1');
INSERT INTO `topic` VALUES ('318', '18', '4', '/media目录有什么作用', '13a16478-88a6-4afb-a991-c19adf954fcd.', null, null, null, null, null, null, '这是一些设备文件经常默认的挂载点', '', '0', '2017-12-23 01:59:56', '8', '1');
INSERT INTO `topic` VALUES ('324', '18', '4', '现在有一台Linux服务器，上面的常用命令在使用的时候都提示No such file or directory，大约是什么原因？如何解决？', 'bce9aef5-9aee-44e8-90f1-f2d2962985bc.', null, null, null, null, null, null, '1.NO SUCH FILE OR DIRECTORY：没有文件或目录\r\n\r\n2.可能是在执行某条命令的时候，系统中没有你想使用的文件或者目录\r\n解决方法：LS 查看相应的目录下有没有你所想要使用的目录或这文件，如果没有重新创建即可。\r\n\r\n3.另外一个可能是语法格式的错误：仔细检查语法格式的书写是不是有误。', '', '0', '2017-12-23 02:04:47', '8', '1');
INSERT INTO `topic` VALUES ('325', '18', '4', '通配符 *  [n-m] {n,m}分别表示什么意思？', 'b37c904f-5ce8-4d3a-b3a1-d2d2c8eab9dd.', null, null, null, null, null, null, '*：表示匹配所有的文件或者目录或者内容\r\n【N-M】：表示N到M连续的数字或者字母等\r\n｛N,M}:表示只有N和M', '', '0', '2017-12-23 02:05:23', '8', '1');
INSERT INTO `topic` VALUES ('326', '18', '4', '什么是链接？如何做？', 'b36709d2-7a8d-41a1-b172-a4c0598a27a0.', null, null, null, null, null, null, '链接：其实就是相当于WINDOWS中的快捷方式，只是做了一个映射而已.其连接的作用就是为了节省磁盘空间，如果有两个相同大小的文件多次出现在磁盘的不同地方，是对磁盘的多么大的浪费，连接就是解决这种相同大小的，相同内容的文件占用磁盘空间的浪费的问题而提出的方法。\r\n硬连接：LN 要连接的文件或目录 连接后的文件或目录; 硬连接是相当于拷贝，删除原文件，连接不受影响，还可用用。\r\n软连接：LN -S 要连接的文件或目录 连接后的文件或目录；它是依靠源文件的，如果删除原文件的话，连接文件是不可用的。', '', '0', '2017-12-23 02:05:57', '8', '1');
INSERT INTO `topic` VALUES ('327', '18', '4', '查看文件内容有哪些命令？分别有什么特点？', '0367a0cb-95a5-45c7-a403-b9193ac9616b.', null, null, null, null, null, null, 'MORE:查看文件内容比较大的，只能看到内容的最后部分，翻页很不方便。\r\nLESS：查看文件内容比较大的，翻页比较方便，经常使用。\r\nCAT：查看内容比较小的。CAT -N 把行号顺便列出。', '', '0', '2017-12-23 02:06:14', '8', '1');
INSERT INTO `topic` VALUES ('328', '18', '4', '常见的Linux下面压缩包格式有哪些？分别有什么特点？目录如何压缩？', '81990bbd-1933-4517-9350-2bd82dd5e1ce.', null, null, null, null, null, null, 'ZIP:是文件的一种压缩格式，压缩后的文件后缀名为.ZIP\r\nZIP的压缩格式：ZIP 压缩以后的文件名 当前需要压缩的文件名 压缩\r\nUNZIP 要解压缩的文件 解压缩\r\nGZIP:是文件的一种压缩格式 压缩后的文件后缀名为.GZP\r\nGZIP 要压缩的文件 压缩\r\nGZIP -D 要解压缩的文件 解压缩\r\nBZIP2:是文件的一种压缩格式 压缩后的文件后缀名为.BZP2\r\nBZIP2的压缩效率要比GZIP的压缩效率高。\r\nBZIP2 要压缩的文件 压缩\r\nBZIP2 -D 要解压缩的文件 解压缩\r\nZIP解压缩的文件不会覆盖原来的文件，而GZIP和BZIP2都会覆盖原来的文件。\r\n目录压缩用：TAR命令 TAR是用来对文件目录进行打包的，它在打包的同时也可以对文件进行压缩', '', '0', '2017-12-23 02:06:34', '8', '1');
INSERT INTO `topic` VALUES ('329', '18', '4', '如何给grub加密码（明文、密文)，密文加密又分成哪几种？ ', '3b2f3503-e1ba-453c-a141-6a92b00788c3.', null, null, null, null, null, null, '明文加密 VI /ETC/GRUB.CONF\r\nHIDDENMENU下增加一行\r\nPASSWORD=123456\r\n保存退出，重启系统进入菜单选择，按P输入密码才可以编辑；\r\n\r\n密文加密分MD5加密和SHA加密\r\nMD5加密命令为：GRUB-MD5-CRYPT\r\n输入密码，生成一串加密后的密码，复制密码\r\nVI  /ETC/GRUB.CONF\r\nPASSWORD --MD5 粘贴密码\r\n保存退出，重启系统进入菜单，按P输入密码；\r\n\r\nSHA加密命令：GRUB-CRYPT --SHA-256\r\n输入密码，生成一串密码，复制密码\r\n编辑/ETC/GRUB.CONF\r\nPASSWORD --ENCRYPTED 粘贴密码，\r\n保存退出，重启进入系统，按P输入密码；', '', '0', '2017-12-23 02:07:53', '8', '1');
INSERT INTO `topic` VALUES ('330', '18', '4', '如何查看系统版本', '45f21434-f23c-4980-9260-00e3e9ed1020.', null, null, null, null, null, null, 'CAT /ETC/CENTOS-RELEASE\r\nCAT /ETC/ISSUE\r\nRPM -QA | GREP RELEASE', '', '0', '2017-12-23 02:08:25', '8', '1');
INSERT INTO `topic` VALUES ('331', '18', '4', 'find 找出 当前目录下的 目录和普通文件？ 找出当前目录下10天没有改变，大小大于4K的普通文件或目录', '80b6a0a4-f7cc-4b22-8496-716413a7277d.', null, null, null, null, null, null, 'FIND ./ -TYPE D  -O -TYPE F\r\nFIND ./ -TYPE D -O -TYPE F -SIZE +4K ! -MTIME -10', '', '0', '2017-12-23 02:08:51', '8', '1');
INSERT INTO `topic` VALUES ('332', '18', '4', '在当前目录下创建一个名字为1的目录 的命令？  创建级联目录 ./2/3/的命令？ 一条命令创建级联目录 ./1/2/3和./1/2/4?', '6e61e7de-8ab7-4858-aec7-0e27bcdc9504.', null, null, null, null, null, null, 'MKDIR ./1\r\nMKDIR -P ./2/3\r\nMKDIR -P ./1/2/{3,4}', '', '0', '2017-12-23 02:09:04', '8', '1');
INSERT INTO `topic` VALUES ('333', '18', '1', '在创建Linux分区时，一定要创建（ ）两个分区', '3654deee-0093-497c-8d16-6890f7825cf4.', 'FAT/NTFS ', 'FAT/SWAP ', 'NTFS/SWAP', 'SWAP/根分区', '', '', 'D', '', '0', '2017-12-23 02:11:47', '8', '1');
INSERT INTO `topic` VALUES ('334', '18', '1', '在Red Hat Linux 9，系统默认的（ ）用户对整个系统拥有完全的控制权', 'c2dd95c1-6f5b-4814-b62b-fcd43989f783.', 'root', 'guest', 'admin', 'administrator', '', '', 'A', '答错了就别学了，回家洗洗睡吧', '0', '2017-12-23 02:13:19', '8', '1');
INSERT INTO `topic` VALUES ('2691', '3', '4', '请说出异常和错误的分类以及每种分类的特点', '78f5f841-4336-4c46-b6c1-bddf9f78a54c.', null, null, null, null, null, null, '运行时异常  ：不要求程序必须做出处理 \r\n	非运行时异常：程序必须处理该类异常\r\n	ERROR：仅靠程序本身无法恢复的严重错误 ', '', '0', '2017-12-25 15:21:33', '56', '1');
INSERT INTO `topic` VALUES ('2692', '33', '4', 'log4j 中各种7个符号的含义', '588c12d3-0054-4455-a547-810ea7a1a5a1.', null, null, null, null, null, null, '%D	设置输出日志的日期时间\r\n	%M	输出代码中的指定的信息\r\n	%N	输出一个回车换行符\r\n	%L	输出日志文件的位置，包括名、发生的线程，以及在代码中的行数\r\n	%P	输出优先级\r\n	%F	输出文件名\r\n	%M	输出方法名', '', '0', '2017-12-25 15:21:52', '56', '1');
INSERT INTO `topic` VALUES ('2693', '33', '4', 'log4j中 日志记录器输出级别', 'e50c32dc-c142-408e-9509-112550bd2a0c.', null, null, null, null, null, null, 'FATAL > ERROR > WARN > INFO >DEBUG', '', '0', '2017-12-25 15:22:05', '56', '1');
INSERT INTO `topic` VALUES ('2694', '3', '4', 'Java集合框架包含的内容', '6abff48e-d7b1-4cf7-acaa-b34e77915b31.', null, null, null, null, null, null, 'COLLECTION 接口存储一组不唯一，无序的对象\r\n	LIST 接口存储一组不唯一，有序（插入顺序）的对象\r\n	SET 接口存储一组唯一，无序的对象 \r\n	MAP接口存储一组键值对象，提供KEY到VALUE的映射 \r\n', '', '0', '2017-12-25 15:22:21', '56', '1');
INSERT INTO `topic` VALUES ('2695', '26', '4', '集合框架有何好处？ ', 'e2648b45-194a-42bd-bb19-a0975dab7b5f.', null, null, null, null, null, null, '集合弥补了数组的缺陷，他比数组更灵活更实用，可大大提高软件的开发效率，而且不同的集合可使用与不同场合', '', '0', '2017-12-25 15:22:32', '56', '1');
INSERT INTO `topic` VALUES ('2696', '3', '4', 'LinkedList和ArrayList有何异同？', 'bc19342b-6fa8-47b7-afe1-48f6093f8617.', null, null, null, null, null, null, 'ARRAYLIST实现了长度可变的数组，在内存中分配连续的空间。遍历元素和随机访问元素的效率比较高\r\n	LINKEDLIST采用链表存储方式。插入、删除元素时效率比较高', '', '0', '2017-12-25 15:22:58', '56', '1');
INSERT INTO `topic` VALUES ('2697', '3', '4', '泛型集合的好处', 'a736b4d8-7c2e-4857-8146-1406c6866ba2.', null, null, null, null, null, null, '严格限制存入元素的数据类型，从集合中取出元素时无需进行强制类型转换，避免了CLASSCASTEXCEPTION异常。', '', '0', '2017-12-25 15:23:17', '56', '1');
INSERT INTO `topic` VALUES ('2698', '5', '4', 'javascript弹出确认框的函数', '804b64c8-6eca-46b5-ab43-4d5efff8144a.', null, null, null, null, null, null, 'TEXT框输入完成后，按回车键跳到下一个TEXT框 .服务器端删除提示的消息框如何写', '', '0', '2017-12-25 15:23:37', '57', '1');
INSERT INTO `topic` VALUES ('2699', '3', '4', 'java中8个包装类', '44ead2b8-06e5-4d1d-8c70-6ef539c72376.', null, null, null, null, null, null, 'BYTE	 SHORT	 INTEGER	 LONG 	FLOAT	 DOUBLE	 BOOLEAN	CHARACTER  ', '', '0', '2017-12-25 15:23:39', '56', '1');
INSERT INTO `topic` VALUES ('2700', '5', '4', 'table标签中border,cellpadding；td标签中colspan,rowspan分别起什么作用？', 'c3c2d66c-9f14-4f9d-af77-d42b273d2984.', null, null, null, null, null, null, 'BORDER边界       CELLPADDING边距      COLSPAN跨列数      ROWSPAN跨行数 ', '', '0', '2017-12-25 15:23:52', '57', '1');
INSERT INTO `topic` VALUES ('2701', '3', '4', '数组和集合的区别', 'ac4b680c-e9ca-4cb7-8d3e-8dc9a5f72069.', null, null, null, null, null, null, '1、数组长度固定，集合长度可以动态改变\r\n	2、定义数组时必须指定元素类型，集合默认所有元素都是OBJECT\r\n	3、无法直接获取数组中实际元素的个数，集合可以通过SIZE()直接获取元素个数	\r\n	4、集合有多种实现方式和不同的适合场合，而不像数组仅采用分配连续空间方式。\r\n	5、集合以接口，类的形式存在，具有面向对象的三大特征，提高了软件的开发效率', '', '0', '2017-12-25 15:23:54', '56', '1');
INSERT INTO `topic` VALUES ('2702', '5', '4', 'form中的input可以设置readonly和disable，请问这两项属性有什么区别？', 'b76388e5-c2bb-4c0b-8535-1b6fd164ae61.', null, null, null, null, null, null, 'READONLY不可编辑,但可以选择和复制      DISABLE不能编辑复制选择', '', '0', '2017-12-25 15:24:04', '57', '1');
INSERT INTO `topic` VALUES ('2703', '3', '4', 'Hashtable和HashMap的异同', '70bb9822-7407-4ca9-9194-a428ba48fab6.', null, null, null, null, null, null, '实现原理、功能相同，可以互用\r\n	主要区别\r\n		HASHTABLE继承DICTIONARY类，HASHMAP实现MAP接口\r\n		HASHTABLE线程安全，HASHMAP线程非安全\r\n		HASHTABLE不允许NULL值，HASHMAP允许NULL值', '', '0', '2017-12-25 15:24:11', '56', '1');
INSERT INTO `topic` VALUES ('2704', '5', '4', 'JS中的三种弹出式消息提醒(警告窗口、确认窗口、信息输入窗口)的命令是什么？', '4e5d3034-a518-48e8-8d29-4a058c257bc9.', null, null, null, null, null, null, '警告窗口：ALERT    确认窗口： CONFIRM    信息输入窗口： PROMPT ', '', '0', '2017-12-25 15:24:20', '57', '1');
INSERT INTO `topic` VALUES ('2705', '3', '4', '接口的特性', 'd72c997c-5895-4065-ba04-211e824b0e80.', null, null, null, null, null, null, '接口不可以被实例化   ---常作为类型使用\r\n	实现类必须实现接口的所有方法\r\n	实现类可以实现多个接口   ---JAVA中的多继承\r\n	接口中的变量都是静态常量\r\n	接口中不能有构造方法\r\n	接口可以继承多个接口', '', '0', '2017-12-25 15:24:25', '56', '1');
INSERT INTO `topic` VALUES ('2706', '3', '4', '什么是接口', '150b5e9e-8071-4dfb-8222-0c04774e9a0c.', null, null, null, null, null, null, '接口是一种标准\r\n	接口是一种规范（体现在接口的方法名称和注释上）', '', '0', '2017-12-25 15:24:37', '56', '1');
INSERT INTO `topic` VALUES ('2707', '3', '4', '如何理解接口是一种能力？', '8d9a6d7f-ab9d-4959-bb5f-a594fbb08d4d.', null, null, null, null, null, null, '接口有比抽象类更好的特性：\r\n	1.可以被多继承\r\n	2.设计和实现完全分离\r\n	3.更自然的使用多态\r\n	4.更容易搭建程序框架\r\n	5.更容易更换实现', '', '0', '2017-12-25 15:24:48', '56', '1');
INSERT INTO `topic` VALUES ('2708', '3', '4', '面向接口编程中在程序设计时如何做', 'a803d7af-8880-4427-b432-b51b941e7463.', null, null, null, null, null, null, '关心实现类有何能力，而不关心实现细节 \r\n	面向接口的约定而不考虑接口的具体实现 \r\n', '', '0', '2017-12-25 15:25:04', '56', '1');
INSERT INTO `topic` VALUES ('2709', '5', '4', '说几条XHTML规范的内容（至少3条）', 'abb7cb25-8f21-4d24-b3b9-543253c6b1a2.', null, null, null, null, null, null, '属性加引号，不能有不匹配的标签，加定义 ', '', '0', '2017-12-25 15:25:05', '57', '1');
INSERT INTO `topic` VALUES ('2710', '3', '4', '如何判断是写抽象类还是写接口', '7a226d08-20ad-4cc6-b9f5-244b2e6bc70e.', null, null, null, null, null, null, '满足IS A 的关系就写抽象类\r\n	满足HAS A的关系就写接口', '', '0', '2017-12-25 15:25:24', '56', '1');
INSERT INTO `topic` VALUES ('2711', '3', '4', '面向对象设计的步骤？', '6f7a8653-3927-4a86-8108-b9402b3dbca9.', null, null, null, null, null, null, '发现类\r\n	发现类的属性\r\n	发现类的方法', '', '0', '2017-12-25 15:25:35', '56', '1');
INSERT INTO `topic` VALUES ('2712', '3', '4', '构造方法的作用和特点是什么？', '5806243c-e77d-4de2-8cde-2a7a3d25c122.', null, null, null, null, null, null, '作用：\r\n		完成类的初始化\r\n	特点：\r\n		与类同名，没有返回类型\r\n		可以重载\r\n		完成类的初始化工作（给属性赋值）\r\n		每个类默认都有一个无参构造方法', '', '0', '2017-12-25 15:25:48', '56', '1');
INSERT INTO `topic` VALUES ('2713', '5', '1', '以下哪个单词不属于 javascript保留字：（', '13bae37a-05e2-4928-ac7d-a793beabdb7f.', 'with ', 'parent ', 'class ', 'void', '', '', 'B', '', '0', '2017-12-25 15:25:53', '57', '1');
INSERT INTO `topic` VALUES ('2714', '3', '4', '抽象的原则是什么？', 'fb4df2ae-76cd-40f4-a9ea-4793cebba5c6.', null, null, null, null, null, null, '只写业务相关的属性和方法', '', '0', '2017-12-25 15:25:59', '56', '1');
INSERT INTO `topic` VALUES ('2715', '32', '4', '为什么说类图是面向对象设计的好工具？', '7fa9fb7d-989a-42b4-9b3c-6ae4386a8e33.', null, null, null, null, null, null, '作用：用于分析和设计类\r\n	好处：直观，容易理解', '', '0', '2017-12-25 15:26:14', '56', '1');
INSERT INTO `topic` VALUES ('2716', '5', '1', '在不指定特殊属性的情况下，哪几种HTML标签可以手动输入文本：（） ', '12abb552-7bf4-40b2-9d7a-c9d880f15f73.', '<TEXTAREA></TEXTAREA> ', '<INPUT type=”text”/> ', '<INPUT type=”hidden”/> \r\n', '<DIV></DIV> ', '', '', 'AB', '', '0', '2017-12-25 15:26:26', '57', '1');
INSERT INTO `topic` VALUES ('2717', '3', '4', 'static修饰与非static修饰的区别', 'aa3749d5-adc9-4673-a1e4-1330077f0d7c.', null, null, null, null, null, null, 'STATIC修饰\r\n	属性	    类属性、类变量\r\n	方法	    类方法\r\n	调用方式	    类名.属性  类名.方法()    对象.属性   对象.方法()\r\n	归属	    类\r\n	非STATIC修饰\r\n	属性	    实例属性、实例变量\r\n	方法	    实例方法\r\n	调用方式	    对象.属性    对象.方法()\r\n	归属	    单个对象', '', '0', '2017-12-25 15:26:30', '56', '1');
INSERT INTO `topic` VALUES ('2718', '3', '4', '封装的概念', '487a4840-8d57-40ed-90c4-28145717b789.', null, null, null, null, null, null, '将类的某些信息隐藏在类内部，不允许外部程序直接访问，而是通过该类提供的方法来实现对隐藏信息的操作和访问 ', '', '0', '2017-12-25 15:26:47', '56', '1');
INSERT INTO `topic` VALUES ('2719', '3', '4', '封装的好处', '4c25d229-b5fa-4935-abc3-6fe6778ed90d.', null, null, null, null, null, null, '隐藏类的实现细节\r\n	方便加入控制语句\r\n	方便修改实现\r\n	只能通过规定方法访问数据', '', '0', '2017-12-25 15:27:14', '56', '1');
INSERT INTO `topic` VALUES ('2720', '3', '4', '封装的步骤', 'eb4109dd-8994-438b-b3d7-9ab89cf4a021.', null, null, null, null, null, null, '修改属性的可见性\r\n	创建公有的GETTER/SETTER方法\r\n	在GETTER/SETTER方法中加入属性控制语句', '', '0', '2017-12-25 15:27:28', '56', '1');
INSERT INTO `topic` VALUES ('2721', '5', '4', '如何理解javascript中的variabletyping，试用代码说明）', '9246eb30-8f01-4e65-93a4-3ba95a3152b8.', null, null, null, null, null, null, 'JS的基本数据类型:NUMBER（数字类型）,STRING（字符串）,BOOLEAN（布尔类型TRUE/FALSE）//NULL（空类型只有一个值NULL）在使用TYPEOF测试类型时，返回OBJECT。//UNDEFINE（未定义类型）未定义类型只有一个值UNDERFINE', '', '0', '2017-12-25 15:27:34', '57', '1');
INSERT INTO `topic` VALUES ('2722', '3', '4', 'this关键字的用法', '1b2c2cd9-e4c2-4889-9237-a9305d11c4e7.', null, null, null, null, null, null, '区别同名的成员变量和局部变量\r\n	调用当前类的属性和方法\r\n	调用当前类的构造方法（必须是第一条非注释性语句）', '', '0', '2017-12-25 15:27:44', '56', '1');
INSERT INTO `topic` VALUES ('2723', '5', '4', '“10”==10是否为真，“10”===10是否为真？0.1+0.2==0.3是否为真？1+2==3是否为真？', 'c2dbb317-175f-4027-a8d4-369aa526447e.', null, null, null, null, null, null, 'ALERT(\"10\"==10);//真ALERT(\"10\"===10);//假ALERT(0.1+0.2);//0.300000004ALERT(0.1+0.2==0.3);//假ALERT(1+2==3);//真', '', '0', '2017-12-25 15:27:47', '57', '1');
INSERT INTO `topic` VALUES ('2724', '3', '4', '如何继承一个类', '47af6b98-dee5-4691-80e2-7bc69bc42d8b.', null, null, null, null, null, null, '使用EXTENDS关键字', '', '0', '2017-12-25 15:27:55', '56', '1');
INSERT INTO `topic` VALUES ('2725', '5', '4', '如何理解javascript中的对象', 'e7d61eec-1fce-4ff1-8f01-cd031ad7fe4d.', null, null, null, null, null, null, 'JAVASCRIPT中的所有事物都是对象：字符串、数值、数组、函数...用FUNCTION定义', '', '0', '2017-12-25 15:28:02', '57', '1');
INSERT INTO `topic` VALUES ('2726', '3', '4', '使用继承有什么好处', '7281412d-0800-44fc-a51a-bb61600694ff.', null, null, null, null, null, null, '减少代码冗余', '', '0', '2017-12-25 15:28:06', '56', '1');
INSERT INTO `topic` VALUES ('2727', '3', '4', '抽象类和抽象方法的特点', '0ce2f28e-2175-4554-9f36-1c7f369a0527.', null, null, null, null, null, null, '抽象类\r\n		抽象类不能被实例化\r\n		抽象类可以有0~多个抽象方法\r\n		非抽象子类必须重写父类的所有抽象方法\r\n	抽象方法\r\n		抽象方法没有方法体\r\n		抽象方法必须在抽象类里\r\n		抽象方法必须在子类中被实现，除非子类是抽象类', '', '0', '2017-12-25 15:28:26', '56', '1');
INSERT INTO `topic` VALUES ('2728', '3', '4', 'super关键字的用法', '7c6bd38d-ee91-43cf-85e7-fdbbb6040ccc.', null, null, null, null, null, null, '调用父类的属性、方法、构造方法\r\n	SUPER只能出现在子类的方法和构造方法中\r\n	SUPER调用构造方法时，只能是第一句\r\n	SUPER不能访问父类的PRIVATE成员', '', '0', '2017-12-25 15:28:41', '56', '1');
INSERT INTO `topic` VALUES ('2730', '3', '4', '四种访问修饰符的权限', 'd383e2e7-9cf3-435c-9f05-686a140ef027.', null, null, null, null, null, null, '访问修饰符	本类	同包	子类    其他\r\nPRIVATE		√			\r\n默认(FRIENDLY)	√	√		\r\nPROTECTED		√	√	√	\r\nPUBLIC		√	√	√	√', '', '0', '2017-12-25 15:29:08', '56', '1');
INSERT INTO `topic` VALUES ('2731', '3', '4', '方法重写的规则', 'f4ea1bdd-9669-44e6-8eba-31b7b69bb477.', null, null, null, null, null, null, '方法名相同\r\n	参数列表相同\r\n	返回值类型相同或者是其子类\r\n	访问权限不能严于父类', '', '0', '2017-12-25 15:29:25', '56', '1');
INSERT INTO `topic` VALUES ('2732', '3', '4', 'overload和override的区别', '0ac1910a-5a66-40e0-9e16-0d79bffdf720.', null, null, null, null, null, null, 'OVERLOAD：重载\r\n	OVERRIDE：重写', '', '0', '2017-12-25 15:29:38', '56', '1');
INSERT INTO `topic` VALUES ('2733', '3', '4', 'final修饰符', '1b9d3aca-d9f5-4529-909c-95ff0fb772e2.', null, null, null, null, null, null, '修饰常量，声明时必须赋值\r\n	修饰类，此类不能被继承\r\n	修饰方法，方法不能被重写\r\n	修饰属性，属性不能被赋值。', '', '0', '2017-12-25 15:29:49', '56', '1');
INSERT INTO `topic` VALUES ('2734', '3', '4', '使用多态的实现思路', '9ab63e12-d79a-4d82-90b8-4a1a589a6903.', null, null, null, null, null, null, '编写具有继承关系的父类和子类\r\n	子类重写父类方法\r\n	使用父类的引用指向子类的对象\r\n', '', '0', '2017-12-25 15:30:04', '56', '1');
INSERT INTO `topic` VALUES ('2735', '3', '4', '实现多态的三个要素', '3fac3ec3-ff2b-48de-a632-8826f47d2621.', null, null, null, null, null, null, '具有继承关系\r\n	子类重写父类方法\r\n	父类的引用指向子类的对象\r\n', '', '0', '2017-12-25 15:30:17', '56', '1');
INSERT INTO `topic` VALUES ('2736', '3', '4', '实现多态的两种形式', '9c7a372e-5b62-4400-b196-3a1b042562d6.', null, null, null, null, null, null, '使用父类作为方法形参实现多态\r\n使用父类作为方法返回值实现多态', '', '0', '2017-12-25 15:30:37', '56', '1');
INSERT INTO `topic` VALUES ('2737', '3', '4', '解释一下向上转型', '2bae5755-af5d-4d0f-bf68-7ddacdf8b089.', null, null, null, null, null, null, '子类转换为父类，自动进行类型转换', '', '0', '2017-12-25 15:30:50', '56', '1');
INSERT INTO `topic` VALUES ('2738', '3', '4', '解释一下向下转型和需要配合使用的运算符', '87e8dd7e-0b7d-426d-a855-fac39b7adfd3.', null, null, null, null, null, null, '父类转换为子类，结合INSTANCEOF运算符进行强制类型转换', '', '0', '2017-12-25 15:31:02', '56', '1');
INSERT INTO `topic` VALUES ('2739', '3', '4', '什么是重载', '32d0f695-92ac-42ac-90de-f50790955f28.', null, null, null, null, null, null, '在同一类中方法同名（方法名相同）不同参（参数个数，类型不同），与返回类型无关。\r\n	什么时候用重载：功能相同或类似\r\n        好处：方便记忆和调用', '', '0', '2017-12-25 15:31:12', '56', '1');
INSERT INTO `topic` VALUES ('2740', '3', '4', '重写是什么?', '92998db1-47e3-4972-bf0c-d2dab5025150.', null, null, null, null, null, null, '方法名相同\r\n	参数列表相同\r\n	返回值类型相同或者是其子类\r\n	访问权限不能严于父类', '', '0', '2017-12-25 15:31:41', '56', '1');
INSERT INTO `topic` VALUES ('2741', '3', '4', '面向对象三大特征的各自作用', '9802a5c4-a217-4e09-9339-015e7a77ceed.', null, null, null, null, null, null, '封装：创建不同的类来隐藏内部细节\r\n	继承：优化这些类，减少代码冗余\r\n	多态：使用优化后的类。', '', '0', '2017-12-25 15:31:54', '56', '1');
INSERT INTO `topic` VALUES ('2742', '3', '4', '什么是流', '1c85628f-2fb1-4195-835d-5527ddf28cf2.', null, null, null, null, null, null, '流是指一连串流动的字符,是以先进先出方式发送信息的通道', '', '0', '2017-12-25 15:32:19', '56', '1');
INSERT INTO `topic` VALUES ('2743', '3', '4', '什么是输入流', '2f23df35-e59e-4bbe-bdd1-48e3eef2038a.', null, null, null, null, null, null, '从文件读入到程序(内存)中      \r\n	特点：只能读不能写', '', '0', '2017-12-25 15:32:32', '56', '1');
INSERT INTO `topic` VALUES ('2744', '3', '4', '字符流和字节流的用途', 'e6fc9199-34e3-45a0-8a4b-ca544c7f5f18.', null, null, null, null, null, null, '字符流可以读取任何文本信息\r\n	字节流可以读取任何类型的文件信息', '', '0', '2017-12-25 15:32:58', '56', '1');
INSERT INTO `topic` VALUES ('2745', '3', '4', '列举5个常用的File 类方法', '6059548d-b063-4831-9344-45dc78504c90.', null, null, null, null, null, null, 'BOOLEAN DELETE() \r\n		删除此路径名表示的文件或目录。 \r\n 	BOOLEAN EXISTS() \r\n		测试此路径名表示的文件或目录是否存在。 \r\n 	STRING GETNAME() \r\n		返回由此路径名表示的文件或目录的名称。 \r\n 	LONG LENGTH()\r\n		返回由此路径名表示的文件的长度。 \r\n 	BOOLEAN MKDIR() \r\n		创建此路径名指定的目录。 \r\n 	BOOLEAN MKDIRS() \r\n		创建此路径名指定的目录，包括创建必需但不存在的父目录。', '', '0', '2017-12-25 15:33:20', '56', '1');
INSERT INTO `topic` VALUES ('2746', '26', '1', 'ewr', '756f5589-48b1-4917-a3d8-0869d73d3145.exe', 'ew', 'ew', 'ew', 'w', 'erw', '额', '二', '温柔', '0', '2017-12-25 15:33:25', '56', '1');
INSERT INTO `topic` VALUES ('2747', '26', '1', '下面哪种不是jquery的选择器？(单选) ', 'c7f230a2-5d6c-4249-afa1-1f3583a62106.', '基本选择器', '后代选择器', '类选择器', '进一步选择器', '', '', 'C', '', '0', '2017-12-25 15:33:36', '57', '1');
INSERT INTO `topic` VALUES ('2748', '3', '4', '什么是线程', 'b50a624e-05f6-49a4-b5f5-fbe22dcc64fa.', null, null, null, null, null, null, '线程是程序执行流的最小单元，一个标准的线程由线程ID ,当前指令指针，寄存器集合和堆栈组成。\r\n	另外，线程是进程中的一个实体，是被系统独立调度和分派的基本单位，现成自己不拥有系统资源，\r\n	只拥有一点在运行中必不可少的资源，但他可与同属一个进程的其他线程共享进程所拥有的全部资源。', '', '0', '2017-12-25 15:33:36', '56', '1');
INSERT INTO `topic` VALUES ('2750', '26', '1', '当DOM加载完成后要执行的函数，下面哪个是正确的？(单选) ', 'f8956936-e599-454d-9891-752bdba19f0f.', 'jQuery(expression, [context])', 'jQuery(html, [ownerDocument]) ', 'jQuery(callback)', 'jQuery(elements)', '', '', 'C', '', '0', '2017-12-25 15:34:05', '57', '1');
INSERT INTO `topic` VALUES ('2751', '3', '4', '多线程好处', 'cc6b7f39-ebe2-485c-9128-2393df4f3048.', null, null, null, null, null, null, '充分利用CPU的资源\r\n	简化编程模型\r\n	带来良好的用户体验', '', '0', '2017-12-25 15:34:12', '56', '1');
INSERT INTO `topic` VALUES ('2752', '3', '4', '主线程是什么?', 'ce7f1cbc-c2e0-4ab6-af03-580fe526ffa8.', null, null, null, null, null, null, 'MAIN()方法即为主线程入口\r\n	产生其他子线程的线程\r\n	必须最后完成执行，因为它执行各种关闭动作', '', '0', '2017-12-25 15:34:37', '56', '1');
INSERT INTO `topic` VALUES ('2753', '26', '1', '下面哪一个是用来追加到指定元素的末尾的？(单选)', '47cf8d0c-448d-4d5e-b931-4c5c30b05750.', 'insertAfter()', 'append()', 'appendTo()', 'after()', '', '', 'C', '', '0', '2017-12-25 15:34:38', '57', '1');
INSERT INTO `topic` VALUES ('2754', '3', '4', '在Java中创建线程的两种方式', '9895f347-7f30-4e7e-a217-a7c5ab490093.', null, null, null, null, null, null, '继承JAVA.LANG.THREAD类\r\n	实现JAVA.LANG.RUNNABLE接口', '', '0', '2017-12-25 15:35:01', '56', '1');
INSERT INTO `topic` VALUES ('2755', '5', '1', '有这样一个表单元素  ，想要找到这个hidden元素，下面哪个是正确的？(单选) ', '4f10ed47-7376-424b-8fc3-a9b8f6e35f6a.', 'visible ', 'hidden ', 'visible', 'hidden', '', '', 'B', '', '0', '2017-12-25 15:35:06', '57', '1');
INSERT INTO `topic` VALUES ('2756', '3', '4', '比较两种创建线程的方式', 'a7f6a02c-4044-4215-b97f-b45996bb7ede.', null, null, null, null, null, null, '继承THREAD类\r\n		编写简单，可直接操作线程\r\n		适用于单继承\r\n	实现RUNNABLE接口--推荐使用\r\n		避免单继承局限性\r\n		便于共享资源', '', '0', '2017-12-25 15:35:11', '56', '1');
INSERT INTO `topic` VALUES ('2757', '3', '4', '线程对象调用start()方法和调用run()方法的区别？', '98e0fc57-82f2-47cb-9f1a-66a735eabba7.', null, null, null, null, null, null, 'RUN():只有主线程一条执行路径\r\n	START():多条执行路径，主线程和子线程并行交替执行', '', '0', '2017-12-25 15:35:22', '56', '1');
INSERT INTO `topic` VALUES ('2758', '32', '4', '试述SQL语言的功能。', '40e33413-724d-4efa-a0ba-554d94681363.', null, null, null, null, null, null, 'SQL语言是一种数据库查询和程序设计语言，用于存取数据以及查询更新和管理关系数据库系统。', '', '0', '2017-12-25 15:35:28', '67', '1');
INSERT INTO `topic` VALUES ('2759', '3', '4', '请简述线程的五个状态？', '46ae2b13-a93c-49c7-8d81-15c596733d3c.', null, null, null, null, null, null, '创建状态\r\n	就绪状态\r\n	运行状态\r\n	阻塞状态\r\n	死亡状态', '', '0', '2017-12-25 15:35:32', '56', '1');
INSERT INTO `topic` VALUES ('2760', '5', '1', '如果需要匹配包含文本的元素，用下面哪种来实现？(单选)', '2f17d7a5-c716-46f2-8cd5-fd3294a8ac9f.', 'text()', 'contains()', 'input()', 'attr(name)', '', '', 'B', '', '0', '2017-12-25 15:35:40', '57', '1');
INSERT INTO `topic` VALUES ('2761', '3', '4', '什么是线程优先级，它在线程调度中的作用？', '2fadd0bf-a5b5-4895-8c1b-7a2b2acf39fc.', null, null, null, null, null, null, '	线程优先级由1~10表示，1最低，默认优先级为5\r\n	优先级高的线程获得CPU资源的概率较大\r\n', '', '0', '2017-12-25 15:35:51', '56', '1');
INSERT INTO `topic` VALUES ('2762', '3', '4', 'join()方法、yield()、sleep()方法的区别是什么？', 'e869f2ec-7831-42d6-a9b0-09e8be68e090.', null, null, null, null, null, null, 'JOIN():  线程的强制运行  --使当前线程暂停执行，等待其他线程结束后再继续执行本线程\r\n	YIELD(): 线程的礼让      --暂停当前线程，允许其他具有相同优先级的线程获得运行机会该线程处于就绪状态，不转为阻塞状态\r\n	SLEEP()：线程的休眠      --让线程暂时睡眠指定时长，线程进入阻塞状态，睡眠时间过后线程会再进入可运行状态', '', '0', '2017-12-25 15:36:08', '56', '1');
INSERT INTO `topic` VALUES ('2763', '3', '4', '为什么要进行线程同步？', 'd974068d-994e-40b1-8d09-b527559b43ec.', null, null, null, null, null, null, '多个线程操作同一共享资源时，将引发数据不安全问题', '', '0', '2017-12-25 15:36:23', '56', '1');
INSERT INTO `topic` VALUES ('2764', '26', '1', '如果想要找到一个表格的指定行数的元素，用下面哪个方法可以快速找到指定元素？(单选) ', '8583288a-fb4a-4e10-a93f-cb9a04f82282.', 'text()', 'get()', 'eq()', 'contents()', '', '', 'C', '', '0', '2017-12-25 15:36:23', '57', '1');
INSERT INTO `topic` VALUES ('2765', '3', '4', '线程同步有哪几种方式？', '1df91ad4-1aea-4977-b046-b371859b4130.', null, null, null, null, null, null, '同步代码块\r\n	同步方法', '', '0', '2017-12-25 15:36:34', '56', '1');
INSERT INTO `topic` VALUES ('2766', '3', '4', '多个并发线程访问同一资源的同步代码块时', '80784390-c3be-4b2b-bfb8-d67bd9fb1cc4.', null, null, null, null, null, null, '	同一时刻只能有一个线程进入SYNCHRONIZED（THIS）同步代码块，\r\n	其他同步代码块同样被锁定，其他线程可以访问该资源的非同步代码块', '', '0', '2017-12-25 15:36:46', '56', '1');
INSERT INTO `topic` VALUES ('2767', '32', '4', '简述Where子句与Having子句的区别。', 'b3e7eb0a-2e78-40c4-8a35-af50078300ef.', null, null, null, null, null, null, 'HAVING是筛选组，而WHERE是筛选记录，分组筛选的时候应HAVING；其它情况用WHERE，视图定义以及基本表区别。', '', '0', '2017-12-25 15:36:47', '67', '1');
INSERT INTO `topic` VALUES ('2768', '5', '1', '下面哪几个不是属于jquery的事件处理? (多选', 'af759528-ea36-4f8b-aa02-b941ac506f7f.', 'bind(type)', 'click()', 'change() ', 'one(type)', '', '', 'BC', '', '0', '2017-12-25 15:37:06', '57', '1');
INSERT INTO `topic` VALUES ('2769', '32', '4', '设计数据库与软件项目开发各阶段关系', '6d173d56-1cf0-4fb2-a638-b62acc1feff6.', null, null, null, null, null, null, '现实世界>建模>信息世界(E-R图)>规范化>数据库模型图>构建>数据库', '', '0', '2017-12-25 15:37:09', '56', '1');
INSERT INTO `topic` VALUES ('2770', '32', '4', '软件项目开发周期步骤', '14de7979-3337-4bb1-bf00-e101ffadcdc9.', null, null, null, null, null, null, '	1.需求分析阶段：分析客户的业务和数据处理需求\r\n	2.概要设计阶段：设计数据库的E-R模型图，确认需求信息的正确和完整\r\n	3.详细设计阶段：应用三大范式审核数据库结构\r\n	4.代码编写阶段：物理实现数据库，编码实现应用\r\n	5.软件测试阶段：……\r\n	6.安装部署：……', '', '0', '2017-12-25 15:37:22', '56', '1');
INSERT INTO `topic` VALUES ('2771', '32', '4', '简述视图的定义以及与基本表的区别。', 'b3c66b49-cad2-4e8b-b13e-6e19ba0c1096.', null, null, null, null, null, null, '视图是一个或几个基本表（或试图）导出的表。他与基本表不同，是一个虚表，可以和基本表一样能被查询，被删除，但对试图的增、删、改操作则有一定限制。', '', '0', '2017-12-25 15:37:32', '67', '1');
INSERT INTO `topic` VALUES ('2772', '3', '4', '设计数据库步骤', '8483d9ec-7254-4983-b919-67b28a7dcec4.', null, null, null, null, null, null, '	1.收集信息：*与该系统有关人员进行交流、座谈，充分了解用户需求，理解数据库需要完成的任务\r\n	2.标识实体（ENTITY）：*标识数据库要管理的关键对象或实体，实体一般是名词\r\n	3.标识每个实体的属性（ATTRIBUTE）\r\n	4.标识实体之间的关系（RELATIONSHIP）', '', '0', '2017-12-25 15:37:35', '56', '1');
INSERT INTO `topic` VALUES ('2773', '32', '4', '实体与实体之间关系（映射基数）', '38efc06d-7d20-4d20-a090-8630f023c4a8.', null, null, null, null, null, null, '	一对一：（类似班长和班级的关系），*一个班级有一个班长，同时一个班长也只能管理一个班级。\r\n 	一对多：（类似班长和学生的关系），*多个学生被一个班长管理，同时一个班长可以管理多个学生。\r\n 	多对多：（类似课程和学生的关系），*一个学生可以学多个课程，同时，一个课程可以被多个学生学习。通常情况下借助第三张表体现关系。', '', '0', '2017-12-25 15:37:51', '56', '1');
INSERT INTO `topic` VALUES ('2774', '5', '1', '\r\n在一个表单中，如果想要给输入框添加一个输入验证，可以用下面的哪个事件实现？ (单选', 'dcaf9c83-fb5c-43fe-8708-438001ddc530.', 'hover(over ,out)', 'keypress（fn)', 'change()', 'change(fn)', '', '', 'D', '', '0', '2017-12-25 15:37:58', '57', '1');
INSERT INTO `topic` VALUES ('2775', '32', '4', '实体关系图（E-R图）', 'd3cb1e64-6625-44e4-9334-df8731313af7.', null, null, null, null, null, null, '矩形：代表实体，一般用名词表示实体\r\n	菱形：代表关系，一般用动词表示关系\r\n	椭圆：代表属性，一般用名词表示属性\r\n', '', '0', '2017-12-25 15:38:04', '56', '1');
INSERT INTO `topic` VALUES ('2776', '32', '4', '试叙述数据库系统的三级模式结构及二级映象功能。', '12527d8f-a550-4b25-9065-7875e99d68be.', null, null, null, null, null, null, '三级模式结构：外模式、模式、内模式  二级映像是为了在内部实现三个模式所对应三个抽象层次的联系和转换。', '', '0', '2017-12-25 15:38:17', '67', '1');
INSERT INTO `topic` VALUES ('2777', '32', '4', '数据库设计范式', 'a79183a4-9977-4940-8fff-fdbddb2dbbbe.', null, null, null, null, null, null, '第一范式：确保每列的原子性（每一列不能在拆分）\r\n 	第二范式：每个表只描述一件事（每一行记录只表示一类实体信息）\r\n 	第三范式：表中各列必须和主键直接相关，不能间接相关（表中的每一列都和主键有关系，和其他列不能有关系）、', '', '0', '2017-12-25 15:38:25', '56', '1');
INSERT INTO `topic` VALUES ('2778', '32', '4', '存储引擎的类型', '250d8b0c-32e6-4703-85be-4b0054572891.', null, null, null, null, null, null, 'MYISAM、INNODB 、MEMORY、CSV等9种\r\n	MYISAM与INNODB类型主要区别\r\n		名称		INNODB	MYISAM\r\n		事务处理		支持	不支持\r\n		数据行锁定	支持	不支持\r\n		外键约束		支持	不支持\r\n		全文索引		不支持	支持\r\n		表空间大小	较大,约2倍	较小\r\n	适用场合\r\n  	使用MYISAM:   不需事务，空间小，以查询访问为主\r\n  	使用INNODB:     多删除、更新操作，安全性高，事务处理及并发', '', '0', '2017-12-25 15:40:11', '56', '1');
INSERT INTO `topic` VALUES ('2779', '32', '4', '数据表的存储位置', '41d9c10f-19a4-4b8c-9adb-73acbad565f8.', null, null, null, null, null, null, 'MYISAM类型表文件\r\n		*.FRM：表结构定义文件\r\n		*.MYD：数据文件\r\n		*.MYI：索引文件\r\n	INNODB类型表文件\r\n		*.FRM：表结构定义文件\r\n		IBDATA1文件', '', '0', '2017-12-25 15:40:29', '56', '1');
INSERT INTO `topic` VALUES ('2780', '26', '1', '当一个文本框中的内容被选中时，想要执行指定的方法时，可以使用下面哪个事件来实现？（单选）', '056a1ee0-1861-45de-8daf-6a1190aa2a30.', 'click(fn)', 'change(fn) ', 'select(fn)', 'bind(fn)', '', '', 'C', '', '0', '2017-12-25 15:40:44', '57', '1');
INSERT INTO `topic` VALUES ('2781', '32', '4', '简述数据库系统如何实现应用程序与数据物理独立性和逻辑独立性。', '1aee1744-cdfc-42f8-9054-0b8c3af083a6.', null, null, null, null, null, null, '模式/内模式映像  保证了数据的物理独立性，将由内模式变化所带来的影响与概念模式隔离开来  外模式/模式的映像  保证了数据的逻辑独立性，将由概念模式变化所带来的影响与外模式隔离开来', '', '0', '2017-12-25 15:40:55', '67', '1');
INSERT INTO `topic` VALUES ('2782', '32', '4', '常见的约束', '6553fc15-b6a2-49bc-bd49-ecc77deb433c.', null, null, null, null, null, null, '主键约束    保证当前表中成为主键的这一列（主键列）数据是不允许重复的。\r\n	外键约束    保证外键表中的外键列在主键表中能够找到对应的。\r\n		主表：给别人提供外键的表            从表：具有外键列（别的表的主键列）的表\r\n	检查约束    保证当前表中添加检查约束的这一列（约束列）数据必须符合要求。\r\n	非空约束    保证当前表中某列不能为空 NULL。\r\n	唯一约束    保证当前表中的某列数据不能重复\r\n	默认约束    设置表中某列的默认值', '', '0', '2017-12-25 15:41:17', '56', '1');
INSERT INTO `topic` VALUES ('2783', '32', '4', 'sql语言类型', '3c8edb0d-4058-43f3-bb5d-34ef4c44e077.', null, null, null, null, null, null, 'DML（数据操作语言）\r\n		插入、删除和修改数据库中的数据\r\n		INSERT、 UPDATE 、DELETE等\r\n	DCL（数据控制语言） \r\n		用来控制存取许可、存取权限等\r\n		GRANT、REVOKE 等\r\n	DQL（数据查询语言）\r\n		用来查询数据库中的数据\r\n		SELECT 等\r\n	DDL（数据定义语言）\r\n		用来建立数据库、数据库对象和定义表的列\r\n		CREATE TABLE 、DROP TABLE 等', '', '0', '2017-12-25 15:41:37', '56', '1');
INSERT INTO `topic` VALUES ('2784', '5', '1', '下面哪几种是jquery中表单的对象属性？（多选）', '5aa23ec7-7327-4968-a39f-f2a789fd75d2.', 'checked ', 'enabled ', 'hidden ', 'selected ', 'file ', 'disabled ', 'ABDF', '', '0', '2017-12-25 15:41:38', '57', '1');
INSERT INTO `topic` VALUES ('2785', '32', '4', '试述数据库设计的基本步骤。', '0d37b617-c3d3-47cc-b3ad-07349e58a25e.', null, null, null, null, null, null, '1.需求分析阶段     2.概念结构设计阶段   3.逻辑结构设计阶段  4.数据库物理设计阶段 5.数据库实施阶段   6.数据库运行与维护阶段', '', '0', '2017-12-25 15:41:58', '67', '1');
INSERT INTO `topic` VALUES ('2786', '32', '4', 'MySQL--常用属性：', '40a6275f-4dee-4a48-9f3b-fb1958374d88.', null, null, null, null, null, null, 'UNSIGNED属性     标识为无符号数（也就是不能为负数）\r\n	ZEROFILL属性       宽度（位数）不足以0填充', '', '0', '2017-12-25 15:42:01', '56', '1');
INSERT INTO `topic` VALUES ('2787', '32', '4', 'MySQL--删除表的命令', '1fcf7478-2826-4b97-818f-d5e6a404f309.', null, null, null, null, null, null, 'DROP TABLE [IF EXISTS] 表名;', '', '0', '2017-12-25 15:42:14', '56', '1');
INSERT INTO `topic` VALUES ('2788', '5', '1', '在jquery中指定一个类，如果存在就执行删除功能，如果不存在就执行添加功能，下面哪一个是可以直接完成该功能的？（单选）', '88068df8-0317-4998-8e05-52735e2c7fab.', 'removeClass()', 'deleteClass()', 'toggleClass(class)', 'addClass()', '', '', 'C', '', '0', '2017-12-25 15:42:15', '57', '1');
INSERT INTO `topic` VALUES ('2789', '32', '4', 'MySQL--数据库中常见的六种约束', 'e1fc4bd0-9ea5-48b8-90ae-2221c4098cb7.', null, null, null, null, null, null, '主键   PRIMARY KEY\r\n	非空   NOT NULL\r\n	外键  FOREIGN KEY\r\n	唯一  UNIQUE KEY\r\n	自增  AUTO_INCREMENT\r\n	默认  DEFAULT \'默认值\'', '', '0', '2017-12-25 15:42:30', '56', '1');
INSERT INTO `topic` VALUES ('2790', '5', '4', '你为什么要使用jquery？ ', 'd9111f52-1ac4-48bb-bfb1-700f1854ee7b.', null, null, null, null, null, null, '：因为JQUERY是轻量级的框架，大小不到30KB,它有强大的选择器，   出色的DOM操作的封装，有可靠的事件处理机制(JQUERY在处理事件绑定的时候相当的可靠)，完善的AJAX(它的AJAX封装的非常的好，不需要考虑复杂浏览器的兼容性和XMLHTTPREQUEST对象的创建和使用的问题。) 出色的浏览器的兼容性。而且支持链式操作，隐式迭代。行为层和结构层的分离，还支持丰富的插件，JQUERY的文档也非常的丰富。 ', '', '0', '2017-12-25 15:42:46', '57', '1');
INSERT INTO `topic` VALUES ('2791', '32', '4', '解释E-R图并说明其三要素。', '32ab9424-b61e-4a86-b689-4251f9bd7130.', null, null, null, null, null, null, '实体、联系、属性。实体：现实世界可以区别于其他是对象的“事件”或“物件” 联系：实体各属性之间所具有的关系。 属性：一个实体集所具有的共同性质。', '', '0', '2017-12-25 15:42:58', '67', '1');
INSERT INTO `topic` VALUES ('2792', '5', '4', '你知道jquery中的选择器吗，请讲一下有哪些选择器？', '50667ddb-7bf5-4992-a0ef-7bb435aad43f.', null, null, null, null, null, null, 'JQUERY中的选择器大致分为:基本选择器，层次选择器，过滤选择器，表单选择器', '', '0', '2017-12-25 15:43:03', '57', '1');
INSERT INTO `topic` VALUES ('2793', '32', '4', 'MySQL--#添加字段命令', '932307bf-1eff-4c19-ad1c-a34f5d29d705.', null, null, null, null, null, null, 'ALTER TABLE 表名 ADD 字段名  数据类型  [属性];', '', '0', '2017-12-25 15:43:11', '56', '1');
INSERT INTO `topic` VALUES ('2794', '5', '4', ' jquery中的选择器和css中的选择器有区别吗？', '13f2e6c1-d61c-41c9-8880-1d3232afb00e.', null, null, null, null, null, null, 'JQUERY选择器支持CSS里的选择器，JQUERY选择器可用来添加样式和添加相应的行为  CSS 中的选择器是只能添加相应的样式', '', '0', '2017-12-25 15:43:18', '57', '1');
INSERT INTO `topic` VALUES ('2795', '5', '4', '你觉得jquery中的选择器有什么优势？', 'c9155482-4c72-45a4-a0ed-fb1c6bbbe07e.', null, null, null, null, null, null, '简单的写法  $(\'ID\') 来代替DOCUMENT.GETELEMENTBYID()函数支持CSS1 到CSS3 选择器  完善的处理机制(就算写错了ID也不会报错)', '', '0', '2017-12-25 15:43:34', '57', '1');
INSERT INTO `topic` VALUES ('2796', '32', '4', '实体间的联系有哪几种？并分别举例。', '198d6469-6911-49b9-a4e6-7e2d9e267b41.', null, null, null, null, null, null, ' 一对一  观众对座位    一对多  部门对员工    多对多  项目对员工', '', '0', '2017-12-25 15:43:34', '67', '1');
INSERT INTO `topic` VALUES ('2797', '5', '4', '你在使用选择器的时候有有没有什么觉得要注意的地方？', 'af63a7d4-5b1b-43dd-9d91-a542ca1a1d49.', null, null, null, null, null, null, ' 1 选择器中含有\".\",\"#\",\"[\" 等特殊字符的时候需要进行转译    2 属性选择器的引号问题    3 选择器中含有空格的注意事项 ', '', '0', '2017-12-25 15:43:49', '57', '1');
INSERT INTO `topic` VALUES ('2798', '5', '4', ' jquery对象和dom对象是怎样转换的？  ', 'b96a8a8c-856b-4fb3-a0eb-158856af02ca.', null, null, null, null, null, null, 'JQUERY转DOM对象:JQUERY对象是一个数组对象，可以通过[INDEX]的丰富得到相应的DOM对象还可以通过GET[INDEX]去得到相应的DOM对象。 DOM对象转JQUERY对象:$(DOM对象) ', '', '0', '2017-12-25 15:44:01', '57', '1');
INSERT INTO `topic` VALUES ('2799', '32', '4', 'MySQL--#删除表中所有记录命令', '3b1784ea-43b8-4791-8e1e-e8c695ebc955.', null, null, null, null, null, null, 'DELETE FROM GRADE;', '', '0', '2017-12-25 15:44:14', '56', '1');
INSERT INTO `topic` VALUES ('2800', '5', '4', '你是如何使用jquery中的ajax的？', '3f2e5cbf-f0ff-43d0-b354-6ea8978db20f.', null, null, null, null, null, null, '如果是一些常规的AJAX程序的话，使用LOAD(),$.GET(),$.POST(),就可以搞定了，一般我会使用的是$.POST() 方法。如果需要设定BEFORESEND(提交前回调函数),ERROR(失败后处理),SUCCESS(成功后处理)及COMPLETE(请求完成后处理)回调函数等，这个时候我会使用$.AJAX()', '', '0', '2017-12-25 15:44:15', '57', '1');
INSERT INTO `topic` VALUES ('2801', '32', '4', 'MySQL--#删除表中所有记录命令（标识列重新开始编号）', 'fd03aac5-0cdc-4f31-b074-de36b50742b8.', null, null, null, null, null, null, 'TRUNCATE TABLE GRADE;', '', '0', '2017-12-25 15:44:29', '56', '1');
INSERT INTO `topic` VALUES ('2802', '5', '4', '你觉得jquery中的ajax好用吗，为什么？', '77dbc8b8-e500-41ce-9bac-8664417c38a4.', null, null, null, null, null, null, '好用的。     因为JQUERY提供了一些日常开发中夙瑶的快捷操作，例 LOAD，AJAX，GET，POST等等，所以使用JQUERY开发AJAX将变得极其简单，我们就可以集中精力在业务和用户的体验上，不需要去理会那些繁琐的XMLHTTPREQUEST对象了。', '', '0', '2017-12-25 15:44:30', '57', '1');
INSERT INTO `topic` VALUES ('2803', '5', '4', 'jquery中$.get()提交和$.post()提交有区别吗？', '4533ab9a-1229-43ca-95d0-c568c5d0e68b.', null, null, null, null, null, null, ' 1 $.GET() 方法使用GET方法来进行异步请求的。$.POST() 方法使用POST方法来进行异 步请求的。   2 GET请求会将参数跟在URL后进行传递，而POST请求则是作为HTTP消息的实体内容发送给WEB服务器的，这种传递是对用户不可见的。  3 GET方式传输的数据大小不能超过2KB 而POST要大的多   4 GET 方式请求的数据会被浏览器缓存起来，因此有安全问题。', '', '0', '2017-12-25 15:44:44', '57', '1');
INSERT INTO `topic` VALUES ('2804', '32', '4', 'MySQL--分页语法', 'b7bc676a-2b50-4a30-b6ed-f2e5ac45550d.', null, null, null, null, null, null, '#位置偏移量=(当前页码-1) * 每页行数\r\nSELECT * FROM STUDENT LIMIT 10, 5', '', '0', '2017-12-25 15:44:49', '56', '1');
INSERT INTO `topic` VALUES ('2805', '5', '4', ' jquery中的load方法一般怎么用的？', 'df41bba9-7dcd-4bc7-94b8-809f1d2fdc9c.', null, null, null, null, null, null, 'LOAD方法一般在载入远程HTML 代码并插入到DOM中的时候用 通常用来从WEB服务器上获取静态的数据文件。如果要传递参数的话，可以使用$.GET() 或 $.POST()', '', '0', '2017-12-25 15:44:59', '57', '1');
INSERT INTO `topic` VALUES ('2806', '32', '4', 'MySQL--#使用临时表保存查询结果命令', 'db012f8e-dc1e-4bb3-9c4f-de91221069d6.', null, null, null, null, null, null, 'SELECT * INTO #ABC FROM STUDENT', '', '0', '2017-12-25 15:45:00', '56', '1');
INSERT INTO `topic` VALUES ('2807', '32', '4', '某个数据库中包含一个名为test的角色，数据库管理员要给这个角色中的所有用户分配stundent图的增、删、改、查权限，并且允许获得这些权限的用户将这些权限继续授予其他用户，写出数据库管理员要执行的语句。', 'f932a838-2dcf-46d2-ba74-6f9a053c70a5.', null, null, null, null, null, null, 'GRANT SELECT,UPDATE,DELETE,INSERT ON STUNDENT TO TEST WITH GRANT OPTION', '', '0', '2017-12-25 15:45:14', '67', '1');
INSERT INTO `topic` VALUES ('2808', '26', '4', '在jquery中你是如何去操作样式的？  ', '9c595be6-3331-4f18-8ab3-6e7dd21a08ec.', null, null, null, null, null, null, 'ADDCLASS() 来追加样式   REMOVECLASS() 来删除样式   TOGGLE() 来切换样式 ', '', '0', '2017-12-25 15:45:16', '57', '1');
INSERT INTO `topic` VALUES ('2809', '32', '4', 'MySQL--LIMIT子句', '0a9fb1dd-6414-4a73-a6fd-590a56004d94.', null, null, null, null, null, null, 'SELECT  <字段名列表>\r\n		FROM  <表名或视图>\r\n		[WHERE  <查询条件>]\r\n		[GROUP BY <分组的字段名>]\r\n		[ORDER BY  <排序的列名> [ASC 或 DESC]]\r\n		[LIMIT [位置偏移量, ]行数];\r\n		LIMIT：一个参数，计算TOP   ，两个参数是算分页显示数据\r\n		分页计算方式：位置偏移量=(PAGEINDEX-1)*PAGESIZE;             //PAGEINDEX代表：当前是第几页             PAGESIZE：每页显示多少行', '', '0', '2017-12-25 15:45:17', '56', '1');
INSERT INTO `topic` VALUES ('2810', '5', '4', ' 简单的讲叙一下jquery是怎么处理事件的，你用过哪些事件', '3c75dea1-8d44-4d23-bb16-bd70080eba99.', null, null, null, null, null, null, '首先去装载文档，在页面家在完毕后，浏览器会通过JAVASCRIPT为DOM   元素添加事件。', '', '0', '2017-12-25 15:45:41', '57', '1');
INSERT INTO `topic` VALUES ('2811', '32', '4', 'MySQL--什么时候用表连接，什么时候用子查询', '1164e177-5f11-4ed6-919f-6d0cb6ca6932.', null, null, null, null, null, null, '需要显示多表数据，则优先考虑表连接\r\n	如果只是作为查询的条件部分，则一般考虑子查询', '', '0', '2017-12-25 15:45:42', '56', '1');
INSERT INTO `topic` VALUES ('2812', '32', '4', '简述事务的概念及其ACID特性。', '3f0ca880-b74e-4e12-a49a-6535d2503b7a.', null, null, null, null, null, null, '事务是用户定义的数据库操作的集合，这些操作作为一个完整的有机工作单元，要么全部正确执行，要么全部不执行。  原子性，一致性，隔离性，持久性', '', '0', '2017-12-25 15:45:46', '67', '1');
INSERT INTO `topic` VALUES ('2813', '5', '4', '你使用过jquery中的动画吗，是怎样用的？', 'ab366ab6-527e-426c-8de5-0538ca6224e0.', null, null, null, null, null, null, '使用过。   HIDE() 和 SHOW() 同时修改多个样式属性。像高度，宽度，不透明度。   FADEIN() 和FADEOUT() FADETO() 只改变不透明度   SLIDEUP() 和SLIDEDOWN() SLIDETOGGLE() 只改变高度   ANIMATE() 属于自定义动画的方法.', '', '0', '2017-12-25 15:45:59', '57', '1');
INSERT INTO `topic` VALUES ('2814', '32', '4', 'MySQL--聚合函数', '63868130-3605-4744-be32-a0d1877559dc.', null, null, null, null, null, null, '函数名	作用\r\nAVG()	返回某字段的平均值\r\nCOUNT()	返回某字段的行数\r\nMAX()	返回某字段的最大值\r\nMIN()	返回某字段的最小值\r\nSUM()	返回某字段的和', '', '0', '2017-12-25 15:46:11', '56', '1');
INSERT INTO `topic` VALUES ('2815', '5', '4', '你使用过jquery中的插件吗', 'a988872a-3087-47af-a8aa-ec59ec30f0f3.', null, null, null, null, null, null, '看个人的实力和经验来回答了。', '', '0', '2017-12-25 15:46:13', '57', '1');
INSERT INTO `topic` VALUES ('2816', '5', '4', ' 你一般用什么去提交数据，为什么？', '62582e9b-ea29-4b95-a231-9ead4c66b51e.', null, null, null, null, null, null, '一般我会使用的是$.POST() 方法。    如果需要设定BEFORESEND(提交前回调函数),ERROR(失败后处理),SUCCESS(成功后处理) 及COMPLETE(请求完成后处理)回调函数等，这个时候我会使用$.AJAX()', '', '0', '2017-12-25 15:46:30', '57', '1');
INSERT INTO `topic` VALUES ('2817', '5', '4', ' 在jquery中引入css有几种方式？', '8febc5de-7e1f-4ecb-982a-88df652cb619.', null, null, null, null, null, null, '四种行内式，内嵌式，导入式，链接式', '', '0', '2017-12-25 15:46:41', '57', '1');
INSERT INTO `topic` VALUES ('2818', '32', '4', '试述触发器的分类及每种触发器的特点。', '3ba678d7-5c52-4ed5-80e5-b9243ac6a352.', null, null, null, null, null, null, 'INSERT 触发器：常用来检查或插入或者修改后的数据是否满足要求。  DELETE 触发器：可以在不破坏数据一致性的情况下为了那些用作其他表的外部键记录的一种级删除操作。', '', '0', '2017-12-25 15:46:53', '67', '1');
INSERT INTO `topic` VALUES ('2819', '5', '4', ' 你在jquery中使用过哪些插入节点的方法，它们的区别是什么？', '3f98910b-3c46-4803-8f62-3307343345e9.', null, null, null, null, null, null, 'APPEND(),APPENDTO(),PREPEND(),PREPENDTO(),AFTER(),INSERTAFTER() BEFORE(),INSERTBEFORE()大致可以分为：内部追加和外部追加   APPEND() 表式向每个元素内部追加内容。   APPENDTO() 表示讲所有的元素追加到指定的元素中。   例$(A)APPENDTO(B) 是将A追加到B中', '', '0', '2017-12-25 15:47:09', '57', '1');
INSERT INTO `topic` VALUES ('2820', '5', '4', '你使用过包裹节点的方法吗，包裹节点有方法有什么好处？', '61497c39-ff1f-47c0-8f0d-6663973a9af8.', null, null, null, null, null, null, 'WRAPALL(),WRAP(), WRAPINNER()需要在文档中插入额外的结构化标记的时候可以使用这些包裹的方法应为它不会帛画原始文档的语义', '', '0', '2017-12-25 15:47:22', '57', '1');
INSERT INTO `topic` VALUES ('2821', '32', '4', 'MySQL--为什么需要事务', 'd4ff7414-fe9d-4cec-8749-6a91cf4954e1.', null, null, null, null, null, null, '为了保证数据库的完整性。', '', '0', '2017-12-25 15:47:26', '56', '1');
INSERT INTO `topic` VALUES ('2822', '5', '4', 'jquery中如何来获取或和设置属性？', 'b6a7a76c-4c40-4e7e-ad14-ab9d92c92551.', null, null, null, null, null, null, 'QUERY中可以用ATTR()方法来获取和设置元素属性   REMOVEATTR() 方法来删除元素属性 ', '', '0', '2017-12-25 15:47:40', '57', '1');
INSERT INTO `topic` VALUES ('2823', '32', '4', 'MySQL--事务必须具备以下四个属性并解释', '8ff11ca0-588d-4cc4-8507-11a5842f3921.', null, null, null, null, null, null, '简称ACID 属性 \r\n	原子性（ATOMICITY）\r\n	一致性（CONSISTENCY）\r\n	隔离性（ISOLATION）\r\n	持久性（DURABILITY）', '', '0', '2017-12-25 15:47:57', '56', '1');
INSERT INTO `topic` VALUES ('2824', '5', '4', '如何来设置和获取HTML 和文本的值？', '2aae91f7-ef98-4853-8e6f-0860367839c3.', null, null, null, null, null, null, 'HTML()方法类似于INNERHTML属性可以用来读取或者设置某个元素中的HTML内容 注意：HTML() 可以用于XHTML文档不能用于XML文档TEXT() 类似于INNERTEXT属性可以用来读取或设置某个元素中文本内容。VAL() 可以用来设置和获取元素的值', '', '0', '2017-12-25 15:47:58', '57', '1');
INSERT INTO `topic` VALUES ('2825', '32', '4', '简述索引的优点。', '3f30385b-5449-4d3b-b770-2dfb2b8e85ea.', null, null, null, null, null, null, '1 可以大大加快数据的检索速度。  2 通过创建唯一性索引，确保每行数据的唯一性。 3 加速表与表之间的连接。  4 在使用分组子句和排序子句时，可以显著提高查询效率。', '', '0', '2017-12-25 15:48:11', '67', '1');
INSERT INTO `topic` VALUES ('2826', '26', '4', ' 你jquery中有哪些方法可以遍历节点？', '5994e7bb-4aeb-4066-a694-8fca1a9e1d7f.', null, null, null, null, null, null, 'CHILDREN() 取得匹配元素的子元素集合,只考虑子元素不考虑后代元素   NEXT() 取得匹配元素后面紧邻的同辈元素   PREV() 取得匹配元素前面紧邻的同辈元素   SIBLINGS() 取得匹配元素前后的所有同辈元素    CLOSEST() 取得最近的匹配元素     FIND() 取得匹配元素中的元素集合包括子代和后代    25 子元素选择器和后代选择器元素有什么区别？', '', '0', '2017-12-25 15:48:13', '57', '1');
INSERT INTO `topic` VALUES ('2827', '32', '4', 'MySQL--如何使用事务', 'c64387fe-2f4d-42b7-aa83-49997a208de4.', null, null, null, null, null, null, 'BEGIN/START TRANSACTION; 开始事务\r\nCOMMIT; 提交事务\r\nROLLBACK;回滚事务', '', '0', '2017-12-25 15:48:14', '56', '1');
INSERT INTO `topic` VALUES ('2828', '5', '4', '子元素选择器和后代选择器元素有什么区别？', '10a80012-dcd0-4107-8bd7-f9e24bdef42a.', null, null, null, null, null, null, '子代元素是找子节点下的所有元素,后代元素是找子节点或子节点的子节点中的元素', '', '0', '2017-12-25 15:48:31', '57', '1');
INSERT INTO `topic` VALUES ('2829', '32', '4', '为什么需要视图', '2fe368bd-bf1d-411e-bc27-48275a861452.', null, null, null, null, null, null, '不同的人员关注不同的数据，保证信息的安全性', '', '0', '2017-12-25 15:48:34', '56', '1');
INSERT INTO `topic` VALUES ('2830', '5', '4', '在jquery中可以替换节点吗？', '90c2b84b-c5b2-46bb-9fe1-fabfbb5a6a53.', null, null, null, null, null, null, '可以在JQUERY中有两者替换节点的方式    REPLACEWITH() 和REPLACEALL()     例如在<P TITLE=\"HAO ARE YOU\">HAO ARE YOU</P>替换成    <STRONG>I AM FINE<STRONG>     $(\'P\').REPLACEWITH(\'<STRONG>I AM FINE</STRONG>\');    REPLACEALL与REPLACEWITH的用法前后调换一下即可。', '', '0', '2017-12-25 15:48:46', '57', '1');
INSERT INTO `topic` VALUES ('2831', '32', '4', '什么是视图', '3098bd24-f0ee-4890-9972-1d20ff342759.', null, null, null, null, null, null, '视图是一张虚拟表，视图中不存放数据，一个原始表，根据不同用户的不同需求，可以创建不同的视图', '', '0', '2017-12-25 15:48:47', '56', '1');
INSERT INTO `topic` VALUES ('2832', '5', '4', '你觉得beforeSend方法有什么用？', '21807261-b7ed-4581-a976-17ea3f78f50c.', null, null, null, null, null, null, '发送请求前可以修改XMLHTTPREQUEST对象的函数，在BEFORESEND中如果返回FALSE 可以取消本次的AJAX请求。XMLHTTPREQUEST对象是唯一的参数所以在这个方法里可以做验证', '', '0', '2017-12-25 15:48:58', '57', '1');
INSERT INTO `topic` VALUES ('2833', '32', '4', '简述数据库中的索引的使用原则，即哪些情况适合创建索引。', '40cc59f9-2b20-40ca-af4b-8a310b5ddeb7.', null, null, null, null, null, null, '对于查询中很多设计的列或重复值比较少，适合创建索引。 对按照范围查询的列，最好建立索引。 表中若有主键或外键，一定要建立索引。', '', '0', '2017-12-25 15:49:01', '67', '1');
INSERT INTO `topic` VALUES ('2834', '32', '4', '创建视图的语法', 'e716fa95-5d0d-47c3-be07-513a5c2d3687.', null, null, null, null, null, null, 'CREATE VIEW 视图名称\r\n	AS\r\n	SELECT 语句;', '', '0', '2017-12-25 15:49:04', '56', '1');
INSERT INTO `topic` VALUES ('2835', '5', '4', ' siblings() 方法和 $(\'prev~div\')选择器是一样的嘛？', '2eab03f7-af24-411e-ae8c-c1976a19bb90.', null, null, null, null, null, null, ' $(\'PREV~DIV\') 只能选择\'#PREV\'元素后面的同辈<DIV>元素而SIBLINGS()方法与前后的文职无关，只要是同辈节点就都能匹配。', '', '0', '2017-12-25 15:49:10', '57', '1');
INSERT INTO `topic` VALUES ('2836', '32', '4', 'MySQL--删除视图语法', '188137ac-25fb-486c-8d19-348d6c6fe678.', null, null, null, null, null, null, 'DROP VIEW [IF EXISTS] VIEW_NAME;', '', '0', '2017-12-25 15:49:19', '56', '1');
INSERT INTO `topic` VALUES ('2837', '5', '4', '你在ajax中使用过JSON吗，你是如何用的？', '6ece1633-2a30-4a97-847a-949946fa39f6.', null, null, null, null, null, null, '使用过，在$.GETJSON() 方法的时候就是。   因为 $.GETJSON() 就是用于加载JSON文件的 ', '', '0', '2017-12-25 15:49:23', '57', '1');
INSERT INTO `topic` VALUES ('2838', '32', '4', '简述关系模型的三类完整性约束。', '266cd1f4-31f6-4d02-8492-d63b0cceb1c7.', null, null, null, null, null, null, '1.实体完整性约束 要求候选码非空且唯一。  2.参照完整性约束 要求外码要么取空值，要么所取的值在对应的候选码中出现。 3.用户自定义完整性。包括非空约束，唯一约束，检查约束，缺省值约束等。', '', '0', '2017-12-25 15:49:32', '67', '1');
INSERT INTO `topic` VALUES ('2839', '3', '4', '什么是索引', '35c308bd-0723-46a4-9605-d3e739ca45a7.', null, null, null, null, null, null, '索引是一种有效组合数据的方式，为快速查找到指定记录', '', '0', '2017-12-25 15:49:34', '56', '1');
INSERT INTO `topic` VALUES ('2840', '32', '4', '索引作用', '008ed011-9787-4a54-b007-a953965cd529.', null, null, null, null, null, null, '大大提高数据库的检索速度\r\n	改善数据库性能\r\n', '', '0', '2017-12-25 15:49:47', '56', '1');
INSERT INTO `topic` VALUES ('2841', '32', '4', 'MySQL索引按存储类型分类', 'a00c41cf-8097-4d4a-920d-6b14559f28bf.', null, null, null, null, null, null, 'B-树索引：INNODB、MYISAM均支持\r\n	哈希索引\r\n', '', '0', '2017-12-25 15:50:02', '56', '1');
INSERT INTO `topic` VALUES ('2842', '26', '1', '为每一个指定元素的指定事件（像click）绑定一个事件处理器函数，下面哪个是用来实现该功能的？（单选）', 'd9454c3d-9e6c-4e73-a896-bdf8bdc844f3.', 'trigger(type)', 'bind(type)', 'one(type)', 'bind', '', '', 'B', '', '0', '2017-12-25 15:50:12', '57', '1');
INSERT INTO `topic` VALUES ('2843', '32', '4', '写出关系数据库中常见的六种约束条件。', '4f214d4d-8f62-4edd-9358-e47ae44346f8.', null, null, null, null, null, null, 'NOT NULL  UNIQUE   PRIMARY KEY  CHECK  DEFAULT  FOREIGN KEY', '', '0', '2017-12-25 15:50:12', '67', '1');
INSERT INTO `topic` VALUES ('2844', '3', '1', '下列哪一种叙述是正确的', '29c7cb2c-e639-4f48-8eb4-fa1e9341878e.', 'abstract修饰符可修饰字段、方法和类', '抽象方法的body部分必须用一对大括号{ }包住', '声明抽象方法，大括号可有可无', '声明抽象方法不可写出大括号', '', '', 'D', '', '0', '2017-12-25 15:50:31', '53', '1');
INSERT INTO `topic` VALUES ('2845', '32', '4', 'MySQL--常用索引类型', '55daedcb-9241-4020-bded-bb3d24f2a053.', null, null, null, null, null, null, '        普通索引\r\n	唯一索引\r\n	主键索引\r\n	复合索引\r\n	全文索引\r\n	空间索引', '', '0', '2017-12-25 15:50:37', '56', '1');
INSERT INTO `topic` VALUES ('2846', '32', '4', '简述SQLserver数据库权限控制机制。', '1229d419-0174-4323-a244-15fa5f47bdfc.', null, null, null, null, null, null, '有系统权限和对象权限以及EXECUTE的权限。系统权限如创建表，创建视图等。对象权限有增删，删，改，查等。权限可以被授予，也可以回收。', '', '0', '2017-12-25 15:50:45', '67', '1');
INSERT INTO `topic` VALUES ('2847', '6', '4', 'Ajax是什么？', '84a9663b-e3e2-4cc6-b51d-ac3c1df0c745.', null, null, null, null, null, null, 'AJAX即“ASYNCHRONOUS JAVASCRIPT+XML”（异步JAVASCRIPT\r\n和XML），是指一种创建交互式网页应用的网页开发技术。通过在后台与服务器进行少量数据交换，AJAX可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。', '', '0', '2017-12-25 15:51:00', '57', '1');
INSERT INTO `topic` VALUES ('2848', '32', '4', 'MySQL--创建索引的指导原则', '81ccf9bd-5384-40cf-a2c3-34e1598a4de2.', null, null, null, null, null, null, '按照下列标准选择建立索引的列\r\n	频繁搜索的列\r\n	经常用作查询选择的列\r\n	经常排序、分组的列\r\n	经常用作连接的列（主键/外键）\r\n请不要使用下面的列创建索引\r\n	仅包含几个不同值的列\r\n	表中仅包含几行', '', '0', '2017-12-25 15:51:09', '56', '1');
INSERT INTO `topic` VALUES ('2849', '26', '1', 'public class Test {\r\npublic int aMethod() {\r\nstatic int i = 0;\r\ni++;\r\nreturn i;\r\n}\r\npublic static void main (String args[]) {\r\nTest test = new Test();\r\ntest.aMethod();\r\nint j = test.aMethod();\r\nSystem.out.println(j);\r\n}\r\n}\r\n输出结果是什么？', 'cb1faaf7-c803-4be5-841b-7415c1bdc8f6.', '0', '1', '2', '编译失败', '', '', 'D', '', '0', '2017-12-25 15:51:15', '53', '1');
INSERT INTO `topic` VALUES ('2850', '5', '4', '同步请求和异步请求的区别？ ', '66093a65-0a16-47b8-88e5-f90c68a04f11.', null, null, null, null, null, null, '同步：提交请求→等待服务器处理→处理完毕返回，这个期间客户端浏览器不能干任何事。  异步：请求通过事件触发→服务器处理（这是浏览器仍然可以作其他事情）→处理完毕。 14．JQUERY如何解决跨域问题？  答：借助JSONP这个非官方的协议，其允许在服务器端集成SCRIPT TAGS返回至客户端，通过CALLBACK的形式实现跨域访问JSONP即JSON WITH PADDING。如果要进行跨域请求，我们可以通过使用HTML的SCRIPT\r\n标记来进行跨域请求，并在响应中返回要执行的SCRIPT代码，其中可以直接使用JSON传递JAVASCRIPT对象。', '', '0', '2017-12-25 15:51:17', '57', '1');
INSERT INTO `topic` VALUES ('2851', '32', '4', '简述三级封锁协议及其解决的事务并发执行的问题。', '543bd9f4-8e2b-4d60-8355-90cbdab3a98d.', null, null, null, null, null, null, '一级封锁协议：对对象加X锁，直到事物结束时才释放X锁。  二级封锁协议：在一级封锁协议的基础上，给事物加S锁，读完后立即释放S锁。 三级封锁协议：在一级封锁协议的基础上，给事务加S锁，直到事物结束释放S锁。', '', '0', '2017-12-25 15:51:21', '67', '1');
INSERT INTO `topic` VALUES ('2852', '5', '4', '异步加载的方式有哪些？', '3d2ae55c-6dad-4f48-8152-0e7245316e12.', null, null, null, null, null, null, '（1）DEFER，只支持IE；（2）ASYNC；（3）创建SCRIPT，插入到DOM；', '', '0', '2017-12-25 15:51:31', '57', '1');
INSERT INTO `topic` VALUES ('2853', '5', '4', '请简要说明jQuery框架的显著特点。', 'b4231d9c-d76d-4c2d-befe-460bc7ea058e.', null, null, null, null, null, null, 'JQUERY强调的理念是写的少，做的多(WRITE LESS，DO MORE)。其主要特点有：轻量级、强大的选择器、漂亮的DOM操作封装、可\r\n靠的事件处理机制、完善的AJAX处理、出色的浏览器兼容性、链式操作方式、丰富的插件支持、开源产品。', '', '0', '2017-12-25 15:51:48', '57', '1');
INSERT INTO `topic` VALUES ('2854', '3', '1', 'java语言是哪个公司开发的（ ）。                                ', '9d58cbd1-efdf-4ef8-8167-24cff1a8a79f.', 'Microsoft ', 'Borland', 'Sun ', 'Fox Software ', '', '', '', '', '0', '2017-12-25 15:51:51', '58', '1');
INSERT INTO `topic` VALUES ('2855', '3', '1', '请问下列哪种说法是正确的?', '243bd11d-eaf8-42b4-8654-d020d17ba435.', '实例方法可直接调用超类的实例方法', '实例方法可直接调用超类的类方法', '实例方法可直接调用其他类的实例方法', '实例方法可直接调用本类的类方法', '', '', 'D', '', '0', '2017-12-25 15:52:01', '53', '1');
INSERT INTO `topic` VALUES ('2856', '3', '4', '什么是C/S', '5cb2bfbb-c6d6-40d3-8917-09f8c429a9f5.', null, null, null, null, null, null, '以客户端和服务器为基础的应用程序', '', '0', '2017-12-25 15:52:16', '56', '1');
INSERT INTO `topic` VALUES ('2857', '26', '4', '谈谈对this对象的理解', 'cc2e9d74-844f-411b-baa9-b5a11ae77395.', null, null, null, null, null, null, 'THIS是JS\r\n的一个关键字，随着函数使用场合不同，THIS的值会发生变化。但是有一个总原则，那就是THIS指的是调用函数的那个对象。 ', '', '0', '2017-12-25 15:52:21', '57', '1');
INSERT INTO `topic` VALUES ('2858', '5', '4', '\r\nuse strict是什么意思？', '35fe68db-6366-466a-9872-9adf50f2a97c.', null, null, null, null, null, null, '表示代码标志为“严格模式”，则其中运行的所有代码都必然是严格模式下的。如果在语法检测时发现语法问题，则整个代码块失效，并导致一个语法异常。如果在运行期出现了违反严格模式的代码，则抛出执行异常。', '', '0', '2017-12-25 15:52:33', '57', '1');
INSERT INTO `topic` VALUES ('2859', '3', '1', 'class Super {\r\npublic Integer getLenght() { return new Integer(4); }\r\n}\r\n\r\npublic class Sub extends Super {\r\npublic Long getLenght() { return new Long(5); }\r\npublic static void main(String[] args) {\r\nSuper sooper = new Super();\r\nSub sub = new Sub();\r\nSystem.out.println(sooper.getLenght().toString() + \",\" +\r\n sub.getLenght().toString() );\r\n}\r\n}', 'f4433eea-64dd-48f5-b402-770235e9d65e.', '4,4', '4,5', '5,4', '5,5', '编译失败.---------重定时不能改变返回类型', '', 'A', '', '0', '2017-12-25 15:52:36', '53', '1');
INSERT INTO `topic` VALUES ('2860', '5', '4', '简述new操作符的功能。', 'beca49b0-e79c-460f-a515-5552d62a8287.', null, null, null, null, null, null, '（1）创建一个空对象，使用THIS变量引用该对象，同时还继承了该函数的原型 （2）属性和方法被加入到THIS引用的对象中。 \r\n（3）新创建的对象由THIS所引用，并且最后隐式的返回THIS。', '', '0', '2017-12-25 15:52:49', '57', '1');
INSERT INTO `topic` VALUES ('2861', '32', '4', '简单介绍连接池的优点和原理?', '34c2d82a-4fb4-4003-a939-eff7721124b7.', null, null, null, null, null, null, '数据库连接和关闭是比较花费时间的一件事，而连接池可以提高我们的工作效率。\r\n         刚开始创建一定数量的池连接，当需要时从池连接中拿出一个，用完之后再把这个连接重新放回连接池。', '', '0', '2017-12-25 15:52:52', '51', '1');
INSERT INTO `topic` VALUES ('2862', '32', '4', '简述关系规模化中的1NF、2NF、3NF并说明相互间的关系。', '60b918cc-71cb-4d81-b0b1-191d7260c61d.', null, null, null, null, null, null, '1NF:关系模型中的所有属性都不能再分解。 2NF:关系模型中的所有属性不存在部分依赖。 3NF：关系模式中的所有属性不存在传递依赖。', '', '0', '2017-12-25 15:52:55', '67', '1');
INSERT INTO `topic` VALUES ('2863', '26', '4', '描述typeof关键字的功能。', '997d8091-6e7c-41e4-97e3-47bf16bc6f88.', null, null, null, null, null, null, '：TYPEOF可用来判断一个变量是否为空或是什么类型的变量。TYPEOF一般只能返回如下几个结果：NUMBER、BOOLEAN、\r\nSTRING、FUNCTION、OBJECT、UNDEFINED。', '', '0', '2017-12-25 15:53:02', '57', '1');
INSERT INTO `topic` VALUES ('2864', '3', '4', 'Tomcat服务器目录结构', '7556fa06-38de-4948-9579-e2d0b1a9bf04.', null, null, null, null, null, null, '目录	 说明\r\n/BIN	存放各种平台下用于启动和停止TOMCAT的脚本文件\r\n/CONF	存放TOMCAT服务器的各种配置文件\r\n/LIB	存放TOMCAT服务器所需的各种JAR文件\r\n/LOGS	存放TOMCAT的日志文件\r\n/TEMP	TOMCAT运行时用于存放临时文件\r\n/WEBAPPS	当发布WEB应用时，默认情况下会将WEB应用的文件存放于此目录中\r\n/WORK	TOMCAT把由JSP生成的SERVLET放于此目录下', '', '0', '2017-12-25 15:53:08', '56', '1');
INSERT INTO `topic` VALUES ('2865', '32', '4', '如果对数据库的并发性不加以任何控制，可能造成哪些不良现象？怎样控制才能防止这些现象的产生？', '71ceb2c8-4b39-47c2-93a3-9126c55f712c.', null, null, null, null, null, null, '1.丢失修改 2.读“脏”数据 3.不可重复读  通过基于锁的协议实现对事务并发控制。', '', '0', '2017-12-25 15:53:16', '67', '1');
INSERT INTO `topic` VALUES ('2866', '5', '4', '描述instanceof\r\n关键字的功能。 ', '6c1e012e-887c-4891-ada7-5a264d0915ea.', null, null, null, null, null, null, 'TYPEOF可用来判断一个变量是否为空或是什么类型的变量。TYPEOF一般只能返回如下几个结果：NUMBER、BOOLEAN、\r\nSTRING、FUNCTION、OBJECT、UNDEFINED。', '', '0', '2017-12-25 15:53:16', '57', '1');
INSERT INTO `topic` VALUES ('2867', '26', '1', '在Servlet处理请求的方式为:', 'a83d7a19-79bc-4b5c-89a1-9695299d068c.', '以进程的方式', '以程序的方式', '以线程的方式', '以响应的方式', '', '', 'C', '', '0', '2017-12-25 15:53:17', '53', '1');
INSERT INTO `topic` VALUES ('2868', '4', '4', 'Web.xml的作用?', '23016bbd-e311-49e3-9c0c-f52b5fbf9b11.', null, null, null, null, null, null, 'WEB.XML会在程序启动时执行，如果想在程序刚启动的时候执行一些方法的话可以配置在WEB.XML中。', '', '0', '2017-12-25 15:53:18', '51', '1');
INSERT INTO `topic` VALUES ('2869', '3', '4', 'Web应用的目录结构', '5b9a8bb2-8ce8-418a-8367-afcbcd359ef7.', null, null, null, null, null, null, '目录	 说明\r\n/	WEB应用的根目录，该目录下所有文件在客户端都可以访问(JSP、HTML等)\r\n/WEB-INF	存放应用使用的各种资源，该目录及其子目录对客户端都是不可以访问\r\n/WEB-INF/CLASSES	存放WEB项目的所有的CLASS文件\r\n/WEB-INF/LIB	存放WEB应用使用的JAR文件', '', '0', '2017-12-25 15:53:30', '56', '1');
INSERT INTO `topic` VALUES ('2870', '3', '1', '下列说法正确的是什么？a（   ）。 ', '01016897-f060-420b-9fd4-7a32aa7a9400.', 'Java程序中的main方法不是必须写到类里面', 'Java程序中只能有一个main方法', 'Java程序的类名必须与文件名一致', 'Java程序的main方法里如果只有一条语句，可以不用{}括起来', '', '', 'B', '', '0', '2017-12-25 15:53:34', '58', '1');
INSERT INTO `topic` VALUES ('2878', '4', '4', '简单介绍您所了解的MVC?', 'af48207b-e601-401e-971a-c44839ffacad.', null, null, null, null, null, null, '在项目中使用MVC模式会使项目分工更加明确，结构更加清晰\r\n         M MODEL 模型层：JAVABEAN\r\n         V VIEW 视图层：JSP HTML\r\n         C CONTROLLER 控制层：SERVLET', '', '0', '2017-12-25 15:53:46', '51', '1');
INSERT INTO `topic` VALUES ('2879', '26', '1', 'JDBC中，用于表示数据库连接的对象是', '6b3ef88a-639a-44c5-8f7a-b91f61f842f4.', 'Statement', 'Connection', 'DriverManager', 'PreparedStatement', '', '', 'B', '', '0', '2017-12-25 15:54:00', '53', '1');
INSERT INTO `topic` VALUES ('2880', '3', '4', 'JSP页面元素', '021c9d66-7d0f-4b93-9f53-e9c2deedc776.', null, null, null, null, null, null, '静态内容	HTML静态文本\r\n	指令		以“<%@ ” 开始，以“%> ” 结束\r\n	小脚本		<%JAVA代码 %>\r\n	表达式		<%=JAVA表达式 %>\r\n	声明		<%! 方法 %>\r\n	注释		<!-- 客户端可以查看到 -->	<%-- 客户端不能查看到 --%>', '', '0', '2017-12-25 15:54:04', '56', '1');
INSERT INTO `topic` VALUES ('2881', '26', '4', '一句话说明内存泄漏的定义。', '543466a1-eefe-413a-9fb4-51836778cc8c.', null, null, null, null, null, null, '内存泄漏指任何对象在您不再拥有或需要它之后仍然存在。', '', '0', '2017-12-25 15:54:06', '57', '1');
INSERT INTO `topic` VALUES ('2882', '32', '4', '简述数据库常见的故障类型？', '14eebf44-8322-4829-8895-11a46b749acb.', null, null, null, null, null, null, '1.事物内部故障 2.系统故障 3.介质故障 4.计算机病毒', '', '0', '2017-12-25 15:54:18', '67', '1');
INSERT INTO `topic` VALUES ('2883', '3', '4', '什么是内置对象', '1966d346-31b4-4268-854d-bcc1a246ba56.', null, null, null, null, null, null, '由WEB容器负责创建的对象，我们可以直接使用，不需要手动创建。\r\n', '', '0', '2017-12-25 15:54:24', '56', '1');
INSERT INTO `topic` VALUES ('2884', '3', '1', '用于调用存储过程的对象是:  ', 'b9269828-943f-4f64-b0f9-fe8e56dd6823.', 'ResultSet', 'DriverManager', 'CallableStatemet', 'PreparedStatement', '', '', 'C', '', '0', '2017-12-25 15:54:29', '53', '1');
INSERT INTO `topic` VALUES ('2885', '5', '4', '那些操作会造成内存泄漏？', '47dc29f0-bf04-4aef-9d8f-a737c15826cd.', null, null, null, null, null, null, '给DOM对象添加的属性是一个对象的引用。  DOM对象与JS对象相互引用。  给DOM对象用ATTACHEVENT绑定事件。   从外到内执行\r\nAPPENDCHILD，这时即使调用REMOVECHILD也无法释放。  反复重写同一个属性会造成内存大量占用。', '', '0', '2017-12-25 15:54:43', '57', '1');
INSERT INTO `topic` VALUES ('2886', '5', '4', '描述垃圾回收器的功能。 ', '9c7b1d85-ea8a-4a15-8309-7db68af33705.', null, null, null, null, null, null, '垃圾回收器定期扫描对象，并计算引用了每个对象的其他对象的数量。如果一个对象的引用数量为0（没有其他对象引用过该对象），或对该对象的惟一引用是循环的，那么该对象的内存即可回收。', '', '0', '2017-12-25 15:54:56', '57', '1');
INSERT INTO `topic` VALUES ('2887', '32', '4', '请简述数据库备份分成哪些种类，在你所使用的数据库管理系统中对哪些扩展名的文件进行备份（指出数据库管理系统名称和文件扩展名）。', '91e51cc2-eb70-4293-89a2-0652e3fcae88.', null, null, null, null, null, null, '根据备份规模的不同可分为：完全备份、差异备份、部分备份 根据备份时状态不同可分为：联机备份、脱机备份 根据备份方式的不同可分为：物理备份、逻辑备份', '', '0', '2017-12-25 15:54:57', '67', '1');
INSERT INTO `topic` VALUES ('2888', '3', '4', '转发和重定向的语法与区别', 'f947180a-e9be-47b2-afdc-526d7071aecd.', null, null, null, null, null, null, '转发：转发是在服务器端发挥作用，通过FORWARD方法将提交信息在多个页面间进行传递\r\n		客户端浏览器的地址栏不会显示出转向后的地址\r\n重定向：重定向是在客户端发挥作用，通过请求新的地址实现页面转向\r\n		在地址栏中可以显示转向后的地址', '', '0', '2017-12-25 15:55:00', '56', '1');
INSERT INTO `topic` VALUES ('2889', '4', '4', '简单介绍您所了解的structs、spring和hibernate?', '652186c3-4ca7-4711-b120-1a334d14d077.', null, null, null, null, null, null, 'STRUTS:控制层ACTION,页面标签和MODEL数据,调用业务层\r\n         SPRING:AOP管理事务控制，IOC管理各个组件的耦合\r\n         HIBERNATE:负责数据库和对象的映射，负责DAO层', '', '0', '2017-12-25 15:55:02', '51', '1');
INSERT INTO `topic` VALUES ('2890', '5', '4', 'documen.write和innerHTML\r\n的区别？', '63d1f683-db3d-46eb-9830-d94f92ab5b21.', null, null, null, null, null, null, '：DOCUMENT.WRITE只能重绘整个页面，INNERHTML可以重绘页面的一部分。', '', '0', '2017-12-25 15:55:09', '57', '1');
INSERT INTO `topic` VALUES ('2891', '3', '4', '你所知道的集合类都有哪些', '9b9479f6-74db-4beb-b0c9-ab05a6783197.', null, null, null, null, null, null, '最常用的LIST和MAP.LIST的具体实现包括ARRAYLIST和VECTOR，它们是可变大小的列表，比较适合构建，存储和操作任何类型对象的元素列表，LIST适用于按数值索引访元素的情形', 'Map提供了一个更通用的元素存储方法，Mao集合类用于存储元素对（乘坐“键”和“值”），其中每个键映射到一个值', '0', '2017-12-25 15:55:16', '55', '1');
INSERT INTO `topic` VALUES ('2892', '5', '4', 'jQuery框架的源码看过吗？能不能简单说一下它的实现原理？ ', 'a385436b-e97f-4668-a33c-056b5b86065a.', null, null, null, null, null, null, 'JQUERY框架通过改变JAVASCRIPT编码方式来创建了全新的编程理念。譬如关于JQUERY声明的流程：先查找（创建）JQUERY对象，然后调用JQUERY对象的方法完成我们需要完成的工作。\r\nJQUERY就是以这种可以说是最简单的编码逻辑来改变JAVASCRIPT编码方式的，这个流程就是JQUERY的编码逻辑核心。', '', '0', '2017-12-25 15:55:21', '57', '1');
INSERT INTO `topic` VALUES ('2893', '3', '1', 'Java源代码文件的拓展名是（    ）', '8db27b00-ae01-4527-bbe2-d4742d4bd713.', 'java', 'class', 'txt ', 'doc', '', '', 'A', '', '0', '2017-12-25 15:55:22', '58', '1');
INSERT INTO `topic` VALUES ('2894', '5', '4', 'jQuery中如何将对象转化为json字符串，然后再转化回来？ ', '234be7b4-aa33-4748-8ff1-e92885d242e1.', null, null, null, null, null, null, '可以通过JSON.STRINGIFY方法把一个对象转换成JSON字符串，再通过JSON.PARSE方法把一个JSON字符串解析成对象。', '', '0', '2017-12-25 15:55:31', '57', '1');
INSERT INTO `topic` VALUES ('2895', '5', '4', 'jsp和servlet中的请求转发分别如何实现?', '78be3f63-c04a-4935-814b-e0ccd94556bf.', null, null, null, null, null, null, 'JSP可以使用JSP:FORWARD标签转发\r\n         SERVLET可以使用REQUEST.GETREQUESTDISPATCHER()实现转发', '', '0', '2017-12-25 15:55:41', '51', '1');
INSERT INTO `topic` VALUES ('2896', '5', '4', '描述一下.get()、[]和.eq()方法的区别。', 'f290552c-5c8b-4258-9b32-db34c13f2125.', null, null, null, null, null, null, 'EQ返回原生JQUERY对象，截取某些EL元素生成JQUERY新对象；GET和[]返回的都是原生的DOM对象，原理一致；GET和\r\n[]区别是GET是通过JQUERY对象的方法获取，[]是根据JQUERY是一个数组对象获取。', '', '0', '2017-12-25 15:55:42', '57', '1');
INSERT INTO `topic` VALUES ('2897', '32', '4', '关系模型的完整性规则有哪几类？', '8173d811-9684-4dfa-a5c5-42ba0d3d3cb9.', null, null, null, null, null, null, '有实体完整性、参照完整性和用户自定义完整性。', '', '0', '2017-12-25 15:55:43', '67', '1');
INSERT INTO `topic` VALUES ('2898', '3', '4', 'JSP--对象的作用域', '056eb8ff-1c16-4df1-b037-6a5b69052a01.', null, null, null, null, null, null, 'PAGE范围	在一个页面范围内有效，通过PAGECONTEXT对象访问\r\n	REQUEST范围 	在一个服务器请求范围内有效\r\n	SESSION范围	在一次会话范围内容有效\r\n	APPLICATION范围	在一个应用服务器范围内有效\r\n', '', '0', '2017-12-25 15:55:46', '56', '1');
INSERT INTO `topic` VALUES ('2899', '5', '4', '描述一下context的概念。', '9940f6f4-e467-4ab1-8a66-158332e16a08.', null, null, null, null, null, null, 'CONTEXT就是限定查找的范围，CONTEXT必须是一个DOM元素，CONTEXT底层还是用了.FIND()方法来实现的。', '', '0', '2017-12-25 15:55:52', '57', '1');
INSERT INTO `topic` VALUES ('2900', '5', '4', '描述一下.delegate()和.live()方法的区别。 ', '2603127a-a786-44f9-81cd-509034b40a97.', null, null, null, null, null, null, 'DELEGATE方法指定了委托对象，LIVE方法委托给了JQUERY的CONTEXT，1.9版本以后用ON方法代替了。', '', '0', '2017-12-25 15:56:03', '57', '1');
INSERT INTO `topic` VALUES ('2901', '3', '4', 'Session机制?', 'f2e24c0b-cbf8-4ae5-9966-165fbf3ec8a1.', null, null, null, null, null, null, 'SESSION机制是一种服务器端机制，服务器使用一种类似于散列表的结构来保存信息。', '', '0', '2017-12-25 15:56:03', '51', '1');
INSERT INTO `topic` VALUES ('2902', '32', '4', '举例说明什么是实体完整性和参照完整性？', 'ff529725-5220-48a1-8b6b-a072f1eb0e6c.', null, null, null, null, null, null, '实体完整性：主关系键的值不能为空或部分为空。', '', '0', '2017-12-25 15:56:06', '67', '1');
INSERT INTO `topic` VALUES ('2903', '5', '4', '描述一下.attr()和.prop()方法的区别', '99fab8cb-f6ba-4aa4-a95c-459906ae7ec9.', null, null, null, null, null, null, 'ATTR()方法是操作属性节点，.PROP()方法是操作获取到的对应JS对象的属性。在遇到要获取或设置CHECKED、\r\nSELECTED、READONLY和DISABLED等属性时，用PROP方法显然更好。.PROP()方法更高效，因为.ATTR()方法要访问DOM。', '', '0', '2017-12-25 15:56:15', '57', '1');
INSERT INTO `topic` VALUES ('2904', '3', '4', 'cookie和session的对比', 'ed421441-7fe8-4e85-b9d1-d3e71a9db050.', null, null, null, null, null, null, 'SESSION\r\n		在服务器端保存用户信息\r\n		SESSION中保存的是对象\r\n		随会话的结束而将其存储的数据销毁\r\n		保存重要的信息\r\nCOOKIE\r\n		在客户端保存用户信息\r\n		COOKIE保存的是字符串\r\n		COOKIE可以长期保存在客户端\r\n		保存不重要的用户信息', '', '0', '2017-12-25 15:56:19', '56', '1');
INSERT INTO `topic` VALUES ('2905', '3', '4', '简述连接池的工作原理', '2fd0d999-4a5b-4766-a1bd-661d6be8e2c6.', null, null, null, null, null, null, '为数据库连接建立一个“缓冲池”。预先在缓冲池中放入一定数量的连接，当需要建立数据库连接时，只需从“缓冲池”中取出一个，使用完毕之后再放回去。我们可以通过设定连接池最大连接数来防止系统无尽的与数据库连接。更为重要的是我们可以通过连接池的管理机制监视数据库的连接的数量。', '', '0', '2017-12-25 15:56:35', '56', '1');
INSERT INTO `topic` VALUES ('2906', '33', '4', '如何取得1970到现在的毫秒数?', '88d8ba5e-d9cc-40dc-b174-5811e187de7f.', null, null, null, null, null, null, '可以用GETTIME()方法。', '', '0', '2017-12-25 15:56:43', '51', '1');
INSERT INTO `topic` VALUES ('2907', '3', '4', 'JNDI的全称', 'd740c76f-8f9f-4c5c-9e90-50ccb1f3a96f.', null, null, null, null, null, null, 'JAVA NAMING AND DIRECTORY INTERFACE，JAVA命名和目录接口，通过名称将资源与服务进行关联', '', '0', '2017-12-25 15:56:48', '56', '1');
INSERT INTO `topic` VALUES ('2908', '3', '4', 'heap和stack有什么区别', '447965ab-1c6c-4bed-ac66-238250c1e281.', null, null, null, null, null, null, '栈是一种线形集合，其添加和删除元素的操作应在同一段完成。栈按照后进先出的方式进行处理，堆是栈的一个组成元素', '', '0', '2017-12-25 15:56:56', '55', '1');
INSERT INTO `topic` VALUES ('2909', '3', '4', 'Tomcat中配置连接池的步骤', '798bcceb-27bd-495f-a525-ab2e5187ca5b.', null, null, null, null, null, null, '配置CONTEXT.XML文件\r\n	配置WEB.XML文件\r\n	添加数据库驱动文件\r\n	进行代码编写，实现查找数据源', '', '0', '2017-12-25 15:57:02', '56', '1');
INSERT INTO `topic` VALUES ('2910', '32', '4', '举例说明等值连接与自然连接的区别联系。', '158178b9-014c-4bbb-80a9-71fbd986d74e.', null, null, null, null, null, null, '区别：（1）等值连接中不要求相等属性值的属性名相同，而自然连接要求相等属性值的属性名必须相同，\r\n \r\n即两关系只有同名属性才能进行自然连接。  （2）在连接结果中，等值连接不将重复属性去掉，而自然连接去掉重复属性，也可以说在，自然连接是去掉重复列的等值连接。', '', '0', '2017-12-25 15:57:03', '67', '1');
INSERT INTO `topic` VALUES ('2911', '3', '4', '如何格式化日期?', '9a7cce9e-2861-465b-986d-cdb9402c581d.', null, null, null, null, null, null, '可以用SIMPLEDATEFORMAT DF=NEW SIMPLEDATEFORMAT(\"YYYY-MM-DD\");\r\n', '', '0', '2017-12-25 15:57:04', '51', '1');
INSERT INTO `topic` VALUES ('2912', '5', '4', 'jQuery 库中的 $() 是什么？', '0f3d2aaa-bc46-4633-9202-f5267d8cd693.', null, null, null, null, null, null, '$() 函数是 JQUERY() 函数的别称，乍一看这很怪异，还使 JQUERY 代码晦涩难懂。一旦你适应了，你会爱上它的简洁。$() 函数用于将任何对象包裹成 JQUERY 对象，接着你就被允许调用定义在 JQUERY 对象上的多个不同方法。你甚至可以将一个选择器字符串传入 $() 函数，它会返回一个包含所有匹配的 DOM 元素数组的 JQUERY 对象。这个问题我已经见过好几次被提及，尽管它非常基础，它经常被用来区分一个开发人员是否了解 JQUERY。', '', '0', '2017-12-25 15:57:14', '57', '1');
INSERT INTO `topic` VALUES ('2913', '3', '1', 'Java程序中，main方法的格式正确的是（    ）', '3e888f16-3a01-439b-804a-4dae1cb4586b.', 'A、static void main（String[] args）      ', 'B、public void main（String[] args）         ', 'C、public static void main（String[]s)   ', 'D、public static void main（String[] args） ', '', '', 'D', '', '0', '2017-12-25 15:57:20', '58', '1');
INSERT INTO `topic` VALUES ('2914', '3', '4', 'JSP分页显示的步骤', '1c5e9a7a-4b10-4578-b971-2f82dba98209.', null, null, null, null, null, null, '确定每页显示的数据数量\r\n	确定分页显示所需的总页数\r\n	编写SQL查询语句，实现数据查询\r\n	在JSP页面中进行分页显示设置', '', '0', '2017-12-25 15:57:24', '56', '1');
INSERT INTO `topic` VALUES ('2915', '5', '4', ' 网页上有 5 个&lt;div&gt; 元素，如何使用 jQuery来选择它们？', '7d49dccb-6c4a-40dc-a1fd-9741fc767e32.', null, null, null, null, null, null, '另一个重要的 JQUERY 问题是基于选择器的。JQUERY 支持不同类型的选择器，例如 ID 选择器、CLASS 选择器、标签选择器。鉴于这个问题没提到 ID 和 CLASS，你可以用标签选择器来选择所有的 DIV 元素。JQUERY 代码：$(\"DIV\")，这样会返回一个包含所有 5 个 DIV 标签的 JQUERY 对象。更详细的解答参见上面链接的文章。', '', '0', '2017-12-25 15:57:28', '57', '1');
INSERT INTO `topic` VALUES ('2916', '3', '4', '继承、重载、覆盖问题?', '1248353e-4bb6-468a-8f1a-663a12d9c8af.', null, null, null, null, null, null, '继承：子类继承父类，子类可以拥有父类中已定义的方法，并且子类可以修改父类中的方法使其更适合特殊需求。\r\n         重载：在一个类中方法名和返回类型相同，参数不同。\r\n         覆盖：在子类中覆盖父类的某个方法，要求方法名相同，参数类型相同。', '', '0', '2017-12-25 15:57:29', '51', '1');
INSERT INTO `topic` VALUES ('2917', '32', '4', '什么是事物？事物的提交和回滚是什么意思？', 'd241cebd-f7ba-473c-a065-e39d789a4029.', null, null, null, null, null, null, '定义：事物是数据库系统中执行的一个工作单位，它是由用户定义的一组操作序列。 提交：将事务中所有对数据库的更新写回到磁盘上的物理数据库中去，此时事物正常结束。  回滚：在事物运行的过程中发生了某种故障，事物不能继续执行，系统将事物中对数据库的所有已完成的更新操作全部撤销，再回滚到事务开始时的的状态。', '', '0', '2017-12-25 15:57:37', '67', '1');
INSERT INTO `topic` VALUES ('2918', '5', '4', ' 如何找到所有 HTML select 标签的选中项？', 'b1a86bc5-bf9e-4156-81a1-f5a7e05a5354.', null, null, null, null, null, null, '这是面试里比较棘手的 JQUERY 问题之一。这是个基础的问题，但是别期望每个 JQUERY 初学者都知道它。你能用下面的 JQUERY 选择器获取所有具备 MULTIPLE=TRUE 的 <SELECT > 标签的选中项： ?  1 $(\'[NAME=NAMEOFSELECTEDTAG] :SELECTED\')  这段代码结合使用了属性选择器和 :SELECTED 选择器，结果只返回被选中的选项。你可按需修改它，比如用 ID 属性而不是 NAME 属性来获取 <SELECT> 标签。', '', '0', '2017-12-25 15:57:44', '57', '1');
INSERT INTO `topic` VALUES ('2919', '3', '1', 'class Base {\r\nBase() { System.out.print(\"Base\"); }\r\n}\r\npublic class Alpha extends Base {\r\npublic static void main( String[] args ) {\r\nnew Alpha(); -----调用父类无参的构造方法\r\nnew Base();\r\n}\r\n}\r\n结果是什么?', 'bd5ac0bd-7dc9-4385-aace-5c48d0cde355.', 'Base', 'BaseBase', '编译失败.', '代码运行但没有输出.', '运行时抛出异常', '', 'B', '', '0', '2017-12-25 15:57:57', '53', '1');
INSERT INTO `topic` VALUES ('2920', '5', '4', '你是如何将一个 HTML 元素添加到 DOM 树中的？', 'd92c9b2d-25aa-42b7-a517-0a2e284ea06b.', null, null, null, null, null, null, '你可以用 JQUERY 方法 APPENDTO() 将一个 HTML 元素添加到 DOM 树中。这是 JQUERY 提供的众多操控 DOM 的方法中的一个。你可以通过 APPENDTO() 方法在指定的 DOM 元素末尾添加一个现存的元素或者一个新的 HTML 元素。 ', '', '0', '2017-12-25 15:57:59', '57', '1');
INSERT INTO `topic` VALUES ('2921', '32', '4', '并发操作会带来什么样的后果？', '74afceae-a386-49a9-96d8-0810092d3bf4.', null, null, null, null, null, null, '当同一数据库系统中有多个事务并发运行时，如果不加以适当控制，可能产生数据的不一致性。主要由以下三种：  （1）丢失更新               （2）污读               （3）不可重读', '', '0', '2017-12-25 15:58:00', '67', '1');
INSERT INTO `topic` VALUES ('2922', '5', '4', 'jsp和servlet之间的联系?\r\n', '2c544ae6-5100-4937-b482-faa2b8932c99.', null, null, null, null, null, null, 'JSP前段动态页面，SERVLET是纯JAVA类\r\n         JSP被编译之后会转换为SERVLET执行', '', '0', '2017-12-25 15:58:11', '51', '1');
INSERT INTO `topic` VALUES ('2923', '5', '4', '你能用 jQuery 代码选择所有在段落内部的超链接吗？', 'bf591b00-a0ab-42ba-b014-1a7e4dca5b67.', null, null, null, null, null, null, '这是另一个关于选择器的 JQUERY 面试题。就像其他问题那样，只需一行 JQUERY 代码就能搞定。你可以使用下面这个 JQUERY 代码片段来选择所有嵌套在段落（<P>标签）内部的超链接（<A>标签）……', '', '0', '2017-12-25 15:58:15', '57', '1');
INSERT INTO `topic` VALUES ('2924', '4', '1', '在J2EE中属于Web层的组件有:', 'ae407c00-3f91-4537-bd05-632adeefd8cd.', 'Servlet ', 'EJB', 'Applet', 'HTML', '', '', 'A', '', '0', '2017-12-25 15:58:24', '53', '1');
INSERT INTO `topic` VALUES ('2925', '3', '4', 'swtich()能否作用在byte、long、String上?', 'b1a0dd10-439a-4aff-b488-172bcb9ec604.', null, null, null, null, null, null, 'SWTICH()传递的应该是一个整数表达式，所以它的值只能是：INT、SHORT、CHAR、BYTE所以LONG和STRING都不能作用在SWTICH()上。', '', '0', '2017-12-25 15:58:29', '51', '1');
INSERT INTO `topic` VALUES ('2926', '5', '4', '$(this) 和 this 关键字在 jQuery 中有何不同？', '319d1b2f-9459-4410-a26c-8034e8a8f62c.', null, null, null, null, null, null, '这对于很多 JQUERY 初学者来说是一个棘手的问题，其实是个简单的问题。$(THIS) 返回一个 JQUERY 对象，你可以对它调用多个 JQUERY 方法，比如用 TEXT() 获取文本，用VAL() 获取值等等。而 THIS 代表当前元素，它是 JAVASCRIPT 关键词中的一个，表示上下文中的当前 DOM 元素。你不能对它调用 JQUERY 方法，直到它被 $() 函数包裹，例如 $(THIS)。 ', '', '0', '2017-12-25 15:58:33', '57', '1');
INSERT INTO `topic` VALUES ('2927', '3', '1', '下列属于是Java中正确注释的是（    ）。', '0bb1cf3f-c1b8-4d6e-a827-2f97a866dcdc.', '/这是注释', '//这是注释', '/*…*/这是注释', '/**…*/这是注释 ', '', '', 'B', '', '0', '2017-12-25 15:58:43', '58', '1');
INSERT INTO `topic` VALUES ('2928', '3', '4', '数组有没有length()这个方法?String呢?', '110ea6f1-db14-4d98-bdd7-d4078c9bf69d.', null, null, null, null, null, null, '数组里面没有LENGTH()方法，而是LENGTH属性。STRING有LENGTH()这个方法。\r\n', '', '0', '2017-12-25 15:58:45', '51', '1');
INSERT INTO `topic` VALUES ('2929', '3', '4', 'JSTL核心标签库中常用的标签', 'e465620a-1679-4760-aec7-07043dda36d7.', null, null, null, null, null, null, '通用标签；<C:SET>、<C:OUT>、<C:REMOVE>\r\n条件标签；<C:IF>、<C:CHOOSE>、<C:WHEN>、<C:OTHERWISE>\r\n迭代标签：<C:FOREACH>', '', '0', '2017-12-25 15:58:46', '56', '1');
INSERT INTO `topic` VALUES ('2930', '5', '4', 'jQuery中 detach() 和 remove() 方法的区别是什么?', 'ebf9b483-c299-47a3-a57c-2bf379036f1b.', null, null, null, null, null, null, '尽管 DETACH() 和 REMOVE() 方法都被用来移除一个DOM元素, 两者之间的主要不同在于 DETACH() 会保持对过去被解除元素的跟踪, 因此它可以被取消解除, 而 REMOVE() 方法则会保持过去被移除对象的引用. 你也还可以看看 用来向DOM中添加元素的 APPENDTO() 方法.', '', '0', '2017-12-25 15:58:49', '57', '1');
INSERT INTO `topic` VALUES ('2931', '5', '4', '什么是JavaScript', 'cfe66749-552e-4ea2-93ba-055002f5c045.', null, null, null, null, null, null, 'JAVASCRIPT是一种基于对象和事件驱动的、并具有安全性能的脚本语言', '', '0', '2017-12-25 15:59:01', '56', '1');
INSERT INTO `topic` VALUES ('2932', '5', '4', ' 你如何利用jQuery来向一个元素中添加和移除CSS类?', '0a190037-acda-4e39-bf71-b3e0705c97a7.', null, null, null, null, null, null, '通过利用 ADDCLASS() 和 REMOVECLASS() 这两个 JQUERY 方法。动态的改变元素的CLASS属性可以很简单例如. 使用类“.ACTIVE\"来标记它们的未激活和激活状态，等等. ', '', '0', '2017-12-25 15:59:01', '57', '1');
INSERT INTO `topic` VALUES ('2933', '5', '4', 'jsp中动态include和静态include的区别?', '86ea4dab-904a-4e5f-b219-564d742340fb.', null, null, null, null, null, null, '动态INCLUDE用JSP:INCLUDE实现，适用于动态页面，可以携带参数\r\n         静态INCLUDE用INCLUDE伪码实现，适用于静态页面', '', '0', '2017-12-25 15:59:02', '51', '1');
INSERT INTO `topic` VALUES ('2934', '4', '1', '在Servlet的生命周期中，容器只调用一次的方法是: ', 'e90605e0-f124-4a74-8d1f-2228aebd5709.', 'service', 'getServletConfig', 'init', 'destroy', '', '', 'C', '', '0', '2017-12-25 15:59:05', '53', '1');
INSERT INTO `topic` VALUES ('2935', '5', '4', ' jQuery.get() 和 jQuery.ajax() 方法之间的区别是什么?', '996963bc-a97b-4ec7-a7c4-e24433947970.', null, null, null, null, null, null, 'AJAX() 方法更强大，更具可配置性, 让你可以指定等待多久，以及如何处理错误。GET() 方法是一个只获取一些数据的专门化方法。', '', '0', '2017-12-25 15:59:16', '57', '1');
INSERT INTO `topic` VALUES ('2936', '3', '4', 'forward和redirect的区别?', '011ce12a-eff8-44a8-8381-fde8065dccc3.', null, null, null, null, null, null, 'FORWARD是转发，浏览器跳转后不显示新的地址。\r\n         REDIRECT是重定向，浏览器跳转后显示新的地址。\r\n         对比之下FORWARD更加高效，并且它有助于隐藏实际地址，但是有些情况则必须使用REDIRECT，否则会报异常。', '', '0', '2017-12-25 15:59:23', '51', '1');
INSERT INTO `topic` VALUES ('2937', '3', '1', '以下关于异常的说法正确的是：', '3625c2bd-25c9-4d2a-8a96-f09cd511be56.', '一旦出现异常，程序运行就终止了 ', '如果一个方法申明将抛出某个异常，它就必须真的抛出那个异常　', ' 在catch子句中匹配异常是一种精确匹配', ' 可能抛出系统异常的方法是不需要申明异常的', '', '', 'D', '', '0', '2017-12-25 15:59:28', '53', '1');
INSERT INTO `topic` VALUES ('2938', '5', '4', 'jQuery 中的方法链是什么？使用方法链有什么好处？', '2c7ec5a4-d4f5-40a3-8887-33e3175ccbe1.', null, null, null, null, null, null, '\r\n方法链是对一个方法返回的结果调用另一个方法，这使得代码简洁明了，同时由于只对 DOM 进行了一轮查找，性能方面更加出色。 ', '', '0', '2017-12-25 15:59:33', '57', '1');
INSERT INTO `topic` VALUES ('2939', '5', '4', 'JavaScript特点是什么？', '63e74dad-a99c-481d-b926-1325173ab576.', null, null, null, null, null, null, '向HTML页面中添加交互行为\r\n脚本语言，语法和JAVA类似\r\n解释性语言，边执行边解释', '', '0', '2017-12-25 15:59:34', '56', '1');
INSERT INTO `topic` VALUES ('2940', '5', '4', '你要是在一个 jQuery 事件处理程序里返回了 false 会怎样？', 'a336809d-b5ff-416c-b59e-bc9f4c7f642c.', null, null, null, null, null, null, '这通常用于阻止事件向上冒泡。', '', '0', '2017-12-25 15:59:50', '57', '1');
INSERT INTO `topic` VALUES ('2941', '3', '4', '引用传递和值传递?', '9915154b-0bd0-4933-bf56-29d4c7d92be7.', null, null, null, null, null, null, '引用传递：形参改变影响实参\r\n         值传递：形参改变不影响实参', '', '0', '2017-12-25 15:59:54', '51', '1');
INSERT INTO `topic` VALUES ('2942', '26', '4', '网页中引用JavaScript的方式', 'fa40aa88-17c0-4bd5-b5aa-96f8343ec668.', null, null, null, null, null, null, '使用<SCRIPT>标签    <SCRIPT LANGUAGE=\"JAVASCRIPT\"></SCRIPT>\r\n外部JS文件          <SCRIPT SRC=\"HELLO.JS\" LANGUAGE=\"JAVASCRIPT\"></SCRIPT>\r\n直接在HTML标签中    ONCLICK=\"JAVASCRIPT:ALERT(\'欢迎你\');\"', '', '0', '2017-12-25 15:59:56', '56', '1');
INSERT INTO `topic` VALUES ('2943', '26', '1', 'public class Foo {\r\npublic static void main(String[] args) {\r\ntry {\r\nreturn;\r\n} finally {\r\nSystem.out.println( \"Finally\" );\r\n}\r\n}\r\n}\r\n输出结果是什么? ', '7fc088a3-37e0-4731-ae54-ecfb441c9121.', 'Finally', '编译失败', '代码正常运行但没有任何输出.', '运行时抛出异常', '', '', 'A', '', '0', '2017-12-25 16:00:01', '53', '1');
INSERT INTO `topic` VALUES ('2944', '5', '4', '哪种方式更高效：document.getElementbyId(\"myId\") 还是 $(\"#myId\")？', 'ec6e8e90-5a24-4627-8ed7-a7808ab4699e.', null, null, null, null, null, null, '第一种，因为它直接调用了 JAVASCRIPT 引擎。', '', '0', '2017-12-25 16:00:03', '57', '1');
INSERT INTO `topic` VALUES ('2945', '32', '4', '数据库中为什么要有恢复子系统?它的功能是什么?', 'd24c26dd-c86f-44be-823b-9eb57b5b3dfa.', null, null, null, null, null, null, '因为计算机系统中硬件的故障、软件的错误、操作员的失误以及恶意的破坏是不可避免的，这些故障轻则造成运行事务非正常中断，影响数据库中数据的正确性，重则破坏数据库，使数据库中全部或部分数据丢失，因此必须要有恢复子系统。  恢复子系统的功能是：把数据库从错误状态恢复到某一已知的正确状态(亦称为一致状态或完整状态)。', '', '0', '2017-12-25 16:00:07', '67', '1');
INSERT INTO `topic` VALUES ('2946', '3', '4', 'assert是什么?什么时候用到?', '22864fd0-accd-48a9-97c0-b1b56bd43c43.', null, null, null, null, null, null, '断言，可以将断言看成是异常处理的一种高级形式，可以用来判断某个特定的表达式或值是否为真。', '', '0', '2017-12-25 16:00:17', '51', '1');
INSERT INTO `topic` VALUES ('2947', '3', '1', 'jsp指令中isELIgnored=\"boolean\"的意思是', '81605e37-29ac-4b03-9d3b-d828a957ce40.', '决定是否实现Servler的单线程模式，', '决定改页面是否是一个错误处理页面，', '决定是否支持EL表示，', '没有具体的含义。', '', '', 'C', '', '0', '2017-12-25 16:00:24', '53', '1');
INSERT INTO `topic` VALUES ('2948', '5', '4', 'typeof运算符作用', '29cfbe8b-173b-4324-ad2d-49b2a63d755f.', null, null, null, null, null, null, '检查变量的返回值类型', '', '0', '2017-12-25 16:00:24', '56', '1');
INSERT INTO `topic` VALUES ('2949', '32', '4', '数据库运行中可能产生的故障有哪几类?哪些故障影响事务的正常执行?哪些故障破坏数据库数据? ', 'a52909f0-c53c-41bd-ab4f-9a2f51754b73.', null, null, null, null, null, null, '数据库系统中可能发生各种各样的故障，大致可以分以下几类：  (1)事务内部的故障；  (2)系统故障；    ．  (3)介质故障；  (4)计算机病毒。  事务故障、系统故障和介质故障影响事务的正常执行；介质故障和计算机病毒破坏数据库数据。', '', '0', '2017-12-25 16:00:36', '67', '1');
INSERT INTO `topic` VALUES ('2950', '5', '4', 'prompt() 和alert()的区别', 'd466dd6f-9178-4a69-9ace-3158951d5e18.', null, null, null, null, null, null, 'PROMPT():向用户显示一个输入框，用来获取输入\r\n	ALERT()：显示一个提示框', '', '0', '2017-12-25 16:00:40', '56', '1');
INSERT INTO `topic` VALUES ('2951', '5', '1', '下面哪几种是属于jquery文档处理的？', 'e32a9078-5693-49d1-8b86-f7a3411ed981.', '包裹', '替换', '删除', '内部和外部插入', '', '', 'ABD', '', '0', '2017-12-25 16:00:51', '57', '1');
INSERT INTO `topic` VALUES ('2952', '26', '4', 'select执行顺序?', '86b33990-46ff-4f37-8cf6-943372b2ea32.', null, null, null, null, null, null, 'FROM\r\n         WHERE\r\n         GROUP BY\r\n         HAVING\r\n         SELECT\r\n         ORDER BY', '', '0', '2017-12-25 16:00:54', '51', '1');
INSERT INTO `topic` VALUES ('2953', '3', '1', '下面关于Java的引用，说法正确的是：', '5288db26-aeaf-40c7-9798-00fae9915dd2.', '应用实际上就是指针 　', '应用本身是Primitive', '引用就是对象本身', '一个对象只能被一个引用所指引', '', '', 'B', '', '0', '2017-12-25 16:00:55', '53', '1');
INSERT INTO `topic` VALUES ('2954', '5', '4', 'JQUERY--常用系统函数', '0efaddbf-0b1a-4451-bb60-3e3fd1e1b0e3.', null, null, null, null, null, null, 'PARSEINT (\"字符串\")   将字符串转换为整型数字 \r\n	PARSEFLOAT(\"字符串\")   将字符串转换为浮点型数字 \r\n	ISNAN()    用于检查其参数是否是非数字\r\n', '', '0', '2017-12-25 16:00:58', '56', '1');
INSERT INTO `topic` VALUES ('2955', '5', '4', 'JQUERY--Window对象的常用属性', 'ccf332a1-b409-4b00-bf5b-90ca9a1fb4f6.', null, null, null, null, null, null, 'HISTORY ：有关客户访问过的URL信息\r\nLOCATION: 有关当前URL信息', '', '0', '2017-12-25 16:01:10', '56', '1');
INSERT INTO `topic` VALUES ('2956', '33', '4', '什么是视图?游标是什么?', 'b3dab45b-05cf-40a3-be00-871d1c4c3472.', null, null, null, null, null, null, '视图是一种虚拟的表，具有和物理表相同的功能。游标是对查询出来的结果集作为一个单元来有效的处理，可以对结果集的当前行做修改。', '', '0', '2017-12-25 16:01:13', '51', '1');
INSERT INTO `topic` VALUES ('2957', '5', '1', '在jquery中，想要给第一个指定的元素添加样式，下面哪一个是正确的？', 'cc45449b-d4ef-4547-8a2f-c11e781cd37d.', 'firstB', 'eq(1)', 'css(name)', 'css(name,value)', '', '', 'C', '', '0', '2017-12-25 16:01:21', '57', '1');
INSERT INTO `topic` VALUES ('2958', '3', '1', '对于import java.util包，以下那种说法是错误的？', 'daf59373-aa5b-4965-8d81-443f1fbe5ade.', 'Vector类属于java.util包 　', 'Vector类放在…／java/util/目录下 　', 'Vector类放在java.util文件中 ', 'Vector类是Sun公司的产品', '', '', 'C', '', '0', '2017-12-25 16:01:22', '53', '1');
INSERT INTO `topic` VALUES ('2959', '32', '4', '什么是事务?什么是事锁?', '7349cfb1-46ed-4f85-bbab-aa987c9b8d58.', null, null, null, null, null, null, '事务就是被绑定在一起，作为一个逻辑单元执行的SQL语句。如果任何一个操作失败，那么整个就失败。共同失败或共同成功。锁可以保证事务的完整性和并发性。', '', '0', '2017-12-25 16:01:28', '51', '1');
INSERT INTO `topic` VALUES ('2960', '32', '4', '索引优缺点?', '1b3a1988-b30c-4985-87d7-c5b68c0e901b.', null, null, null, null, null, null, '索引可以提高对数据库中数据的检索，缺点是减慢了数据录入速度，同时也增加了数据库的尺寸大小。', '', '0', '2017-12-25 16:01:40', '51', '1');
INSERT INTO `topic` VALUES ('2961', '32', '4', '触发器?', 'a66f55fa-c8e9-4798-8f42-c235f67ec9a6.', null, null, null, null, null, null, '触发器是一种特殊的存储过程，主要通过事件来触发而被执行。', '', '0', '2017-12-25 16:01:51', '51', '1');
INSERT INTO `topic` VALUES ('2962', '3', '1', '在一个线程中Sleep（1000）方法，将使得该线程在多少时间后获得对CPU的控制（假设睡眠过程中不会有其他事件唤醒该线程）', '95c0a9fd-3eb6-4be2-b506-7ae947a04f8a.', '正好1000毫秒 　', '1000毫秒不到 　', '=>1000毫秒 ', '不一定', '', '', 'C', '', '0', '2017-12-25 16:01:57', '53', '1');
INSERT INTO `topic` VALUES ('2963', '5', '4', 'location对象href属性作用', 'b806ffbb-6084-4167-8552-1c97b642db1d.', null, null, null, null, null, null, 'HREF	设置或返回完整的URL', '', '0', '2017-12-25 16:02:05', '56', '1');
INSERT INTO `topic` VALUES ('2964', '33', '4', 'EJB和JavaBean的区别?', '2b1be6b6-b681-46da-a8e3-c70ffc986b34.', null, null, null, null, null, null, 'EJB不是一般的JAVABEAN，EJB是企业级的JAVABEAN，EJB一共分为3种，实体BEAN，消息BEAN，会话BEAN。书写EJB要遵循一定的规范，另外要运行EJB，你需要有相应的EJB容器，比如WEBLOGIC、JBOSS等，而JAVABEAN不需要，只需要安装TOMCAT就可以了。EJB用于服务端的应用开发，而JAVABEAN用于客户端应用开发。', '', '0', '2017-12-25 16:02:08', '51', '1');
INSERT INTO `topic` VALUES ('2965', '32', '4', '数据模型包含哪三个方面的要素？', '253ca455-7418-42b4-9010-8bd00fd323ce.', null, null, null, null, null, null, ' 1)、数据结构描述了系统的静态特性，是所研究对象的类型的集合，这些对象是数据可的组成部分。    2）、数据操作描述了系统的动态特性，是对各种对象实例允许执行的操作集合。   3）、数据的完整性约束条件是一组完整性规则的集合。', '', '0', '2017-12-25 16:02:09', '67', '1');
INSERT INTO `topic` VALUES ('2966', '5', '4', 'Document对象常用方法', 'dccfa9e3-4f91-47e5-9c11-ebdf0c3d138b.', null, null, null, null, null, null, 'GETELEMENTBYID()	返回对拥有指定ID的第一个对象的引用\r\n	GETELEMENTSBYNAME()	返回带有指定名称的对象的集合\r\n	GETELEMENTSBYTAGNAME()	返回带有指定标签名的对象的集合\r\n	WRITE()	向文档写文本、HTML表达式或JAVASCRIPT代码\r\n', '', '0', '2017-12-25 16:02:22', '56', '1');
INSERT INTO `topic` VALUES ('2967', '4', '1', '在WEB-INF目录下，必须存放的文件为: ', '2a401ea9-c6e9-40e8-b336-0ac9ef1f3dc1.', 'class文件', 'web.xml', 'jar文件', 'html文件', '', '', 'B', '', '0', '2017-12-25 16:02:26', '53', '1');
INSERT INTO `topic` VALUES ('2968', '3', '4', 'Math对象中随机数方法', 'c652268b-bdfd-448d-aa0f-e7eef60b40b1.', null, null, null, null, null, null, 'RANDOM()	返回0~1之间的随机数	MATH.RANDOM();', '', '0', '2017-12-25 16:02:39', '56', '1');
INSERT INTO `topic` VALUES ('2969', '5', '4', '列举Java和JavaScript之间的区别？', 'fdf3eb89-9485-41b2-8f23-a4e1bde08816.', null, null, null, null, null, null, 'JAVA是一门十分完整、成熟的编程语言。相比之下，JAVASCRIPT是一个可以被引入HTML页面的编程语言。这两种语言并不完全相互依赖，而是针对不同的意图而设计的。', 'Java是一种面向对象编程（OOPS）或结构化编程语言，类似的如C ++或C，而JavaScript是客户端脚本语言，它被称为非结构化编程。', '0', '2017-12-25 16:02:42', '54', '1');
INSERT INTO `topic` VALUES ('2970', '4', '4', 'Struts2是如何实现MVC模式的?', '499df322-0a5b-4380-af64-e99b137fbcd6.', null, null, null, null, null, null, '在STRUTS2里面是将每次页面的请求进行处理，然后将请求需要输出的数据转发到需要做数据显示的页面。STRUTS2只是起到一个数据接收和转接的功能，就是CONTROLLER控制器，而传来数据的页面叫VIEW显示层，STRUTS2将数据提交给进行处理的类叫MODEL模型层，专门进行数据处理和数据库的连接。\r\n', '', '0', '2017-12-25 16:02:43', '51', '1');
INSERT INTO `topic` VALUES ('2971', '32', '4', '简述调查用户需求的步骤。', 'dcf58727-1a21-4356-8691-c20c4389ff26.', null, null, null, null, null, null, '收集资料——分析整理——数据流图——数据字典——评审确认', '', '0', '2017-12-25 16:02:46', '67', '1');
INSERT INTO `topic` VALUES ('2972', '4', '1', ' 下面关于垃圾收集的说法正确的是：', '37f3506e-bde0-4614-bdc8-cb03b61c4ebd.', '一旦一个对象成为垃圾，就立刻被收集掉。', '对象空间被收集掉之后，会执行该对象的finalize方法', 'finalize方法和C++的析构函数是完全一回事情', '一个对象成为垃圾是因为不再有引用指着它，但是线程并非如此。', '', '', 'D', '', '0', '2017-12-25 16:02:56', '53', '1');
INSERT INTO `topic` VALUES ('2973', '4', '4', '为什么每次请求都要创建一个Action对象?', '291d364e-d1cc-4479-aac4-4c5110fd997c.', null, null, null, null, null, null, 'STRUTS2每次请求的时候都会创建一个ACTION实例，这样会保证线程的安全。STRUTS1只是在第一次请求的时候创建一个ACTION实例，以后每次相同的请求都直接从内存中去读取，它是单例模式，安全性较差。', '', '0', '2017-12-25 16:02:56', '51', '1');
INSERT INTO `topic` VALUES ('2974', '5', '1', '如果想在一个指定的元素后添加内容，下面哪个是实现该功能的？', '95cdb084-2d7f-4146-b878-553c3e28daad.', 'append(content)', 'appendTo(content)', 'insertAfter(content)', 'after(content)', '', '', 'D', '', '0', '2017-12-25 16:03:05', '57', '1');
INSERT INTO `topic` VALUES ('2975', '3', '4', 'Date对象常用方法', '1407da78-3ebc-41a3-9585-d91563f3f3ff.', null, null, null, null, null, null, 'GETDATE()	返回 DATE 对象的一个月中的每一天，其值介于1～31之间\r\nGETDAY()	返回 DATE 对象的星期中的每一天，其值介于0～6之间\r\nGETHOURS()	返回 DATE 对象的小时数，其值介于0～23之间\r\nGETMINUTES()	返回 DATE 对象的分钟数，其值介于0～59之间\r\nGETSECONDS()	返回 DATE 对象的秒数，其值介于0～59之间\r\nGETMONTH()	返回 DATE 对象的月份，其值介于0～11之间\r\nGETFULLYEAR()	返回 DATE 对象的年份，其值为4位数\r\nGETTIME()	返回自某一时刻（1970年1月1日）以来的毫秒数', '', '0', '2017-12-25 16:03:09', '56', '1');
INSERT INTO `topic` VALUES ('2976', '4', '4', 'Hibernate数据库标识与主键之间的认识?', '8f029d0f-aa49-46c4-a4d9-c784c9a4510d.', null, null, null, null, null, null, '标识是为了方便和简介映射文件，主键是为了让数据不会重复。', '', '0', '2017-12-25 16:03:09', '51', '1');
INSERT INTO `topic` VALUES ('2977', '4', '4', '配置了lazy=\"true\"一定会懒加载吗?', '9bb561f2-5282-4a29-ad58-5e93b480853f.', null, null, null, null, null, null, '不一定，如果在配置中你也使用了FETCH属性的话此时LAZY就会失效。', '', '0', '2017-12-25 16:03:21', '51', '1');
INSERT INTO `topic` VALUES ('2978', '5', '4', 'jQuery的优势', '191591bf-ff25-44f6-b87b-7c72bb1e2d66.', null, null, null, null, null, null, '        体积小，压缩后只有100KB左右\r\n	强大的选择器\r\n	出色的DOM封装\r\n	可靠的事件处理机制\r\n	出色的浏览器兼容性\r\n	使用隐式迭代简化编程\r\n	丰富的插件支持', '', '0', '2017-12-25 16:03:26', '56', '1');
INSERT INTO `topic` VALUES ('2979', '3', '1', '下面哪个不是JAVA关键字', 'a6c12d2e-dfcd-401a-a5d2-94d8a3f9b2ad.', 'integer', 'double', 'float', 'default', '', '', 'A', '', '0', '2017-12-25 16:03:32', '53', '1');
INSERT INTO `topic` VALUES ('2980', '32', '4', '简单介绍数据库系统的三级模式结构。', '7ad2b649-1086-4c04-b450-505a6723156d.', null, null, null, null, null, null, '外部级：外模式又称子模式，对应于用户级。它是某个或某几个用户所看到的数据库的数据视图，是与某一应用有关的数据的逻辑表示。  概念级：是对数据库中全部数据的逻辑结构和特征的总体描述，是所有用户的公共数据视图  内部级：内模式又称存储模式，对应于物理级，它是数据库中全体数据的内部表示或底层描述。', '', '0', '2017-12-25 16:03:32', '67', '1');
INSERT INTO `topic` VALUES ('2981', '4', '4', '请你谈谈对Hibernate OR映射的理解?', 'd37ec464-dcb9-4dc6-a9d9-848a57bde4c7.', null, null, null, null, null, null, '将数据库中的每一张表都映射成一个实体。', '', '0', '2017-12-25 16:03:33', '51', '1');
INSERT INTO `topic` VALUES ('2982', '5', '4', '解释一下什么是DOM对象，什么是jQuery对象', '476ffbad-2231-4888-9c42-b9dca788736f.', null, null, null, null, null, null, 'DOM对象：元素节点、文本节点、属性节点都是节点对象统称为DOM对象\r\n	JQUERY对象：使用JQUERY工厂函数包装后的DOM对象', '', '0', '2017-12-25 16:03:42', '56', '1');
INSERT INTO `topic` VALUES ('2983', '4', '4', 'spring和Hibernate继承后，定义事务管理特性的时候查询为什么要定义为read-only？', '485c7a0b-aa70-41ad-81d7-910917f0f574.', null, null, null, null, null, null, '因为添加、删除和更新都涉及到了数据库的修改，而查询并未涉及到数据库修改，所以只需要定义只读，这样可以提高效率，进行更加方便的事务管理。', '', '0', '2017-12-25 16:03:47', '51', '1');
INSERT INTO `topic` VALUES ('2984', '26', '4', '简写jQuery对象转DOM对象', '3f1d30b0-f0e3-48f2-ad49-5c1dbccddfc0.', null, null, null, null, null, null, 'VAR $TXT=$(\"#UNAME\");\r\nVAR TXTNAME =$TXT[0];\r\nVAR TXTNAME=$TXT.GET(0);\r\n', '', '0', '2017-12-25 16:03:56', '56', '1');
INSERT INTO `topic` VALUES ('2985', '32', '4', '何谓关系模式的规范化？', '4b844e91-5152-42b9-846e-a6de3760768c.', null, null, null, null, null, null, ' 关系数据库中的关系只有满足一定规范化的要求，才能消除各种异常，使结构合理。对于不同的规范化程度，可以用“范式”来衡量，记作NF。范式是表示关系模型的级别，是衡量关系模型规范化程度的标准。满足最低要求的为第一范式，简称1NF。', '', '0', '2017-12-25 16:03:57', '67', '1');
INSERT INTO `topic` VALUES ('2986', '32', '4', '什么是声明式的事务管理?为什么要用?spring如何实现声明式的事务管理?', '3afdbdf5-e5db-4990-bdf8-047f3f9431b0.', null, null, null, null, null, null, '声明式的事务管理主要是将在进行对数据库中数据的添加或者修改时需要执行事务管理，主要是为了避免在执行添加或修改的时候添加或修改不完全正确，导致数据丢失。SPRING使用AOP面向切面的思想进行事务管理的。', '', '0', '2017-12-25 16:04:01', '51', '1');
INSERT INTO `topic` VALUES ('2987', '3', '1', '每个使用Swing构件的程序必须有一个(   ).  ', 'fa2b2938-c6f7-404e-aee3-6f19d60eee15.', '按钮', '标签', '菜单', '容器  ', '', '', 'D', '', '0', '2017-12-25 16:04:08', '53', '1');
INSERT INTO `topic` VALUES ('2988', '5', '4', '简写DOM对象转jQuery对象', '89f88739-42f8-4680-b477-b2aacd442650.', null, null, null, null, null, null, 'VAR TXTNAME=DOCUMENT.GETELEMENTBYID(\"UNAME\"); //TXTNAME 是DOM对象\r\nVAR $TXT=$(TXTNAME);  //$TXT 是JQUERY对象', '', '0', '2017-12-25 16:04:12', '56', '1');
INSERT INTO `topic` VALUES ('2989', '4', '4', 'spring的IOC和DI?', 'f5ec045a-e79d-4b61-9312-5846fd491aea.', null, null, null, null, null, null, '控制反转和依赖注入是SPRING的两大基础作用。主要是将所有组件在SPRING提供的外部容器中加载。提高安全性，减低耦合性，使各个框架或者类之间的依赖性降低。', '', '0', '2017-12-25 16:04:17', '51', '1');
INSERT INTO `topic` VALUES ('2990', '3', '4', 'abstract的method是否可同时是static,是否可同时是native，是否可同时是synchronized?', 'd60fa1b0-3ce7-45cc-b89c-b59f07790bde.', null, null, null, null, null, null, ' 都不能', '', '0', '2017-12-25 16:04:26', '57', '1');
INSERT INTO `topic` VALUES ('2991', '3', '1', '下列标识符（名字）命名原则中，正确的是( )', '9a41a20e-4cac-4aba-9b83-8e0292361ecb.', '类名的首字母小写', '变量和方法名的首写字母大写 ', '接口名的首写字母小写', '常量完全大写', '', '', 'D', '', '0', '2017-12-25 16:04:29', '53', '1');
INSERT INTO `topic` VALUES ('2992', '4', '4', '为什么要用spring?', 'd2568392-410f-41ee-88a2-d2514fce9839.', null, null, null, null, null, null, '1、主要将各个框架有效的联系起来，缩短实际编程时间。\r\n         2、可以将各个框架进行有效的管理和控制，让数据传输安全。', '', '0', '2017-12-25 16:04:30', '51', '1');
INSERT INTO `topic` VALUES ('2993', '5', '4', 'JQUERY--基本选择器包括（6个）', 'efe5eaf2-5d9b-474c-99e6-1de526699e84.', null, null, null, null, null, null, '标签选择器：$(\"标签名\")  根据给定的标签名匹配元素\r\n	类选择器：  $(\".类样式名\") 根据给定的CLASS匹配元素\r\n	ID选择器：  $(\"#ID名\") 根据给定的ID匹配元素\r\n	并集选择器：$(\"标签,ID，类\") 用来合并元素集合\r\n	交集选择器：$(\"标签类/ID\")  可以对元素集合根据CLASS或ID再筛选\r\n	全局选择器：$(\"*\")          可以获取所有元素', '', '0', '2017-12-25 16:04:31', '56', '1');
INSERT INTO `topic` VALUES ('2994', '33', '4', '单例模式有哪些好处?', '5ac001de-4b3d-4dde-adf1-e443cd2863f1.', null, null, null, null, null, null, '单例模式是一种比较常见的设计模式，带给我们以下好处：\r\n         1：控制资源的使用\r\n         2：控制实例的产生数量\r\n         3：让多个不相关的两个线程或进程之间实现通信', '', '0', '2017-12-25 16:04:46', '51', '1');
INSERT INTO `topic` VALUES ('2995', '3', '4', '接口是否可继承接口? 抽象类是否可实现(implements)接口? 抽象类是否可继承实体类(concrete class)? ', '4a7644ba-1680-4523-8eb7-71e6a6024d6c.', null, null, null, null, null, null, '接口可以继承接口。抽象类可以实现(IMPLEMENTS)接口，抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。', '', '0', '2017-12-25 16:04:50', '57', '1');
INSERT INTO `topic` VALUES ('2996', '5', '4', 'JQUERY--层次选择器（3个）', '3f91d029-9b48-431f-9757-29375ed9a90e.', null, null, null, null, null, null, '后代选择器: $(\"标签 标签\")  获取元素的后代元素\r\n子选择器: $(\"标签>标签\")   获取元素的子元素\r\n*相邻元素选择器: $(\"标签+标签\") 选取紧邻目标元素的下一个元素\r\n同辈元素选择器: $(\"标签~标签\") 选取目标元素之后的所有同辈元素\r\n', '', '0', '2017-12-25 16:04:56', '56', '1');
INSERT INTO `topic` VALUES ('2997', '5', '3', ' JavaScript和ASP脚本相比，哪个更快？', 'b9adb9ed-7ecf-4eaa-a351-7ec53483cde4.', null, null, null, null, null, null, 'JAVASCRIPT更快', 'JavaScript是一种客户端语言，因此它不需要Web服务器的协助来执行。另一方面，ASP是服务器端语言，因此总是比JavaScript慢。值得注意的是，Javascript现在也可用于服务器端语言（nodejs）。', '0', '2017-12-25 16:04:58', '54', '1');
INSERT INTO `topic` VALUES ('2998', '3', '1', '类Test1定义如下： \r\npublic class Test1{ \r\n public float aMethod（float a，float b）{ return 0;} \r\n} \r\n将以下哪种方法插入行3是不合法的。', '4d817815-1305-4b1b-ad04-952c7cdb3eec.', 'public float aMethod（float a， float b，float c）{ return 0;} ', 'public float aMethod（float c，float d）{ return 0;} ', 'public int aMethod（int a， int b）{ return 0;} ', 'private float aMethod（int a，int b，int c）{ return 0;}', '', '', 'B', '', '0', '2017-12-25 16:05:16', '53', '1');
INSERT INTO `topic` VALUES ('2999', '3', '4', '编程题: 用最有效率的方法算出2乘以8等於几?', 'e5f9f4a8-7a15-44d4-839f-115157da973c.', null, null, null, null, null, null, '  2 << 3', '', '0', '2017-12-25 16:05:22', '57', '1');
INSERT INTO `topic` VALUES ('3000', '33', '4', '同步和异步，在什么情况下分别使用?', '03e1b07d-46dc-4a34-b5de-ed1e062836f2.', null, null, null, null, null, null, '如果数据将在线程间共享。例如正在写的数据以后可能被另一个线程读到，或者正在读的数据可能已经被另一个线程写过了，那么这些数据就是共享数据，必须进行同步存取。\r\n         当应用程序在对象上调用了一个需要花费很长时间来执行的方法，并且不希望让程序等待方法的返回时，就应该使用异步。在很多情况下采用异步往往更有效率。', '', '0', '2017-12-25 16:05:30', '51', '1');
INSERT INTO `topic` VALUES ('3001', '5', '4', 'JQUERY--属性选择器有哪些？', '85ab8482-6b59-4a2d-9771-9fb33ba17bca.', null, null, null, null, null, null, '$(\"[属性名]\")选取包含给定属性的元素\r\n$(\"[属性名=\'属性值\']\")选取等于给定属性是某个特定值的元素\r\n*$(\"[属性名!=\'属性值\']\")选取不等于给定属性是某个特定值的元素\r\n$(\"[属性名^=\'属性值\']\")选取给定属性是以某些特定值开始的元素\r\n$(\"[属性名$=\'属性值\']\")选取给定属性是以某些特定值结尾的元素\r\n$(\"[属性名*=\'属性值\']\")选取给定属性是以包含某些值的元素\r\n$(\"[属性名][属性名][属性名]\")选取满足多个条件的复合属性的元素', '', '0', '2017-12-25 16:05:35', '56', '1');
INSERT INTO `topic` VALUES ('3002', '3', '4', '两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?', '4eaf8b6e-7028-44a1-a44c-92c83da0096c.', null, null, null, null, null, null, ' 不对，有相同的HASH CODE。', '', '0', '2017-12-25 16:05:39', '57', '1');
INSERT INTO `topic` VALUES ('3003', '4', '4', '什么情况下不建议使用Hibernate?', '9e87d7ce-b1f6-48e7-a848-5ff05099fff8.', null, null, null, null, null, null, '当数据量大，并且表关系复杂的时候不建议使用。', '', '0', '2017-12-25 16:05:46', '51', '1');
INSERT INTO `topic` VALUES ('3004', '3', '4', '，两个对象值相同(x.equals(y) == true)，但却可有不同的hash code，这句话对不对?  不对，有相同的hash code。 第三十，当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递? ', '9e8a1473-3f08-4ae2-9bdd-5c5ca403dd39.', null, null, null, null, null, null, '是值传递。JAVA 编程语言只由值传递参数。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的内容可以在被调用的方法中改变，但对象的引用是永远不会改变的。', '', '0', '2017-12-25 16:05:56', '57', '1');
INSERT INTO `topic` VALUES ('3005', '5', '3', '什么是负无穷大？', '912f4225-fbf0-461f-80c6-391fa524b583.', null, null, null, null, null, null, '可以通过将负数除以零来得到。', '负无穷大是JavaScript中的一个数字', '0', '2017-12-25 16:05:57', '54', '1');
INSERT INTO `topic` VALUES ('3006', '3', '4', 'swtich是否能作用在byte上，是否能作用在long上，是否能作用在String上? ', '468fe09e-23b4-44de-9bdb-8a829af15a44.', null, null, null, null, null, null, 'SWITCH（EXPR1）中，EXPR1是一个整数表达式。因此传递给 SWITCH 和 CASE 语句的参数应该是 INT、 SHORT、 CHAR 或者 BYTE。LONG,STRING 都不能作用于SWTICH。', '', '0', '2017-12-25 16:06:12', '57', '1');
INSERT INTO `topic` VALUES ('3007', '32', '4', '简述JDBC?', 'a3c9a61c-120e-4ef5-89a7-26d42df7f42c.', null, null, null, null, null, null, 'JDBC数据库连接，是一种用于执行SQL语句的JAVA　API，可以为多种关系型数据库提供统一访问。', '', '0', '2017-12-25 16:06:21', '51', '1');
INSERT INTO `topic` VALUES ('3008', '3', '4', 'Anonymous Inner Class (匿名内部类) 是否可以extends(继承)其它类，是否可以implements(实现)interface(接口)? ', 'ad0d6a39-05a3-4efa-9ecb-85d5285f0e7c.', null, null, null, null, null, null, ' 匿名的内部类是没有名字的内部类。不能EXTENDS(继承) 其它类，但一个内部类可以作为一个接口，由另一个内部类实现。', '', '0', '2017-12-25 16:06:28', '57', '1');
INSERT INTO `topic` VALUES ('3009', '4', '4', 'Struts模型驱动?', 'f2845694-1ea9-47f3-9b67-a39d05b33e9d.', null, null, null, null, null, null, '封装请求参数', '', '0', '2017-12-25 16:06:38', '51', '1');
INSERT INTO `topic` VALUES ('3010', '3', '1', '哪个语句创建了一个数组实例？', 'e63822b4-1e55-4a13-a8d4-d97097ef7ba8.', 'int[] ia = new int [15]; ', 'float fa = new float [20]; ', 'char[] ca = “Some String”; ', 'int ia [][] = {4, 5, 6} {1, 2, 3};', '', '', 'A', '', '0', '2017-12-25 16:06:44', '53', '1');
INSERT INTO `topic` VALUES ('3011', '3', '4', 'Static Nested Class 和 Inner Class的不同，说得越多越好(面试题有的很笼统)。 ', 'a5145911-5a51-4996-860e-1081cfaf2b62.', null, null, null, null, null, null, 'NESTED CLASS （一般是C++的说法），INNER CLASS (一般是JAVA的说法)。JAVA内部类与C++嵌套类最大的不同就在于是否有指向外部的引用上。具体可见HTTP: //WWW.FRONTFREE.NET/ARTICLES/SERVICES/VIEW.ASP?ID=704&PAGE=1   注： 静态内部类（INNER CLASS）意味着1创建一个STATIC内部类的对象，不需要一个外部类对象，2不能从一个STATIC内部类的一个对象访问一个外部类对象', '', '0', '2017-12-25 16:06:45', '57', '1');
INSERT INTO `topic` VALUES ('3012', '33', '4', '控制流程?', 'd47d6d78-60f3-4994-853f-5b90f7c4f2f8.', null, null, null, null, null, null, '控制流程一般使用IF判断条件。有第二分支，多分支，循环结构。循环本质上也是通过判断来实现的。', '', '0', '2017-12-25 16:06:57', '51', '1');
INSERT INTO `topic` VALUES ('3015', '5', '4', 'JQUERY--淡入淡出效果', '4cbe57f4-e783-4d9f-932f-e777d8efa1d3.', null, null, null, null, null, null, 'FADEIN()	淡入效果\r\nFADEOUT()	淡出效果', '', '0', '2017-12-25 16:07:08', '56', '1');
INSERT INTO `topic` VALUES ('3016', '3', '1', '以public修饰的类如：public class Car{…} 则Car( ) ', 'c665990f-4d3e-44fb-9a7f-4337ec8e03aa.', '可被其它程序包中的类使用', '仅能被本程序包中的类使用 ', '不能被任意其它类使用', '不能被其它类继承', '', '', 'A', '', '0', '2017-12-25 16:07:10', '53', '1');
INSERT INTO `topic` VALUES ('3017', '5', '3', '什么是未声明和未定义的变量？', 'bd440633-1ea5-4344-a455-8f7d478aca60.', null, null, null, null, null, null, '未声明的变量是程序中不存在且未声明的变量。如果程序尝试读取未声明变量的值，则会遇到运行时错误。未定义的变量是在程序中声明但尚未给出任何值的变量。如果程序尝试读取未定义变量的值，则返回未定义的值。', '未声明的变量是程序中不存在且未声明的变量。如果程序尝试读取未声明变量的值，则会遇到运行时错误。未定义的变量是在程序中声明但尚未给出任何值的变量。如果程序尝试读取未定义变量的值，则返回未定义的值。', '0', '2017-12-25 16:07:10', '54', '1');
INSERT INTO `topic` VALUES ('3018', '26', '4', 'JQUERY--显示及隐藏元素', '8e6b004f-159a-4d93-a920-fac970d96eb9.', null, null, null, null, null, null, 'SHOW()           显示元素\r\nHIDE() 		 隐藏元素', '', '0', '2017-12-25 16:07:22', '56', '1');
INSERT INTO `topic` VALUES ('3019', '33', '4', '描述你的编程风格?', 'a9c296ed-5115-4747-b238-7a30fe8a35c5.', null, null, null, null, null, null, '类名首字母大写，常量一般全部大写，给自己的代码加注释', '', '0', '2017-12-25 16:07:32', '51', '1');
INSERT INTO `topic` VALUES ('3020', '3', '1', '下列哪个属于容器型构件( )', '724ffbd2-d164-46e0-ba52-b2164a2e6a5c.', 'JEdit', 'JButton', 'JPanel ', 'JTextField', '', '', 'C', '', '0', '2017-12-25 16:07:47', '53', '1');
INSERT INTO `topic` VALUES ('3021', '5', '4', 'JQUERY--html()和text() 的区别', 'ec6a9e4b-37d9-4e9f-aeba-e32de767713f.', null, null, null, null, null, null, '.HTML();                用于获取第一个匹配元素的HTML内容或文本内容\r\n.HTML(CONTENT);	 	用于设置所有匹配元素的HTML内容或文本内容\r\n.TEXT();                用于获取所有匹配元素的文本内容\r\n.TEXT(CONTENT);   	用于设置所有匹配元素的文本内容', '', '0', '2017-12-25 16:07:56', '56', '1');
INSERT INTO `topic` VALUES ('3022', '4', '4', 'Spring由那几个模块组成?', 'dd570bf4-9260-4a36-934f-3676aa4a3e68.', null, null, null, null, null, null, '1：SPRING核心容器：提供了SPRING框架的基本功能\r\n         2：SPRING AOP：通过配置管理特性\r\n         3：SPRING ORM：SPRING框架集成了若干ORM框架\r\n         4：SPRING DAO：打开关闭数据库连接\r\n         5：SPRING WEB：为基于WEB服务的应用程序提供上下文服务\r\n         6：SPRING CONTEXT：向SPRING框架提供上下文信息\r\n         7：SPRING MVC：分离模型、视图、控制器、以便更容易定制', '', '0', '2017-12-25 16:07:59', '51', '1');
INSERT INTO `topic` VALUES ('3023', '3', '4', '. Hibernate中：不看数据库，不看XML文件，不看查询语句，怎么样能   知道表结构？', '06417616-f180-4bb4-aede-c66494f14678.', null, null, null, null, null, null, '可以看与XML文件对应的域模型。', '', '0', '2017-12-25 16:08:02', '57', '1');
INSERT INTO `topic` VALUES ('3024', '4', '4', 'Hibernate工作原理，Hibernate数据持久化?', '100f7553-88e7-4970-90b2-3fe1f3eabf12.', null, null, null, null, null, null, 'HIBERNATE工作原理：\r\n         1：读取并解析映射信息，创建SESSIONFACTORY\r\n         2：打开SESSION\r\n         3：创建事物\r\n         4：持久化操作\r\n         5：提交事务\r\n         6：关闭SESSION\r\n         7：关闭SESSIONFACTORY\r\n         HIBERNATE持久化：HIBERNATE根据定义的映射规则将对象持久化保存到数据库，这就实现了对象的持久化。', '', '0', '2017-12-25 16:08:12', '51', '1');
INSERT INTO `topic` VALUES ('3025', '3', '4', '目前几种主流数据库软件的应用特点、适用范围各是什么？', 'cffe9e27-1ddd-4942-a13d-6fc938057cf5.', null, null, null, null, null, null, '国际国内的主导关系型数据库管理系统有SQL SERVER、ORACLE、SYBASE、INFORMIX和 DB2。本文从性能，可伸缩性和并行性，安全性，操作简便，使用风险，开放性，易维护性和价格，数据库二次开发方面比较了SQL SERVER，ORACLE、SYBASE、DB2、INFORMIX 数据库：', '', '0', '2017-12-25 16:08:15', '57', '1');
INSERT INTO `topic` VALUES ('3026', '5', '4', 'JQUERY--元素内部插入子节点', '9a01a416-6887-428a-bf87-1f162f7474b9.', null, null, null, null, null, null, '$(A).APPEND(B)           表示将B追加到A中\r\n$(A).APPENDTO(B)         表示把A追加到B中\r\n$(A).PREPEND (B)         表示将B前置插入到A中\r\n$(A).PREPENDTO (B)       表示将A前置插入到B中', '', '0', '2017-12-25 16:08:16', '56', '1');
INSERT INTO `topic` VALUES ('3027', '5', '3', '什么是全局变量？这些变量如何声明，使用全局变量有哪些问题？', '585fac3f-39e2-43ba-a397-2c59d6d64786.', null, null, null, null, null, null, '全局变量是整个代码长度可用的变量，也就是说这些变量没有任何作用域。VAR关键字用于声明局部变量或对象。如果省略VAR关键字，则声明一个全局变量。', '例：// Declare a global globalVariable = “Test”;', '0', '2017-12-25 16:08:19', '54', '1');
INSERT INTO `topic` VALUES ('3028', '3', '1', 'Java程序的执行过程中用到一套JDK工具，其中java.exe是指( ) ', '4782b67e-0fdd-4b55-9c04-53eaeb3aeaa7.', 'Java文档生成器', 'Java解释器 ', 'Java编译器', 'Java类分解器', '', '', 'B', '', '0', '2017-12-25 16:08:19', '53', '1');
INSERT INTO `topic` VALUES ('3029', '4', '4', 'Struts1和Struts2原理和区别?', '94282947-0feb-454d-9008-821e41eb026f.', null, null, null, null, null, null, 'STRUTS1和STRUTS2是两个完全不同的框架，STRUTS1以ACTIONSERVLET作为核心控制器，由ACTIONSERVLET负责拦截用户的所有请求。STRUTS2以核心控制器FILTERDISPATCHER为基础，包含了框架内部的控制流程和处理机制。', '', '0', '2017-12-25 16:08:26', '51', '1');
INSERT INTO `topic` VALUES ('3030', '3', '1', ' 下列关于构造方法的叙述中，错误的是( )', 'bb4f14b1-565c-4ddb-ae2d-f6cfa38d209f.', 'Java语言规定构造方法名与类名必须相同 ', 'Java语言规定构造方法没有返回值，但不用vold声明 ', 'Java语言规定构造方法不可以重载 ', 'Java语言规定构造方法只能通过new自动调用', '', '', 'C', '', '0', '2017-12-25 16:08:42', '53', '1');
INSERT INTO `topic` VALUES ('3031', '5', '4', '为什么要表单验证', 'ec48a093-89cb-4d54-bc30-044d263e9f7e.', null, null, null, null, null, null, '减轻服务器的压力\r\n保证输入的数据符合要求', '', '0', '2017-12-25 16:08:51', '56', '1');
INSERT INTO `topic` VALUES ('3032', '5', '4', 'jsp常用动作?', '9823e174-8b25-4067-adfe-b36299a228bd.', null, null, null, null, null, null, 'JSP:INCLUDE    引入一个文件\r\n         JSP:USEBEAN    实例化JAVABEAN\r\n         JSP:SETPROPERTY    设置JAVABEAN属性\r\n         JSP:GETPROPERTY    输出JAVABEAN属性\r\n         JSP:FORWARD    转发', '', '0', '2017-12-25 16:08:53', '51', '1');
INSERT INTO `topic` VALUES ('3033', '32', '4', 'SQL Server数据库有哪些文件类型，并简要说明其作用。', 'd265283f-c6a5-4767-bc6e-bbfa3ecf1186.', null, null, null, null, null, null, 'SQL SERVER数据库的文件类型有主数据文件、辅助数据文件和事务日志文件。  （1） 主数据文件是数据库的起点，指向数据库中文件的其他部分，同时也用来存放用户 数据。  （2） 辅助数据文件专门用来存放数据。  （3） 事务日志文件存放恢复数据库所需的所有信息。', '', '0', '2017-12-25 16:08:54', '67', '1');
INSERT INTO `topic` VALUES ('3034', '3', '4', '说说&和&&的区别。', '53eea63b-4399-4a7b-810a-5cf686a0b195.', null, null, null, null, null, null, '和&&都可以用作逻辑与的运算符，表示逻辑与（AND），当运算符两边的表达式的结果都为TRUE时，整个运算结果才为TRUE，否则，只要有一方为FALSE，则结果为FALSE。 &&还具有短路的功能，即如果第一个表达式为FALSE，则不再计算第二个表达式。  &还可以用作位运算符，当&操作符两边的表达式不是BOOLEAN类型时，&表示按位与操作。', '', '0', '2017-12-25 16:08:58', '57', '1');
INSERT INTO `topic` VALUES ('3035', '3', '1', '构造函数何时被调用( ) ', '21def159-f1cf-4210-bd19-972b007c31e7.', '类定义时', '类定义时', '调用对象方法时', '使用对象的变量时', '', '', 'B', '', '0', '2017-12-25 16:09:05', '53', '1');
INSERT INTO `topic` VALUES ('3036', '5', '3', '解释JavaScript中定时器的工作？如果有，也可以说明使用定时器的缺点？', '0acb03e2-f9bb-4bbd-81b3-1e6cc84462ae.', null, null, null, null, null, null, '定时器用于在设定的时间执行一段代码，或者在给定的时间间隔内重复该代码。这通过使用函数SETTIMEOUT，SETINTERVAL和CLEARINTERVAL来完成。SETTIMEOUT（FUNCTION，DELAY）函数用于启动在所述延迟之后调用特定功能的定时器。\r\nSETINTERVAL（FUNCTION，DELAY）函数用于在提到的延迟中重复执行给定的功能，只有在取消时才停止。\r\nCLEARINTERVAL（ID）函数指示定时器停止。', 'setTimeout（function，delay）函数用于启动在所述延迟之后调用特定功能的定时器。\r\nsetInterval（function，delay）函数用于在提到的延迟中重复执行给定的功能，只有在取消时才停止。\r\nclearInterval（id）函数指示定时器停止。', '0', '2017-12-25 16:09:08', '54', '1');
INSERT INTO `topic` VALUES ('3037', '32', '4', '约束是实现数据完整性的有效手段。SQL Server 2000中有哪些约束类型？', 'd86fd3cc-38bb-4a61-a8e7-c4d1430a97cc.', null, null, null, null, null, null, ' SQL SERVER 2000中的约束类型有主键约束(或PRIMARY KEY)，唯一键约束 (或UNIQUE KEY)，检查约束(或CHECK)，默认值约束(或DEFAULT)，参照完整性约束。', '', '0', '2017-12-25 16:09:19', '67', '1');
INSERT INTO `topic` VALUES ('3038', '3', '4', 'xml解析技术?', 'b48573ef-c54d-4413-ba0b-6b0a789c3b81.', null, null, null, null, null, null, '常用的DOM、SAX等\r\n         DOM：处理大型文件时性能下降的非常厉害，适合对XML的随机访问\r\n         SAX：事件驱动型的XML解析方法，适合对XML的顺序访问', '', '0', '2017-12-25 16:09:19', '51', '1');
INSERT INTO `topic` VALUES ('3039', '5', '4', '为什么需要正则表达式', 'e4b6b705-38c6-4df6-86ef-43983a96dd09.', null, null, null, null, null, null, '简洁的代码\r\n严谨的验证文本框中的内容', '', '0', '2017-12-25 16:09:27', '56', '1');
INSERT INTO `topic` VALUES ('3040', '33', '4', '多线程几种实现方法，同步?', 'd5f7d649-2341-408f-adc9-a8fb25f14458.', null, null, null, null, null, null, '多线程有两种实现方法，一种是继承THREAD类或者实现RUNNABLE接口。同步就是在方法返回类型后面加上SYNCHRONIZED。', '', '0', '2017-12-25 16:09:49', '51', '1');
INSERT INTO `topic` VALUES ('3041', '3', '4', '静态变量和实例变量的区别？', '23eaabbb-91a4-40cf-a8f0-8e7d88918de3.', null, null, null, null, null, null, '在语法定义上的区别：静态变量前要加STATIC关键字，而实例变量前则不加。  在程序运行时的区别：实例变量属于某个对象的属性，必须创建了实例对象，其中的实例变量才会被分配空间，才能使用这个实例变量。静态变量不属于某个实例对象，而是属于类，所以也称为类变量，只要程序加载了类的字节码，不用创建任何实例对象，静态变量就会被分配空间，静态变量就可以被使用了。  总之，实例变量必须创建对象后才可以通过这个对象来使用，静态变量则可以直接使用类名来引用。', '', '0', '2017-12-25 16:09:52', '57', '1');
INSERT INTO `topic` VALUES ('3042', '3', '4', '面向对象的特征?', 'f7c543ef-73e8-47db-b29a-e2b9853cf92f.', null, null, null, null, null, null, '1：封装：通过定义类并且给类的属性和方法加上访问控制\r\n         2：继承：子类继承父类，子类可以拥有父类中已定义的方法，并且子类可以修改父类中的方法使其更适合特殊需求。\r\n         3：多台：不同对象对统一消息作出不同响应称之为多态\r\n         4：抽象：忽略与当前主题无关的那些方面，将注意力集中在与当前目标有关的方面\r\n', '', '0', '2017-12-25 16:10:12', '51', '1');
INSERT INTO `topic` VALUES ('3043', '32', '4', '简要说明为什么要备份数据库？SQL Server数据库备份的方式有哪些？', 'a09e462c-fa11-43cb-a11a-2690b8bba71c.', null, null, null, null, null, null, '任何系统都不可避免会出现各种形式的故障，而某些故障可以导致数据库灾难性的损坏，\r\n \r\n所以备份数据库非常重要。   备份数据库的方式有：数据库完全备份（或完全备份）、数据库差异备份（或差异备份）、 事务日志备份和文件或文件组备份。', '', '0', '2017-12-25 16:10:32', '67', '1');
INSERT INTO `topic` VALUES ('3044', '26', '4', '请说出作用域public，private，protected，以及不写时的区别', '2ae4b290-6ee2-415f-b5ea-c48c3a12deb4.', null, null, null, null, null, null, '这四个作用域的可见范围如下表所示。  说明：如果在修饰的元素上面没有写任何访问修饰符，则表示FRIENDLY。 作用域    当前类  同一PACKAGE  子孙类   其他PACKAGE PUBLIC     √      √           √         √ PROTECTED  √      √           √         × FRIENDLY   √      √           ×          × PRIVATE    √      ×           ×         × ', '', '0', '2017-12-25 16:10:40', '57', '1');
INSERT INTO `topic` VALUES ('3045', '5', '3', 'ViewState和SessionState有什么区别？', '92461123-4ccc-4288-aafb-4c137ab31a03.', null, null, null, null, null, null, 'VIEWSTATE”特定于会话中的页面。\r\n“SESSIONSTATE”特定于可在WEB应用程序中的所有页面上访问的用户特定数据。', 'ViewState”特定于会话中的页面。\r\n“SessionState”特定于可在Web应用程序中的所有页面上访问的用户特定数据。', '0', '2017-12-25 16:10:44', '54', '1');
INSERT INTO `topic` VALUES ('3046', '33', '4', 'Servlet和CGI的区别?', '0041a98d-d0b9-4171-9e19-3efae2bd1318.', null, null, null, null, null, null, 'SERVLET与CGI的区别在于SERVLET处于服务器进程中，它通过多线程方式允许其SERVICE方法，一个实例可以服务于多个请求，并且其实例一般不会被销毁，而CGI对每个请求都产生新的进程，服务完后就销毁，所以效率上低于SERVLET。', '', '0', '2017-12-25 16:10:46', '51', '1');
INSERT INTO `topic` VALUES ('3047', '32', '4', '简述使用存储过程的优势是什么？', 'db614302-9247-4728-955a-33899a8bda4f.', null, null, null, null, null, null, '存储过程的优势主要有：  由于存储过程已经编译过了，所以执行速度快；  存储过程进行整体传输，减少了网络流量；  存储过程可以进行命名，以后可以重复使用', '', '0', '2017-12-25 16:10:58', '67', '1');
INSERT INTO `topic` VALUES ('3048', '3', '4', 'list、set、map问题?', '07998da4-3ebd-4c61-bbc8-162d3e03c79a.', null, null, null, null, null, null, 'SET    不允许重复，无序\r\n         LIST   允许重复，有序\r\n         MAP    成对的数据结构，键值必须具有唯一性', '', '0', '2017-12-25 16:11:00', '51', '1');
INSERT INTO `topic` VALUES ('3049', '3', '4', '写clone()方法时，通常都有一行代码，是什么？', 'fda0d7cc-24d5-439e-8f60-250a4d4b05e4.', null, null, null, null, null, null, 'CLONE 有缺省行为，SUPER.CLONE();因为首先要把父类中的成员复制到位，然后才是复制自己的成员。', '', '0', '2017-12-25 16:11:16', '57', '1');
INSERT INTO `topic` VALUES ('3050', '32', '4', '创建student表，包括两列，结构如下：code  数值型，长度为6；name  字符型，长度为8。', 'b4ae10f7-93ab-44ae-8b82-cb9b8fe62295.', null, null, null, null, null, null, ' SELECT * FROM STUDENT                                                                            WHERE NAME NOT IN                                                                                 (SELECT NAME FROM STUDENT GROUP BY NAME                                    HAVING COUNT(*)>1) ', '', '0', '2017-12-25 16:11:32', '67', '1');
INSERT INTO `topic` VALUES ('3052', '5', '4', '正则表达式每个字符含义', '9ac4d670-f34b-4cbb-973a-155e05b5a149.', null, null, null, null, null, null, '        符号	描述\r\n	/…/	代表一个模式的开始和结束\r\n	^	匹配字符串的开始\r\n	$	匹配字符串的结束\r\n	\\S	任何空白字符\r\n	\\S	任何非空白字符\r\n	\\D	匹配一个数字字符，等价于[0-9]\r\n	\\D	除了数字之外的任何字符，等价于[^0-9]\r\n	\\W	匹配一个数字、下划线或字母字符，等价于[A-ZA-Z0-9_]\r\n	\\W	任何非单字字符，等价于[^A-ZA-Z0-9_]\r\n	.	除了换行符之外的任意字符\r\n	{N}	匹配前一项N次\r\n	{N,}	匹配前一项N次，或者多次\r\n	{N,M}	匹配前一项至少N次，但是不能超过M次\r\n	*	匹配前一项0次或多次，等价于{0,}\r\n	+	匹配前一项1次或多次，等价于{1,}\r\n	\\	将下一字符标记为特殊字符、文本、\r\n	X|Y	匹配 X 或 Y\r\n	[XYZ]	字符集。匹配包含的任一字符。\r\n	[^XYZ]	反向字符集。匹配未包含的任何字符。\r\n	[A-Z]	字符范围。匹配指定范围内的任何字符。\r\n	？	匹配前一项0次或1次，也就是说前一项是可选的，等价于{0,1}', '', '0', '2017-12-25 16:11:47', '56', '1');
INSERT INTO `topic` VALUES ('3053', '3', '4', '请解释java实现可移植性的原理?', '047b72d6-8cf8-4779-b6b6-aed247f42070.', null, null, null, null, null, null, 'JAVA程序最终通过字节码文件运行，运行的时候字节码需要JVM（JAVA虚拟机）的支持，但是不同的操作系统上有不同的JVM，程序不关心操作系统，转关心JVM，只要JVM不改变，程序就可以在操作系统上任意的移植。', '', '0', '2017-12-25 16:11:53', '57', '1');
INSERT INTO `topic` VALUES ('3054', '3', '4', '请解释path和classpath的区别？', '0380f19d-6bf6-4e76-bec0-dc4203cda569.', null, null, null, null, null, null, 'PATH是WINDOWS的环境属性，用于指定可执行命令的路径；CLASSPATH：在JAVA程序执行的时候，用于指定类的加载路径。', '', '0', '2017-12-25 16:12:04', '57', '1');
INSERT INTO `topic` VALUES ('3055', '32', '4', '查询上面建立的student表，要求：查找所有记录的所有列。', '83f85deb-0bb2-4580-9cf9-faa4be327de7.', null, null, null, null, null, null, 'CREATE CLUSTERED INDEX INDEX1    ON  STUDENT(CODE)', '', '0', '2017-12-25 16:12:13', '67', '1');
INSERT INTO `topic` VALUES ('3056', '3', '4', '使用char型数据能否表示一个汉字？', '3421da65-8b4c-4be9-9d6e-d72ce445e37f.', null, null, null, null, null, null, '想要保存汉字，则语言环境必须是中文才可以保存，否则无法保存。（JAVA中使用的是UNICODE编码，而UNICODE编码本身包含ASCII码，UNICODE是使用十六进制表示的一种编码格式，可以表示出世界上任何的文字。）', '', '0', '2017-12-25 16:12:21', '57', '1');
INSERT INTO `topic` VALUES ('3057', '5', '4', '写出验证邮箱的简易正则表达式', 'a263dc1e-06a2-4cff-948b-e087063bf4bd.', null, null, null, null, null, null, '验证邮箱：VAR REG= /^\\W+@\\W+(\\.[A-ZA-Z]{2,3}){1,2}$/;', '', '0', '2017-12-25 16:12:22', '56', '1');
INSERT INTO `topic` VALUES ('3058', '3', '4', '请问如何计算2的3次方', 'a5f9a4d0-e542-41a5-9648-39ad4f4feeaf.', null, null, null, null, null, null, '（使用位运算）2左移两位，即2<<2;', '', '0', '2017-12-25 16:12:34', '57', '1');
INSERT INTO `topic` VALUES ('3059', '3', '4', '为什么构造方法的定义上不写返回值类型，如果不返回写一个void行不行？', '1f8ebc5e-1e2a-4adb-83ac-50c0abf41080.', null, null, null, null, null, null, '不行。如果构造方法上写上了VOID的话，则表示就是一个普通方法了，普通方法是在对象实例化之后调用的，而构造方法是在对象实例化的时候同时调用的。', '', '0', '2017-12-25 16:12:48', '57', '1');
INSERT INTO `topic` VALUES ('3060', '3', '4', '请解释String的两种比较方式？', 'a41c9866-5d4e-4d31-9813-a7d8fe6b456f.', null, null, null, null, null, null, 'STRING之中可以使用“==”和EQUALS()两种操作来进行字符串的比较；1)”==”比较的是两个字符串的内存地址数值，属于数值比较。 2)EQUALS()是STRING类提供的一个方法，可以用于字符串内容的比较。', '', '0', '2017-12-25 16:13:10', '57', '1');
INSERT INTO `topic` VALUES ('3061', '3', '4', '清解释String对象的两种实例化方式的区别？', '9bbd60b0-ec15-4881-bd67-583e6008eb08.', null, null, null, null, null, null, 'STRING对象实例化方式有两种：一种是直接赋值，另外一种是通过构造方法完成 1)直接赋值：之开辟一个堆内存空间，而且采用了共享设计模式，可以自动的入池， 以备下次对象继续使用 2)会开辟两块内存空间，其中有一块空间将成为垃圾，而且不会自动入池，但可以 使用INTERN()方法进行手工入池 3)从开发角度而言，很明显使用直接赋值的方式会更好一些。', '', '0', '2017-12-25 16:13:21', '57', '1');
INSERT INTO `topic` VALUES ('3062', '5', '4', '为什么要使用Ajax', '35f46de7-5346-4416-afdb-53498ad4239b.', null, null, null, null, null, null, '        无刷新：不刷新整个页面，只刷新局部\r\n	无刷新的好处\r\n		只更新部分页面，有效利用带宽\r\n		提供连续的用户体验\r\n		提供类似C/S的交互效果，操作更方便', '', '0', '2017-12-25 16:13:47', '56', '1');
INSERT INTO `topic` VALUES ('3064', '32', '4', '对上面建立的student表，要求：在code列上，建立索引。', '846f8981-92f0-434b-9aba-0ee3e4c53f0b.', null, null, null, null, null, null, 'SELECT *   INTO STUDENT2    FROM STUDENT WHERE 1>2', '', '0', '2017-12-25 16:14:07', '67', '1');
INSERT INTO `topic` VALUES ('3065', '3', '4', 'java哪些集合类是线程安全的', 'c9673bc9-0beb-42f6-944d-f4783b96153e.', null, null, null, null, null, null, 'VECTOR：就比ARRAYLIST多了个同步化机制（线程安全），因为效率较低，现在已经不太建议使用。在WEB应用中，特别是前台页面，往往效率（页面响应速度）是优先考虑的。  STATCK：堆栈类，先进后出  ENUMERATION：枚举，相当于迭代器  HASHTABLE：就比HASHMAP多了个线程安全', '', '0', '2017-12-25 16:14:07', '57', '1');
INSERT INTO `topic` VALUES ('3066', '26', '4', 'Java支持的数据类型有哪些？什么是自动拆装箱？', '78bf7524-edee-40fa-b4fa-3a9e72d9724f.', null, null, null, null, null, null, 'JAVA语言支持的8中基本数据类型是：BYTE\r\nSHORT\r\nINT\r\nLONG\r\nFLOAT\r\nDOUBLE\r\nBOOLEAN\r\nCHAR\r\n自动装箱是JAVA编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把INT转化成INTEGER，DOUBLE转化成DOUBLE，等等。反之就是自动拆箱。', '', '0', '2017-12-25 16:14:10', '52', '1');
INSERT INTO `topic` VALUES ('3067', '3', '4', '线程安全是什么意思 ', 'e9375a79-a053-4c32-b569-47b561d72289.', null, null, null, null, null, null, '就是线程同步的意思，就是当一个程序对一个线程安全的方法或者语句进行访问的时候，其他的不能再对他进行操作了，必须等到这次访问结束以后才能对这个线程安全的方法进行访问', '', '0', '2017-12-25 16:14:22', '57', '1');
INSERT INTO `topic` VALUES ('3068', '32', '4', '要求：建立表student3，包含3列：xh  数值型，长度为6；xm  字符型，长度为8；age 数值型，长度为2；且仅允许用户插入age大于0并且小于100的年龄。', '99a602bb-b409-4c08-b233-69bdc9f34083.', null, null, null, null, null, null, 'CREATE TABLE STUDENT3  ( XH   NUMERIC,     XM   VARCHAR(8),  AGE  NUMERIC(2) CHECK(AGE>0 AND AGE<100)   ) ', '', '0', '2017-12-25 16:14:32', '67', '1');
INSERT INTO `topic` VALUES ('3069', '3', '4', '九种基本数据类型的大小，以及他们的封装类。', '4f783994-990c-42f8-8bdd-33947be2e8ba.', null, null, null, null, null, null, 'JAVA提供了一组基本数据类型，包括BOOLEAN, BYTE, CHAR, SHORT,  INT, LONG, FLOAT, DOUBLE, VOID. 同时，JAVA也提供了这些类型的封装类，分别为BOOLEAN, BYTE, CHARACTER, SHORT, INTEGER, LONG, FLOAT, DOUBLE, VOID 既然提供了基本类型，为什么还要使用封装类呢  比如，如果想使用LIST来保存数值，由于LIST中只能添加对象，另外，有些情况下，我们也会编写诸如FUNC(OBJECT O)的这种方法', '', '0', '2017-12-25 16:14:48', '57', '1');
INSERT INTO `topic` VALUES ('3070', '5', '3', '什么是===运算符？', 'e4852b5d-c792-4eff-83da-8a6dc236e85f.', null, null, null, null, null, null, '===被称为严格等式运算符，当两个操作数具有相同的值而没有任何类型转换时，该运算符返回TRUE。', '===被称为严格等式运算符，当两个操作数具有相同的值而没有任何类型转换时，该运算符返回true。', '0', '2017-12-25 16:14:56', '54', '1');
INSERT INTO `topic` VALUES ('3071', '3', '4', 'Switch能否用string做参数', 'd2f9bdc7-4b49-46b9-8bfe-283c73f851ba.', null, null, null, null, null, null, '在 JAVA 7之前，SWITCH 只能支持 BYTE、SHORT、CHAR、INT或者其对应的封装类以及 ENUM 类型。在 JAVA 7中，STRING支持被加上了。', '', '0', '2017-12-25 16:15:01', '57', '1');
INSERT INTO `topic` VALUES ('3072', '3', '4', 'equals与==的区别。', '3e7029fa-0f05-4f50-8c3a-f50cbb3b7011.', null, null, null, null, null, null, '1.==是一个运算符。  2.EQUALS则是OBJECT对象的方法，可以.（点）出来。', '', '0', '2017-12-25 16:15:15', '57', '1');
INSERT INTO `topic` VALUES ('3073', '3', '4', 'Hashcode的作用', 'e2cf2815-8132-4f30-bbcc-d1dcf4252752.', null, null, null, null, null, null, 'HASHCODE这个方法是用来鉴定2个对象是否相等的，HASHCODE方法一般用户不会去调用，比如在HASHMAP中，由于KEY是不可以重复的，他在判断KEY是不是重复的时候就判断了HASHCODE这个方法，而且也用到了EQUALS方法。', '', '0', '2017-12-25 16:15:31', '57', '1');
INSERT INTO `topic` VALUES ('3074', '3', '4', '对象的三大状态', '86b38521-3c4f-4eee-9b27-2651f837c11d.', null, null, null, null, null, null, '自由(TRANSIENT)\r\n与 SESSION 无关\r\n持久(PERSISTENT)\r\n由 SESSION 来管理\r\n在持久状态中通过 GET 方法取出对方\r\n游离(DETACHED)\r\n被 SESSION 抛弃', '', '0', '2017-12-25 16:15:38', '51', '1');
INSERT INTO `topic` VALUES ('3075', '5', '3', '说明如何使用JavaScript提交表单？', '7b903819-c06e-41f1-9029-5623a31c2d46.', null, null, null, null, null, null, '要使用JAVASCRIPT提交表单，请使用\r\nDOCUMENT.FORM [0] .SUBMIT（）;', '要使用JavaScript提交表单，请使用\r\ndocument.form [0] .submit（）;', '0', '2017-12-25 16:15:45', '54', '1');
INSERT INTO `topic` VALUES ('3076', '4', '4', 'Hibernate工作原理及为什么要用？', 'e3ef036f-6c27-4672-9528-aace0e5b5c5c.', null, null, null, null, null, null, '原理： 1.读取并解析配置文件 2.读取并解析映射信息，创建SESSIONFACTORY 3.打开SESSION 4.创建事务TRANSATION 5.持久化操作 6.提交事务 7.关闭SESSION 8.关闭SESSTIONFACTORY \r\n\r\n为什么要用： 1. 对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。 2. HIBERNATE是一个基于JDBC的主流持久化框架，是一个优秀的ORM实现。他很大程度的简化DAO层的编码工作 3. HIBERNATE使用JAVA反射机制，而不是字节码增强程序来实现透明性。 4. HIBERNATE的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。 ', '', '0', '2017-12-25 16:15:52', '55', '1');
INSERT INTO `topic` VALUES ('3077', '3', '4', ' Map、Set、List、Queue、Stack的特点与用法', 'a41481eb-95b6-4a49-8f81-ecb30ce9ffbc.', null, null, null, null, null, null, 'SET集合类似于一个罐子，\"丢进\"SET集合里的多个对象之间没有明显的顺序。 LIST集合代表元素有序、可重复的集合，集合中每个元素都有其对应的顺序索引。 STACK是VECTOR提供的一个子类，用于模拟\"栈\"这种数据结构(LIFO后进先出) QUEUE用于模拟\"队列\"这种数据结构(先进先出 FIFO)。  MAP用于保存具有\"映射关系\"的数据，因此MAP集合里保存着两组值 ', '', '0', '2017-12-25 16:15:56', '57', '1');
INSERT INTO `topic` VALUES ('3078', '4', '4', 'Hibernate是如何延迟加载? ', 'd64d0046-1016-4a09-9475-1abf2c67a9fc.', null, null, null, null, null, null, '1. HIBERNATE2延迟加载实现：A)实体对象 B)集合（COLLECTION） \r\n\r\n2. HIBERNATE3 提供了属性的延迟加载功能 当HIBERNATE在查询数据的时候，数据并没有存在与内存中，当程序真正对数据的操作时，对象才存在与内存中，就实现了延迟加载，他节省了服务器的内存开销，从而提高了服务器的性能。  ', '', '0', '2017-12-25 16:16:08', '55', '1');
INSERT INTO `topic` VALUES ('3079', '4', '4', 'Hibernate中怎样实现类之间的关系?(如：一对多、多对多的关系) ', 'a3931424-d42a-40f2-be77-c26e92bb35f2.', null, null, null, null, null, null, '类与类之间的关系主要体现在表与表之间的关系进行操作，它们都市对对象进行操作，我们程序中把所有的表与类都映射在一起，它们通过配置文件中的MANY-TO-ONE、ONE-TO-MANY、MANY-TO-MANY ', '', '0', '2017-12-25 16:16:22', '55', '1');
INSERT INTO `topic` VALUES ('3080', '3', '4', ' TreeMap、HashMap、LindedHashMap的区别', '700f19d4-797d-46a6-92a7-f80f2c50f3a3.', null, null, null, null, null, null, 'HASHMAP 是一个最常用的MAP,它根据键的HASHCODE 值存储数据,根据键可以直接获取它的值，具有很快的访问速度，遍历时，取得数据的顺序是完全随机的。  LINKEDHASHMAP保存了记录的插入顺序，在用ITERATOR遍历LINKEDHASHMAP时，先得到的记录肯定是先插入的.也可以在构造时用带参数，按照应用次数排序  TREEMAP取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TREEMAP会更好。', '', '0', '2017-12-25 16:16:23', '57', '1');
INSERT INTO `topic` VALUES ('3081', '4', '4', 'hibernate的核心配置文件是什么及其作用？', '318de6f3-e54c-4e4e-bb53-438d21628860.', null, null, null, null, null, null, 'HIBERNATE.CFG.XML:数据库连接、指定相关的映射文件\r\n*.HBM.XML:具体的 O/R MAPPING 说明', '', '0', '2017-12-25 16:16:29', '51', '1');
INSERT INTO `topic` VALUES ('3082', '4', '4', 'Struts1流程：', 'e533f635-c907-4278-b90d-b2834142ec66.', null, null, null, null, null, null, '1、客户端浏览器发出HTTP请求。2、根据WEB.XML配置，该请求被ACTIONSERVLET接收。3、根据STRUTS- CONFIG.XML配置， ACTIONSERVLET先将请求中的参数填充到ACTIONFORM中，然后ACTIONSERVLET再将请求发送到ACTION 进行处理。4、是否验证，需要验证则调用ACTIONFORM的VALIDATE方法，验证失败则跳转到INPUT，成功则继续。5、ACTION从 ACTIONFORM获得数据，调用JAVABEAN 中的业务方法处理数据。6、ACTION返回ACTIONFORWARD对象，跳转到相应JSP页面或ACTION。7、返回HTTP响应到客户端浏览 器。\r\n\r\n \r\n\r\nMVC设计模式：MODAL：“模型” 也称业务逻辑，是正真完成任务的代码,相当与JAVABEANVIEW：视图，其实就是显示界面，相当于JSPCONTROLLER：控制器，他控制模型 和视图的交互过程，相当于SERVLETSTRUTS1是基于MVC设计模式HIBERNATE是基于ORM对象关系映射 ', '', '0', '2017-12-25 16:16:52', '55', '1');
INSERT INTO `topic` VALUES ('3083', '3', '4', 'Java面向对象的三个特征与含义', '22b008fa-0f58-4e20-ba68-45e2d9415be0.', null, null, null, null, null, null, '封装性：它是将类的一些敏感信息隐藏在类的类部，不让外界直接访问到   继承性：子类通过一种方式来接受父类所有的公有的，受保护的成员变量和成员方法  多态性：程序在运行的过程中，同一种类型在不同的条件下表现不同的结果', '', '0', '2017-12-25 16:17:00', '57', '1');
INSERT INTO `topic` VALUES ('3084', '4', '4', 'struts是什么？', '1714e5d7-fc59-4aba-bd89-6fa36e9ff0bf.', null, null, null, null, null, null, 'STRUTS1是基于JSP和SERVLET的一个开源的WEB应用框架，使用的是MVC的设计模式STRUTS2是基于WEBWORK技术的框 架，是SUN和WEBWORK公司联手开发的一个功能非常齐全的框架，STRUTS2和STRUTS1没有任何关系，是一个全新的框架 ', '', '0', '2017-12-25 16:17:06', '55', '1');
INSERT INTO `topic` VALUES ('3085', '3', '4', 'Override和Overload的含义去区别', 'e84ba557-c408-4067-9604-6b5e14845a77.', null, null, null, null, null, null, '方法的重写OVERRIDING和重载OVERLOADING是JAVA多态性的不同表现。重写 OVERRIDING是父类与子类之间多态性的一种表现，重载OVERLOADING是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (OVERRIDING)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(OVERLOADING)。OVERLOADED的方法是可以改变返回值的类型。 ', '', '0', '2017-12-25 16:17:16', '57', '1');
INSERT INTO `topic` VALUES ('3086', '32', '4', '自定义内嵌表值函数与视图的使用有什么不同？', '27ef2534-2a17-4407-b35a-6170ec2027fe.', null, null, null, null, null, null, '内嵌标值函数可用于实现参数化视图的功能。这种类型的函数在使用参数和扩展索引 视图方面提供了比视图更多的灵活性。', '', '0', '2017-12-25 16:17:17', '67', '1');
INSERT INTO `topic` VALUES ('3087', '3', '4', ' Interface与abstract类的区别', '92621795-05b4-475c-8e26-97b31cb091dc.', null, null, null, null, null, null, '接口可以多重继承，抽象类不可以  接口定义方法，不给实现；而抽象类可以实现部分方法  接口中基本数据类型的数据成员，都默认为STATIC和FINAL，抽象类则不是', '', '0', '2017-12-25 16:17:30', '57', '1');
INSERT INTO `topic` VALUES ('3088', '4', '4', 'spring是什么？', 'a561d90e-13e5-4d57-96b6-59ee0a1dae88.', null, null, null, null, null, null, 'SPRING是一个集成了许多第三方框架的大杂烩，其核心技术是IOC（控制反转，也称依赖注入）和AOP（面向切面编程） \r\n\r\n ', '', '0', '2017-12-25 16:17:30', '55', '1');
INSERT INTO `topic` VALUES ('3089', '3', '4', 'float f=3.4;是否正确？ ', '50a0041b-4673-4ca6-a2fb-537b7eb9a5ee.', null, null, null, null, null, null, '不正确。3.4是双精度数，将双精度型（DOUBLE）赋值给浮点型（FLOAT）属于下转型（DOWN-CASTING，也称为窄化）会造成精度损失，因此需要强制类型转换FLOAT F =(FLOAT)3.4; 或者写成FLOAT F =3.4F;。', '', '0', '2017-12-25 16:17:36', '53', '1');
INSERT INTO `topic` VALUES ('3091', '3', '4', ' Static class 与non static class的区别', '8d48ce77-773a-4e4b-8a3c-07cb4ce8376d.', null, null, null, null, null, null, '内部静态类不需要有指向外部类的引用。但非静态内部类需要持有对外部类的引用。 非静态内部类能够访问外部类的静态和非静态成员。静态类不能访问外部类的非静态成员。他只能访问外部类的静态成员。一个非静态内部类不能脱离外部类实体被创建，一个非静态内部类可以访问外部类的数据和方法，因为他就在外部类里面。', '', '0', '2017-12-25 16:17:47', '57', '1');
INSERT INTO `topic` VALUES ('3092', '3', '4', 'Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？', 'c2072f05-e4d3-4cbc-ad16-7da8efab29b7.', null, null, null, null, null, null, '当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，JAVA编译器会为这个类创建一个默认的构造函数。\r\n\r\nJAVA中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。\r\n\r\nJAVA不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，JAVA不会创建默认的复制构造函数。', '', '0', '2017-12-25 16:17:48', '59', '1');
INSERT INTO `topic` VALUES ('3093', '3', '4', 'short s1 = 1; s1 = s1 + 1;有错吗?short s1 = 1; s1 += 1;有错吗？ ', 'aa28de56-5e24-4006-b0e9-714951d40b20.', null, null, null, null, null, null, '对于SHORT S1 = 1; S1 = S1 + 1;由于1是INT类型，因此S1+1运算结果也是INT 型，需要强制转换类型才能赋值给SHORT型。而SHORT S1 = 1; S1 += 1;可以正确编译，因为S1+= 1;相当于S1 = (SHORT)(S1 + 1);其中有隐含的强制类型转换。', '', '0', '2017-12-25 16:17:48', '53', '1');
INSERT INTO `topic` VALUES ('3094', '18', '3', 'bash的功能主要有：（）（）（）（）（）（）（）', '0f18b7a8-574e-4609-b402-fcc01ea0ff1b.', null, null, null, null, null, null, '命令编修能力；命令与文件补全功能；命令别名配置功能；工作控制、前景背景控制；程序化脚本；通配符', '', '0', '2017-12-25 16:17:49', '29', '1');
INSERT INTO `topic` VALUES ('3095', '4', '4', 'hibernate是什么？', '1284fd7b-ec43-41b0-91fd-f7767e4e95b1.', null, null, null, null, null, null, 'HIBERNATE是基于ORM对象关系映射（完成对象数据到关系数据映射的机制）实现的,做数据持久化的工具 ', '', '0', '2017-12-25 16:17:56', '55', '1');
INSERT INTO `topic` VALUES ('3097', '32', '4', '什么是数据库备份和恢复？', 'd6301327-2cca-4d58-a746-7335c254deb6.', null, null, null, null, null, null, '备份是指将当前的数据库系统、数据文件或日志文件复制到一个专门的备份服务器、 活动磁盘或者其他能长期存储数据的介质上，作为副本。数据库备份记录了在进行备份这一操作时数据库中所有数据的状态。一旦数据库因意外而遭损坏，这些备份文件可用来恢复数据库。  恢复是与备份相对应的数据库管理工作，系统进行数据库恢复的过程中，自动执行安全性 检查，然后根据数据库备份自动创建数据库结构，并且恢复数据库中的数据。', '', '0', '2017-12-25 16:18:01', '67', '1');
INSERT INTO `topic` VALUES ('3098', '3', '4', 'Java有没有goto？ ', '6146ee19-e1f4-4e87-91c2-ed4649823f0c.', null, null, null, null, null, null, 'GOTO 是JAVA中的保留字，在目前版本的JAVA中没有使用。（根据JAMES GOSLING（JAVA之父）编写的《THE JAVA PROGRAMMING LANGUAGE》一书的附录中给出了一个JAVA关键字列表，其中有GOTO和CONST，但是这两个是目前无法使用的关键字，因此有些地方将其称之为保留字，其实保留字这个词应该有更广泛的意义，因为熟悉C语言的程序员都知道，在系统类库中使用过的有特殊意义的单词或单词的组合都被视为保留字）', '', '0', '2017-12-25 16:18:08', '53', '1');
INSERT INTO `topic` VALUES ('3099', '4', '4', 'JSF是什么？', '02460111-29df-4cbb-a0a8-68fe977ff45e.', null, null, null, null, null, null, 'JAVASERVER FACE是基于组件的WEB开发框架，跟STURTS差不多的框架 \r\n\r\n ', '', '0', '2017-12-25 16:18:10', '55', '1');
INSERT INTO `topic` VALUES ('3100', '3', '4', '我们能不能声明main()方法为非静态？', '9b9dbda7-4507-486f-8b4c-24135875d9ff.', null, null, null, null, null, null, '不能，MAIN()方法必须声明为静态的，这样JVM才可以调用MAIN()方法而无需实例化它的类。  如果从MAIN()方法去掉“STATIC”这个声明，虽然编译依然可以成功，但在运行时会导致程序失败。', '', '0', '2017-12-25 16:18:12', '57', '1');
INSERT INTO `topic` VALUES ('3101', '3', '4', 'Set里的元素是不能重复的，那么用什么方法来区分重复与否呢? 是用==还是equals()? 它们有何区别?', '2e6f0940-0786-4b75-bd09-f7684491bc86.', null, null, null, null, null, null, 'SET里的元素是不能重复的，那么用ITERATOR()方法来区分重复与否。EQUALS()是判读两个SET是否相等。\r\n　　EQUALS()和==方法决定引用值是否指向同一对象EQUALS()在类中被覆盖，为的是当两个分离的对象的内容和类型相配的话，返回真值。', '', '0', '2017-12-25 16:18:13', '51', '1');
INSERT INTO `topic` VALUES ('3102', '4', '4', '数据库里面的索引和约束是什么?', 'abd7c092-3851-4ccf-a2d7-02a122d36371.', null, null, null, null, null, null, '索引是为了提高数据的检索速度，索引是建立在数据表上，根据一个或多个字段建立的约束是为了保持数据的完整性，约束有非空约束，主键约束，外键约束等等。', '', '0', '2017-12-25 16:18:25', '55', '1');
INSERT INTO `topic` VALUES ('3103', '3', '4', '给我一个你最常见到的runtime exception。', 'dadb37cf-0274-4761-ad25-cb421ef00aa9.', null, null, null, null, null, null, 'ARITHMETICEXCEPTION, ARRAYSTOREEXCEPTION, BUFFEROVERFLOWEXCEPTION, BUFFERUNDERFLOWEXCEPTION, CANNOTREDOEXCEPTION, CANNOTUNDOEXCEPTION, CLASSCASTEXCEPTION, CMMEXCEPTION, CONCURRENTMODIFICATIONEXCEPTION, DOMEXCEPTION, EMPTYSTACKEXCEPTION, ILLEGALARGUMENTEXCEPTION, ILLEGALMONITORSTATEEXCEPTION, ILLEGALPATHSTATEEXCEPTION, ILLEGALSTATEEXCEPTION, IMAGINGOPEXCEPTION, INDEXOUTOFBOUNDSEXCEPTION, MISSINGRESOURCEEXCEPTION, NEGATIVEARRAYSIZEEXCEPTION, NOSUCHELEMENTEXCEPTION, NULLPOINTEREXCEPTION, PROFILEDATAEXCEPTION, PROVIDEREXCEPTION, RASTERFORMATEXCEPTION, SECURITYEXCEPTION, SYSTEMEXCEPTION, UNDECLAREDTHROWABLEEXCEPTION, UNMODIFIABLESETEXCEPTION, UNSUPPORTEDOPERATIONEXCEPTION', '', '0', '2017-12-25 16:18:27', '51', '1');
INSERT INTO `topic` VALUES ('3104', '18', '4', '有些特殊情况中，我们想要让使用者只能使用 sendmail, pop3, ftp 等，但是不希望他可以远程联机进来，那么您可以这样做：', '2aafc48b-93b5-4673-b987-779a25339872.', null, null, null, null, null, null, '1. 将这些使用者都归纳在某一个特殊群组之下，例如 NOSSH 这个群组好了；\r\n2. 在 /ETC/SSH/SSHD_CONFIG 当中加入这一行：『 DENYGROUPS  NOSSH 』\r\n3. 重新启动 SSHD ： /ETC/INIT.D/SSHD RESTART\r\n', '', '0', '2017-12-25 16:18:28', '28', '1');
INSERT INTO `topic` VALUES ('3105', '3', '4', '不用main方法如何定义一个类？', 'd40c8f15-c1ca-4869-a184-84abd51eee81.', null, null, null, null, null, null, '不行，没有MAIN方法我们不能运行JAVA类。  在JAVA 7之前，你可以通过使用静态初始化运行JAVA类。但是，从JAVA 7开始就行不通了。', '', '0', '2017-12-25 16:18:31', '57', '1');
INSERT INTO `topic` VALUES ('3106', '3', '4', 'String类为什么是final的。', '5147f9fa-387a-4951-82bd-05bcf8460c85.', null, null, null, null, null, null, '主要是为了“效率”和“安全性”的缘故。若 STRING允许被继承, 由于它的高度被使用率,可能会降低程序的性能，所以STRING被定义成FINAL; ', '', '0', '2017-12-25 16:18:44', '57', '1');
INSERT INTO `topic` VALUES ('3107', '32', '4', '什么是视图？它和表有什么区别？', '1c4011ec-4f9e-4e1c-9b72-465b9ac2767f.', null, null, null, null, null, null, '视图是由一个或多个数据表（基本表）或视图导出的虚拟表或查询表，是关系数据库 系统提供给用户以多种角度观察数据库中数据的重要机制。  视图是虚表。所谓虚表，就是说视图不是表。因为视图只储存了她的定义(SELECT语句)，而 没有储存视图对应的数据，这些数据仍存放在原来的数据表(基表)，数据与基表中数据同步，即对视图的数据进行操作时，系统根据视图的定义去操作与视图相关联的基本表。', '', '0', '2017-12-25 16:18:47', '67', '1');
INSERT INTO `topic` VALUES ('3108', '3', '4', '使用final 关键字修饰一个变量时，是引用不能变，还是引用的对象不能变?', '5439ea39-2f7d-449c-aeab-19a11d2327f7.', null, null, null, null, null, null, '使用FINAL 关键字修饰一个变量时，是指引用变量不能变，引用变量所指向的对象中的内容还是可以改变的。', '', '0', '2017-12-25 16:18:54', '57', '1');
INSERT INTO `topic` VALUES ('3109', '3', '4', '多继承Java可以吗', '3a1eff08-324e-4d42-8bda-0fb1b9f9ea82.', null, null, null, null, null, null, '不支持，JAVA不支持多继承。每个类都只能继承一个类，但是可以实现多个接口。', '', '0', '2017-12-25 16:18:56', '59', '1');
INSERT INTO `topic` VALUES ('3110', '3', '4', 'Java 中应该使用什么数据类型来代表价格？', '65414a07-a85f-4b1e-a94e-f3ed37e190a1.', null, null, null, null, null, null, '如果不是特别关心内存和性能的话，使用BIGDECIMAL，否则使用预定义精度的 DOUBLE 类型。', '', '0', '2017-12-25 16:19:12', '57', '1');
INSERT INTO `topic` VALUES ('3111', '32', '4', 'drop， delete truncate的区别', 'cf9cad74-a984-40e0-830a-07857e1f9a2e.', null, null, null, null, null, null, '三者都是删除的意思，但是三者个有些区别\r\n\r\nDELETE和TRUNCATE只删除表的数据不删除表的结构\r\n速度 DROP > TRUNCATE > DELETE\r\n想删除部分数据时， DELETE 删除时要带上WHERE语句\r\n保留表而想删除所有的数据时用TRUNCATE', '', '0', '2017-12-25 16:19:13', '10', '1');
INSERT INTO `topic` VALUES ('3112', '32', '4', '自定义函数与存储过程的区别是什么？', '23cd3832-491c-4eae-b6cb-129ec1f73241.', null, null, null, null, null, null, '自定义函数在被调用的位置上返回数据值，存储过程既不能在被调用的位置上返 回数据，也不能被引用在语句当中。', '', '0', '2017-12-25 16:19:16', '67', '1');
INSERT INTO `topic` VALUES ('3113', '3', '4', 'Math.round(11.5) 等于多少？Math.round(-11.5)等于多少？ ', '31d9f6c0-750e-4a46-a4ce-158c298bb7b6.', null, null, null, null, null, null, 'MATH.ROUND(11.5)的返回值是12，MATH.ROUND(-11.5)的返回值是-11。四舍五入的原理是在参数上加0.5然后进行下取整。', '', '0', '2017-12-25 16:19:43', '52', '1');
INSERT INTO `topic` VALUES ('3114', '32', '4', ' 数据库中的乐观锁和悲观锁', '3f3e8a9e-5af8-41ec-ad8e-a7a214c47ae2.', null, null, null, null, null, null, '** 乐观 悲观 锁 主要是作用在并发访问控制**\r\n\r\n悲观锁 假定会发生并发冲突，屏蔽任何违反数据完整的操作\r\n乐观锁 假定不会发生冲突，只有在提交操作时检查是否违反数据的完整性', '', '0', '2017-12-25 16:19:43', '10', '1');
INSERT INTO `topic` VALUES ('3115', '18', '3', '磁盘阵列建置的考量依据为（）、（）、（）等；', 'e6181248-08a7-4fa0-8e50-cc4dcb848b79.', null, null, null, null, null, null, '容量 效能 数据可靠性', '', '0', '2017-12-25 16:19:49', '29', '1');
INSERT INTO `topic` VALUES ('3116', '3', '4', '安全失败(fail-safe)与快速失败(fail-fast)和的区别是什么？', 'd7e5156f-2ba3-4f9a-bf5c-de945ca3b251.', null, null, null, null, null, null, 'ITERATOR的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。JAVA.UTIL包下面的所有的集合类都是快速失败的，而JAVA.UTIL.CONCURRENT包下面的所有的类都是安全失败的。快速失败的迭代器会抛出CONCURRENTMODIFICATIONEXCEPTION异常，而安全失败的迭代器永远不会抛出这样的异常。', '', '0', '2017-12-25 16:20:10', '59', '1');
INSERT INTO `topic` VALUES ('3117', '32', '4', '开始事物', '3d4b6a23-6f7c-4807-8295-5401d4394d84.', null, null, null, null, null, null, 'BEGIN TRANSACTION', '', '0', '2017-12-25 16:20:11', '10', '1');
INSERT INTO `topic` VALUES ('3118', '32', '4', '提交事物', '549d1f30-6289-40bf-8fa3-4ac229fd55c4.', null, null, null, null, null, null, 'COMMIT TRANSACTION', '', '0', '2017-12-25 16:20:27', '10', '1');
INSERT INTO `topic` VALUES ('3119', '26', '4', '请尝试说明 SSH 在 Server 与 Client 端联机时的封包加密机制；', 'aedb5a51-4401-4543-af90-b4afbe2103b3.', null, null, null, null, null, null, '利用 KEY PAIR 来达到加密的机制：SERVER 提供 PUBLIC KEY 给 CLIENT 端演算 PRIVATE KEY ，以提供封包传送时的加密、解密！', '', '0', '2017-12-25 16:20:27', '28', '1');
INSERT INTO `topic` VALUES ('3120', '3', '4', '什么是JVM? 为什么称Java为跨平台的编程语言?', '929d9d74-e13f-4b85-a2c6-cb866b8af66e.', null, null, null, null, null, null, 'JAVA虚拟机(JAVA VIRTUAL MACHINE)是可以执行JAVA字节码的虚拟机，每个JAVA源文件将被编译成字节码文件，然后在JVM中执行。JAVA之所以被设计成可以在任意的平台运行，而不需要重写或者在不同的平台下重新编 译，这些都要归功于JAVA虚拟机(JVM),因为JVM非常了解特定的指令的长度以及底层硬件平台的特殊性。', '', '0', '2017-12-25 16:20:37', '57', '1');
INSERT INTO `topic` VALUES ('3121', '32', '4', '回滚事务', '122ec7a8-1cef-493a-9bbe-7e7f98b27d6f.', null, null, null, null, null, null, 'ROLLBACK TRANSACTION', '', '0', '2017-12-25 16:20:51', '10', '1');
INSERT INTO `topic` VALUES ('3122', '26', '4', 'Telnet 与 SSH 都是远程联机服务器，为何我们都会推荐使用 SSH 而避免使用 Telnet 呢？原因何在？', 'f97ddee8-6f18-485e-bd0a-8cc6faa9049a.', null, null, null, null, null, null, '因为 TELNET 除了使用『明码』传送数据外，本身 TELNET 就是很容易被入侵的一个服务器，所以当然也就比较危险了。 至于 SSH 其实也不是很安全的！由台湾计算机危机处理小组的文件可以明显的发现 OPENSSL + OPENSSH 也是常常有漏洞在发布！不过，比起 TELNET 来说，确实是稍微安全一些！', '', '0', '2017-12-25 16:20:55', '28', '1');
INSERT INTO `topic` VALUES ('3123', '3', '4', 'HashMap在Java中的的工作原理是什么？', '803b66b2-0ee3-42e2-aecc-1eb29519e93c.', null, null, null, null, null, null, 'JAVA中的HASHMAP是以键值对(KEY-VALUE)的形式存储元素的。HASHMAP需要一个HASH函数，它使用HASHCODE()和EQUALS()方法来向集合/从集合添加和检索元素。当调用PUT()方法的时候，HASHMAP会计算KEY的HASH值，然后把键值对存储在集合中合适的索引上。如果KEY已经存在了，VALUE会被更新成新值。HASHMAP的一些重要的特性是它的容量(CAPACITY)，负载因子(LOAD FACTOR)和扩容极限(THRESHOLD RESIZING)。', '', '0', '2017-12-25 16:21:09', '59', '1');
INSERT INTO `topic` VALUES ('3124', '18', '3', '磁盘阵列所建置的等级常见有的（）,（）, （）, （） 及 （）', '4a4f69ad-0711-4ab0-8587-9edd489aaf34.', null, null, null, null, null, null, ' RAID0   RAID1  RAID0+1  RAID5  RAID6', '', '0', '2017-12-25 16:21:13', '29', '1');
INSERT INTO `topic` VALUES ('3125', '32', '4', '事务具有以下4个基本特征', '39cb9c54-002b-4bff-90a5-8792861c5f45.', null, null, null, null, null, null, '\r\nATOMIC（原子性） 事务中的一系列的操作要么都完成，要么全部失败\r\nCONSISTENCY（一致性） 一个成功的事务应该讲数据写入的到数据库，否则就要回滚到最初的状态\r\nISOLATION（隔离性） 并发访问和修改的DULI\r\nDURABILITY（持久性） 事务结束应该讲事务的处理结构存储起来\r\n事务的语句\r\n', '', '0', '2017-12-25 16:21:28', '10', '1');
INSERT INTO `topic` VALUES ('3126', '26', '4', '请问 SSH 的配置文件是哪一个？如果我要修改让 root 无法使用 SSH 联机进入我的 SSH 主机，应该如何设定？又，如果要让 badbird 这个用户无法登入 SSH 主机，该如何设定？', '177ec503-ed3a-4fb5-bb94-209319ebc481.', null, null, null, null, null, null, 'SSH 配置文件档名为 SSHD_CONFIG ，通常放置在 /ETC/SSH/SSHD_CONFIG 内；如果不想让 ROOT 登入，可以修改 SSHD_CONFIG 内的参数成为：『PERMITROOTLOGIN NO 』，并重新启动 SSH 来设定！如果要让 BADBIRD 使用者无法登入，同样在 SSHD_CONFIG 里面设定为：『DENYUSERS BADBIRD』即可！', '', '0', '2017-12-25 16:21:28', '28', '1');
INSERT INTO `topic` VALUES ('3127', '26', '4', '在 Linux 上，预设的 Telnet 与 SSH 服务器使用的埠口(port number)各为多少？', '28333da8-84f1-43ff-9ed7-7cb24346d39b.', null, null, null, null, null, null, 'TELNET 与 SSH 的埠口分别是：23 与 22！请参考 /ETC/SERVICES 喔！', '', '0', '2017-12-25 16:21:43', '28', '1');
INSERT INTO `topic` VALUES ('3128', '26', '4', '如果发现我无法在 Client 端使用 ssh 程序登入我的 Linux 主机，但是 Linux 主机却一切正常，可能的原因为何？(防火墙、known_hosts...)', '0aa7eb8c-ec78-46ab-8adf-0e14f47adfbc.', null, null, null, null, null, null, '无法登入的原因可能有很多，最好先查询一下 /VAR/LOG/MESSAGES 里面的错误讯息来判断，当然，还有其他可能的原因为：\r\n被防火墙挡住了，请以 IPTABLES -L -N 来察看，当然也要察看 /ETC/HOSTS.DENY；\r\n可能由于主机重新启动过， PUBLIC KEY 改变了，请修改您的 ~/SSH/KNOWN_HOSTS 里面的主机 IP ；\r\n可能由于 /ETC/SSH/SSHD_CONFIG 里面的设定问题，导致您这个使用者无法使用；\r\n在 /ETC/PASSWD 里面，您的 USER 不具有可以登入的 SHELL ；\r\n其他因素(如账号密码过期等等)', '', '0', '2017-12-25 16:21:58', '28', '1');
INSERT INTO `topic` VALUES ('3130', '18', '3', 'LVM 强调的是:()', '3fa90213-8f6d-4123-a266-0993db40764d.', null, null, null, null, null, null, '弹性的变化文件系统的容量', '', '0', '2017-12-25 16:22:05', '29', '1');
INSERT INTO `topic` VALUES ('3131', '26', '4', '既然 ssh 是比较安全的资料封包传送方式，那么我就可以在 Internet 上面开放我的 Linux 主机的 SSH 服务了吗？！请说明您选择的答案的原因！\r\n', '98abbc0a-eb99-45f8-b516-e1271a0caced.', null, null, null, null, null, null, '最好不要对 INTERNET 开放您的 SSH 服务，因为 SSH 的加密函式库使用的是 OPENSSL ，一般 LINUX DISTRIBUTION 使用的 SSH 则是 OPENSSH ，这两个套件事实上仍有不少的漏洞被发布过，因此，最好不要对 INTERNET 开放，毕竟 SSH 对于主机的权限是很高的！', '', '0', '2017-12-25 16:22:19', '28', '1');
INSERT INTO `topic` VALUES ('3132', '26', '4', '如果我想要将 server 的重要数据备份到 backserver，如果可以使用 rsync 透过 ssh 的通道， 你可以请尝试这样做：', '82b97e69-44e3-42da-82c4-fcdeb02bce94.', null, null, null, null, null, null, '先在 SERVER 上面以 ROOT 建置 SSH 的 PUBLIC 与 PRIVATE KEY PAIR ；\r\n将 PUBLIC KEY 传送与设定到 BACKSERVER 上的某个使用者环境下；\r\n在 BACKSERVER 上面制作好预计要存放备份数据的目录！重点在于『权限』的设定上！\r\n在 SERVER 上面设定好 RSYNC 的备份 SCRIPT ～\r\n利用 CRONTAB 每隔一段时间自动异地备份。', '', '0', '2017-12-25 16:22:40', '28', '1');
INSERT INTO `topic` VALUES ('3133', '32', '4', 'MYISAM和INNODB的不同？', '8b294f9c-5f9f-45d6-a710-2316c0c4a2b0.', null, null, null, null, null, null, '主要有以下几点区别：\r\n   A)构造上的区别\r\n     MYISAM在磁盘上存储成三个文件，其中.FRM文件存储表定义；.MYD (MYDATA)为数据文件；.MYI (MYINDEX)为索引文件。\r\n     而INNODB是由.FRM文件、表空间（分为独立表空间或者共享表空间）和日志文件（REDO LOG）组成。\r\n    B)事务上的区别\r\n      MYISAM不支持事务；而INNODB支持事务。\r\n    C)锁上的区别\r\n MYISAM使用的是表锁；而INNODB使用的行锁（当然INNODB也支持表锁）。\r\n 表级锁：直接锁定整张表，在锁定期间，其他进程无法对该表进行写操作，如果设置的是写锁，那么其他进程读也不允许，因此MYISAM支持的并发量低，但MYISAM不会出现死锁；\r\n 行级锁：只对指定的行进行锁定，其他进程还是可以对表中的其他行进行操作的。因此行锁能大大的减少数据库操作的冲突，但有时会导致死锁。\r\n    D)是否支持外键的区别\r\n MYISAM不支持外键，INNODB支持外键\r\n    E) SELECT COUNT(*)的区别\r\n 对于没有WHERE的COUNT(*)使用MYISAM要比INNODB快得多。因为MYISAM内置了一个计数器，COUNT(*)时它直接从计数器中读，而INNODB必须扫描全表。\r\n    F)MYISAM只把索引都LOAD到内存中，而INNODB存储引擎是把数据和索引都LOAD到内存中', '', '0', '2017-12-25 16:23:18', '10', '1');
INSERT INTO `topic` VALUES ('3134', '3', '4', '在Java中什么是方法的 Override(覆盖) 和 Overload(重载)?', '236a94a2-25cd-4df7-807c-f11637d3fec9.', null, null, null, null, null, null, 'JAVA中方法的 OVERLOAD 发生的条件是，同一个类里，有两个或以上的方法名称完全相同，但参数列表不同。另一方面，方法的 OVERRIDE 是指，子类重定义了父类里的同一个方法。OVERRIDE 的方法必须方法名、参数列表和返回类型都完全相同。OVERRIDE 的方法不会限制原方法的访问权限。', '', '0', '2017-12-25 16:23:19', '57', '1');
INSERT INTO `topic` VALUES ('3135', '4', '4', '什么是MVC模式? 　', '033a375b-ea24-4c56-93e0-89999d021e78.', null, null, null, null, null, null, 'MVC (MODEL VIEW CONTROLLER) 是一个设计模式，使用MVC应用程序被分成三个核心部件：模型、视图、控制器。它们各自处理自己的任务。M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以应用于不同的表现形式。', '', '0', '2017-12-25 16:23:35', '59', '1');
INSERT INTO `topic` VALUES ('3136', '32', '4', '公司现有的数据库架构，总共有几组mysql库？', 'bb37fece-0e34-4a5c-bc70-c8469e42b064.', null, null, null, null, null, null, '我们公司现在有两组MYSQL。其中一套是生产库，一套是测试库。\r\n    生产库和测试库都是用的MHA +半同步复制做的高可用。\r\n    我们所有的项目WEB前端量（大概有10个项目）指向的都是一个机器上的MYSQL实例。因为我们是传统行业，并发访问量并不是很大，所以目前我们的生产MYSQL数据库未出现性能问题。\r\n\r\n ', '', '0', '2017-12-25 16:23:42', '10', '1');
INSERT INTO `topic` VALUES ('3137', '3', '4', 'String,StringBuffer, StringBuilder 的区别是什么？String为什么是不可变的？', 'a40ef3dd-3752-411d-810d-2e91f62fc151.', null, null, null, null, null, null, 'STRING是字符串常量，STRINGBUFFER和STRINGBUILDER是字符串变量。STRINGBUFFER是线程安全的，STRINGBUILDER是非线程安全的。具体来说STRING是一个不可变的对象，每次修改STRING对象实际上是创新新对象，并将引用指向新对象。效率很低。STRINGBUFFER', '', '0', '2017-12-25 16:23:44', '55', '1');
INSERT INTO `topic` VALUES ('3138', '26', '4', '在java类加载器中，系统类加载器和用户自定义加载器那个先加载？', '619dbdeb-4c4e-4187-b8be-6617e7242dfd.', null, null, null, null, null, null, '先加载系统类加载器  JAVA类加载器加载类顺序依次为：   JVM类加载器：这个模式会加载JAVA_HOME/LIB下的JAR包   扩展类加载器：会加载JAVA_HOME/LIB/EXT下的JAR包   系统类加载器：这个会去加载指定了CLASSPATH参数指定的JAR文件  用户自定义类加载器：SUN提供的CLASSLOADER是可以被继承的，允许用户自己实现类加载器 ', '', '0', '2017-12-25 16:23:49', '57', '1');
INSERT INTO `topic` VALUES ('3139', '18', '4', 'sql语句应该考虑哪些安全性？ ', '594b3e61-c713-4cc0-981e-7002e9f2823c.', null, null, null, null, null, null, '（1）防止SQL注入，对特殊字符进行转义，过滤或者使用预编译的SQL语句绑定变量。\r\n（2）最小权限原则，特别是不要用ROOT账户，为不同的类型的动作或者组建使用不同的账户。\r\n（3）当SQL运行出错时，不要把数据库返回的错误信息全部显示给用户，以防止泄漏服务器和数据库相关信息。', '', '0', '2017-12-25 16:23:53', '18', '1');
INSERT INTO `topic` VALUES ('3140', '18', '3', '在shell script文件中，命令的运行是()、()的分析与运行', '26ca9f3f-70e9-49eb-b400-a5b601eb1403.', null, null, null, null, null, null, '从上而下  从左而右', '', '0', '2017-12-25 16:23:54', '29', '1');
INSERT INTO `topic` VALUES ('3141', '3', '4', '堆和栈分别存放什么？', 'c60b0a49-9401-4b34-be30-0e0e6d9da148.', null, null, null, null, null, null, '栈：基本数据类型和对象的引用  堆：对象和数组', '', '0', '2017-12-25 16:24:02', '57', '1');
INSERT INTO `topic` VALUES ('3142', '32', '4', '如何提高insert的性能？', '10574f80-8da6-4710-9dec-8db7caf4c88e.', null, null, null, null, null, null, '有如下方法：\r\n     A)合并多条 INSERT 为一条，即： INSERT INTO T VALUES(A,B,C),  (D,E,F) ,,,\r\n       原因分析：主要原因是多条INSERT合并后日志量（MYSQL的BINLOG和INNODB的事务让日志） 减少了，降低日志刷盘的数据量和频率，从而提高效率。通过合并SQL语句，同时也能减少SQL语句解析的次数，减少网络传输的IO。\r\n     B)修改参数 BULK_INSERT_BUFFER_SIZE， 调大批量插入的缓存；\r\n     C)设置 INNODB_FLUSH_LOG_AT_TRX_COMMIT = 0 ，相对于 INNODB_FLUSH_LOG_AT_TRX_COMMIT = 1 可以十分明显的提升导入速度；\r\n      （备注：INNODB_FLUSH_LOG_AT_TRX_COMMIT 参数对 INNODB LOG 的写入性能有非常关键的影响。该参数可以设置为0，1，2，解释如下：\r\n　　  0：LOG BUFFER中的数据将以每秒一次的频率写入到LOG FILE中，且同时会进行文件系统到磁盘的同步操作，但是每个事务的COMMIT并不会触发任何LOG BUFFER 到LOG FILE  的刷新或者文件系统到磁盘的刷新操作;\r\n　　  1：在每次事务提交的时候将LOG BUFFER 中的数据都会写入到LOG FILE，同时也会触发文件系统到磁盘的同步;\r\n　　  2：事务提交会触发LOG BUFFER 到LOG FILE的刷新，但并不会触发磁盘文件系统到磁盘的同步。此外，每秒会有一次文件系统到磁盘同步操作。\r\n        ）\r\n\r\n      D）手动使用事务\r\n           因为MYSQL默认是AUTOCOMMIT的，这样每插入一条数据，都会进行一次COMMIT；所以，为了减少创建事务的消耗，我们可用手工使用事务，即START TRANSACTION;INSERT 。。,INSERT。。 COMMIT；即执行多个INSERT后再一起提交；一般1000条INSERT 提交一次。', '', '0', '2017-12-25 16:24:04', '10', '1');
INSERT INTO `topic` VALUES ('3143', '4', '4', 'VECTOR,ARRAYLIST, LINKEDLIST的区别是什么？', 'f0e0a57d-1cbe-4c57-bcdf-e32f49c1ff14.', null, null, null, null, null, null, 'VECTOR是同步的，ARRAYLIST和LINKEDLIST不是同步的。底层方面，VECTOR与ARRAYLIST都是基于OBJECT[]ARRAY实现的，但考虑VECTOR线程安全，所以ARRAYLIST效率上回比VECTOR较快。元素随机访问上，VECTOR与ARRAYLIST是基本相同的，时间复杂度是O(1)，LINKEDLIST的随机访问元素的复杂度为O(N)。但在插入删除数据上，LINKEDLIST则比ARRAYLIST要快很多。LINKEDLIST比ARRAYLIST更占内存，因为LINKEDLIST每个节点上还要存储对前后两个节点的引用。', '', '0', '2017-12-25 16:24:06', '55', '1');
INSERT INTO `topic` VALUES ('3144', '26', '4', '请问 LAMP 这个服务器代表什么意思？', '8a237376-86d6-4f41-94d6-ebcc5c68358f.', null, null, null, null, null, null, '这个名词代表了 LINUX + APACHE + MYSQL + PHP 这个 WWW 服务器的组成！\r\n', '', '0', '2017-12-25 16:24:09', '28', '1');
INSERT INTO `topic` VALUES ('3145', '32', '4', 'MONTH(),DAY(),YEAR()和DATEDIFF（）函数的作用是什么？', 'd27becb9-71f0-4bc1-bbb7-98b67123ccda.', null, null, null, null, null, null, 'MONTH（）函数功能 返回代表指定日期月份的整数  DAY（）函数功能 返回代表指定日期的天的日期部分的整数 DATEDIFF（）   返回跨两个指定日期的日期和时间边界数。', '', '0', '2017-12-25 16:24:19', '67', '1');
INSERT INTO `topic` VALUES ('3146', '3', '4', 'HASHTABLE, HASHMAP，TreeMap区别', '02455c24-ddcb-4605-9d77-dc6108cee1d0.', null, null, null, null, null, null, 'HASHMAP和HASHTABLE都实现了MAP接口，但HASHTABLE是线程安全的，HASHMAP是非线程安全的。HASHMAP中允许KEY-VALUE值均为NULL，但HASHTABLE则不允许。HASHMAP适合单线程，HASHTABLE适合多线程。HASHTABLE中的HASH数字默认大小是11，增加方式为OLD*2+1,HASHMAP中的HASH默认大小为16，且均为2的指数。TREEMAP则可以将保持的数据根据KEY值进行排列，可以按照指定的排序方式。默认为升序。', '', '0', '2017-12-25 16:24:20', '55', '1');
INSERT INTO `topic` VALUES ('3147', '3', '4', 'abstract class和interface的区别', '9e8cc3f2-5d0d-4631-82ff-33b4b253ff04.', null, null, null, null, null, null, '（1）ABSTRACT CLASS是抽象类，声明方法的存在而不去实现它的类叫做抽象类，它用于创建一个体现某些基本行为的类。抽象类中不能有构造方法、不能有静态方法，抽象类不能被实例化。抽象类中可以有变量、可以有普通方法、可以有抽象方法，在继承抽象方法后，必须实现它的所有抽象方法。  （2）INTERFACE是接口，接口中的变量必须是静态常量（STATIC FINAL），接口中的方法必须都是抽象方法（ABSTRACT），不过由于接口中所有变量、方法修饰符都一致，因可以不写。接口的实现必须实现接口中所有的方法。', '', '0', '2017-12-25 16:24:27', '57', '1');
INSERT INTO `topic` VALUES ('3148', '26', '4', 'Apache 的配置文件档名一般为何？', '58424d52-0c21-45b5-9259-4c4bd7584d67.', null, null, null, null, null, null, 'APACHE 的配置文件档名为 HTTPD.CONF ，不过，由于 HTTPD.CONF 内容参数可以使用『 INCLUDE \"额外配置文件名\"』，所以也可能具有其他的额外配置文件喔！', '', '0', '2017-12-25 16:24:36', '28', '1');
INSERT INTO `topic` VALUES ('3150', '4', '4', 'ConcurrentHashMap和HashTable的区别', 'a0a7b9c4-3679-43b7-ad3d-c172c958f813.', null, null, null, null, null, null, '两者均应用于多线程中，但当HASHTABLE增大到一定程度时，其性能会急剧下降。因为迭代时会被锁很长时间。但CONCURRENTHASHMAP则通过引入分割来保证锁的个数不会很大。简而言之就是HASHTABLE会锁住真个MAP，而CONCURRENTHASHMAP则只需要锁住MAP的一个部分。', '', '0', '2017-12-25 16:24:42', '55', '1');
INSERT INTO `topic` VALUES ('3151', '26', '4', 'Tomcat，apache，jboss的区别', '10d21698-ec1b-4536-b931-fa1f855351eb.', null, null, null, null, null, null, 'TOMCAT是SERVLET容器，用于解析JSP，SERVLET。是一个轻量级的高效的容器；缺点是不支持EJB，只能用于JAVA应用。\r\n\r\nAPACHE是HTTP服务器（WEB服务器），类似于IIS可以用来建立虚拟站点，编译处理静态页面。支持SSL技术，支持多个虚拟主机等功能。\r\n\r\nJBOSS是应用服务器，运行EJB的JAVAEE应用服务器，遵循JAVAEE规范，能够提供更多平台的支持和更多集成功能，如数据库连接，JCA等。其对SERVLET的支持是通过集成其他SERVLET容器来实现的。如TOMCAT。', '', '0', '2017-12-25 16:25:05', '55', '1');
INSERT INTO `topic` VALUES ('3152', '26', '4', '为何要有 DNS 系统：', '13d697c0-dd5e-481e-942b-6047e9054698.', null, null, null, null, null, null, '最主要的功能其实在于 HOSTNAME 对应 IP 的查询，可以让我们人类以计算机主机名连上 INTERNET ，而不必背诵 IP 哩！', '', '0', '2017-12-25 16:25:28', '29', '1');
INSERT INTO `topic` VALUES ('3153', '26', '4', '在 Apache 的配置文件当中，哪一个参数是用来设定『主网页』的？', '60309862-22a1-441e-a0d4-0f00e0de922c.', null, null, null, null, null, null, '设定主网页的参数为：DOCUMENTROOT 喔！后面接的是主网页放置的『目录』！', '', '0', '2017-12-25 16:25:40', '28', '1');
INSERT INTO `topic` VALUES ('3155', '32', '4', ' Innodb是行锁，那什么时候会产生行锁，什么情况下会变成表锁？\r\n', '59d838f6-37cf-4b11-9b25-a2500c61f11b.', null, null, null, null, null, null, '一般情况下，INNODB只对指定的行进行锁定，其他进程还是可以对表中的其他行进行操作的，因此，这时候INNODB加的就是行锁；\r\n   但是，如果在执行一个SQL语句时MYSQL不能确定要扫描的范围，INNODB表同样会锁全表，例如UPDATE TABLE SET NUM=1 WHERE NAME LIKE “%AAA%”。', '', '0', '2017-12-25 16:25:48', '10', '1');
INSERT INTO `topic` VALUES ('3156', '26', '4', 'Unix Like 系统当中，主要使用那个软件做为 DNS 主机的架设，同时，他又是使用那个 daemon 来启动 DNS 系统？', '02dd46c9-cffe-4d69-b474-e1623ce48242.', null, null, null, null, null, null, '在 UNIX LIKE 系统当中，使用 BIND 这个软件做为 DNS 的架设，至于 DAEMON 则是使用 NAMED 这个 DAEMON ！', '', '0', '2017-12-25 16:26:07', '29', '1');
INSERT INTO `topic` VALUES ('3157', '4', '4', 'GET POST区别', '4701083b-6354-4d98-8ef4-3df2079ddc3b.', null, null, null, null, null, null, 'GET是从服务器上获取数据，POST是向服务器发送数据。\r\n\r\nGET是把参数数据队列加到提交表单的ACTION属性所指的URL中，值和表单内各个字段一一对应，在URL中可以看到。POST是通过HTTPPOST机制，将表单内各个字段与其内容放置在HTML HEADER内一起传送到ACTION属性所指的URL地址。\r\n\r\n对于GET方式，服务区端用REQUEST.QUERYSTRING获取变量值，对于POST方式，服务器端用REQUEST.FORM获取提交的数据。GET传送的数据量较小，POST较大，一般不受限制。GET安全性比POST要低，但执行效率较高。', '', '0', '2017-12-25 16:26:13', '55', '1');
INSERT INTO `topic` VALUES ('3158', '3', '4', '用最有效率的方法计算2乘以8？ ', '82e66405-c57f-451f-a5c0-711de3319c31.', null, null, null, null, null, null, '2 << 3（左移3位相当于乘以2的3次方，右移3位相当于除以2的3次方）。', '', '0', '2017-12-25 16:26:25', '52', '1');
INSERT INTO `topic` VALUES ('3161', '3', '1', ' 以下属于面向对象的特征的是（）。（两项）', '7b48fc68-ff9e-4907-91b5-9de444d638d6.', '重载', '重写', '封装', '继承', '', '', 'CD', '', '0', '2017-12-25 16:26:34', '51', '1');
INSERT INTO `topic` VALUES ('3163', '4', '4', 'Struts的入口类?', '5234dff0-ef13-4b3d-bb21-521d83f4caf2.', null, null, null, null, null, null, 'ACTIONSERVLET是STRUTS的入口类，所有的STRUTS请求都经由该类转发处理', '', '0', '2017-12-25 16:26:48', '59', '1');
INSERT INTO `topic` VALUES ('3164', '26', '4', '最早的 Internet 其实是为了政府人员可以连上网络以进行资源的分享，另外，则是电子邮件的使用。 而在早期使用的重要档案只有 /etc/hosts 这个，请教这个 hosts 档案的内容含有什么项目？', '8d378e90-b4e6-4624-975b-1ad515b699ba.', null, null, null, null, null, null, '这个档案的『格式』为『 [IP] [主机名] [主机别名(ALIASE)]』，而，这个档案里面放置了至少一行，也就是：\r\n127.0.0.1 LOCALHOST LOCALHOST.LOCALDOMAIN\r\n另外，也可以将经常连接的主机 IP 与 HOSTNAME 的对应给他写进来！', '', '0', '2017-12-25 16:26:56', '29', '1');
INSERT INTO `topic` VALUES ('3165', '26', '3', '元素的样式/类如何改变？', '92383217-f57c-45f4-9b05-1edda639cde0.', null, null, null, null, null, null, '可以通过以下方式完成：\r\nDOCUMENT.GETELEMENTBYID(“MYTEXT”).STYLE.FONTSIZE = “20?;\r\n或\r\nDOCUMENT.GETELEMENTBYID(“MYTEXT”).CLASSNAME = “ANYCLASS”;', '可以通过以下方式完成：\r\ndocument.getElementById(“myText”).style.fontSize = “20?;\r\n或\r\ndocument.getElementById(“myText”).className = “anyclass”;', '0', '2017-12-25 16:26:59', '54', '1');
INSERT INTO `topic` VALUES ('3166', '3', '1', '在使用super 和this关键字时，以下描述正确的是（）', 'eac7d052-96c6-4c55-9769-9856d1a63b7a.', ' 在子类构造方法中使用super（）显示调用父类的构造方法，super（）必须写在子类构造方法的第一行，否则编译不通过', ' super（）和this（）不一定要放在构造方法内第一行', ' this（）和super（）可以同时出现在一个构造函数中', ' this（）和super（）可以在static环境中使用，包括static方法和static语句块', '', '', 'A', '', '0', '2017-12-25 16:27:18', '51', '1');
INSERT INTO `topic` VALUES ('3167', '26', '4', '在Java中，如何跳出当前的多重嵌套循环？ ', '05a7a453-a541-4e8c-a938-c37cfedabb9c.', null, null, null, null, null, null, '在最外层循环前加一个标记如A，然后用BREAK A;可以跳出多重循环。（JAVA中支持带标签的BREAK和CONTINUE语句，作用有点类似于C和C++中的GOTO语句，但是就像要避免使用GOTO一样，应该避免使用带标签的BREAK和CONTINUE，因为它不会让你的程序变得更优雅，很多时候甚至有相反的作用，所以这种语法其实不知道更好）', '', '0', '2017-12-25 16:27:26', '52', '1');
INSERT INTO `topic` VALUES ('3168', '5', '3', 'JavaScript中的循环结构都有什么？', 'b99a1b19-60e7-4579-8d5d-c135f8a426ed.', null, null, null, null, null, null, 'FOR、WHILE、DO-WHILE LOOPS', 'For、While、do-while loops', '0', '2017-12-25 16:27:29', '54', '1');
INSERT INTO `topic` VALUES ('3169', '3', '2', ' \r\n\r\nJava\r\n\r\n程序中的起始类名称必须与存放该类的文件名相同。\r\n\r\n', '01ad4692-d37a-4ab2-b642-793846ea8be1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 16:27:39', '53', '1');
INSERT INTO `topic` VALUES ('3170', '26', '4', '\r\n哪一个指令用来重新启动与关闭 Apache ？(请以 Apache 本身提供的功能来说明)', 'd57f1608-73c7-46d7-af12-252b51d8b432.', null, null, null, null, null, null, '其实不论是 RPM 还是 TARBALL 都是使用 APACHECTL 这个档案来启动 APACHE 的，不过 RPM 已经将该档案整合到 /ETC/INIT.D/HTTPD 里面去而已', '', '0', '2017-12-25 16:27:40', '28', '1');
INSERT INTO `topic` VALUES ('3171', '4', '4', '写出你熟悉的开源框架以及各自的作用。', 'bf16e092-d18e-488e-8af4-888dac3eb13f.', null, null, null, null, null, null, '框架：HIBERNATE,SPRING,STRUTS.\r\nHIBERNATE主要用于数据持久化；\r\nSPRING 的控制反转能起到解耦合的作用；\r\nSTRUTS 主要用于流程控制；\r\n服务器类：APACHE TOMCAT JBOSS等', '', '0', '2017-12-25 16:27:44', '59', '1');
INSERT INTO `topic` VALUES ('3172', '3', '2', ' \r\n\r\nUnicode\r\n\r\n是用\r\n\r\n16\r\n\r\n位来表示一个字的。\r\n\r\n', 'd6b2a10a-3992-4062-92be-7876b1c5ac7c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 16:27:52', '53', '1');
INSERT INTO `topic` VALUES ('3173', '3', '1', '以下对封装的描述正确的是（）', 'bcb1e54e-09fd-42be-8c4f-a093868cff67.', '只能对一个类中的方法进行封装，不能对属性进行封装', '如果子类继承了父类，对于父类中进行封装的方法，子类仍然可以直接调用', '封装的意义不大，因此在编码时尽量不要使用', ' 封装的主要作用在于对外隐藏内部实现细节，增强程序的安全性', '', '', 'D', '', '0', '2017-12-25 16:27:52', '51', '1');
INSERT INTO `topic` VALUES ('3174', '26', '4', '当我使用 ps -aux 的时候，发现好多的 httpd... 的程序，这是正常的吗？ 最多可以有几个程序是在那个档案的那个参数所设定的？！', '4878a6fc-78ab-487a-bf5f-5e12edc37f1a.', null, null, null, null, null, null, '由于 APACHE 预设为多线程，所以启动多个 PROCESSES 是正常的。至于启动几个 PROCESS 则由很多设定所处理， 包括 MINSPARESERVERS, MAXSPARESERVERS, MAXCLIENTS 等等。', '', '0', '2017-12-25 16:27:56', '28', '1');
INSERT INTO `topic` VALUES ('3175', '3', '4', '.接口与抽象类的区别', 'c2682703-dbf3-4f06-abd6-030eec458148.', null, null, null, null, null, null, 'JAVA接口和JAVA抽象类最大的一个区别，就在于JAVA\r\n抽象类可以提供某些方法的部分实现，而JAVA接口不可以（就是INTERFACE中只能定义方法，\r\n而不能有方法的实现，而在ABSTRACT CLASS\r\n中则可以既有方法的具体实现，又有没有具体实现的抽象方法）\r\n \r\n一个抽象类的实现只能由这个抽象类的子类给出，也就是说，这个实现处在抽象类所定义出的继承的等级结构中，而由于JAVA语言的单继承性，\r\n所以抽象类作为类型定义工具的效能大打折扣。在这一点上，JAVA\r\n接口的优势就出来了，任何一个实现了一个JAVA\r\n接口所规定的方法的类都可以具有这个接口的类型，而一个类可以实现任意多个JAVA接口，从而这个类就有了多种类型。', '', '0', '2017-12-25 16:28:00', '57', '1');
INSERT INTO `topic` VALUES ('3176', '3', '2', ' \r\n\r\n原生类中的数据类型均可任意转换。\r\n\r\n', '0827b483-a7ca-4652-b28a-3a692942a91d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 16:28:05', '53', '1');
INSERT INTO `topic` VALUES ('3177', '26', '4', '正解档案(forward)反解档案(reverse)与内部循环使用的档案(loopback)主要的纪录功能为：', '6ff1ca3c-e501-4457-a303-4cef33f25f61.', null, null, null, null, null, null, '正解档在设定 HOSTNAME 对应到 IP 的纪录，主要的纪录有 A, NS, SOA, MX, CNAME 等等； 反解档主要设定 IP 对应到 HOSTNAME 的纪录，主要的纪录为 SOA, NS 与 PTR 等。 内部循环则是 LOCALHOST 与 127.0.0.1 的对应啦！', '', '0', '2017-12-25 16:28:06', '29', '1');
INSERT INTO `topic` VALUES ('3179', '5', '3', '如何在JavaScript中将base字符串转换为integer？', 'c18b05ce-c0e1-422d-8579-552d57046e05.', null, null, null, null, null, null, 'PARSEINT() 函数解析一个字符串参数，并返回一个指定基数的整数。PARSEINT（）将要转换的字符串作为其第一个参数，第二个参数是给定字符串的基础。', '为了将4F（基数16）转换为整数，所使用的代码是 ：parseInt (\"4F\", 16);', '0', '2017-12-25 16:28:12', '54', '1');
INSERT INTO `topic` VALUES ('3180', '26', '4', '又，呈上题，这些程序 (process) 的 owner 与 group 是谁？该察看那个配置文件的那个参数', '699b4057-a3d0-418e-971f-aa4e218334d2.', null, null, null, null, null, null, '同样察看 HTTPD.CONF 里面的 USER 与 GROUP 这两个设定值！', '', '0', '2017-12-25 16:28:14', '28', '1');
INSERT INTO `topic` VALUES ('3181', '3', '4', '字节流与字符流的区别', '01850c59-4407-42a2-8901-7b4b3ba4aa25.', null, null, null, null, null, null, '\r\n字节流在操作的时候本身是不会用到缓冲区（内存）的，是与文件本身直接操作的，而字符流在操作的时候是使用到缓冲区的  字节流在操作文件时，即使不关闭资源（CLOSE方法），文件也能输出，但是如果字符流不使用CLOSE方法的话，则不会输出任何内容，说明字符流用的是缓冲区，并且可以使用FLUSH方法强制进行刷新缓冲区，这时才能在不CLOSE的情况下输出内容', '', '0', '2017-12-25 16:28:14', '57', '1');
INSERT INTO `topic` VALUES ('3182', '3', '1', '以下对继承的描述错误的是（）', '00088396-bc0f-4522-b94d-cde4910e2726.', 'Java中的继承允许一个子类继承多个父类', '父类更具有通用性，子类更具体', ' Java中的继承存在着传递性', '当实例化子类时会递归调用父类中的构造方法', '', '', 'A', '', '0', '2017-12-25 16:28:21', '51', '1');
INSERT INTO `topic` VALUES ('3183', '26', '4', '如果今天我以 http://your.ip 结果却发现浏览器出现类似 FTP 的画面(会列出该目录下的所有档案)，这是什么原因造成的？该如何避免？', 'df55b2df-6c69-46d1-9cb7-81e844cdf74b.', null, null, null, null, null, null, '这是由于在 HTTPD.CONF 里面，针对该目录的设定参数『 OPTIONS 』当中，设定了 INDEXES 这个设定值，导致当找不到主页时(通常是 INDEX.HTML)，就会将该目录下的所有档案秀出来！解决的方法就是拿掉 OPTIONS 里面的 INDEXES 设定值即可！', '', '0', '2017-12-25 16:28:31', '28', '1');
INSERT INTO `topic` VALUES ('3184', '18', '4', '工作中遇到的最大的问题以及做的最好的工作？', '01886bb3-cf81-46b9-9120-dbdfb1c913e7.', null, null, null, null, null, null, '自由发挥', '', '0', '2017-12-25 16:28:31', '10', '1');
INSERT INTO `topic` VALUES ('3185', '3', '4', '列举你所知道的线程同步的方法：\r\n', '37b5d363-a932-44e2-8a73-fababe0a416b.', null, null, null, null, null, null, '1\r\n\r\n）\r\n\r\nWAIT():\r\n\r\n让线程等待。将线程存储到一个线程池中。\r\n\r\n \r\n\r\n2\r\n\r\n）\r\n\r\nNOTIFY()\r\n\r\n：唤醒被等待的线程。通常都唤醒线程池中的第一个。让被\r\n\r\n唤醒的线程处于临时阻塞状态。\r\n\r\n \r\n\r\n3\r\n\r\n）\r\n\r\nNOTIFYALL(): \r\n\r\n唤醒所有的等待线程。\r\n\r\n将线程池中的所有线程都唤醒。\r\n\r\n', '', '0', '2017-12-25 16:28:37', '53', '1');
INSERT INTO `topic` VALUES ('3186', '3', '4', '是否可以继承String类？ ', '1fd929ff-75a3-41af-802a-2b56b4696bee.', null, null, null, null, null, null, 'STRING 类是FINAL类，不可以被继承。', '', '0', '2017-12-25 16:28:39', '52', '1');
INSERT INTO `topic` VALUES ('3187', '26', '4', '在主要的 DNS 配置文件 /etc/named.conf 当中，有一个较为特殊的档案，他的类型为 hint ，请问这个档案的功能为何？', '18248ed9-d40a-4d08-8d8b-5b63c601eee4.', null, null, null, null, null, null, '这个档案主要是由 RS.INTERNIC.NET 所下载下来的，主要记录了 ROOT (.) 这个 ZONE 的 IP ！可以让我们的 DNS SERVER 在找不到数据库时，可以到这个 ROOT 去查询数据！', '', '0', '2017-12-25 16:28:41', '29', '1');
INSERT INTO `topic` VALUES ('3188', '3', '4', 'Js变量的生命周期 ', '56eff9a3-9803-4076-b137-c4fbfc054f6a.', null, null, null, null, null, null, '根据作用范围来区分，超出作用范围就会失效  如果为全域变量，页面关闭才失效。否则一直有用。', '', '0', '2017-12-25 16:28:43', '57', '1');
INSERT INTO `topic` VALUES ('3189', '32', '4', '在多表查询中，连接查询分为几种？', 'e25af5fb-9088-40c3-a13d-e46f1c11501b.', null, null, null, null, null, null, '等值连接查询，非等值连接查询，自然连接查询，自身连接查询，外连接查询，复合条件连接查询。', '', '0', '2017-12-25 16:28:50', '67', '1');
INSERT INTO `topic` VALUES ('3190', '3', '4', 'equals()\r\n\r\n方法和\r\n\r\n“\r\n\r\n==\r\n\r\n”操作符的区别是什\r\n\r\n么？重写\r\n\r\nequals()\r\n\r\n方法的时候，我们还需\r\n\r\n要重写哪些方法？为什么？', '3f3b94e6-1971-4fba-90d2-8d6004021b9a.', null, null, null, null, null, null, '“==”比较的是一个对象在内存中的地址值，栈中的内容是否相同\r\n\r\n \r\n\r\n \r\n\r\nEQUALS()\r\n\r\n是针对引用的，\r\n\r\n比较的是引用类型的内容一样不一样，\r\n\r\n堆中的内容是否\r\n\r\n相同\r\n\r\n \r\n\r\n重写\r\n\r\nEQUALS()\r\n\r\n方法的时候，需重写\r\n\r\nHASHCODE\r\n\r\n方法，这样比较的时候，比较的是\r\n\r\n两个对象的\r\n\r\nHASH\r\n\r\n值，不同对象的\r\n\r\nHASH\r\n\r\n值不同。', '', '0', '2017-12-25 16:28:53', '53', '1');
INSERT INTO `topic` VALUES ('3191', '26', '4', '在 Apache 里面 .htaccess 这个档案的功能为何？', 'f8c9b25e-fe16-47eb-bbc5-b1faba1cd3ad.', null, null, null, null, null, null, '可以用来取代 HTTPD.CONF 里面的设定参数！创造属于使用者自己的 APACHE 风格！', '', '0', '2017-12-25 16:28:58', '28', '1');
INSERT INTO `topic` VALUES ('3192', '3', '4', '当一个对象被当作参数传递到一个方法后，此方法可改变这个对象的属性，并可返回变化后的结果，那么这里到底是值传递还是引用传递？ ', 'd588980c-4915-4baf-b244-c79035dc22a8.', null, null, null, null, null, null, '是值传递。JAVA语言的方法调用只支持参数的值传递。当一个对象实例作为一个参数被传递到方法中时，参数的值就是对该对象的引用。对象的属性可以在被调用过程中被改变，但对对象引用的改变是不会影响到调用者的。C++和C#中可以通过传引用或传输出参数来改变传入的参数的值。在C#中可以编写如下所示的代码，但是在JAVA中却做不到。', '', '0', '2017-12-25 16:29:08', '52', '1');
INSERT INTO `topic` VALUES ('3193', '32', '4', '分库分表有没有用到，怎么实现的？', 'ec05b1a0-159f-4014-ae4a-9bfc68126c62.', null, null, null, null, null, null, '目前，根据我们的业务量，还没有使用分库分表。但是我有在关注MYSQL的分布式方案，以前MYSQL分布式比较常用的方法是用阿里巴巴的COBAR，将一张表水平拆分成多份分别放入不同的库来实现表的水平拆分，或将不同的表放入不同的库，但是后来发现COBAR有一个问题一直不能很好的解决。目前，我关注到有很多人用MYCAT替换了COBAR。', '', '0', '2017-12-25 16:29:08', '10', '1');
INSERT INTO `topic` VALUES ('3194', '5', '3', '说明“==”和“===”之间的区别？', 'b2c458ed-c6bb-4b64-887d-986c45fcaa5f.', null, null, null, null, null, null, '“==”仅检查值相等，而“===”是一个更严格的等式判定，如果两个变量的值或类型不同，则返回FALSE。', '“==”仅检查值相等，而“===”是一个更严格的等式判定，如果两个变量的值或类型不同，则返回false。', '0', '2017-12-25 16:29:14', '54', '1');
INSERT INTO `topic` VALUES ('3195', '26', '4', '在 client 端搜寻 HOSTNAME 对应到 IP 的查询时，最重要的档案，以及该档案的主要用途为何？', '000b7186-f24c-4bd8-87d9-c3c7af9f4f70.', null, null, null, null, null, null, '/ETC/NSSWITCH.CONF ：可以用来设定查询主机名的顺序！例如先查询 /ETC/HOSTS 再查询 DNS 系统；\r\n/ETC/HOSTS ：最早的名称解析器；\r\n/ETC/RESOLV.CONF：这就是 DNS 系统的 RESOLVER (解析器)了。', '', '0', '2017-12-25 16:29:15', '29', '1');
INSERT INTO `topic` VALUES ('3196', '4', '4', 'SESSION, COOKIE区别', 'cfa0f80e-bfb6-4767-94eb-da9c290f50e9.', null, null, null, null, null, null, 'SESSION数据放在服务器上，COOKIE则放在客户浏览器上。COOKIE不太安全，因为可以分析出本地COOKIE，并进行COOKIE欺骗，考虑安全应使用SESSION。SESSION会在一定时间内保存在服务器上，当访问增多时，会比较占用服务器的性能，考虑减轻服务器压力则应该使用COOKIE。单个COOKIE保持的数据不超过4K，很多浏览器都限制要给站点最多保存20个COOKIE。', '', '0', '2017-12-25 16:29:19', '55', '1');
INSERT INTO `topic` VALUES ('3197', '3', '4', 'Java\r\n\r\n中\r\n\r\npublic,private,protected,\r\n\r\n和默认\r\n\r\n的区别\r\n\r\n', 'b6cb1724-6e1d-4113-92cf-15ddf700edf7.', null, null, null, null, null, null, 'A\r\n\r\n、\r\n\r\nPRIVATE\r\n\r\n修饰词，表示成员是私有的，只有自身可以访问；\r\n\r\n   \r\n\r\nB\r\n\r\n、\r\n\r\nPROTECTED\r\n\r\n，\r\n\r\n表示受保护权限，\r\n\r\n体现在继承，\r\n\r\n即子类可以访问父类受保护成员，\r\n\r\n同时相同包内的其他类也可以访问\r\n\r\nPROTECTED\r\n\r\n成员。\r\n\r\n   \r\n\r\nC\r\n\r\n、\r\n\r\n无修饰词\r\n\r\n（默认）\r\n\r\n，\r\n\r\n表示包访问权限\r\n\r\n（\r\n\r\nFRIENDLY\r\n\r\n，\r\n\r\n JAVA\r\n\r\n语言中是没有\r\n\r\nFRIENDLY\r\n\r\n这个修饰符的，这样称呼应该是来源于\r\n\r\nC++ \r\n\r\n）\r\n\r\n，同一个包内可以访问，访问权限\r\n\r\n是包级访问权限；\r\n\r\n  \r\n\r\nD\r\n\r\n、\r\n\r\nPUBLIC\r\n\r\n修饰词，表示成员是公开的，所有其他类都可以访问；\r\n\r\n  ', '', '0', '2017-12-25 16:29:21', '53', '1');
INSERT INTO `topic` VALUES ('3198', '3', '1', '以下（）不是Object类的方法', 'e6b6ddc1-aa81-4b75-9e32-527f61c5b457.', 'clone（）', 'finalize（）', 'toString（）', 'hasNext（）', '', '', 'D', '', '0', '2017-12-25 16:29:25', '51', '1');
INSERT INTO `topic` VALUES ('3199', '26', '4', '若你之前浏览过网页，但显示的数据并非正确的中文。后来按照上文的说明修改了中文的设定，却还是无法看到中文。 请问可能的原因为何？', 'c3f2f9ff-e167-4cdb-915d-8f217e845dac.', null, null, null, null, null, null, '由于你曾经浏览过该网站的网页，所以该网页会被你的浏览器所暂存 (CACHE)，因此你应该可以这样做：\r\n在同一页面下按下『 RELOAD 』来重载；\r\n清除掉所有的浏览器快取；\r\n将原本的网页在服务器端改名，并让浏览器浏览新的网页名称。', '', '0', '2017-12-25 16:29:27', '28', '1');
INSERT INTO `topic` VALUES ('3200', '3', '4', '描述一下\r\n\r\njava\r\n\r\n的事件委托机制和垃圾回\r\n\r\n收机制\r\n\r\n  ', '3d748bb7-d097-45e5-8160-e0e4f35be04d.', null, null, null, null, null, null, 'JAVA\r\n\r\n事件委托机制：一个源产生一个事件时，把他送到一个或多个监听器那里，\r\n\r\n在这种机制种，监听器只是等待，一旦收到事件，处理事件并返回；\r\n\r\n \r\n\r\nJAVA\r\n\r\n垃圾回收：是一种动态存储管理技术，它自动地释放不再被程序引用的对\r\n\r\n象，\r\n\r\n按照特定的垃圾收集算法来实现资源自动回收的功能。\r\n\r\n当一个对象不再被引\r\n\r\n用的时候，\r\n\r\n内存回收它占领的空间，\r\n\r\n以便空间被后来的新对象使用，\r\n\r\n以免造成内\r\n\r\n存泄露。\r\n\r\n  ', '', '0', '2017-12-25 16:29:35', '53', '1');
INSERT INTO `topic` VALUES ('3201', '32', '4', ' mysql的权限怎么管理？', 'fab9675d-07eb-42ab-a331-53b35ffd3e1b.', null, null, null, null, null, null, '只给INSERT,UPDATE，SELECT和DELETE四个权限即可。有时候DELETE都不给。', '', '0', '2017-12-25 16:29:41', '10', '1');
INSERT INTO `topic` VALUES ('3202', '32', '4', 'Alter table  命令的作用是什么？', 'bb412ce0-7855-4162-bd81-e8d70cb6828b.', null, null, null, null, null, null, ' ALTER TABLE 语句用于在已有的表中添加、修改或删除列。', '', '0', '2017-12-25 16:29:43', '67', '1');
INSERT INTO `topic` VALUES ('3203', '3', '1', '多态的表现形式有', '77cab81c-a9b1-4f22-8bcd-d8be61809397.', '重写', '抽象', '继承', '封装', '', '', 'A', '', '0', '2017-12-25 16:29:53', '51', '1');
INSERT INTO `topic` VALUES ('3204', '26', '4', '一般来说，在 Client 端使用的查询 HOSTNAME 的指令大多使用什么？', 'd0f40c47-d086-470c-bb70-0bfc8cb22b1c.', null, null, null, null, null, null, 'NSLOOKUP ：可以用来收集一部主机的相关信息；\r\nDIG：可以用来收集详细的主机信息；\r\nWHOIS ：可以用来收集详尽的 DNS 主机信息。\r\nHOST 则较为简单', '', '0', '2017-12-25 16:29:55', '29', '1');
INSERT INTO `topic` VALUES ('3205', '3', '4', 'final\r\n\r\n类有什么特点\r\n\r\n', '14b27f1d-5c1e-481a-b2cc-320b5eb91c67.', null, null, null, null, null, null, '该类不能被继承\r\n\r\n ', '', '0', '2017-12-25 16:30:04', '53', '1');
INSERT INTO `topic` VALUES ('3206', '5', '3', 'Javascript中的NULL是什么意思？', '26849d12-00ab-40c7-87e4-af0c41b76dca.', null, null, null, null, null, null, 'NULL用于表示无值或无对象。它意味着没有对象或空字符串，没有有效的布尔值，没有数值和数组对象。', 'NULL用于表示无值或无对象。它意味着没有对象或空字符串，没有有效的布尔值，没有数值和数组对象。', '0', '2017-12-25 16:30:06', '54', '1');
INSERT INTO `topic` VALUES ('3207', '24', '2', 'ls是显示文件或目录', '717e8608-8c7f-45de-9f4e-856be21fb1f6.', null, null, null, null, null, null, '正确', 'ls命令是linux下最常用的命令。ls命令就是list的缩写缺省下ls用来打印出当前目录的清单如果ls指定其他目录那么就会显示指定目录里的文件及文件夹清单。 通过ls 命令不仅可以查看linux文件夹包含的文件而且可以查看文件权限(包括目录、文件夹、文件权限)查看目录信息等等。ls 命令在日常的linux操作中用的很多!', '0', '2017-12-25 16:30:07', '30', '1');
INSERT INTO `topic` VALUES ('3210', '32', '4', ' 如果发现CPU，或者IO压力很大，怎么定位问题？', 'e5662123-557a-4ca6-99ee-f91f2e1db1ac.', null, null, null, null, null, null, ' 1、首先我会用TOP命令和IOSTAT命令，定位是什么进程在占用CPU和磁盘IO； \r\n   2、如果是MYSQL的问题，我会登录到数据库，通过SHOW FULL PROCESSLIST命令，看现在数据库在执行什么SQL语句，是否有语句长时间执行使数据库卡住；\r\n   3、执行SHOW INNODB ENGINE STATUS命令，查看数据库是否有锁资源争用；\r\n   4、查看MYSQL慢查询日志，看是否有慢SQL；\r\n   5、找到引起数据库占用资源高的语句，进行优化，该建索引的建索引，索引不合适的删索引，或者根据情况KILL掉耗费资源的SQL语句等', '', '0', '2017-12-25 16:30:22', '10', '1');
INSERT INTO `topic` VALUES ('3211', '32', '4', '索引的作用是什么，会不会保存数据，可以创建多少个聚簇索引？', '06092baf-8205-4d80-b659-0bee4b73cdb5.', null, null, null, null, null, null, '索引的作用是加快查询速度。索引不会保存数据，一个表上最多可以创建1个聚簇索引。', '', '0', '2017-12-25 16:30:30', '67', '1');
INSERT INTO `topic` VALUES ('3212', '5', '3', 'delete操作符的功能是什么？', '6e605bd7-c236-4060-a25b-a758df12c7a3.', null, null, null, null, null, null, 'DELETE操作符用于删除程序中的所有变量或对象，但不能删除使用VAR关键字声明的变量。', 'delete操作符用于删除程序中的所有变量或对象，但不能删除使用VAR关键字声明的变量。', '0', '2017-12-25 16:30:40', '54', '1');
INSERT INTO `topic` VALUES ('3213', '26', '4', 'PHP 的程序代码一定要使用 &lt;?php 程序代码 ?&gt; 吗？有没有替代方案？', '8c2c9240-9ee9-4e4d-842a-c44f0dc2db7c.', null, null, null, null, null, null, '预设的情况下，你应该要输入 <?PHP ?> 才能写入 PHP 的程序。不过早期的程序或许都以 <? ?> 来撰写的。 如果想要让该种方式生效的话，你可以进入 /ETC/PHP.INI 档案中，修改『SHORT_OPEN_TAG = ON』这个设定项目即可。', '', '0', '2017-12-25 16:31:35', '28', '1');
INSERT INTO `topic` VALUES ('3215', '32', '4', '实践中如何优化MySQL', 'f552fbc0-bd6a-4a23-a908-f87e9d3b465c.', null, null, null, null, null, null, '1) SQL语句及索引的优化\r\n2) 数据库表结构的优化\r\n3) 系统配置的优化\r\n4) 硬件优化', '', '0', '2017-12-25 16:31:39', '10', '1');
INSERT INTO `topic` VALUES ('3217', '24', '2', 'mkdir是创建目录', 'd9eb3e5e-2555-4406-baa2-754dee0d026f.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 16:32:31', '30', '1');
INSERT INTO `topic` VALUES ('3218', '4', '4', '请写出spring中I0C的三种实现机制。(Spring)', 'ceb50cee-e894-4deb-9bd5-f788baa7fa65.', null, null, null, null, null, null, '三种机制为：通过SETTER方法注入、通过构造方法注入和接口注入', '', '0', '2017-12-25 16:33:13', '59', '1');
INSERT INTO `topic` VALUES ('3219', '26', '2', 'cm是切换目录', '305606c0-d278-4ccf-b847-5e4d06284170.', null, null, null, null, null, null, '错误', 'cd 是切换目录', '0', '2017-12-25 16:33:31', '30', '1');
INSERT INTO `topic` VALUES ('3220', '32', '4', '如何设计一个高并发的系统', 'd5914121-1759-48cc-96b3-bc9d4aa50823.', null, null, null, null, null, null, '1) 数据库的优化，包括合理的事务隔离级别、SQL语句优化、索引优化\r\n2) 使用缓存、尽量减少数据库IO\r\n3) 分布式数据库、分布式缓存\r\n4) 服务器的负载均衡', '', '0', '2017-12-25 16:33:37', '10', '1');
INSERT INTO `topic` VALUES ('3222', '26', '4', '请手动配置 eth0:1 这个虚拟介面，使成为网络参数： 192.168.200.2, 网域在 192.168.200.0/24。\r\n', 'd12b4236-672c-4d9f-8d5f-a6d8b9af42d5.', null, null, null, null, null, null, 'IFCONFIG ETH0:1 192.168.200.2 UP', '', '0', '2017-12-25 16:33:40', '28', '1');
INSERT INTO `topic` VALUES ('3223', '26', '4', ' 请问 named 重要的信息登录在在那个档案中？', '1f3fb1f4-1cee-4c7d-a075-e8d29aba28ef.', null, null, null, null, null, null, '在 /VAR/LOG/MESSAGES 当中', '', '0', '2017-12-25 16:33:41', '29', '1');
INSERT INTO `topic` VALUES ('3225', '33', '4', '现在要开发一个功能，把500个入职登记表（Excel格式）里的信息导入到HR系统中，你觉得应该怎样设计？要注意哪些方面？\r\n请简要的描述设计思想并列举一种能实现此需求的JAV工具？', '98e1251d-dfa2-4610-a4dd-a9cfd2f08e45.', null, null, null, null, null, null, 'POI可以导入EXCEL  2003\\2007 需要开始的时候判断 导入数据大要考虑内存开销。\r\nJXL貌似暂时只支持2003  内存使用小 稳定  具体要看你自己选择什么导入工具，性能两者都要考虑。如果只有500条不算多，如果数据多考虑分批或分批+多线程导入。', '', '0', '2017-12-25 16:33:45', '51', '1');
INSERT INTO `topic` VALUES ('3226', '5', '4', 'JavaScript中有哪些类型的弹出框？', 'c510b342-c0ff-4f09-93cc-2f3bee516902.', null, null, null, null, null, null, 'ALERT、CONFIRM AND、PROMPT', 'Alert、Confirm and、Prompt', '0', '2017-12-25 16:33:53', '54', '1');
INSERT INTO `topic` VALUES ('3227', '26', '4', '如何观察路由表？', '0e675d7d-f075-42ac-989c-be616fda1d4f.', null, null, null, null, null, null, 'ROUTE -N 即可查阅！注意到 0.0.0.0 那个目标(DEFAULT GATEWAY)。', '', '0', '2017-12-25 16:34:02', '28', '1');
INSERT INTO `topic` VALUES ('3228', '4', '4', '使用Spring框架的好处是什么？', 'd7fdf88d-28ee-4ab8-b96b-ca937a03256e.', null, null, null, null, null, null, '轻量：SPRING 是轻量的，基本的版本大约2MB。\r\n控制反转：SPRING通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。\r\n面向切面的编程(AOP)：SPRING支持面向切面的编程，并且把应用业务逻辑和系统服务分开。\r\n容器：SPRING 包含并管理应用中对象的生命周期和配置。\r\nMVC框架：SPRING的WEB框架是个精心设计的框架，是WEB框架的一个很好的替代品。\r\n事务管理：SPRING 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）。\r\n异常处理：SPRING 提供方便的API把具体技术相关的异常（比如由JDBC，HIBERNATE OR JDO抛出的）转化为一致的UNCHECKED 异常。', '', '0', '2017-12-25 16:34:11', '59', '1');
INSERT INTO `topic` VALUES ('3229', '32', '4', 'Innodb引擎', 'cea2f72f-7c4b-47ad-b482-6d12c8863bf6.', null, null, null, null, null, null, 'INNODB引擎提供了对数据库ACID事务的支持，并且实现了SQL标准的四种隔离级别，关于数据库事务与其隔离级别的内容请见数据库事务与其隔离级别这篇文章。该引擎还提供了行级锁和外键约束，它的设计目标是处理大容量数据库系统，它本身其实就是基于MYSQL后台的完整数据库系统，MYSQL运行时INNODB会在内存中建立缓冲池，用于缓冲数据和索引。但是该引擎不支持FULLTEXT类型的索引，而且它没有保存表的行数，当SELECT COUNT(*) FROM TABLE时需要扫描全表。当需要使用数据库事务时，该引擎当然是首选。由于锁的粒度更小，写操作不会锁定全表，所以在并发较高时，使用INNODB引擎会提升效率。但是使用行级锁也不是绝对的，如果在执行一个SQL语句时MYSQL不能确定要扫描的范围，INNODB表同样会锁全表。', '', '0', '2017-12-25 16:34:27', '10', '1');
INSERT INTO `topic` VALUES ('3230', '24', '2', 'touch是创建空文件', '1609cb4f-2ba7-428b-aae3-566f8b8100ad.', null, null, null, null, null, null, '正确', 'linux的touch命令不常用，一般在使用make的时候可能会用到，用来修改文件时间戳，或者新建一个不存在的文件。', '0', '2017-12-25 16:34:32', '30', '1');
INSERT INTO `topic` VALUES ('3231', '32', '4', 'MyIASM引擎', '7010e55f-0594-4b99-aad5-feae23a544e5.', null, null, null, null, null, null, 'MYIASM是MYSQL默认的引擎，但是它没有提供对数据库事务的支持，也不支持行级锁和外键，因此当INSERT(插入)或UPDATE(更新)数据时即写操作需要锁定整个表，效率便会低一些。不过和INNODB不同，MYIASM中存储了表的行数，于是SELECT COUNT(*) FROM TABLE时只需要直接读取已经保存好的值而不需要进行全表扫描。如果表的读操作远远多于写操作且不需要数据库事务的支持，那么MYIASM也是很好的选择。', '', '0', '2017-12-25 16:34:45', '10', '1');
INSERT INTO `topic` VALUES ('3232', '32', '4', '数据模型分为几种？', '23e4ade7-b6bf-4bdf-a7f3-79e481336cd1.', null, null, null, null, null, null, '层次模型，网状模型，关系模型，语义模型，面相对象模型 ', '', '0', '2017-12-25 16:35:02', '67', '1');
INSERT INTO `topic` VALUES ('3233', '4', '4', 'Statement与PreparedStatement的区别,什么是SQL注入，如何防止SQL注入', 'c07946f6-9cc0-48a4-b66b-1959149474bb.', null, null, null, null, null, null, '使用PREPAREDSTATEMENT可以提升代码的可读性和可维护性，可以尽最大可能提高性能。因为STATEMENT每次执行一个SQL命令都会对其编译，但PREPAREDSTATEMENT则只编译一次。PREPAREDSTATEMENT就类似于流水线生产。另一方面PREPAREDSTATEMENT可以极大提高安全性：它对传递过来的参数进行了强制参数类型转换，确保插入或查询数据时，与底层数据库格式匹配。', '', '0', '2017-12-25 16:35:03', '55', '1');
INSERT INTO `topic` VALUES ('3234', '32', '4', '两种引擎的选择', '4412898e-02c1-47d6-be67-37c9ec13ccad.', null, null, null, null, null, null, '大尺寸的数据集趋向于选择INNODB引擎，因为它支持事务处理和故障恢复。数据库的大小决定了故障恢复的时间长短，INNODB可以利用事务日志进行数据恢复，这会比较快。主键查询在INNODB引擎下也会相当快，不过需要注意的是如果主键太长也会导致性能问题，关于这个问题我会在下文中讲到。大批的INSERT语句(在每个INSERT语句中写入多行，批量插入)在MYISAM下会快一些，但是UPDATE语句在INNODB下则会更快一些，尤其是在并发量大的时候。', '', '0', '2017-12-25 16:35:04', '10', '1');
INSERT INTO `topic` VALUES ('3236', '3', '4', 'redirect, forward区别', '21b5a47d-32f3-4990-b268-4bf04bd88f8f.', null, null, null, null, null, null, 'REDIRECT：服务器根据逻辑，发送一个状态码，告诉浏览器重新去请求那个地址。所以地址栏显示是新的URL。FORWARD是指服务器请求资源，直接访问目标地址URL，把响应的内容读取过来并再发送给浏览器，浏览器并不知道资源从哪里来，所以地址栏不变。\r\n\r\nREDIRECT不能共享数据，FORWARD转发页面和转发到页面可以贡献REQUEST中的数据。REDIRECT用于注销，FORWARD用于登陆。FORWARD效率高于REDIRECT。', '', '0', '2017-12-25 16:35:17', '55', '1');
INSERT INTO `topic` VALUES ('3237', '26', '4', '請問 LAMP 這個伺服器代表什麼意思？', 'd807d77b-a1b0-4def-a119-9e20394a01d6.', null, null, null, null, null, null, '這個名詞代表了 LINUX + APACHE + MYSQL + PHP 這個 WWW 伺服器的組成！', '', '0', '2017-12-25 16:35:20', '29', '1');
INSERT INTO `topic` VALUES ('3238', '32', '4', '创建表的方法是？', '209b21b1-9ab9-442c-b782-edaf2780f8fb.', null, null, null, null, null, null, 'CREATE TABLE', '', '0', '2017-12-25 16:35:21', '67', '1');
INSERT INTO `topic` VALUES ('3239', '32', '4', 'Index——索引', 'c1880885-bd93-4e1f-adf7-3407322be9ef.', null, null, null, null, null, null, '索引（INDEX）是帮助MYSQL高效获取数据的数据结构。MYIASM和INNODB都使用了树这种数据结构做为索引，关于树我也曾经写过一篇文章树是一种伟大的数据结构，只是自己的理解，有兴趣的朋友可以去阅读。下面我接着讲这两种引擎使用的索引结构，讲到这里，首先应该谈一下B-TREE和B+TREE。', '', '0', '2017-12-25 16:35:24', '10', '1');
INSERT INTO `topic` VALUES ('3240', '3', '4', '关于JAVA内存模型，一个对象（两个属性，四个方法）实例化100次，现在内存中的存储状态，几个对象，几个属性，几个方法。', '4f9bbda6-e7ab-46f6-bce5-4585e431de57.', null, null, null, null, null, null, 'JAVA新建的对象都放在堆里，如果实例化100次，堆中产生100个对象，一般对象与其属性和方法属于一个整体，但如果属性和方法是静态的，则属性和方法只在内存中存一份。', '', '0', '2017-12-25 16:35:32', '55', '1');
INSERT INTO `topic` VALUES ('3242', '26', '4', '如何启动 Linux 的 IP Forward 功能？', 'edcbdd73-0d55-4b98-8056-618981f4e394.', null, null, null, null, null, null, '直接以『ECHO \"1\" > /PROC/SYS/NET/IPV4/IP_FORWARD 』即可！', '', '0', '2017-12-25 16:35:37', '28', '1');
INSERT INTO `topic` VALUES ('3243', '32', '4', '合并查询所使用的关键字是什么？', 'a92440b6-a982-4bc6-aa5c-a8f495dc50a5.', null, null, null, null, null, null, 'GROUP BY', '', '0', '2017-12-25 16:35:43', '67', '1');
INSERT INTO `topic` VALUES ('3244', '3', '4', 'List \r\n\r\n和\r\n\r\n \r\n\r\nMap \r\n\r\n区别\r\n\r\n?', '83f15844-16c1-470b-8bb7-b7dbe39065ce.', null, null, null, null, null, null, '一个是存储单列数据的集合，\r\n\r\n另一个是存储键和值这样的双列数据的集合，\r\n\r\nLIST\r\n\r\n中存储的数\r\n\r\n据是有顺序，并且允许重复；\r\n\r\nMAP\r\n\r\n中存储的数据是没有顺序的，其键是不能重复的，它的\r\n\r\n值是可以有重复的。', '', '0', '2017-12-25 16:35:47', '53', '1');
INSERT INTO `topic` VALUES ('3245', '3', '4', '谈谈Hibernate的理解，一级和二级缓存的作用，在项目中Hibernate都是怎么使用缓存的', '45b5cbb2-f4d8-4380-bbdd-03d88297eb75.', null, null, null, null, null, null, '一级缓存为SESSION基本的缓存，是内置的不能卸载。一个SESSION做了一个查询操作，它会把这个结果放在一级缓存中，如果短时间内这个SESSION又做了同一个操作，那么HIBERNATE就直接从一级缓存中获取数据。\r\n\r\n二级缓存是SESSIONFACTORY的缓存，分为内置缓存和外置缓存两类。即查询结果放在二级缓存中，如果同一个SESSIONFACTORY创建的某个SESSION执行了相同的操作，HIBERNATE就会从二级缓存中获取结果。适合放在二级缓存中的数据包括：很少被修改的数据，不是很重要的数据，允许出现偶偶并发的数据，不会被并发访问的数据，参考数据。不适合放在二级缓存中的数据：经常被修改的数据，财务数据，绝对不允许出现并发，与其他应用共享的数据。', '', '0', '2017-12-25 16:35:48', '55', '1');
INSERT INTO `topic` VALUES ('3246', '26', '4', '假设你想要连接到 168.95.1.1 ，那么你该如何判断你经过『多少个』节点？', '9a68b511-15b1-4303-a923-613a0cbb3ed5.', null, null, null, null, null, null, '可以使用 TRACEROUTE 168.95.1.1 来分析每个节点的传送信息，也可以透过 PING 168.95.1.1 所回传的那个 TTL 值判断节点数量。', '', '0', '2017-12-25 16:35:54', '28', '1');
INSERT INTO `topic` VALUES ('3247', '24', '2', 'echo是创建带有内容的文件。', '5899677c-8063-4615-9a34-15b5ebe50e33.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 16:36:02', '30', '1');
INSERT INTO `topic` VALUES ('3248', '32', '4', '在SQL SERVER 2000中，索引分为几类？', '08c2fcf0-e072-4c7c-afed-95091dabeb9f.', null, null, null, null, null, null, '1.聚集索引 2.唯一索引 3.非聚集索引', '', '0', '2017-12-25 16:36:20', '67', '1');
INSERT INTO `topic` VALUES ('3250', '26', '4', '万一您的网络有点停顿，发现可能是网络上某个节点出现问题，您应该如何确认是哪一部 Router 出问题？', '4a7c4249-6e64-46df-aee7-bb3da930bb3f.', null, null, null, null, null, null, '用TRACEROUTE ', '', '0', '2017-12-25 16:36:45', '28', '1');
INSERT INTO `topic` VALUES ('3251', '3', '4', 'Java中的异常处理机制的简单原理和应用。\r\n', '0a2f092e-0162-4b29-89a6-54559d6d2878.', null, null, null, null, null, null, '当JAVA程序违反了JAVA的语义规则时，JAVA虚拟机就会将发生的错误表示为一个异常。违反语义规则包括2种情况：一种是JAVA类库内置的语义检查。例如数组下标越界时会引发INDEXOUTOFBOUNDSEXCEPTION，访问NULL的对象时会引发NULLPOINTEREXCEPTION。另一种情况是JAVA允许程序员扩展这种语义检查，程序员可以创建自己的异常，并自由选择在何时用THROW关键字引发异常。所有的异常都是JAVA.LANG.THOWABLE的子类。 \r\n\r\n', '', '0', '2017-12-25 16:36:46', '49', '1');
INSERT INTO `topic` VALUES ('3252', '26', '1', '在/etc/fstab文件中指定的文件系统加载参数中.', '6a82d1eb-59b8-4e68-aa6e-f6778dd50907.', 'defaults', 'sw', 'rw和ro', 'noauto', '', '', 'D', '', '0', '2017-12-25 16:37:18', '36', '1');
INSERT INTO `topic` VALUES ('3253', '4', '4', 'spring ？', '3c6862bb-da6f-4237-bbd0-402cebc54107.', null, null, null, null, null, null, 'SPRING 是个JAVA企业级应用的开源开发框架。SPRING主要用来开发JAVA应用，但是有些扩展是针对构建J2EE平台的WEB应用。SPRING 框架目标是简化JAVA企业级应用开发，并通过POJO为基础的编程模型促进良好的编程习惯。', '', '0', '2017-12-25 16:37:23', '59', '1');
INSERT INTO `topic` VALUES ('3254', '24', '2', 'cat是查看文件内容', '4f086fb0-43dd-459d-a208-dea65394501e.', null, null, null, null, null, null, '正确', 'cat主要有三大功能：\r\n1.一次显示整个文件。$ cat filename\r\n2.从键盘创建一个文件。$ cat > filename  \r\n   只能创建新文件,不能编辑已有文件.\r\n3.将几个文件合并为一个文件： $cat file1 file2 > file', '0', '2017-12-25 16:37:26', '30', '1');
INSERT INTO `topic` VALUES ('3255', '3', '4', 'sleep()和wait()有什么区别?\r\n', '5ed7337a-3f56-4dca-b586-6abbe6c90b43.', null, null, null, null, null, null, 'SLEEP()是线程类THREAD的方法，导致此线程暂停执行指定时间，给执行机会给其他线程，但是监控状态依然保持，到时后会自动恢复，调用SLEEP不会释放对象锁。\r\n   WAIT()是OBJECT类的方法，对此对象调用WAIT方法导致本线程放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象发出NOTIFY方法（或NOTIFYALL）后本线程才进入对象锁定池准备获得对象锁进入运行状态。 \r\n', '', '0', '2017-12-25 16:37:55', '49', '1');
INSERT INTO `topic` VALUES ('3256', '3', '4', '内部类可以引用它的包含类（外部类）的成员吗？有没有什么限制？ ', 'ad36dec2-1033-467b-8e94-86f887b42f92.', null, null, null, null, null, null, '一个内部类对象可以访问创建它的外部类对象的成员，包括私有成员。', '', '0', '2017-12-25 16:38:17', '52', '1');
INSERT INTO `topic` VALUES ('3257', '26', '4', 'String和StringBuffer的区别。\r\n', 'dfa27fdd-9e10-4b72-9852-0f6c71dac8a4.', null, null, null, null, null, null, 'JAVA平台提供了两个类：STRING和STRINGBUFFER，它们可以储存和操作字符串，即包含多个字符的字符数据。这个STRING类提供了数值不可改变的字符串。而这个STRINGBUFFER类提供的字符串进行修改。当知道字符数据要改变的时候就可以使用STRINGBUFFER。典型地，可以使用STRINGBUFFERS来动态构造字符数据。 \r\n', '', '0', '2017-12-25 16:38:25', '49', '1');
INSERT INTO `topic` VALUES ('3258', '4', '4', 'Spring配置文件', 'e26e8ea4-74b5-469a-aa21-bcb495e8f783.', null, null, null, null, null, null, 'SPRING配置文件是个XML 文件，这个文件包含了类信息，描述了如何配置它们，以及如何相互调用。', '', '0', '2017-12-25 16:38:30', '59', '1');
INSERT INTO `topic` VALUES ('3259', '26', '3', '路由的修改与查阅可以使用（）来查询', '23334fc5-0258-46df-aafa-43dcc4e82046.', null, null, null, null, null, null, ' ROUTE ', '', '0', '2017-12-25 16:38:35', '29', '1');
INSERT INTO `topic` VALUES ('3260', '26', '4', 'Void（0）怎么用？', '786ce66d-5e7d-4fa7-910a-2e6d3cfdffc3.', null, null, null, null, null, null, 'VOID（0）用于防止页面刷新，并在调用时传递参数“ZERO”。', 'Void（0）用于调用另一种方法而不刷新页面。', '0', '2017-12-25 16:38:47', '54', '1');
INSERT INTO `topic` VALUES ('3261', '32', '4', '创建视图的方法有几种？', 'a9f8688f-eae0-48fb-af30-d0c740f57422.', null, null, null, null, null, null, '1、利用向导  2、利用企业管理器 3、T-SQL语句', '', '0', '2017-12-25 16:38:48', '67', '1');
INSERT INTO `topic` VALUES ('3262', '3', '4', '什么是Spring IOC 容器？', '6706267d-dfa2-48c6-ae94-37542b0dd002.', null, null, null, null, null, null, 'SPRING IOC 负责创建对象，管理对象（通过依赖注入（DI），装配对象，配置对象，并且管理这些对象的整个生命周期。', '', '0', '2017-12-25 16:38:50', '59', '1');
INSERT INTO `topic` VALUES ('3263', '3', '1', '以下代码，描述正确的有（）\r\ninterface IDemo{\r\npublic static final String name;1\r\nvoid print();2\r\npublic void getInfo();3\r\n}\r\nabstract class Person implements IDemo{4\r\npublic void print(){\r\n}\r\n}', 'f914408b-8e85-4a55-b4e6-635df382776e.', '第1行错误，没有给变量赋值', '第2行错误，方法没有修饰符', '第4行错误，没有实现接口的全部方法', ' 第3行错误，没有方法的实现', '', '', 'A', '', '0', '2017-12-25 16:38:58', '51', '1');
INSERT INTO `topic` VALUES ('3264', '24', '2', 'cp是用来拷贝', '06e295b4-d7ae-422e-aac2-ddb10d6e5948.', null, null, null, null, null, null, '正确', '复制档案或目录', '0', '2017-12-25 16:39:04', '30', '1');
INSERT INTO `topic` VALUES ('3265', '3', '4', '接口是否可继承接口? 抽象类是否可实现接口? 抽象类是否可继承实体类?\r\n', '103738b8-6050-4688-b12e-3d99770a2d16.', null, null, null, null, null, null, '接口可以继承接口。抽象类可以实现接口。抽象类是否可继承实体类，但前提是实体类必须有明确的构造函数。\r\n\r\n', '', '0', '2017-12-25 16:39:08', '49', '1');
INSERT INTO `topic` VALUES ('3266', '4', '4', ' IOC的优点是什么？', '54175ef2-2714-4127-b1f6-81e3c851863c.', null, null, null, null, null, null, 'IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。', '', '0', '2017-12-25 16:39:16', '59', '1');
INSERT INTO `topic` VALUES ('3268', '32', '4', '删除数据库使用什么语句？', '37ca5a67-3dde-4ca1-a847-67e38bff8630.', null, null, null, null, null, null, 'DROP DATABASE \'DATABASENAME\'', '', '0', '2017-12-25 16:39:22', '67', '1');
INSERT INTO `topic` VALUES ('3269', '3', '1', '接口和抽象类描述正确的有（）（两项）', 'cc640606-045b-4efb-97a1-a336c8a75e53.', '抽象类没有构造函数', '接口没有构造函数', '抽象类不允许多继承', '接口中的方法可以有方法体', '', '', 'BC', '', '0', '2017-12-25 16:39:48', '51', '1');
INSERT INTO `topic` VALUES ('3270', '24', '2', 'mv是移动或重命名', 'b88ae832-4fe2-4e52-9091-12b9d9c6cff5.', null, null, null, null, null, null, '正确', 'mv是移动或重命名', '0', '2017-12-25 16:39:48', '30', '1');
INSERT INTO `topic` VALUES ('3271', '5', '4', '什么是JavaScript Cookie？', '916c6ac3-3ba7-4038-a9b6-498951d88742.', null, null, null, null, null, null, 'COOKIE是用来存储计算机中的小型测试文件，当用户访问网站以存储他们需要的信息时，它将被创建。', 'Cookie是用来存储计算机中的小型测试文件，当用户访问网站以存储他们需要的信息时，它将被创建。', '0', '2017-12-25 16:39:55', '54', '1');
INSERT INTO `topic` VALUES ('3272', '26', '4', '说明一下类变量和实例变量的区别。\r\n', '4ef0d322-154d-44bf-8d84-ff6c67f099c9.', null, null, null, null, null, null, '类变量是所有对象共有的，所有的实例对象都共用一个类变量，内存中只有一处空间存放类变量的值。如果其中一个对象改变了类变量的值，其他对象得到的就是改变后的结果。当类被加载到内存时，类变量就会分配相应的内存空间。\r\n', '', '0', '2017-12-25 16:40:42', '49', '1');
INSERT INTO `topic` VALUES ('3273', '3', '4', 'jsp和servlet的区别、共同点、各自应用的范围？？ ', '42ce8c0d-ac2a-45d2-9c37-1ca74d1bf54c.', null, null, null, null, null, null, 'JSP是SERVLET技术的扩展，本质上就是SERVLET的简易方式。JSP编译后是“类SERVLET”。SERVLET和JSP最主要的不同点在于，SERVLET的应用逻辑是在JAVA文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是JAVA和HTML可以组合成一个扩展名为.JSP的文件。JSP侧重于视图，SERVLET主要用于控制逻辑。在STRUTS框架中,JSP位于MVC设计模式的视图层,而SERVLET位于控制层.', '', '0', '2017-12-25 16:40:42', '57', '1');
INSERT INTO `topic` VALUES ('3274', '3', '4', 'cookie和session的作用、区别、应用范围，session的工作原理？？？ ', '69f50490-4b0f-4cba-93d2-f00315eeb6df.', null, null, null, null, null, null, 'COOKIE:主要用在保存客户端，其值在客户端与服务端之间传送，不安全，存储的数据量有限。   SESSION:保存在服务端，每一个SESSION在服务端有一个SESSIONID作一个标识。存储的数据量大，安全性高。占用服务端的内存资源。', '', '0', '2017-12-25 16:40:53', '57', '1');
INSERT INTO `topic` VALUES ('3275', '24', '2', 'rm是用于删除文件', 'bb81bddb-70f6-42b8-9fb4-74c817353ac9.', null, null, null, null, null, null, '正确', 'rm是删除文件', '0', '2017-12-25 16:40:59', '30', '1');
INSERT INTO `topic` VALUES ('3276', '5', '4', '解释JavaScript中的pop（）方法？', '9b25c378-8e7f-45be-ae1a-bc54d5d497da.', null, null, null, null, null, null, 'POP（）方法与SHIFT（）方法类似，但不同之处在于SHIFT方法在数组的开头工作。此外，POP（）方法将最后一个元素从给定的数组中取出并返回。然后改变被调用的数组。', '例：\r\nvar cloths = [“Shirt”, “Pant”, “TShirt”];\r\ncloths.pop();\r\n//Now cloth becomes Shirt,Pant', '0', '2017-12-25 16:41:01', '54', '1');
INSERT INTO `topic` VALUES ('3277', '3', '4', 'jstl是什么？优点有哪些？', 'a4aa79eb-94f6-4b42-ba7a-f17883f03fd3.', null, null, null, null, null, null, 'JSTL（JSP STANDARD TAG LIBRARY ，JSP标准标签库)是一个不断完善的开放源代码的JSP标签库，由四个定制标记库（CORE、FORMAT、XML 和 SQL）和一对通用标记库验证器（SCRIPTFREETLV 和 PERMITTEDTAGLIBSTLV）组成。优点有：', '', '0', '2017-12-25 16:41:07', '57', '1');
INSERT INTO `topic` VALUES ('3278', '3', '4', '说明实例方法和类方法的区别？', '6c587fce-0aac-47e0-a436-cd47a0fa2e02.', null, null, null, null, null, null, '方法前面有STATIC关键字修饰的为类方法，否则为实例方法。 实例方法可以调用该类中的其他方法；类方法只能调用其他类方法，不能调用实例方法；当类文件加载到内存时，实例方法不会被分配内存空间，只有在对象创建之后才会分配。而类方法在该类被加载到内存时就分配了相应的内存空间。\r\n', '', '0', '2017-12-25 16:41:15', '49', '1');
INSERT INTO `topic` VALUES ('3279', '3', '1', ' 使用JDBC事务的步骤是（）（多选）', '435e275d-c3d8-46a0-9b48-f93fa7e6ea81.', '取消Connection的事务自动提交方式', '发生异常回滚事务', '获取Connection对象', '操作完毕提交事务', '', '', 'CABD', '', '0', '2017-12-25 16:41:24', '51', '1');
INSERT INTO `topic` VALUES ('3280', '5', '4', '在JavaScript中使用innerHTML的缺点是什么？', 'e8657e17-7392-4faa-b277-b6f397fc0071.', null, null, null, null, null, null, '如果在JAVASCRIPT中使用INNERHTML，缺点是：内容随处可见；不能像“追加到INNERHTML”一样使用；即使你使用+ = LIKE“INNERHTML = INNERHTML +\'HTML\'”旧的内容仍然会被HTML替换；整个INNERHTML内容被重新解析并构建成元素，因此它的速度要慢得多；INNERHTML不提供验证，因此我们可能会在文档中插入有效的和破坏性的HTML并将其中断。', '如果在JavaScript中使用innerHTML，缺点是：内容随处可见；不能像“追加到innerHTML”一样使用；即使你使用+ = like“innerHTML = innerHTML +\'html\'”旧的内容仍然会被html替换；整个innerHTML内容被重新解析并构建成元素，因此它的速度要慢得多；innerHTML不提供验证，因此我们可能会在文档中插入有效的和破坏性的HTML并将其中断。', '0', '2017-12-25 16:41:26', '54', '1');
INSERT INTO `topic` VALUES ('3281', '24', '2', 'find在文件系统中搜索某文件', 'fdef07fd-2a0d-420d-8cdb-2b1f2218724b.', null, null, null, null, null, null, '正确', 'find在文件系统中搜索某文件', '0', '2017-12-25 16:41:27', '30', '1');
INSERT INTO `topic` VALUES ('3282', '3', '4', '什么是哈希表？\r\n', 'eb934196-f84f-4fbe-9d0f-d6b79e02ad62.', null, null, null, null, null, null, '：哈希表又称散列表，是一种能将关键字映射成存储地址的记录存储技术。要存储数据，先设计一种算法（哈希函数），然后根据数据记录的关键字计算出各记录的哈希码，这个哈希码作为与关键字相关的记录数据的索引。要取出记录，只需要根据哈希函数重新计算，得到哈希码后，便可直接到相应位置去存取。 \r\n', '', '0', '2017-12-25 16:41:29', '49', '1');
INSERT INTO `topic` VALUES ('3283', '24', '2', 'wc统计文本中行数、字数、字符数', '54e88a69-51f0-4432-a619-cfef28adfbd9.', null, null, null, null, null, null, '正确', 'wc统计文本中行数、字数、字符数', '0', '2017-12-25 16:41:51', '30', '1');
INSERT INTO `topic` VALUES ('3284', '26', '4', ' 网管人员应具备的技能', '5af6b39e-aa61-4bbd-b4e8-bafdf316da55.', null, null, null, null, null, null, '了解什么是需要保护的内容\r\n预防黑客 (BLACK HATS) 的入侵\r\n主机环境安全化\r\n防火墙规则的订定\r\n实时维护你的主机\r\n良好的教育训练课程\r\n完善的备份计划\r\n', '', '0', '2017-12-25 16:42:11', '29', '1');
INSERT INTO `topic` VALUES ('3285', '3', '1', '以下对JDBC事务描述错误的是()', 'd7439a2e-0fa6-45a8-9a6f-e0e329762fd4.', 'JDBC事务属于JAVA事务的一种', 'JDBC事务属于容器事务类型', 'JDBC事务可以保证操作的完整性和一致性', 'JDBC事务是由Connection发起的，并由Connection控制', '', '', 'B', '', '0', '2017-12-25 16:42:25', '51', '1');
INSERT INTO `topic` VALUES ('3286', '5', '4', 'break和continue语句的作用？', 'fa288fa7-f508-4f8a-9469-e2f281e46fff.', null, null, null, null, null, null, 'BREAK语句从当前循环中退出。\r\nCONTINUE语句继续下一个循环语句。', 'Break语句从当前循环中退出。\r\ncontinue语句继续下一个循环语句。', '0', '2017-12-25 16:42:30', '54', '1');
INSERT INTO `topic` VALUES ('3287', '3', '4', '插入数据时，ArrayList、LinkedList、Vector谁速度较快？\r\n', 'c74d67ac-51c0-44dd-8710-03780d367f2e.', null, null, null, null, null, null, 'ARRAYLIST、VECTOR以数组方式存储数据，插入数据时要进行元素移动操作，因而插入数据慢。LINKEDLIST是一种链表结构，在插入数据时只需要修改链表的前后项指向即可，因此插入速度较快。\r\n\r\n', '', '0', '2017-12-25 16:42:39', '49', '1');
INSERT INTO `topic` VALUES ('3288', '3', '4', 'try {}里有一个return语句，那么紧跟在这个try后的finally {}里的code会不会被执行，什么时候被执行，在return前还是后?', 'aa75845f-e8aa-4c5b-8a19-64f0a90f3e5d.', null, null, null, null, null, null, '会执行，在RETURN前执行。', '', '0', '2017-12-25 16:42:58', '53', '1');
INSERT INTO `topic` VALUES ('3289', '3', '1', '要通过可滚动的结果集更新数据，以下正确的是（)', '25c59183-129e-4266-aa72-1f4745e2cada.', ' pst=con.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE)', ' pst=con.prepareStatement(sql, ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_READ_ONLY)', ' pst=con.prepareStatement(sql, Resu ltSet.TYPE_SCROLL_SENSITIVE)', 'pst=con.prepareStatement(sql, ResultSet.CONCUR_UPDATABLE)', '', '', 'A', '', '0', '2017-12-25 16:43:15', '51', '1');
INSERT INTO `topic` VALUES ('3290', '3', '4', '多线程的实现方法分别是什么?同步的实现方法分别是什么? \r\n', '98941af0-7a1a-464f-82ea-00b5dd688a4b.', null, null, null, null, null, null, '多线程有两种实现方法，分别是继承THREAD类与实现RUNNABLE。\r\n接口同步的实现方面有两种，分别是SYNCHRONIZED、WAIT与NOTIFY。\r\n', '', '0', '2017-12-25 16:43:28', '49', '1');
INSERT INTO `topic` VALUES ('3291', '5', '4', '在JavaScript中，dataypes的两个基本组是什么？', '50a10a32-f016-4f86-a807-6656ad48b21a.', null, null, null, null, null, null, 'PRIMITIVE\r\nREFERENCE TYPES', '原始类型是数字和布尔数据类型。引用类型是更复杂的类型，如字符串和日期。', '0', '2017-12-25 16:43:43', '54', '1');
INSERT INTO `topic` VALUES ('3293', '3', '1', '以下描述正确的是()', '98125d84-0503-4545-bc3f-fbcbb8aeed59.', ' CallableStatement是PreparedStatement的父接口', 'PreparedStatement是CallableStatement的父接口', 'CallableStatement是Statement的子接口', 'PreparedStatement是Statement的父接口', '', '', 'B', '', '0', '2017-12-25 16:43:54', '51', '1');
INSERT INTO `topic` VALUES ('3294', '3', '4', '如何实现字符串的分割？\r\n', 'dad051c3-9c92-4fd0-84c6-c2642418042c.', null, null, null, null, null, null, '第一种方法是采用SPLIT()方法，将分割后的内容保存在指定的字符串数组中；第二种方法是采用STRINGTOKENIZER，利用STRINGTOKENIZER的NEXTTOKEN()、HASMORETOKENS()等方法进行分割。', '', '0', '2017-12-25 16:44:00', '49', '1');
INSERT INTO `topic` VALUES ('3295', '5', '4', '如何创建通用对象？', '687b2c83-c1df-4877-bb47-23505cb2e80b.', null, null, null, null, null, null, '通用对象可以创建为：\r\nVAR I = NEW OBJECT();', '通用对象可以创建为：\r\nvar I = new object();', '0', '2017-12-25 16:44:04', '54', '1');
INSERT INTO `topic` VALUES ('3296', '26', '4', '线程同步的方法。', '4684120f-b943-4b7b-b15c-7998b216808e.', null, null, null, null, null, null, '当JAVA程序违反了JAVA的语义规则时，JAVA虚拟机就会将发生的错误表示为一个异常。违反语义规则包括2种情况。一种是JAVA类库内置的语义检查。例如数组下标越界,会引发INDEXOUTOFBOUNDSEXCEPTION;访问NULL的对象时会引发NULLPOINTEREXCEPTION。另一种情况就是JAVA允许程序员扩展这种语义检查，程序员可以创建自己的异常，并自由选择在何时用THROW关AWAIT():使一个线程处于等待状态，并且释放所持有的对象的LOCK。   SLEEP():使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要捕捉INTERRUPTEDEXCEPTION异常。    NOTIFY():唤醒一个处于等待状态的线程，注意的是在调用此方法的时候，并不能确切地唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且不是按优先级。    ALLNOTITY():唤醒所有处入等待状态的线程，注意并不是给所有唤醒线程一个对象的锁，而是让它们竞争。键字引发异常。所有的异常都是JAVA.LANG.THOWABLE的子类。', '', '0', '2017-12-25 16:44:06', '57', '1');
INSERT INTO `topic` VALUES ('3297', '3', '4', '描述一下JVM加载class文件的原理机制?\r\n', '04b25ff3-d3bb-4a36-bc2e-6a396c69fe3c.', null, null, null, null, null, null, 'JVM中类的装载是由CLASSLOADER和它的子类来实现的,JAVA CLASSLOADER 是一个重要的JAVA运行时系统组件。它负责在运行时查找和装入类文件的类。\r\n', '', '0', '2017-12-25 16:44:17', '49', '1');
INSERT INTO `topic` VALUES ('3298', '3', '4', ' 在java中一个类被声明为final类型，表示了什么意思？', 'b7f30251-23d8-478b-a0f6-435a78adfa9e.', null, null, null, null, null, null, '  表示该类不能被继承，是顶级类。', '', '0', '2017-12-25 16:44:19', '57', '1');
INSERT INTO `topic` VALUES ('3299', '3', '4', '在什么情况下，finally语句不会执行？\r\n\r\n', '88f91fb0-ddb7-4dca-aa5a-3aef39ea0861.', null, null, null, null, null, null, 'JVM中类的装载是由CLASSLOADER和它的子类来实现的,JAVA CLASSLOADER 是一个重要的JAVA运行时系统组件。它负责在运行时查找和装入类文件的类。\r\n', '', '0', '2017-12-25 16:44:31', '49', '1');
INSERT INTO `topic` VALUES ('3300', '5', '4', 'operator类型用来做什么？', '37b02bf3-6905-4a37-9a4c-3e0932187a1c.', null, null, null, null, null, null, '\'TYPEOF\'是一个运算符，用于返回变量类型的字符串描述。', '\'Typeof\'是一个运算符，用于返回变量类型的字符串描述。', '0', '2017-12-25 16:44:39', '54', '1');
INSERT INTO `topic` VALUES ('3301', '3', '1', '要删除book表中书籍(bookName)是”java”的记录，以下代码正确的是（)\r\nString sql=”delete from book where bookName=?”;\r\nPreparedStatement pst=con.preparedStatement(sql);\r\n____________________________\r\npst.execute();', '22502be1-fb1b-4360-bbe9-ba6c7041c1d0.', 'pst.setString(1,”java”);', 'pst.setString(0,”java”);', 'pst.setInt(0,”java”);', '以上选项都不正确', '', '', 'A', '', '0', '2017-12-25 16:44:49', '51', '1');
INSERT INTO `topic` VALUES ('3302', '3', '4', 'Enumeration接口和Iterator接口的区别有哪些？', 'abc7ac0b-4596-4cfc-9787-6cc9c5926825.', null, null, null, null, null, null, 'ENUMERATION速度是ITERATOR的2倍，同时占用更少的内存。但是，ITERATOR远远比ENUMERATION安全，因为其他线程不能够修改正在被ITERATOR遍历的集合里面的对象。同时，ITERATOR允许调用者删除底层集合里面的元素，这对ENUMERATION来说是不可能的。', '', '0', '2017-12-25 16:44:52', '52', '1');
INSERT INTO `topic` VALUES ('3303', '3', '4', '反射讲一讲，主要是概念,都在哪需要反射机制，反射的性能，如何优化', '2d9f7fb8-c944-4278-8735-40bd9d95427c.', null, null, null, null, null, null, '能够分析类能力的程序称为反射。反射机制可以用来：在运行中分析类的能力，在运行中查看对象，如编写一个TOSTRING方法供所有类使用。实现通用的数据操作代码。利用METHOD对象，这个对象很像C++的指针。\r\n\r\n反射性能优化方法主要为设置不用做安全检查。', '', '0', '2017-12-25 16:44:57', '55', '1');
INSERT INTO `topic` VALUES ('3305', '5', '4', '哪些关键字用于处理异常？', '5b234499-8f70-466c-866d-7062e6643462.', null, null, null, null, null, null, 'RY... CATCH-FINALLY用于处理JAVASCRIPT中的异常。', 'ry... Catch-finally用于处理JavaScript中的异常。', '0', '2017-12-25 16:45:08', '54', '1');
INSERT INTO `topic` VALUES ('3306', '3', '4', 'System.gc()和Runtime.gc()会做什么事情？', '4a80e802-a11f-4d66-8863-6984e0105a1c.', null, null, null, null, null, null, '这两个方法用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。', '', '0', '2017-12-25 16:45:24', '53', '1');
INSERT INTO `topic` VALUES ('3307', '3', '4', 'HashSet和TreeSet有什么区别？', '0e8065d0-d7ce-4498-b30f-f917b31b4f2f.', null, null, null, null, null, null, 'HASHSET是由一个HASH表来实现的，因此，它的元素是无序的。ADD()，REMOVE()，CONTAINS()方法的时间复杂度是O(1)。', '', '0', '2017-12-25 16:45:25', '52', '1');
INSERT INTO `topic` VALUES ('3308', '3', '4', '字符串的compareTo方法结果是什么？\r\n', '4da589d7-96d8-45c5-b23f-f1008cafd60e.', null, null, null, null, null, null, '使用COMPARETO()方法可以比较字符串与字符串之间的大小关系。如果当前字符串小于指定字符串，则返回一个小于0的数值；否则返回一个大于0的数值；如果两个字符串相等，则返回0。\r\n', '', '0', '2017-12-25 16:45:28', '49', '1');
INSERT INTO `topic` VALUES ('3309', '4', '1', '下面的代码用于输出字符数组ch中每个字符出现的次数，应该填入的代码是()', 'b2a11010-543f-4c3d-972e-6ab7af8c4581.', 'for (int i = list.size() - 1; i >= 0; i--) {\r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} ', 'for (int i = 0; i < list.size(); i++) { \r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} ', 'list.remove(\"java\"); ', 'list.removeAll(\"java\");', '', '', 'A', '下面可以删除list中所有的“java”的代码是：（A） \r\nA.for (int i = list.size() - 1; i >= 0; i--) {//规定是逆序删除，每删除一个，会重新排序 \r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} \r\nB.for (int i = 0; i < list.size(); i++) { \r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} \r\nC.list.remove(\"java\"); //只能删除第一个 \r\nD.list.removeAll(\"java\");//括号中的参数是集合的类型 ', '0', '2017-12-25 16:45:37', '50', '1');
INSERT INTO `topic` VALUES ('3310', '26', '1', '获取ResutlSet对象rst的第一行数据，以下正确的是（）', 'b6028504-15ff-43be-910d-cf4ecdf43382.', 'rst.hashNext();', ' rst.next();', 'rst.first();', 'rst.nextRow()', '', '', 'B', '', '0', '2017-12-25 16:45:38', '51', '1');
INSERT INTO `topic` VALUES ('3311', '5', '4', 'JavaScript中不同类型的错误有几种？', '108802d2-cad4-43a2-88dd-6dd092e263f5.', null, null, null, null, null, null, '有三种类型的错误：', 'Load time errors：该错误发生于加载网页时，例如出现语法错误等状况，称为加载时间错误，并且会动态生成错误。\r\nRun time errors：由于在HTML语言中滥用命令而导致的错误。\r\nLogical Errors：这是由于在具有不同操作的函数上执行了错误逻辑而发生的错误。', '0', '2017-12-25 16:45:45', '54', '1');
INSERT INTO `topic` VALUES ('3312', '3', '4', '字符串的连接操作有几种实现方法？ \r\n', '9c0167b0-b266-4675-ab2f-5c905dc818ab.', null, null, null, null, null, null, '字符串与字符串的连接操作可以通过“+”运算符和CONCAT()方法来实现。另外“+”运算符还可以实现字符串与其他类型数据之间的连接操作，可以与字符串连接的数据类型有：INT、LONG、FLOAT、DOUBLE、BOOLEAN、CHAR等。 \r\n', '', '0', '2017-12-25 16:45:49', '49', '1');
INSERT INTO `topic` VALUES ('3313', '3', '4', '.finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？', '088bfd83-53a2-4df4-b092-80d7ec5c9e74.', null, null, null, null, null, null, '在释放对象占用的内存之前，垃圾收集器会调用对象的FINALIZE()方法。一般建议在该方法中释放对象持有的资源。', '', '0', '2017-12-25 16:45:58', '53', '1');
INSERT INTO `topic` VALUES ('3314', '3', '4', '谈谈Hibernate与Ibatis的区别，哪个性能会更高一些', '724404f4-85c2-46da-8d87-95205dd5802e.', null, null, null, null, null, null, 'IBATIS相当较为简单，容易上手，HIBERNATE比较复杂，门槛较高。如果系统需要处理数据量很大，性能要求很高，需要执行高度优化的SQL语句才能达到性能要求，则此时IBATIS会比较好。\r\n\r\n对不同数据库支持方面HIBERNATE较好，因为IBATIS需要修改的字段较多。另外HIBERNATE现已成为主流的O/R MAPPING框架，开发效率高。', '', '0', '2017-12-25 16:46:02', '55', '1');
INSERT INTO `topic` VALUES ('3315', '5', '4', '在JavaScript中使用的Push方法是什么？', 'ca08f2d7-5274-4b36-80b9-34740dc63322.', null, null, null, null, null, null, 'PUSH方法用于将一个或多个元素添加或附加到数组的末尾。使用这种方法，可以通过传递多个参数来附加多个元素。', 'push方法用于将一个或多个元素添加或附加到数组的末尾。使用这种方法，可以通过传递多个参数来附加多个元素。', '0', '2017-12-25 16:46:11', '54', '1');
INSERT INTO `topic` VALUES ('3316', '24', '2', 'grep在文本文件中查找某个字符串', 'e4881403-3054-4ba1-bf42-e921381a1aae.', null, null, null, null, null, null, '正确', 'grep 在文本文件中查找某个字符串', '0', '2017-12-25 16:46:13', '30', '1');
INSERT INTO `topic` VALUES ('3317', '3', '4', 'applet类加载器是什么？它会做哪些工作？', 'e6ff018d-9375-4462-88be-f2a38911ca4c.', null, null, null, null, null, null, ' 当APPLET是从网络上加载的时候，它是由APPLET类加载器载入的。类加载器有自己的JAVA名称空间等级结构。类加载器会保证来自文件系统的类有唯一的名称空间，来自网络资源的类有唯一的名称空间。\r\n\r\n \r\n\r\n当浏览器通过网络载入APPLET的时候，APPLET的类被放置于和APPLET的源相关联的私有的名称空间中。然后，那些被类加载器载入进来的类都是通过了验证器验证的。验证器会检查类文件格式是否遵守JAVA语言规范，确保不会出现堆栈溢出(STACK OVERFLOW)或者下溢(UNDERFLOW)，传递给字节码指令的参数是正确的。\r\n\r\n ', '', '0', '2017-12-25 16:46:14', '53', '1');
INSERT INTO `topic` VALUES ('3318', '3', '4', '线程同步，并发操作怎么控制', '26b48c5a-9ca1-4e77-9369-ad219f282735.', null, null, null, null, null, null, '线程同步不一定就是同时，而是协同步骤，或协同步调。线程同步就是多个线程在逻辑上互有因果关系，所以要对其执行顺序进行协调。\r\n\r\n线程并发是指同一时间间隔内，多个线程同时执行。如果线程在时间上能够区分，那么就可以上线程休眠指定的时间来进行同步，可用SLEEP()方法完成。如果线程在时间上不能区分，但在逻辑顺序上可以区分的话，那么可用JION()方法来完成，一个先执行完，然后执行另一个。如果线程设计较为复杂，那么就只有通过WAIT()，NOTIFY()方法来完成了', '', '0', '2017-12-25 16:46:15', '55', '1');
INSERT INTO `topic` VALUES ('3319', '3', '4', 'Java中垃圾回收有什么目的？什么时候进行垃圾回收？', 'c5b5a267-0f0f-495f-b02d-11b8ed90e3df.', null, null, null, null, null, null, '垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。', '', '0', '2017-12-25 16:46:19', '52', '1');
INSERT INTO `topic` VALUES ('3320', '3', '1', ' 以下可以正确获取结果集的有（）（多选）', 'fb682004-2f54-4603-841a-2eff5853c355.', 'Statement sta=con.createStatement();\r\nResultSet rst=sta.executeQuery(“select * from book”);', ' Statement sta=con.createStatement(“select * from book”);\r\nResultSet rst=sta.executeQuery();', 'PreparedStatement pst=con.preparedStatement();\r\nResultSet rst=pst.executeQuery(“select * from book”);', ' PreparedStatement pst=con.preparedStatement(“select * from book”);\r\nResultSet rst=pst.executeQuery();', '', '', 'AD', '', '0', '2017-12-25 16:46:20', '51', '1');
INSERT INTO `topic` VALUES ('3321', '3', '4', 'STRING与STRINGBUFFER的区别。', '4abc510d-af2a-4853-b5e8-016c09f117bb.', null, null, null, null, null, null, 'STRING的长度是不可变的，STRINGBUFFER的长度是可变的。如果你对字符串中的内容经常进行操作，特别是内容要修改时，那么使用STRINGBUFFER，如果最后需要STRING，那么使用STRINGBUFFER的TOSTRING()方法 ', '', '0', '2017-12-25 16:46:25', '57', '1');
INSERT INTO `topic` VALUES ('3322', '3', '4', 'Class MyClass等价于 Class MyClass extends Object是否正确？ \r\n', '39ca3d1a-f417-4f3d-910d-82a5c2463cf8.', null, null, null, null, null, null, '正确。因为OBJECT类是JAVA中最高层次的类，是所有类的超类。所有的类，都可以说是由OBJECT继承而来，只是我们不需要显式地指明EXTENDS OBJECT。\r\n\r\n', '', '0', '2017-12-25 16:46:26', '49', '1');
INSERT INTO `topic` VALUES ('3325', '3', '4', '描述struts的工作流程。', '078d68ee-c1ea-458f-9929-4235293af2b3.', null, null, null, null, null, null, '简略过程就是WEB应用启动，接收用户请求并进行匹配，返回用户请求信息。\r\n1. 在WEB应用启动时，加载并初始化ACTIONSERVLET,ACTIONSERVLET从STRUCT-CONFIG.XML文件中读取配置信息，把它们存放到各个配置对象中。\r\n\r\n2. 当ACTIONSERVLET接收到一个客户请求时，首先检索和用户请求相配的ACTIONMAPPING实例，如果不存在，返回用户请求路径无效信息。\r\n\r\n3. 如ACTIONFORM实例不存在，则创建一个ACTIONFORM对象，把客户提交的表单数据保存到ACTIONFORM对象中。\r\n\r\n4. 根据配置信息决定是否需要表单验证。如果需要验证，就调用ACTIONFORM的VALIDATE()方法。如果VALIEDATE()方法返回NULL或返回一个不包含ACTIONMESSAGE的ACTIONERRORS对象，则表示表单验证成功。\r\n\r\n5. ACTIONSERVLET更加ACTIONMAPPING实例包含的映射信息决定请请求转发给哪个ACTION。如果相应的ACTION实例不存在，则先创建这个实例，然后调用ACTION的EXECUTE()方法。\r\n\r\n6. ACTION的EXECUTE()方法返回一个ACTIONFORWARD对象，ACTIONSERVLET再把客户请求转发给ACTIONFORWARD对象指向的JSP组建。\r\n\r\n7. ACTIONFORWARD对象指向的JSP组件生成的动态网页，返回给客户。', '', '0', '2017-12-25 16:46:35', '55', '1');
INSERT INTO `topic` VALUES ('3326', '24', '2', 'rmdir删除空目录', '66961674-7f11-4e05-af88-6e0a1b36b096.', null, null, null, null, null, null, '正确', 'rmdir删除空目录', '0', '2017-12-25 16:46:37', '30', '1');
INSERT INTO `topic` VALUES ('3327', '3', '4', '弹出式选择菜单(Choice)和列表(List)有什么区别', '62410496-8c0f-49a7-b58b-3ceca1a9de9a.', null, null, null, null, null, null, 'CHOICE是以一种紧凑的形式展示的，需要下拉才能看到所有的选项。CHOICE中一次只能选中一个选项。LIST同时可以有多个元素可见，支持选中一个或者多个元素。', '', '0', '2017-12-25 16:46:41', '53', '1');
INSERT INTO `topic` VALUES ('3328', '3', '4', '什么是布局管理器？', 'cd00e0c7-4f30-4407-8dd4-3dd25d71600b.', null, null, null, null, null, null, '布局管理器用来在容器中组织组件。', '', '0', '2017-12-25 16:46:58', '53', '1');
INSERT INTO `topic` VALUES ('3329', '3', '4', 'Tomcat的session处理，如果让你实现一个tomcatserver，如何实现session机制', '0517b36f-3d04-4164-9cb9-c1e34ea8b410.', null, null, null, null, null, null, '当一个SESSION开始时，SERVLET容器会创建一个HTTPSESSION对象，在某些情况下把这些HTTPSESSION对象从内存中转移到文件系统中或数据库中。需要访问的时候将它们载入到内存中。这样的好处就是节省内存，当WEB服务器产生故障时，还可以从文件系统或数据库中恢复SESSION的数据。管理SESSION有两个类：1）STANDARDMANAGER，这是一个默认的类，当TOMCAT启动或重载时将会SESSION对象保存到指定文件中。2）PERSISTENTMANAGER，管理方式更加灵活，具有容错能力，可以及时把SESSION备份到SESSION STORE中，可以控制内存中SESSION的数量。', '', '0', '2017-12-25 16:47:08', '55', '1');
INSERT INTO `topic` VALUES ('3330', '24', '2', 'tree树形结构显示目录，需要安装tree包', 'd6d64ffe-e641-4a72-b1a0-e55b3d6f06d8.', null, null, null, null, null, null, '正确', 'tree树形结构显示目录，需要安装tree包', '0', '2017-12-25 16:47:14', '30', '1');
INSERT INTO `topic` VALUES ('3333', '3', '4', '滚动条(Scrollbar)和滚动面板(JScrollPane)有什么区别？', '781e8286-89b2-441d-9e4c-48e77c6a5c9c.', null, null, null, null, null, null, 'SCROLLBAR是一个组件，不是容器。而SCROLLPANE是容器。SCROLLPANE自己处理滚动事件。', '', '0', '2017-12-25 16:47:17', '53', '1');
INSERT INTO `topic` VALUES ('3334', '3', '4', '在比较对象时，“==”运算符和equals运算有何区别？\r\n', '92c12df4-059b-4030-ae98-9738534acda7.', null, null, null, null, null, null, '：“==”运算符表示两个对象引用的地址是否相等，EQUALS运算符则表示两个对象引用的内容是否相等。 \r\n', '', '0', '2017-12-25 16:47:21', '49', '1');
INSERT INTO `topic` VALUES ('3335', '3', '1', ' 以下负责建立与数据库连接的是（）', '05b7df1d-10a4-46a5-b432-37ac757d5090.', 'Statement', 'PreparedStatement', 'ResultSet', 'DriverManager', '', '', 'D', '', '0', '2017-12-25 16:47:26', '51', '1');
INSERT INTO `topic` VALUES ('3336', '26', '4', 'java中会存在内存泄漏吗，请简单描述', '35fadf23-3c67-43aa-8010-3c0660be2c76.', null, null, null, null, null, null, '会。自己实现堆载的数据结构时有可能会出现内存泄露', '', '0', '2017-12-25 16:47:30', '57', '1');
INSERT INTO `topic` VALUES ('3337', '3', '4', '什么是循环嵌套？其特点是什么？\r\n', '61911aa9-aac9-440c-880c-c555897ac120.', null, null, null, null, null, null, '循环的嵌套，是指在一个循环语句的循环体中又包含另一个完整的循环语句。多重循环语句的特点是：外层循环变量相对稳定，内层循环变量逐一变化，即：“多层循环，内（层）外（层）有别，外（层）变一次，内（层）变一遍。”\r\n\r\n', '', '0', '2017-12-25 16:47:34', '49', '1');
INSERT INTO `topic` VALUES ('3338', '26', '4', '主机受攻击后复原工作流程：', '45423573-f2d4-433b-9e71-589d1c1d88d6.', null, null, null, null, null, null, '立即拔除网络线\r\n分析登录文件信息，搜寻可能的入侵途径\r\n重要数据备份\r\n重新全新安装\r\n软件的漏洞修补\r\n关闭或移除不需要的服务\r\n数据回复与恢复服务设定\r\n连上 INTERNET', '', '0', '2017-12-25 16:47:51', '29', '1');
INSERT INTO `topic` VALUES ('3339', '3', '4', '.List、Map、Set三个接口，存取元素时，各有什么特点？', 'cf88e23a-6e8e-49a4-8098-c47fc4ab386a.', null, null, null, null, null, null, 'LIST 以特定次序来持有元素，可有重复元素。SET 无法拥有重复元素,内部排序。MAP 保存KEY-VALUE值，VALUE可多值。', '', '0', '2017-12-25 16:48:23', '57', '1');
INSERT INTO `topic` VALUES ('3340', '24', '2', 'pwd 显示当前目录', 'bf39e473-13f8-47b7-9c21-34fa14660d0c.', null, null, null, null, null, null, '正确', 'pwd显示当前目录', '0', '2017-12-25 16:48:36', '30', '1');
INSERT INTO `topic` VALUES ('3341', '5', '4', '获得CheckBox状态的方式是什么？', 'd7ed141f-81e7-4d3f-a8ce-4b7ba1c49015.', null, null, null, null, null, null, 'ALERT（DOCUMENT.GETELEMENTBYID（\'CHECKBOX1\'）。CHECKED）;\r\n如果CHECKBOX被检查，此警报将返回TRUE。', 'alert（document.getElementById（\'checkbox1\'）。checked）;\r\n如果CheckBox被检查，此警报将返回TRUE。', '0', '2017-12-25 16:48:44', '54', '1');
INSERT INTO `topic` VALUES ('3342', '32', '4', '试述概念模型的作用。', '276b4b3b-7a95-4863-a0ee-b82ca93634fe.', null, null, null, null, null, null, '概念模型也称信息模型，它是对信息世界的管理对象、属性及联系等信息的描述形式。概念模型不依赖计算机及DBMS，它是现实世界的真实而全面的反映。概念模型通过系统需求分析得到，对概念模型数据化处理后就得到了数据库的数据模型。', '', '0', '2017-12-25 16:48:50', '67', '1');
INSERT INTO `topic` VALUES ('3343', '24', '2', 'ln创建链接文件', '3e4bbde2-770f-447a-a896-bfc571a2cd35.', null, null, null, null, null, null, '正确', 'ln创建链接文件', '0', '2017-12-25 16:48:55', '30', '1');
INSERT INTO `topic` VALUES ('3344', '26', '4', 'NFS 的主要配置文件为何？而在该档案内主要设定项目为何？\r\n', 'c6093d9b-40a5-434f-a849-ffddc7adb22a.', null, null, null, null, null, null, '主要的配置文件为 /ETC/EXPORTS 而至于其设定的内容项目在每一行当中则为：\r\n分享的目录\r\n针对此分享目录开放的主机或 IP或网域\r\n针对这部主机所开放的权限参数！', '', '0', '2017-12-25 16:49:01', '28', '1');
INSERT INTO `topic` VALUES ('3345', '3', '4', 'Java的Swing组件使用了哪种设计模式？', 'd9c557ed-c672-4b96-a855-cc06a469e105.', null, null, null, null, null, null, 'JAVA中的SWING组件使用了MVC(视图-模型-控制器)设计模式。', '', '0', '2017-12-25 16:49:06', '53', '1');
INSERT INTO `topic` VALUES ('3346', '24', '2', 'more、less  分页显示文本文件内容', '40297d5c-631f-4363-b488-392fc190032d.', null, null, null, null, null, null, '正确', 'more、less  分页显示文本文件内容', '0', '2017-12-25 16:49:14', '30', '1');
INSERT INTO `topic` VALUES ('3347', '26', '4', '在 NFS 主要的配置文件当中仅有少许的参数说明，至于预设的参数说明则没有在该档案当中出现， 请问，如果要查阅更详细的分享出来的档案的属性，要看那个档案？', '8eeebda1-643c-4ae5-a94c-b15dabed1c5d.', null, null, null, null, null, null, '/VAR/LIB/NFS/ETAB', '', '0', '2017-12-25 16:49:17', '28', '1');
INSERT INTO `topic` VALUES ('3348', '4', '1', '(集合框架)ArrayList的初始化内容如下： \r\nArrayList list = new ArrayList(); \r\nlist.add(\"java\"); \r\nlist.add(\"aaa\"); \r\nlist.add(\"java\"); \r\nlist.add(\"java\"); \r\nlist.add(\"bbb\"); \r\n下面可以删除list中所有的“java”的代码是：()', '036461ff-9c18-4e36-ab0b-7fd27648abe9.', 'for (int i = list.size() - 1; i >= 0; i--) {\r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} ', 'for (int i = 0; i < list.size(); i++) { \r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} ', 'list.remove(\"java\");', 'list.removeAll(\"java\");', '', '', 'A', 'A.for (int i = list.size() - 1; i >= 0; i--) {//规定是逆序删除，每删除一个，会重新排序 \r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} \r\nB.for (int i = 0; i < list.size(); i++) { \r\nif (\"java\".equals(list.get(i))) { \r\nlist.remove(i); \r\n} \r\n} \r\nC.list.remove(\"java\"); //只能删除第一个 \r\nD.list.removeAll(\"java\");//括号中的参数是集合的类型 ', '0', '2017-12-25 16:49:19', '50', '1');
INSERT INTO `topic` VALUES ('3349', '3', '4', 'Java的布局管理器比传统的窗口系统有哪些优势？', '18a8645d-1013-4ace-851a-302779ee621a.', null, null, null, null, null, null, 'JAVA使用布局管理器以一种一致的方式在所有的窗口平台上摆放组件。因为布局管理器不会和组件的绝对大小和位置相绑定，所以他们能够适应跨窗口系统的特定平台的不同。', '', '0', '2017-12-25 16:49:27', '53', '1');
INSERT INTO `topic` VALUES ('3350', '3', '4', '关于Cache(Ehcache,Memcached)', '3fc23419-0c1d-4fb4-9933-f68bd2580b71.', null, null, null, null, null, null, 'MEMCACHE:分布式内存对象缓存系统，占用其他机子的内存。很多互联网，负载均衡三台(以三台为例)WEB服务器可以共享一台MEMCACHE的资源。传递的信息以键值对的形式存储。传递的数据要实现序列化。\r\n\r\nOSCACHE:页面级缓存（网上强调最多的东西）,占用本机的内存资源。可 以选择缓存到硬盘，如存取到硬盘重启服务也可重新获得上次持久化的资源，而如果缓存到内存就不行。一般没必要缓存到硬盘，因为I/O操作也是比较耗资源，和从数据库取往往优势很小。OSCACHE存取数据的作用域分为APPLICATION和SESSION两种。\r\n\r\nEHCACHE：HIBERNATE缓存，DAO缓存，安全性凭证缓存（ACEGI），WEB缓存，应用持久化和分布式缓存。EHCACHE在默认情况下，即在用户未提供自身配置文件EHCACHE.XML或EHCACHE-FAILSAFE.XML时，EHCACHE会依据其自身JAR存档包含的EHCACHE-FAILSAFE.XML文件所定制的策略来管理缓存。如果用户在CLASSPATH下提供了EHCACHE.XML或EHCACHE-FAILSAFE.XML文件，那么EHCACHE将会应用这个文件。如果两个文件同时提供，那么EHCACHE会使用EHCACHE.XML文件的配置。', '', '0', '2017-12-25 16:49:29', '55', '1');
INSERT INTO `topic` VALUES ('3351', '32', '4', '如何使用SELECT语句找到你正在运行的服务器的版本并打印出当前数据库的名称?', 'd3df7df4-c436-48a0-b1e3-4c058a421c91.', null, null, null, null, null, null, 'MYSQL> SELECT VERSION(), DATABASE();\r\n \r\n+-------------------------+------------+\r\n| VERSION()    | DATABASE() |\r\n+-------------------------+------------+\r\n| 5.5.34-0UBUNTU0.13.10.1 | NULL  |\r\n+-------------------------+------------+\r\n1 ROW IN SET (0.06 SEC)', '', '0', '2017-12-25 16:49:31', '10', '1');
INSERT INTO `topic` VALUES ('3352', '5', '4', '解释window.onload和onDocumentReady？', 'd2ec88b7-5076-47b7-8cc2-12d7cf06b234.', null, null, null, null, null, null, '在载入页面的所有信息之前，不运行ONLOAD函数。这导致在执行任何代码之前会出现延迟。\r\nONDOCUMENTREADY在加载DOM之后加载代码。这允许早期的代码操纵。', '在载入页面的所有信息之前，不运行onload函数。这导致在执行任何代码之前会出现延迟。\r\nonDocumentReady在加载DOM之后加载代码。这允许早期的代码操纵。', '0', '2017-12-25 16:49:36', '54', '1');
INSERT INTO `topic` VALUES ('3353', '3', '1', '使用JDBC连接数据库的顺序是()(多选)', '714ff78b-374b-42c3-bae2-84e1d5514164.', '加载驱动\r\n', '导入驱动包', '发送并处理SQL语句', '建立于数据库的连接', '关闭连接', '', 'BADCE', '', '0', '2017-12-25 16:49:36', '51', '1');
INSERT INTO `topic` VALUES ('3354', '26', '4', '在 client 端如果要挂载 NFS 所提供分享的档案，可以使用那个指令？', 'f10a2bb3-a5d4-409b-aab2-b68331a00737.', null, null, null, null, null, null, '那自然就是 MOUNT 啦！还有卸除是 UMOUNT 喔！', '', '0', '2017-12-25 16:49:39', '28', '1');
INSERT INTO `topic` VALUES ('3355', '4', '4', ' 核心容器（应用上下文) 模块。', '7162eacd-77d6-426a-8ecb-de6d4ed834d7.', null, null, null, null, null, null, '这是基本的SPRING模块，提供SPRING 框架的基础功能，BEANFACTORY 是 任何以SPRING为基础的应用的核心。SPRING 框架建立在此模块之上，它使SPRING成为一个容器。', '', '0', '2017-12-25 16:49:42', '52', '1');
INSERT INTO `topic` VALUES ('3356', '24', '2', 'head、tail    显示文件头、尾内容', '3f3a1e6d-e91f-49ca-ae68-3edaeb985358.', null, null, null, null, null, null, '正确', 'head、tail    显示文件头、尾内容', '0', '2017-12-25 16:49:44', '30', '1');
INSERT INTO `topic` VALUES ('3357', '3', '4', 'DB中索引原理，种类，使用索引的好处和问题是什么？', '27806ae4-5a9d-431e-b481-d4163261dfbe.', null, null, null, null, null, null, '原理：因为检索磁盘比对数据，需要大量的时间和IO，所以就需要构造某列的数据的BTREE、HASH值、位图索引。一般的索引能快速的查找比对，而索引的值记录了磁盘的位置，直接读取数据库字段对应位置的内容。\r\n\r\n索引好处：加快数据检索速度、加速表与表之间的连接特别是实现数据的参考完整性方面有特别的意义、减少查询中分组和排序的时间，使用优化隐藏器，提高系统性能。\r\n\r\n缺点：创建和维护索引需要时间，索引需要占用物理空间，当对表中的数据惊醒增删改时所有也需要动态维护。', '', '0', '2017-12-25 16:49:45', '55', '1');
INSERT INTO `topic` VALUES ('3358', '3', '4', 'JVM垃圾回收实现原理。垃圾回收的线程优先级。', 'c18aeeb0-08b3-4396-b8f0-8acfb2b10a61.', null, null, null, null, null, null, 'JVM的堆空间中主要分为年轻代、年老代和永久代。年轻代和年老代是存储动态产生的对象。永久代主要是存储JAVA类信息，包括解析得到的方法属性、字段等等。永久代基本不参与垃圾回收。年轻代分为一个EDEN区和两个相同的SURVIOR区。刚开始创建的对象都放置在EDEN区。这样主要是为了将生命周期短的对象尽量留在年轻代中。当EDEN区申请不到空间时，进行MINORGC，把存活的对象拷贝到SURVIOR。年老代主要存放生命周期比较长的对象，如缓存对象。具体JVM垃圾回收过程如下：\r\n\r\n1、对象在EDEN区完成内存分配。2、当EDEN区满了，在创建对象就会申请不到空间，则触发MINORGC，进行YOUNG（EDEN区和1SURVIVOR区的垃圾回收）。3、在MINORGC时，EDEN不能被回收的对象呗放入到空的SURVIOR（即EDEN肯定被清空），另一个SURVIVOR里不能被GC回收的地想也会被放入到这个SURVIVOR，始终保证一个SURVIVOR是空的。4、当完成第三步的时候、如果发现SURVIVOR满了，则这些对象呗COPY到OLD区，或者SURVIVOR并没有满，但有些对象已经足够OLD了，也被放入到OLD区。当OLD区北放满之后，进行FULLGC。', '', '0', '2017-12-25 16:50:08', '55', '1');
INSERT INTO `topic` VALUES ('3359', '32', '4', '在Database一列中显示NULL是因为我们当前没有选择任何数据库。因此，使用下面的语句先选择一个数据库,就能看到相应的结果。', '488a9242-ccdc-4542-9d4e-5921a9f19bfa.', null, null, null, null, null, null, 'MYSQL> USE TECMINT;\r\n \r\nREADING TABLE INFORMATION FOR COMPLETION OF TABLE AND COLUMN NAMES\r\nYOU CAN TURN OFF THIS FEATURE TO GET A QUICKER STARTUP WITH -A\r\n \r\nDATABASE CHANGED\r\nMYSQL> SELECT VERSION(), DATABASE();\r\n \r\n+-------------------------+------------+\r\n| VERSION()    | DATABASE() |\r\n+-------------------------+------------+\r\n| 5.5.34-0UBUNTU0.13.10.1 | TECMINT |\r\n+-------------------------+------------+\r\n1 ROW IN SET (0.00 SEC)', '', '0', '2017-12-25 16:50:13', '10', '1');
INSERT INTO `topic` VALUES ('3360', '26', '4', 'BeanFactory – BeanFactory 实现举例。', '7da0a091-9312-4148-a32a-da0f12b6d3b5.', null, null, null, null, null, null, 'BEAN 工厂是工厂模式的一个实现，提供了控制反转功能，用来把应用的配置和依赖从正真的应用代码中分离。\r\n最常用的BEANFACTORY 实现是XMLBEANFACTORY 类', '', '0', '2017-12-25 16:50:14', '52', '1');
INSERT INTO `topic` VALUES ('3361', '24', '2', 'ctrl+alt+F1  命令行全屏模式', 'daab48d0-735a-469b-9d8c-79c891ac28d5.', null, null, null, null, null, null, '正确', 'ctrl+alt+F1  命令行全屏模式', '0', '2017-12-25 16:50:16', '30', '1');
INSERT INTO `topic` VALUES ('3362', '3', '4', 'jvm怎样通过参数调整内存大小', '73050216-897f-4204-8d2c-e886da0176a5.', null, null, null, null, null, null, '本地环境变量中JVM参数设置：\r\n\r\nNEW一个JAVA_OPTS:\r\n\r\nVARIABLE NAME: JAVA_OPTS\r\n\r\nVARIABLE VALUE: -XMS256M -XMX512M -XX:PERMSIZE=256M -XX:MAXPERMSIZE=512M\r\n\r\nECLIPSE中参数设置：在缺省VM参数中输入：-XMX128M -XMS64M -XMN32M -XSS16M', '', '0', '2017-12-25 16:50:21', '55', '1');
INSERT INTO `topic` VALUES ('3363', '26', '4', '在 NFS 主要配置文件当中，可以透过那个参数来控制不让 client 端以 root 的身份使用你所分享出来的目录与档案？', '15b78d8b-47cc-485a-89e3-a40d7f9fb8eb.', null, null, null, null, null, null, '可以在 /ETC/EXPORTS 当中的参数项目，设定『 ROOT_SQUASH 』来控制压缩 ROOT 的身份喔！', '', '0', '2017-12-25 16:50:26', '28', '1');
INSERT INTO `topic` VALUES ('3364', '5', '4', '一个值如何附加到数组？', '45fd9590-4e6e-4a35-9e7a-09a85e3888e4.', null, null, null, null, null, null, '可以以给定的方式将值附加到数组：\r\nARR [ARR.LENGTH] = VALUE;', '可以以给定的方式将值附加到数组：\r\narr [arr.length] = value;', '0', '2017-12-25 16:50:30', '54', '1');
INSERT INTO `topic` VALUES ('3365', '4', '4', 'XMLBeanFactory ', '09379b7b-f818-470f-a8bd-56c76ec13517.', null, null, null, null, null, null, '最常用的就是ORG.SPRINGFRAMEWORK.BEANS.FACTORY.XML.XMLBEANFACTORY ，它根据XML文件中的定义加载BEANS。该容器从XML 文件读取配置元数据并用它去创建一个完全配置的系统或应用。', '', '0', '2017-12-25 16:50:30', '52', '1');
INSERT INTO `topic` VALUES ('3366', '26', '4', '使用非运算符(!)从表”Tecmint”中列出除了”SAM”以外的所有user记录', '1c8aa145-1aae-470c-9497-0149c7493677.', null, null, null, null, null, null, 'MYSQL> SELECT * FROM TECMINT WHERE USER !=SAM;\r\n \r\n+---------------------+---------+---------+---------+---------+-------+ \r\n| DATE    | USER | HOST | ROOT  | LOCAL | SIZE | \r\n+---------------------+---------+---------+---------+---------+-------+ \r\n| 2001-05-14 14:42:21 | ANTHONY | VENUS | BARB  | VENUS | 98151 | \r\n| 2001-05-15 08:50:57 | TIM  | VENUS | PHIL  | VENUS | 978 | \r\n+---------------------+---------+---------+---------+---------+-------+', '', '0', '2017-12-25 16:50:36', '10', '1');
INSERT INTO `topic` VALUES ('3367', '3', '4', '进程与线程的区别', '882d2536-1276-422b-a7a2-31e5d79726e1.', null, null, null, null, null, null, '线程是进程的一个单元，也是进程内的可调度实体。区别就是：1、进程内的线程共享地址空间，进程则自己独立的地址空间。2、进程是资源分配和拥有的单位，同一个进程内的线程共享进程资源。3、线程是处理器调度的基本单位。4、两者均可并发执行。', '', '0', '2017-12-25 16:50:38', '55', '1');
INSERT INTO `topic` VALUES ('3368', '3', '4', '在java中，程序员能否实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收？ ', 'bb80bb9d-697b-4df5-88d4-d65e079ff9ca.', null, null, null, null, null, null, 'JAVA程序员在编写程序的时候不再需要考虑内存管理，程序员不能实时的调用垃圾回收器对某个对象或所有对象进行垃圾回收，当JAVA程序违反了JAVA的语义规则时，访问NULL的对象时会引发NULLPOINTEREXCEPTION.另一种情况就，程序员可以创建自己的异常。', '', '0', '2017-12-25 16:50:40', '51', '1');
INSERT INTO `topic` VALUES ('3369', '26', '4', '我在 client 端挂载了 NFS Server 的某个目录在我的 /home/data 底下，当我执行其中某个程序时，却发现我的系统被破坏了？你认为可能的原因为何？ 该如何克服这样的问题，尤其是当我的 Client 端主机其实是多人共享的环境， 怕其他的使用者也同样发生类似的问题呢？！', 'f8d35f68-32c7-4060-a06b-e0745eb0675a.', null, null, null, null, null, null, '可能由于你挂载进来的 NFS SERVER 的 PARTITION 当中具有 SUID 的文件属性，而你不小心使用了该执行档，因此就可能会发生系统被破坏的问题了！\r\n可以将挂载进来的 NFS 目录的 SUID 功能取消！例如：\r\n可能由于你挂载进来的 NFS SERVER 的 PARTITION 当中具有 SUID 的文件属性，而你不小心使用了该执行档，因此就可能会发生系统被破坏的问题了！\r\n可以将挂载进来的 NFS 目录的 SUID 功能取消！例如：\r\nMOUNT -T NFS -O NOSUID,RO SERVER:/DIRECTORY /YOUR/DIRE', '', '0', '2017-12-25 16:50:44', '28', '1');
INSERT INTO `topic` VALUES ('3370', '32', '4', '实体完整性——实体完整性指表中行的完整性。要求表中的所有行都有唯一的标识符，称为主关键字。主关键字是否可以修改，或整个列是否可以被删除，取决于主关键字与其他表之间要求的完整性。', '4388b746-91f2-4ca2-9308-958edc0343fe.', null, null, null, null, null, null, '三级模式结构：外模式、模式和内模式 \r\n    优点：① 为了减少数据冗余，实现数据共享；   ② 为了提高存取效率，改善性能。', '', '0', '2017-12-25 16:50:47', '67', '1');
INSERT INTO `topic` VALUES ('3371', '24', '2', 'stat显示指定文件的详细信息，比ls更详细对吗', '27d592fc-4ab8-4c4f-b0ba-e2b23b1330c4.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 16:50:51', '30', '1');
INSERT INTO `topic` VALUES ('3372', '3', '4', '怎样避免死锁', '7610a076-40ce-4298-81f2-cf2c2e574826.', null, null, null, null, null, null, '1. 使用事务时，尽量缩短事务IDEA逻辑处理过程，及早提交或回滚事务\r\n\r\n2. 设置死锁的超时参数为合理范围，如3-10分钟，若超过时间，自动放弃本次操作，避免进程悬挂。\r\n\r\n3. 优化程序，检查并避免死锁现象出现。\r\n\r\n4. 对所有的脚本和SP都要仔细测试。\r\n\r\n5. 所有的SP都要有错误处理。\r\n\r\n6. 一般不要修改SQL事务的默认级别。不推荐强行加锁。', '', '0', '2017-12-25 16:50:55', '55', '1');
INSERT INTO `topic` VALUES ('3374', '3', '1', ' 在JSP中，page指令的属性中，用来引入需要的包或的是( )。', '9a48e7a9-8d90-4365-93ff-72107a9b88e1.', 'extends', 'import', 'languge', 'contentType', '', '', 'B', '', '0', '2017-12-25 16:50:59', '57', '1');
INSERT INTO `topic` VALUES ('3375', '4', '4', '解释AOP模块', '30cfab48-ec09-46f8-a4d2-35bc9f9229f0.', null, null, null, null, null, null, 'AOP模块用于发给我们的SPRING应用做面向切面的开发， 很多支持由AOP联盟提供，这样就确保了SPRING和其他AOP框架的共通性。这个模块将元数据编程引入SPRING。', '', '0', '2017-12-25 16:51:00', '52', '1');
INSERT INTO `topic` VALUES ('3376', '5', '4', '解释for-in循环？', 'b1d23b1b-1c00-4973-824f-c73cbdf04dd5.', null, null, null, null, null, null, 'FOR-IN循环用于循环对象的属性。\r\nFOR-IN循环的语法是：在每次循环中，来自对象的一个属性与变量名相关联，循环继续，直到对象的所有属性都被耗尽。', 'for-in循环用于循环对象的属性。\r\nfor-in循环的语法是：在每次循环中，来自对象的一个属性与变量名相关联，循环继续，直到对象的所有属性都被耗尽。', '0', '2017-12-25 16:51:04', '54', '1');
INSERT INTO `topic` VALUES ('3377', '32', '4', '‘AND\'运算符有可能带着非运算符(!)一起用吗？', 'f52bd35c-b1b1-40ac-9c5f-84b57ff479bd.', null, null, null, null, null, null, '当我们使用‘=\'号时用‘AND\'连接，用‘!=\'时用‘OR\'连接，下面是‘=\'和AND运算符一起用的例子\r\n?\r\n1\r\nMYSQL> SELECT * FROM MAIL WHERE USER = SAM AND ROOT = PHIL', '', '0', '2017-12-25 16:51:10', '10', '1');
INSERT INTO `topic` VALUES ('3378', '32', '4', '什么是日志文件？简述利用日志文件恢复事务的过程？', '5f155376-d9f7-42cf-ad27-a8e2cd14c2b9.', null, null, null, null, null, null, '日志文件（LOG FILES）是包含系统消息的文件，包括内核、服务、在系统上运行的应用程序等。不同的日志文件记载不同的信息事务日志是用来记录对数据库每一次更新操作的文件，事务日志本身也是一个数据库。利用事务日志中保存的信息来恢复由程序非法中断或者硬件系统故障等所造成的数据丢失，某些DBMS允许利用事务日志，将数据库向前恢复到最近的一致性状态。', '', '0', '2017-12-25 16:52:05', '67', '1');
INSERT INTO `topic` VALUES ('3379', '26', '4', '‘!=\'和OR运算符的例子', '76af11e9-8687-41cf-91fa-ec74b52bbd1c.', null, null, null, null, null, null, 'MYSQL> SELECT * FROM MAIL WHERE USER != SAM OR ROOT != PHIL\r\n \r\n+---------------------+---------+---------+---------+---------+-------+ \r\n| DATE    | USER | HOST | ROOT | LOCAL | SIZE | \r\n+---------------------+---------+---------+---------+---------+-------+ \r\n| 2001-05-14 14:42:21 | ANTHONY | VENUS | BARB | VENUS | 98151 | \r\n+---------------------+---------+---------+---------+---------+-------+', '', '0', '2017-12-25 16:52:21', '10', '1');
INSERT INTO `topic` VALUES ('3380', '3', '4', '垃圾回收算法使用的产品、场景', '9c70b5c8-6437-4a93-a1a7-611b15d378a4.', null, null, null, null, null, null, '标记-清除算法：标记阶段，确定所有要回收的对象，并标记，清除阶段则将需要回收的对象清除。\r\n\r\n复制算法：把内存分为大小相等的两块，每次使用其中的一块，当垃圾回收时，把存活的对象复制到另一块上，然后把这块内存整个清理掉。两块内存比是8：1\r\n\r\n标记整理算法：把存活的对象往内存的一端移动，然后直接回收边界以外的内存。标记-整理算法提高了内存的利用率，并且它适合在收集对象存活时间较长的老年代。\r\n\r\n分代回收算法：根据对象的存活时间把内存分为新生代和老年代，根据各代对象的存活特点，每代采用不同的GC算法。新生代用标记-复制算法，老年代用标记-整理算法。', '', '0', '2017-12-25 16:52:22', '55', '1');
INSERT INTO `topic` VALUES ('3381', '3', '4', 'JSP和Servlet有哪些相同点和不同点，他们之间的联系是什么？ ', '8a847f62-9bfd-4fc6-adbd-dce7b737c83c.', null, null, null, null, null, null, 'JSP是SERVLET技术的扩展，本质上是SERVLET的简易方式，更强调应用的外表表达。JSP编译后是\"类SERVLET\"。SERVLET和JSP最主要的不同点在于，SERVLET的应用逻辑是在JAVA文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是JAVA和HTML可以组合成一个扩展名为.JSP的文件。JSP侧重于视图，SERVLET主要用于控制逻辑。', '', '0', '2017-12-25 16:52:23', '53', '1');
INSERT INTO `topic` VALUES ('3382', '26', '3', '一般来说，路由器上都会有()的网络接口', '9bd29455-6e02-4715-9218-45ec1e1acfc7.', null, null, null, null, null, null, '两个以上', '', '0', '2017-12-25 16:52:27', '29', '1');
INSERT INTO `topic` VALUES ('3383', '5', '4', '描述JavaScript中的匿名函数？', '8c29c88d-9ee5-4234-8bb0-e7aac8a595e2.', null, null, null, null, null, null, '被声明为没有任何命名标识符的函数被称为匿名函数。一般来说，匿名函数在声明后无法访问。\r\n匿名函数声明：', '被声明为没有任何命名标识符的函数被称为匿名函数。一般来说，匿名函数在声明后无法访问。\r\n匿名函数声明：', '0', '2017-12-25 16:52:36', '54', '1');
INSERT INTO `topic` VALUES ('3384', '3', '4', '接口是否可继承接口? 抽象类是否可实现(implements)接口?', 'fe96bb52-5d53-4ee1-8bc1-ceb43bf10106.', null, null, null, null, null, null, '接口可以继承接口。抽象类可以实现(IMPLEMENTS)接口。 ', '', '0', '2017-12-25 16:52:54', '51', '1');
INSERT INTO `topic` VALUES ('3386', '4', '1', '(集合框架) 题示代码的功能为：对于一个存放Integer对象的ArrayList，内容为：{1,2,3 },对其进行循环遍历： ', '7426ab12-9a97-4494-96af-550d3743734f.png', 'list.getObject(i) list.length()', ' list.length() list.getObject(i)', ' list.size() list.get(i)', 'list.get(i) list.size() ', '', '', 'C', '集合没有length，只要数组才有，集合是size（） ', '0', '2017-12-25 16:53:33', '50', '1');
INSERT INTO `topic` VALUES ('3387', '3', '4', '说出数据连接池的工作机制是什么?', '1b67737c-23c9-4176-9b48-581ab066cfab.', null, null, null, null, null, null, 'J2EE服务器启动时会建立一定数量的池连接，并一直维持不少于此数目的池连接。客户端程序需要连接时，池驱动程序会返回一个未使用的池连接并将其标记为忙。如果当前没有空闲连接，池驱动程序就新建一定数量的连接，新建连接的数量由配置参数决定。当使用的池连接调用完成后，池驱动程序将此连接表记为空闲，其他调用就可以使用这个连接。', '', '0', '2017-12-25 16:53:47', '53', '1');
INSERT INTO `topic` VALUES ('3388', '3', '4', '一个页面在打开时，需要处理一些事情（比如弹出一个广告页），需要定义窗口的什么事件？', 'b31b9e69-a688-45fd-a2c9-89aeccac9d7e.', null, null, null, null, null, null, ' <SCRIPT>\r\n\r\n        WINDOW.ONLOAD=FUNCTION(){…}\r\n\r\n</SCRIPT>', '', '0', '2017-12-25 16:54:16', '53', '1');
INSERT INTO `topic` VALUES ('3389', '3', '4', '线程和进程有什么区别？\r\n', '5f2dfafa-c562-421e-8fcd-97d7bae01f97.', null, null, null, null, null, null, '线程是进程的子集，一个进程可以有很多线程，每条线程并行执行不同的任务。不同的进程使用不同的内存空间，而所有的线程共享一片相同的内存空间。别把它和栈内存搞混，每个线程都拥有单独的栈内存用来存储本地数据', '', '0', '2017-12-25 16:54:21', '49', '1');
INSERT INTO `topic` VALUES ('3390', '5', '4', '.call（）和.apply（）之间有什么区别？', '429bb0aa-1d69-4423-b60a-0e4df1dcf6cf.', null, null, null, null, null, null, '函数.CALL（）和.APPLY（）在使用上非常相似，只是有一点区别。当程序员知道函数参数的编号时，使用.CALL（），因为它们必须在调用语句中被提及为参数。另一方面，当不知道数字时使用.APPLY（）,函数.APPLY（）期望参数为数组。\r\n.CALL（）和.APPLY（）之间的基本区别在于将参数传递给函数。它们的用法可以通过给定的例子进行说明。', '函数.call（）和.apply（）在使用上非常相似，只是有一点区别。当程序员知道函数参数的编号时，使用.call（），因为它们必须在调用语句中被提及为参数。另一方面，当不知道数字时使用.apply（）,函数.apply（）期望参数为数组。\r\n.call（）和.apply（）之间的基本区别在于将参数传递给函数。它们的用法可以通过给定的例子进行说明。', '0', '2017-12-25 16:54:21', '54', '1');
INSERT INTO `topic` VALUES ('3392', '3', '4', 'Static变量是什么含义', 'a82e0dfa-b841-425e-bc79-40b6c3ff2988.', null, null, null, null, null, null, ' STATIC是静态变量,就是变量值不随函数执行结束而消失，下次调用同一函数时，上次所赋予的值仍存在。', '', '0', '2017-12-25 16:54:50', '53', '1');
INSERT INTO `topic` VALUES ('3393', '4', '4', '一个Spring的应用看起来象什么？', 'cfb5f8c1-8f82-420e-9a37-3d049f4e1d25.', null, null, null, null, null, null, '一个定义了一些功能的接口。\r\n这实现包括属性，它的SETTER ， GETTER 方法和函数等。\r\nSPRING AOP。\r\nSPRING 的XML 配置文件。\r\n使用以上功能的客户端程序。', '', '0', '2017-12-25 16:54:56', '59', '1');
INSERT INTO `topic` VALUES ('3394', '18', '3', '对谈式脚本可用()命令达成', 'e4543d7e-eec2-4aa2-b1b6-0b8bb4091a60.', null, null, null, null, null, null, 'READ', '', '0', '2017-12-25 16:54:59', '29', '1');
INSERT INTO `topic` VALUES ('3395', '26', '4', 'Linux 系统的所有时区档案放置哪一个目录底下？', '088a422a-1b9e-4fab-b6c2-d3d8191ddc1e.', null, null, null, null, null, null, '所有的时区档案放置于：/USR/SHARE/ZONEINFO 底下！至于系统时区的配置文件则在 /ETC/SYSCONFIG/CLOCK 与 /ETC/LOCALTIME 喔！', '', '0', '2017-12-25 16:55:05', '28', '1');
INSERT INTO `topic` VALUES ('3396', '3', '4', 'jdk并发包的集合介绍', '1489c8c7-bf29-483f-b81b-332ffb021040.', null, null, null, null, null, null, 'MAP并发包，其实现为CONCURRENTHASHMAP，它实现了CONCURRENTMAP接口。PUT方法为根据计算出的HASH值去获取SEGMENT对象。找到SEGMENT对象后调用该对象的PUT方法完成操作。SEGMENT中的PUT方法则是先加锁，之后判断数组大小，然后觉得是否扩充。然后得到KEY索要放置的位置。\r\n\r\nLIST并发包，客在高并发环境下使用COPYONWRITEARRAYLIST代替ARRAYLIST。添加元素是利用数组的COPY功能和加锁机制。并发情况下，COPYONWRITEARRAYLIST比ARRAYLIST略快了些。\r\n\r\nSET并发，COPYONWRITESET和COPYONWRITEARRAYLIST底层实现差不多就是在添加元素时会进行唯一性判断，如果对象数组已经含有重复的元素，不进行增加处理。\r\n\r\nQUEUE并发，并发类是ARRAYBLOCKINGQUEUE，底层为数组，并对关键的方法入队、出队操作加入了锁队机制。\r\n\r\nATOMIC系列类，比如ATOMICINTEGER类，通过使用计数器操作时，一般为了避免线程安全问题，在方法上加锁操作。有了并发包下的原子系列类，我们就可以直接使用。', '', '0', '2017-12-25 16:55:09', '55', '1');
INSERT INTO `topic` VALUES ('3397', '24', '5', '如何列出表 ‘xrt’ 内 name 域值为 ‘linuxidc’，web_address 域值为 ‘linuxidc.com’ 的所有数据', null, null, null, null, null, null, null, null, '', '0', '2017-12-25 16:55:12', '48', '1');
INSERT INTO `topic` VALUES ('3398', '3', '4', '线程之间的通信', 'ee6d15e8-93f6-42ea-927b-9be962e09ee6.', null, null, null, null, null, null, '主要包括互斥锁、条件变量、读写锁和线程信号灯。\r\n\r\n互斥锁：以排他方式防止数据被并发修改。互斥锁两个状态0和1。具体为申请锁、占用锁以防止数据被修改，此时默认阻塞等等，最后释放锁。\r\n\r\n条件变量通信机制：原理，条件变量出现时，可以弥补互斥锁的缺陷，有些问题仅仅依靠互斥锁无法解决。但条件变量不能单独使用，必须配合互斥锁一起实现对资源的互斥访问。\r\n\r\n读写锁:在对数据读写时，往往读占主要部分。基本原则是如果其他线程读数据，则允许其他线程执行读操作，但不允许写操作。如果有其他线程申请写操作，则其他线程不能申请读操作和写操作。\r\n\r\n线程信号：线程拥有与信号相关的私有数据——线程信号掩码。线程可以向别的线程发送信号，每个线程可以设置自己的阻塞集合。所有线程中，同一信号子任何线程里的对该信号的处理一定相同。', '', '0', '2017-12-25 16:55:27', '55', '1');
INSERT INTO `topic` VALUES ('3399', '32', '4', 'Oracle 和 MySQL该如何选择，为什么?', '0f7a366f-6fb1-4406-81e2-466b41d47589.', null, null, null, null, null, null, '它们都有各自的优点和缺点。考虑到时间因素，我倾向于MYSQL。\r\n选择MYSQL而不选ORCALE的原因\r\nMYSQL开源\r\nMYSQL轻便快捷\r\nMYSQL对命令行和图形界面的支持都很好\r\nMYSQL支持通过QUERY BROWSER进行管理', '', '0', '2017-12-25 16:55:27', '10', '1');
INSERT INTO `topic` VALUES ('3400', '26', '4', '先将 /etc/localtime 删除，然后将 /usr/share/zoneinfo/Asia/Taipei 这个档案复制成为 /etc/localtime 即可！\r\n目前 Linux 系统上面的时间服务器主要是以 NTP 为主，请问这个 daemon 的主要配置文件放在哪里，而该配置文件中，针对上层 time server 的设定参数为何？而那个 driftfile 参数是干嘛用的？', '3e2f4626-f932-4b93-82f6-e63317183868.', null, null, null, null, null, null, '在 /ETC/NTP.CONF 这个档案当中，至于上层 TIME SERVER 的设定参数为 SERVER 啊！那个 DRIFTFILE 则是用来做为『时间差额』的计算的！该参数后面接的是一个完整路径的文件名，该档案里面的数值单位为百万分之一(PPM)。', '', '0', '2017-12-25 16:55:30', '28', '1');
INSERT INTO `topic` VALUES ('3401', '24', '3', '要创建每次运行脚本都有不同结果的数据，可使用()命令利用日期达成', '0c3225a8-1529-4d02-b481-ce9d2cf161c3.', null, null, null, null, null, null, 'DATE', '', '0', '2017-12-25 16:55:32', '29', '1');
INSERT INTO `topic` VALUES ('3402', '3', '4', '垃圾回收器的基本原理是什么？垃圾回收器可以马上回收内存吗？有什么办法主动通知虚拟机进行垃圾回收', 'c9184e13-28ac-4b62-84e4-bac313acd896.', null, null, null, null, null, null, ' 对于GC来说，当程序员创建对象时，GC就开始监控这个对象的地址、大小以及使用情况。通常，GC采用有向图的方式记录和管理堆(HEAP)中的所有对象。通过这种方式确定哪些对象是\"可达的\"，哪些对象是\"不可达的\"。当GC确定一些对象为\"不可达\"时，GC就有责任回收这些内存空间。可以。程序员可以手动执行SYSTEM.GC()，通知GC运行，但是JAVA语言规范并不保证GC一定会执行。', '', '0', '2017-12-25 16:55:33', '53', '1');
INSERT INTO `topic` VALUES ('3403', '26', '4', '请问 ntptrace 的功能为何？', '7e46d58e-e671-4bdf-b69e-ffdd616e1c75.', null, null, null, null, null, null, '可以用来追踪上层 TIME SERVER 的连接时间与目前时间！', '', '0', '2017-12-25 16:55:43', '28', '1');
INSERT INTO `topic` VALUES ('3404', '3', '4', '介绍threadlocal', '5e8d9d0a-cbab-4b75-ba3e-480e1e68d3ee.', null, null, null, null, null, null, '可以叫做线程本地变量或线程本地存储。THREADLOCAL为变量在每个线程中都创建了一个副本，每个线程都可以访问自己内部的副本变量。但可能这样做会导致内存占用较大。\r\n\r\nTHREADLOCAL类的几个方法：GET() 用来获取THREADLOCAL在当前线程中保存的变量副本，SET()用来设置当前线程中变量的副本，REMOVE()用来一冲当前线程中的变量副本，INITIALVALUE()一般用来在使用时进行重写，是一个延迟加载方法。最常见的THREADLOCAL使用场景是用来解决数据库连接、SESSION管理等。', '', '0', '2017-12-25 16:55:43', '55', '1');
INSERT INTO `topic` VALUES ('3405', '3', '4', 'Overload和Override的区别。Overloaded的方法是否可以改变返回值的类型?', 'e44c96eb-720e-436a-b888-3ae9c3b07fb5.', null, null, null, null, null, null, '方法的重写OVERRIDING和重载OVERLOADING是JAVA多态性的不同表现。重写OVERRIDING是父类与子类之间多态性的一种表现，重载OVERLOADING是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (OVERRIDING)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(OVERLOADING)。OVERLOADED的方法是可以改变返回值的类型。', '', '0', '2017-12-25 16:55:46', '53', '1');
INSERT INTO `topic` VALUES ('3406', '5', '4', '什么样的布尔运算符可以在JavaScript中使用？', '066c3202-a4a2-4dbf-9225-3ac180533d66.', null, null, null, null, null, null, 'AND”运算符（&&），\'OR\'运算符（||）和\'NOT\'运算符（！）可以在JAVASCRIPT中使用。\r\n*运算符没有括号。', 'And”运算符（&&），\'Or\'运算符（||）和\'Not\'运算符（！）可以在JavaScript中使用。\r\n*运算符没有括号。', '0', '2017-12-25 16:55:54', '54', '1');
INSERT INTO `topic` VALUES ('3407', '3', '4', '说出Servlet的生命周期，并说出Servlet和CGI的区别', '8cdee190-238f-4c35-8c5e-579a6ce6ea8e.', null, null, null, null, null, null, 'SERVLET被服务器实例化后，容器运行其INIT方法，请求到达时运行其SERVICE方法，SERVICE方法自动派遣运行与请求对应的DOXXX方法（DOGET，DOPOST）等，当服务器决定将实例销毁的时候调用其DESTROY方法。\r\n与CGI的区别在于SERVLET处于服务器进程中，它通过多线程方式运行其SERVICE方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于SERVLET', '', '0', '2017-12-25 16:55:57', '53', '1');
INSERT INTO `topic` VALUES ('3408', '32', '4', 'MySQL中如何得到当前日期?', '02385626-5358-46c8-9014-63c461edc511.', null, null, null, null, null, null, '在MYSQL中获取当前日期就是如下的SELECT语句这么简单。\r\n?\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\nMYSQL> SELECT CURRENT_DATE();\r\n \r\n+----------------+\r\n| CURRENT_DATE() |\r\n+----------------+\r\n| 2014-06-17  |\r\n+----------------+', '', '0', '2017-12-25 16:56:06', '10', '1');
INSERT INTO `topic` VALUES ('3409', '26', '4', '我以 date 更新了我 Linux 上面的时间后，该如何将时间数据写入 BIOS 内？', '96bb92b4-8e9f-4bff-bd85-978ac55a8bf2.', null, null, null, null, null, null, '必须利用 HWCLOCK 这个程序来写入，利用 HWCLOCK -W 写入 BIOS', '', '0', '2017-12-25 16:56:17', '28', '1');
INSERT INTO `topic` VALUES ('3410', '32', '4', 'MySQL_pconnect是什么? 它和MySQL_connect有什么区别?', '7003dc34-f59f-4e81-bf21-5ce495678545.', null, null, null, null, null, null, '：MYSQL_PCONNECT()打开一个持久的数据库连接，这意味着数据库不是在每次页面加载的时候被打开一个新连接，因此我们不能使用MYSQL_CLOSE()来关闭一个持久的连接。', '', '0', '2017-12-25 16:56:24', '10', '1');
INSERT INTO `topic` VALUES ('3411', '26', '1', '题示代码的功能为：对于一个存放Person对象的ArrayList进行循环遍历，并取到每个Person对象的idCard和userName。', '106f2c08-203d-4f3b-b68d-0e30ceef7d01.png', 'List list:person ', 'List list:Person', 'Person person:List ', 'Person person:list//在list中遍历person', '', '', 'D', 'Person person:list//在list中遍历person', '0', '2017-12-25 16:56:36', '50', '1');
INSERT INTO `topic` VALUES ('3412', '3', '4', 'jdbc的操作过程', '9fcae350-aac5-40f0-8bae-b53199ed8453.', null, null, null, null, null, null, '加载数据库驱动包、连接数据库、使用SQL语句操作数据库、关闭数据库连接', '', '0', '2017-12-25 16:56:45', '55', '1');
INSERT INTO `topic` VALUES ('3413', '26', '3', '若需要进行判断时，可使用()或()来处理', 'fe20622c-20c0-46ba-9334-2811d4380c0b.', null, null, null, null, null, null, 'TEST  中括号[]', '', '0', '2017-12-25 16:56:53', '29', '1');
INSERT INTO `topic` VALUES ('3414', '24', '2', 'whoami显示当前操作用户', '8e02116e-e1df-4094-8f99-4843741a6996.', null, null, null, null, null, null, '正确', 'whoami显示当前操作用户', '0', '2017-12-25 16:56:57', '30', '1');
INSERT INTO `topic` VALUES ('3415', '3', '4', 'HTTP1.1的新特性', 'cbde147b-117d-47e9-819f-b0184688b6cb.', null, null, null, null, null, null, '支持持续连接，通过建立一个TCP后，发送请求并得到响应，然后发送更多的请求并得到更多的响应。通过把简历和释放TCP连接的开销分摊到多个请求上，则对每个请求而言，优于TCP而造成的相对开销被大大降低。而且还可以发送流水线请求。', '', '0', '2017-12-25 16:56:59', '55', '1');
INSERT INTO `topic` VALUES ('3417', '3', '4', 'Collection有哪些类', 'd5f73946-5f1a-4e5b-ae7f-dc9845a6aa5c.', null, null, null, null, null, null, 'SET, LIST, MAP, SORTEDSET, SORTEDMAP, HASHSET, TREESET, ARRAYLIST, LINKEDLIST, VECTOR, COLLECTIONS, ARRAYS, ABSTRACTCOLLECTION', '', '0', '2017-12-25 16:57:24', '55', '1');
INSERT INTO `topic` VALUES ('3418', '3', '4', ' 解释JDBC抽象和DAO模块', 'a0525219-3ee7-445a-9e41-38befad8129a.', null, null, null, null, null, null, '通过使用JDBC抽象和DAO模块，保证数据库代码的简洁，并能避免数据库资源错误关闭导致的问题，它在各种不同的数据库的错误信息之上，提供了一个统一的异常访问层。它还利用SPRING的AOP 模块给SPRING应用中的对象提供事务管理服务。', '', '0', '2017-12-25 16:57:36', '51', '1');
INSERT INTO `topic` VALUES ('3420', '3', '4', 'Hashcode总为1会怎样，如何解决hash冲突', '4f4ebf56-ead5-43f2-abf5-8b2affa4605a.', null, null, null, null, null, null, '当所有对象HASHCODE返回都为1时，所有对象都出现HASH冲突，其性能会下降\r\n\r\n解决HASH冲突：\r\n\r\n线性再散列法、插入元素时，如果发生冲突，算法会简单的遍历HASH表，直到找到表中的下一个空槽，并将该元素放入该槽中。查找元素时，首先散列值所指向的槽，如果没有找到匹配，则继续遍历HASH表，直到：（1）找到相应的元素；（2）找到一个空槽（指示查找的元素不存在）；（3）整个HASH表遍历完毕（指示该元素不存在并且HASH表是满的）。\r\n\r\n非线性再散列法、线性再散列法是从冲突位置开始，采用一个步长以顺序方式遍历HASH表，来查找一个可用的槽，从上面的讨论可以看出，它容易产生聚集现象。非线性再散列法可以避免遍历散列表，它会计算一个新的HASH值，并通过它跳转到表中一个完全不同的部分。\r\n\r\n外部拉链法、将HASH表看作是一个链表数组，表中的每个槽要不为空，要不指向HASH到该槽的表项的链表。', '', '0', '2017-12-25 16:57:40', '55', '1');
INSERT INTO `topic` VALUES ('3421', '26', '3', '条件判断式可使用（）来判断，若是固定变量内容的情况下，可使用（）来处理', '1e3c30ff-a782-4053-9ce6-d5de998ce3d1.', null, null, null, null, null, null, 'IF...THEN     CASE $VAR IN...ESAC', '', '0', '2017-12-25 16:57:47', '29', '1');
INSERT INTO `topic` VALUES ('3422', '3', '4', '如何用两个队列实现栈', 'dcfffb88-ad5d-440f-a26d-3ac060b3e64e.', null, null, null, null, null, null, '即可以将A队列作为栈PUSH，B队列作为栈POP。量队列数据相同。', '', '0', '2017-12-25 16:57:54', '55', '1');
INSERT INTO `topic` VALUES ('3423', '32', '4', ' 当你需要查看一个名为\'mysql\'的数据库中\'user\'表中的所有索引时，你会如何做?', '9ad1d15e-bf99-4e5b-9ea2-8904ccc36612.', null, null, null, null, null, null, '下面的命令将会显示出‘USER\'表中所有的索引\r\n?\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\nMYSQL> SHOW INDEX FROM USER;\r\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ \r\n| TABLE | NON_UNIQUE | KEY_NAME | SEQ_IN_INDEX | COLUMN_NAME | COLLATION | CARDINALITY | SUB_PART | PACKED | NULL | INDEX_TYPE | COMMENT | INDEX_COMMENT | \r\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ \r\n| USER |   0 | PRIMARY |   1 | HOST  | A   |  NULL |  NULL | NULL |  | BTREE  |   |    | \r\n| USER |   0 | PRIMARY |   2 | USER  | A   |   4 |  NULL | NULL |  | BTREE  |   |    | \r\n+-------+------------+----------+--------------+-------------+-----------+-------------+----------+--------+------+------------+---------+---------------+ \r\n2 ROWS IN SET (0.00 SEC)', '', '0', '2017-12-25 16:57:58', '10', '1');
INSERT INTO `topic` VALUES ('3424', '3', '3', '解释WEB 模块。', 'e832c248-2937-4b05-bec9-4aff96eb10db.', null, null, null, null, null, null, 'SPRING的WEB模块是构建在APPLICATION CONTEXT 模块基础之上，提供一个适合WEB应用的上下文。这个模块也包括支持多种面向WEB的任务，如透明地处理多个文件上传请求和程序级请求参数的绑定到你的业务对象。它也有对JAKARTA STRUTS的支持。', '', '0', '2017-12-25 16:58:04', '51', '1');
INSERT INTO `topic` VALUES ('3425', '24', '2', 'hostname显示主机名', '7e48693e-a932-4104-88bc-4cda95213378.', null, null, null, null, null, null, '正确', 'hostname显示主机名', '0', '2017-12-25 16:58:17', '30', '1');
INSERT INTO `topic` VALUES ('3426', '3', '4', 'Object的通用方法', 'd36985e3-fc86-4177-b0c5-1e400053021b.', null, null, null, null, null, null, '通用方法有EQUALS(), FINALIZE(), TOSTRING(), 其他NATIVE方法有HASHCODE(), REGISTERNATIVES(), GETCLASS(), CLONE(), NOTIFY(), NOTIFYALL(), WAIT()等。', '', '0', '2017-12-25 16:58:19', '55', '1');
INSERT INTO `topic` VALUES ('3427', '26', '4', '在 Linux 上面如何进行网络校时？', '6e870dad-60aa-4c1f-a7dc-de32d1200060.', null, null, null, null, null, null, '最简单的方法即是使用『 NTPDATE TIME.SERVERS.IP && HWCLOCK -W 』即可！', '', '0', '2017-12-25 16:58:20', '28', '1');
INSERT INTO `topic` VALUES ('3428', '4', '4', '解释对象/关系映射集成模块。', '4cf0d632-134f-4bce-9fc9-29ebaaae523e.', null, null, null, null, null, null, 'SPRING 通过提供ORM模块，支持我们在直接JDBC之上使用一个对象/关系映射映射(ORM)工具，SPRING 支持集成主流的ORM框架，如HIBERATE,JDO和 IBATIS SQL MAPS。SPRING的事务管理同样支持以上所有ORM框架及JDBC。', '', '0', '2017-12-25 16:58:23', '52', '1');
INSERT INTO `topic` VALUES ('3429', '3', '4', 'Java中如何实现多态', '43b4abf8-4a91-4647-9a49-6f0122cbb584.', null, null, null, null, null, null, '多态是OOP中的一个重要特性，主要用来实现动态联编，程序的最终状态只有在执行过程中才被决定而非在编译期间就决定了。有利于提高大型系统的灵活性和扩展性。\r\n\r\n多态的三个必要条件：有继承、有方法重写、父类引用指向子类对象。\r\n\r\n引用变量的两种类型：编译时类型由申明类型决定，运行时类型由实际对应的对象决定。', '', '0', '2017-12-25 16:58:34', '55', '1');
INSERT INTO `topic` VALUES ('3430', '4', '4', ' 什么是Spring的依赖注入？', 'f7318214-e2b1-4180-90e5-862e6a169347.', null, null, null, null, null, null, '依赖注入，是IOC的一个方面，是个通常的概念，它有多种解释。这概念是说你不用创建对象，而只需要描述它如何被创建。你不在代码里直接组装你的组件和服务，但是要在配置文件里描述哪些组件需要哪些服务，之后一个容器（IOC容器）负责把他们组装起来。', '', '0', '2017-12-25 16:58:43', '59', '1');
INSERT INTO `topic` VALUES ('3431', '26', '4', 'NIS 启动之前需要先启动那个服务，否则就无法启动成功 (提示：RPC Server)', '15ae10a1-4ef3-4a02-85ff-e6b337bd2033.', null, null, null, null, null, null, '因为 NIS 是 RPC SERVER 的一种，所以必须要启动 RPCBIND 这个 DAEMON 才行！', '', '0', '2017-12-25 16:58:52', '28', '1');
INSERT INTO `topic` VALUES ('3432', '26', '4', '.什么是Spring beans?', '9547ce42-35f0-46da-8221-0294b1ded67c.', null, null, null, null, null, null, 'SPRING BEANS 是那些形成SPRING应用的主干的JAVA对象。它们被SPRING IOC容器初始化，装配，和管理。这些BEANS通过容器中配置的元数据创建。比如，以XML文件中<BEAN/> 的形式定义。', '', '0', '2017-12-25 16:59:25', '59', '1');
INSERT INTO `topic` VALUES ('3433', '4', '4', '如何给Spring 容器提供配置元数据?', 'd4ace386-5d28-4d1f-b66c-879438f85443.', null, null, null, null, null, null, 'IOC 或 依赖注入把应用的代码量降到最低。它使应用容易测试，单元测试不再需要单例和JNDI查找机制。最小的代价和最小的侵入性使松散耦合得以实现。IOC容器支持加载服务时的饿汉式初始化和懒加载。', '', '0', '2017-12-25 16:59:27', '51', '1');
INSERT INTO `topic` VALUES ('3434', '18', '3', '群组的观察与有效群组的切换分别为：（） 及 （） 命令', 'a30f7196-2bfb-43c7-9047-969e7c66e2a9.', null, null, null, null, null, null, 'GROUPS    NEWGRP', '', '0', '2017-12-25 16:59:31', '29', '1');
INSERT INTO `topic` VALUES ('3435', '26', '4', '请简述进行网站架设前，应该具备何种基本技能？', '6b4f715b-9b19-4c6c-898b-092f621ee039.', null, null, null, null, null, null, 'LINUX 系统操作上，至少需要了解帐号管理、文件属性与权限、程序与资源管理、 硬件如硬盘之挂载与软件套件之安装如RPM套件管理员等等，而 VI 与 SHELL 亦是不可忽略之基本技能，更重要者，日志的管理以及系统服务的原理(如 STAND ALONE 与 SUPER DEAMON 服务启动的方式差异等)亦需同时厘清，以方便未来架设网站时除错的技巧；\r\n在网络的基础知识上，TCP/IP 的观念以及路由的概念相当的重要，此外，DNS 的概念也很重要。\r\n在心态的调整上面，系统管理员需要的道德感以及使命感需要较高的标准。', '', '0', '2017-12-25 16:59:34', '43', '1');
INSERT INTO `topic` VALUES ('3436', '32', '4', '简述数据库管理系统的主要功能？', '096d2cdd-9596-404f-8873-5f1169e9cf9a.', null, null, null, null, null, null, '数据定义  数据操纵  数据库运行管理  数据库组织、存储和管理  数据库建立、维护和其他', '', '0', '2017-12-25 16:59:39', '67', '1');
INSERT INTO `topic` VALUES ('3437', '18', '4', 'useradd 命令作用参考的文件有？', 'fae6bb6a-db38-4993-9f8a-03adc64590a1.', null, null, null, null, null, null, ' /ETC/DEFAULT/USERADD, /ETC/LOGIN.DEFS, /ETC/SKEL/ 等等', '', '0', '2017-12-25 16:59:39', '29', '1');
INSERT INTO `topic` VALUES ('3438', '32', '1', 'Jdbc连接数据库的三大对象是？', 'b0601cd6-045b-43ed-ac39-1f035067472e.', 'Connection  Statement  ResultSet', 'Connection  PrepareStatment  ResultSet', 'Connection  PrepareStatment  CallableStatement', 'Connections  Statement  ResultSet\r\n ', '', '', 'A', '', '0', '2017-12-25 16:59:53', '55', '1');
INSERT INTO `topic` VALUES ('3439', '33', '4', '继承的定义？', 'e776c89a-f805-4bc3-b678-57d8989027f2.', null, null, null, null, null, null, 'CSV是逗号分隔值（COMMA-SEPARATED VALUES）或也被称为字符分隔值（CHARACTER-SEPARATED 继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性。', '', '0', '2017-12-25 17:00:10', '10', '1');
INSERT INTO `topic` VALUES ('3440', '24', '2', 'unama显示系统信息', '894d753e-aaa7-4087-97f5-a53f45eea401.', null, null, null, null, null, null, '错误', 'uname显示系统信息', '0', '2017-12-25 17:00:12', '30', '1');
INSERT INTO `topic` VALUES ('3441', '26', '4', '如果我有一颗硬盘在 A 主机上面安装了 Linux 之后，拿到另一台配备相同的 B 主机上面去进行启动，结果竟然无法顺利启动，您认为可能的原因是什么？', 'c75b75e0-671b-4438-a2e3-bf8443cf29d5.', null, null, null, null, null, null, '由於配备相同，所以排除硬件的问题，不过，考虑到 IDE 排线与 PARTITION 的代号，以及 /ETC/FSTAB 的对应，所以应该是由於 IDE 插槽放置错误所致(LINUX 系统下，每个 IDE 插槽对应的 PARTITION 名称皆不相同喔！)。此外， 上次不正常关机也可能造成硬盘损害而无法启动成功！', '', '0', '2017-12-25 17:00:15', '43', '1');
INSERT INTO `topic` VALUES ('3442', '24', '4', '为核实当前所在目录位置，使用什么命令？', '5ff5650f-1efa-4abf-9e1f-75f20f28ffe4.', null, null, null, null, null, null, 'PWD', '', '0', '2017-12-25 17:00:19', '7', '1');
INSERT INTO `topic` VALUES ('3443', '32', '4', '在关系数据库中，为了提高查询效率，在物理实现时，对存储结构会由哪些考虑？', '8511f381-7013-486f-930a-ab96f68eedcb.', null, null, null, null, null, null, '一般用户不需要知道数据在数据库中如何存放。然而对数据库管理员来说，需要在安装、配置数据库时，决定数据的存放方式和位置；需要在系统运行过程中，调整数据存放以提高系统性能。如果数据库管理员能够在最初安装、配置数据库时，根据应用程序的特性，仔细地规划、合理地安排数据的存放，就能够极大地减少系统运行过程中对磁盘的I/O操作，这必然会带来系统性能的提高。  在规划数据的存放之前，我们首先要对数据库的存储结构有所了解。数据库的存储结构可分为物理结构和逻辑结构', '', '0', '2017-12-25 17:00:27', '67', '1');
INSERT INTO `topic` VALUES ('3444', '18', '3', '观察用户详细的口令参数，可以使用（）来处理；', 'ddae12b9-0a89-4319-9532-3d2373981d0b.', null, null, null, null, null, null, ' CHAGE -L 账号 ', '', '0', '2017-12-25 17:00:33', '29', '1');
INSERT INTO `topic` VALUES ('3445', '3', '1', '要从文件”file.dat”文件中读出第10个字节到变量c中，下列哪个方法合适？', '887835f3-ce43-45a5-822d-f61bb0216404.', 'FileInputStream in = new FileInputStream(“file.dat”);  in.skip(9); int c = in.read();', 'FileInputStream in = new FileInputStream(“file.dat”);  in.skip(10); int c = in.read();', 'FileInputStream in = new FileInputStream(“file.dat”);  int c = in.read();', 'RandomAccessFile in = new RandomAccessFile(“file.dat”);  in.skip(9); int c = in.read();', '', '', 'A', '', '0', '2017-12-25 17:00:36', '55', '1');
INSERT INTO `topic` VALUES ('3446', '33', '4', '多态的定义？', '4c112fd8-f68b-4d1e-93b8-3c31fbcad642.', null, null, null, null, null, null, '多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面', '', '0', '2017-12-25 17:00:42', '10', '1');
INSERT INTO `topic` VALUES ('3447', '26', '4', ' 一个 Spring Bean 定义 包含什么？', '9bffcf22-5e29-4c8a-84c2-3c50db4f0975.', null, null, null, null, null, null, '一个SPRING BEAN 的定义包含容器必知的所有配置元数据，包括如何创建一个BEAN，它的生命周期详情及它的依赖。', '', '0', '2017-12-25 17:00:42', '59', '1');
INSERT INTO `topic` VALUES ('3448', '24', '2', 'too动态显示当前耗费资源最多进程信息', 'eba522d4-3c78-404c-a353-89df9b3018b8.', null, null, null, null, null, null, '错误', 'top动态显示当前耗费资源最多进程信息', '0', '2017-12-25 17:00:58', '30', '1');
INSERT INTO `topic` VALUES ('3449', '33', '4', '抽象的定义？抽象和封装的不同点', 'fb3341ec-13cf-435f-834a-b47570270fbb.', null, null, null, null, null, null, '抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。JAVA支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。\r\n抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略。', '', '0', '2017-12-25 17:01:09', '10', '1');
INSERT INTO `topic` VALUES ('3450', '26', '4', '一般来说，在 Linux 系统上，使用者默认的家目录在那个目录下？另外，新增一个使用者时， 该使用者默认的家目录内容来自那个目录下？', '2bde2fe6-11c7-48f0-aa0f-cfc527e5f6f0.', null, null, null, null, null, null, '在 /ETC/DEFAULT/USERADD 这个文件里面会规范使用者的默认家目录以及默认家目录的内容，一般来说，使用者默认家目录在 /HOME ，至於家目录内的文件则复制来源在 /ETC/SKEL 里面。', '', '0', '2017-12-25 17:01:13', '43', '1');
INSERT INTO `topic` VALUES ('3451', '25', '4', '下面是一个/etc/passwd文件的部分内容。题目要求取出shell并统计次数，shell是指后面的/bin/bash，/sbin/nologin等，如下面/bin/bash出现12次，/sbin/nologin出现3次。\r\n[plain] view plaincopy\r\n\r\n    hyn:x:525:500::/home/hyn:/bin/bash  \r\n    ljlxx:x:526:500::/home/ljlxx:/bin/bash  \r\n    lzj:x:527:500::/home/lzj:/bin/bash  \r\n    wfly:x:528:500::/home/wfly:/bin/bash  \r\n    squid:x:23:23::/var/spool/squid:/sbin/nologin  \r\n    wyj:x:529:500::/home/wyj:/bin/bash  \r\n    qemu:x:107:107:qemu user:/:/sbin/nologin  \r\n    radvd:x:75:75:radvd user:/:/sbin/nologin  \r\n    dungbee:x:530:500::/home/dungbee:/bin/bash  \r\n    mysql:x:27:27:MySQL Server:/var/lib/mysql:/bin/bash  \r\n    scidb:x:531:531::/home/scidb:/bin/bash  \r\n    postgres:x:532:532::/home/postgres:/bin/bash  \r\n    crane:x:533:533::/home/crane:/bin/bash  \r\n    test:x:534:534::/home/test:/bin/bash  \r\n    hguser:x:535:535::/home/hguser:/bin/bash  ', 'ad0a09fc-b8f5-4feb-b554-9c862e6dacf8.', null, null, null, null, null, null, 'CAT /ETC/PASSWD|AWK -F: \'{PRINT $7}\'|SORT|UNIQ -C  ', '使用awk根据冒号分割内容，打印输出分割后的第7列，也就是shell所在列。然后调用sort命令排序并使用uniq -c统计每个shell出现的次数。', '0', '2017-12-25 17:01:14', '18', '1');
INSERT INTO `topic` VALUES ('3452', '26', '4', '我的 NIS 域名为 bird ，另外，我主机的 IP 与主机名为 192.168.5.1/bird.nis.org ，请问要这些信息需要设定在 NIS Server 的哪些档案之内？', '765df2f3-92f2-47b2-b190-5a4fd22ae0e5.', null, null, null, null, null, null, '域名可以直接手动下达『 NISDOMAINNAME BIRD 』也可以写入 /ETC/SYSCONFIG/NETWORK 里面『NISDOMAIN=BIRD』； IP 与 主机名 需要写入在 /ETC/HOSTS 里面。', '', '0', '2017-12-25 17:01:19', '28', '1');
INSERT INTO `topic` VALUES ('3456', '3', '1', '哪个关键字可以对对象加互斥锁？', '0964ae77-8c7a-4039-9b1b-e9e1501e11f0.', 'transient', 'synchronized', 'serialize', 'static', '', '', 'B', '', '0', '2017-12-25 17:01:21', '55', '1');
INSERT INTO `topic` VALUES ('3457', '18', '3', '用户自行修改参数的命令有： （）, （） 等，观察命令则有： （）, （） 等', 'a557790c-99f0-47eb-a9d4-1e147f234989.', null, null, null, null, null, null, 'CHSH  CHFN   ID  FINGER', '', '0', '2017-12-25 17:01:25', '29', '1');
INSERT INTO `topic` VALUES ('3458', '4', '4', 'Spring框架中的单例bean是线程安全的吗?', '8a621397-641f-40a8-80a7-fc7b5f5e32c5.', null, null, null, null, null, null, '不，SPRING框架中的单例BEAN不是线程安全的。', '', '0', '2017-12-25 17:01:27', '51', '1');
INSERT INTO `topic` VALUES ('3459', '33', '4', '封装的定义和好处有哪些？', 'd6341fc5-28a4-408f-997f-d33dc42ddc09.', null, null, null, null, null, null, '封装给对象提供了隐藏内部特性和行为的能力。对象提供一些能被其他对象访问的方法来改变它内部的数据。在 JAVA 当中，有 3 种修饰符：PUBLIC，PRIVATE和 PROTECTED。每一种修饰符给其他的位于同一个包或者不同包下面对象赋予了不同的访问权限。 \r\n下面列出了使用封装的一些好处： \r\n通过隐藏对象的属性来保护对象内部的状态。 \r\n提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展。 \r\n禁止对象之间的不良交互提高模块化。', '', '0', '2017-12-25 17:01:36', '10', '1');
INSERT INTO `topic` VALUES ('3461', '24', '2', 'pa显示瞬间进程状态 pa -aux', '74b73e14-b55b-4086-9b91-5b0bfc048ee0.', null, null, null, null, null, null, '正确', 'ps 显示瞬间进程状态 ps -aux', '0', '2017-12-25 17:01:41', '30', '1');
INSERT INTO `topic` VALUES ('3462', '26', '4', '磁碟配额 ( quota ) 能否针对某个特定的目录进行限制？Quota 有什么较为特殊的使用限制？', 'be476a0f-5ae1-456e-be43-fe430fb15bfa.', null, null, null, null, null, null, '在 /ETC/DEFAULT/USERADD 这个文件里面会规范使用者的默认家目录以及默认家目录的内容，一般来说，使用者默认家目录在 /HOME ，至於家目录内的文件则复制来源在 /ETC/SKEL 里面。', '', '0', '2017-12-25 17:01:55', '43', '1');
INSERT INTO `topic` VALUES ('3463', '33', '4', ' 面向对象软件开发的优点有哪些？', '552a0f05-abc0-41e2-a68b-39129f41340a.', null, null, null, null, null, null, '代码开发模块化，更易维护和修改。 \r\n代码复用。 \r\n增强代码的可靠性和灵活性。 \r\n增加代码的可理解性。 \r\n面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象。', '', '0', '2017-12-25 17:01:56', '10', '1');
INSERT INTO `topic` VALUES ('3465', '26', '1', '已知类Foo的定义如下：', '11e48e28-d636-4dcf-ad76-f0b6537bc013.png', ' list.contains(new Foo(1)) + \",\"+ set.contains(new Foo(1)) ', ' set.contains(new Foo(1)) + \",\"+ list.contains(new Foo(1)) ', 'new Foo(1).equals (new Foo(1)) + \",\"+ list.contains(new Foo(1)) ', 'new Foo(1).equals (new Foo(1)) + \",\"+ set.contains(new Foo(1))', '', '', 'C', '没有重写hashCode()方法 ', '0', '2017-12-25 17:02:05', '50', '1');
INSERT INTO `topic` VALUES ('3466', '25', '4', '清除本机除了当前登陆用户以外的所有用户。', 'b2ef5fdc-1baa-4b06-857c-b5a53aec932e.', null, null, null, null, null, null, 'KILL $(WHO -U|GREP -V `WHOAMI`|AWK \'{PRINT $6}\'|SORT -U)  ', 'who -u显示所有当前用户。grep -v选取当前登录用户以外的所有用户。awk打印用户进程ID。sort -u会删除相同的行。最后用kill命令终止。', '0', '2017-12-25 17:02:13', '18', '1');
INSERT INTO `topic` VALUES ('3467', '3', '4', '什么是表达式(Expression)？', 'ffded250-2ed0-40cc-bf8e-d511b55e1516.', null, null, null, null, null, null, 'JSP表达式是WEB服务器把脚本语言表达式的值转化成一个 STRING 对象，插入到返回给客户端的数据流中。表达式是在 <%= 和 %> 这两个标签之间定义的。\r\n\r\n', '', '0', '2017-12-25 17:02:20', '10', '1');
INSERT INTO `topic` VALUES ('3468', '18', '3', 'ACL 可进行（）的权限管理，但 ACL 的启动需要有文件系统的支持；', '0f84c1be-ffd2-4569-9bbb-b8f77639e262.', null, null, null, null, null, null, '单一个人或群组', '', '0', '2017-12-25 17:02:20', '29', '1');
INSERT INTO `topic` VALUES ('3472', '26', '4', '/etc/nsswitch.conf 的功能为何？如果我想要让密码查寻先本地的密码文件，再查寻 NIS ，需要如何设定？', 'd937fd11-3a6c-4800-a05f-04ed3fb3f88f.', null, null, null, null, null, null, '该档案的功能很多，在 DNS 方面，可以用来决定正、反解的顺序，至于密码则可以用来判断何者为先！如果需要先查本机再查 NIS 的密码时，需要的参数：\r\nPASSWD: FILES NIS\r\nSHADOW: FILES NIS', '', '0', '2017-12-25 17:02:23', '28', '1');
INSERT INTO `topic` VALUES ('3473', '3', '4', '声明(Decalaration)在哪里？', '8656c2a9-3b8f-408b-8b57-f1fedd04456d.', null, null, null, null, null, null, '声明跟 JAVA 中的变量声明很相似，它用来声明随后要被表达式或者SCRIPTLET使用的变量。添加的声明必须要用开始和结束标签包起来。', '', '0', '2017-12-25 17:02:34', '10', '1');
INSERT INTO `topic` VALUES ('3474', '26', '4', '如果我想要增加网域当中一个新的账号：newaccount，并且这个 newaccount 可以让 NIS Client 查寻到他的账号与密码，需要进行哪些步骤？', '33f19b90-0372-46e8-b488-fcbb8b7dbbcd.', null, null, null, null, null, null, '先登入 NIS SERVER 以 USERADD NEWACCOUNT 以及 PASSWD NEWACCOUNT 来新增账号；\r\n制作密码数据库：『/USR/LIB64/YP/YPINIT -M』\r\n重新启动：『/ETC/RC.D/INIT.D/YPSERV RESTART ; /ETC/RC.D/INIT.D/YPPASSWDD RESTART』。', '', '0', '2017-12-25 17:02:41', '28', '1');
INSERT INTO `topic` VALUES ('3475', '32', '4', '试述数据库系统的组成。', '3524e2a4-4555-4466-8304-6043fea786e6.', null, null, null, null, null, null, '数据库系统一般由数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员和用户构成。', '', '0', '2017-12-25 17:02:44', '67', '1');
INSERT INTO `topic` VALUES ('3476', '32', '4', 'DBA的职责是什么？', 'd28093b6-0a8c-413c-b62b-1ed681542e35.', null, null, null, null, null, null, '负责全面地管理和控制数据库系统。具体职责包括： ① 决定数据库的信息内容和结构； ② 决定数据库的存储结构和存取策略； ③ 定义数据的安全性要求和完整性约束条件； ④ 监督和控制数据库的试用和运行； ⑤ 数据库系统的改进和重组。', '', '0', '2017-12-25 17:03:09', '67', '1');
INSERT INTO `topic` VALUES ('3477', '24', '2', 'du查看目录大小 du -h /home带有单位显示目录信息', '6653c256-7d1a-415f-96df-9642fb0dbfc8.', null, null, null, null, null, null, '正确', 'du查看目录大小 du -h /home带有单位显示目录信息', '0', '2017-12-25 17:03:16', '30', '1');
INSERT INTO `topic` VALUES ('3478', '4', '4', '什么是bean装配? ', 'c6f5b52d-e272-4ad2-9e56-54070283db7c.', null, null, null, null, null, null, '装配，或BEAN 装配是指在SPRING 容器中把BEAN组装到一起，前提是容器需要知道BEAN的依赖关系，如何通过依赖注入来把它们装配到一起。', '', '0', '2017-12-25 17:03:19', '51', '1');
INSERT INTO `topic` VALUES ('3479', '18', '3', 'ACL 的配置可使用 （），查阅则使用 （）', 'cd548087-1b31-431e-8007-c1a91b93dcad.', null, null, null, null, null, null, 'SETFACL   GETFACL', '', '0', '2017-12-25 17:03:25', '29', '1');
INSERT INTO `topic` VALUES ('3480', '26', '4', '我要如何确定我在 Linux 系统上面的网络卡已经被 Linux 捉到并且驱动了？', 'f886ffae-8282-4b48-9ed3-569150211097.', null, null, null, null, null, null, '网络卡能不能被捉到可以使用『 DMESG|GREP ETH 』来判断，有没有驱动则可以使用 LSMOD 看看模块有没有加载核心！最后，以 IFCONFIG ETH0 192.168.0.10 测试看看！', '', '0', '2017-12-25 17:03:25', '48', '1');
INSERT INTO `topic` VALUES ('3481', '26', '4', '我老是发现我的系统怪怪的，似乎有点停顿的模样，怀疑可能是 CPU 负荷太大，所以要去检查一下系统相关的信息。请问，我该以什么指令去检查我的系统相关的信息？', '6f640077-b11d-460b-b838-78576d59d09b.', null, null, null, null, null, null, '可以使用 TOP, SAR, FREE, PS -AUX, UPTIME, LAST 等功能去查询系统的相关信息喔！然后再以 KILL 之类的指令删除；', '', '0', '2017-12-25 17:03:29', '28', '1');
INSERT INTO `topic` VALUES ('3484', '32', '4', '系统分析员、数据库设计人员、应用程序员的职责是什么？ ', '85f1e7ee-f260-4da0-9a2b-49caa8c45141.', null, null, null, null, null, null, '系统分析员负责应用系统的需求分析和规范说明，系统分析员要和用户及DBA相结合，确定系统的硬件软件配置，并参与数据库系统的概要设计。数据库设计人员负责数据库中数据的确定、数据库各级模式的设计。数据库设计人员必须参加用户需求调查和系统分析，然后进行数据库设计。在很多情况下，数据库设计人员就由数据库管理员担任。应用程序员负责设计和编写应用系统的程序模块，并进行调试和安装。', '', '0', '2017-12-25 17:03:43', '67', '1');
INSERT INTO `topic` VALUES ('3485', '26', '4', '我怀疑我的系统上面有过多的具有 SUID 的档案存在，导致一般使用者可以随意的取得 root 的权限，请问，我要如何找出这些具有 SUID 权限的档案？', '9b25d8a8-7c89-47cd-9f80-e7a3a43024a5.', null, null, null, null, null, null, '因为 SUID 是 4000 这个权限的模样，所以我可以这样做：\r\nFIND / -PERM +4000', '', '0', '2017-12-25 17:03:48', '28', '1');
INSERT INTO `topic` VALUES ('3486', '4', '4', ' 你怎样定义类的作用域? ', 'b509aac7-bb9f-4cf2-b098-deccfd327111.', null, null, null, null, null, null, '当定义一个<BEAN> 在SPRING里，我们还能给这个BEAN声明一个作用域。它可以通过BEAN 定义中的SCOPE属性来定义。如，当SPRING要在需要的时候每次生产一个新的BEAN实例，BEAN的SCOPE属性被指定为PROTOTYPE。另一方面，一个BEAN每次使用的时候必须返回同一个实例，这个BEAN的SCOPE 属性 必须设为 SINGLETON。', '', '0', '2017-12-25 17:03:53', '59', '1');
INSERT INTO `topic` VALUES ('3487', '26', '4', '如果一启动就要运行某个程序，应该要将该程序写入那个文件里面？', '0b524218-eede-4ca0-b979-9dbe31d30cd6.', null, null, null, null, null, null, '可以直接在 /ETC/RC.D/RC[RUN-LEVEL].D 里面加入 S 开头的文件，不过，更简单的作法是直接将该程序写入 /ETC/RC.D/RC.LOCAL ，不过，请注意该程序必须要具有可运行的权限，且 RC.LOCAL 也必须要是可运行喔！', '', '0', '2017-12-25 17:03:58', '43', '1');
INSERT INTO `topic` VALUES ('3489', '32', '4', '试述关系模型的三个组成部分。', 'e7cae85a-20ac-4ea1-bf12-30014a8a2360.', null, null, null, null, null, null, '关系模型由关系数据结构、关系操作集合和关系完整性约束三部分组成。', '', '0', '2017-12-25 17:04:05', '67', '1');
INSERT INTO `topic` VALUES ('3490', '3', '4', '你可以在Spring中注入一个null 和一个空字符串吗？', '2121785f-759d-41c5-bde1-1fc6bbf07c57.', null, null, null, null, null, null, '可以。', '', '0', '2017-12-25 17:04:05', '51', '1');
INSERT INTO `topic` VALUES ('3491', '24', '3', '身份切换可使用 （） ，亦可使用（），但使用 sudo 者，必须先以 （） 配置可使用的命令；', 'fd6a64ed-7901-46c0-a0cd-1fc9c71771b2.', null, null, null, null, null, null, 'SU   SUDO   VISUDO', '', '0', '2017-12-25 17:04:17', '29', '1');
INSERT INTO `topic` VALUES ('3492', '26', '4', '我由国内一些 ftp 网站上下载了 Red Hat 公司释出的软件，我想安装他，但又不知道该软件档案是否被修改过！ 请问我该如何确定这个软件的可用性？', '2a1d35c1-90b3-424e-970a-68055229991a.', null, null, null, null, null, null, '利用最简易的 MD5 编码来测试一下，例如『 MD5SUM 软件名称』，再比对与原始软件释出的 MD5 数据是否相同！？', '', '0', '2017-12-25 17:04:49', '28', '1');
INSERT INTO `topic` VALUES ('3494', '26', '4', '我要关掉 cron 这个服务，应该怎么关掉他？如果正常的方法无法关闭这个服务，可以使用什么方法来关闭？', '79ef0acd-9488-49f0-8b53-2de504614486.', null, null, null, null, null, null, '因为 CRON 是一个 STAND ALONE 的服务，所以可以使用 /ETC/RC.D/INIT.D/CRON STOP 来关闭；如果还是无法正常关闭，可以使用 PS -AUX | GREP CRON 捉出该程序的 PID ，然后以 KILL -9 PID 来关闭。', '', '0', '2017-12-25 17:04:50', '43', '1');
INSERT INTO `topic` VALUES ('3495', '18', '3', 'Quota 仅能针对整个 （）进行限制，不是针对目录', '02378131-1efe-4ae6-a61f-5f451e6b4c97.', null, null, null, null, null, null, 'FILESYSTEM ', '', '0', '2017-12-25 17:05:09', '29', '1');
INSERT INTO `topic` VALUES ('3496', '26', '1', '集合框架)题目代码的功能是：采用Iterator进行循环遍历到集合中的每一个元素，并将其移除，《插入代码》处应填入的代码是（） ', '5e79b7d7-d8f7-4d99-8af1-08748d8fa26f.png', 'Iterator it=list.iterator(); \r\nwhile(it.hasNext()){ \r\nit.next(); \r\nit.remove(); \r\n} ', 'Iterator it=list.iterator(); \r\nwhile(it.hasNext()){ \r\nit.remove(); \r\n} ', ' Iterator it=list.iterator(); \r\nwhile(it. hasNext()){ \r\nObject obj=it.next(); \r\nlist.remove(obj); \r\n} ', 'Iterator it=list.iterator(); \r\nwhile(it.hasNext()){ \r\nlist.remove(); \r\n} ', '', '', 'A', '', '0', '2017-12-25 17:05:15', '50', '1');
INSERT INTO `topic` VALUES ('3497', '4', '4', '什么是基于Java的Spring注解配置? 给一些注解的例子.', '165a962a-35fa-4455-a519-fb9f9eaf63c7.', null, null, null, null, null, null, '相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明', '', '0', '2017-12-25 17:05:19', '51', '1');
INSERT INTO `topic` VALUES ('3498', '26', '4', '关于Tomcat的session数目', 'd36a472d-f4d1-4ed4-863e-2a5a382fb77e.', null, null, null, null, null, null, '这个可以直接从TOMCAT的WEB管理界面去查看即可 ；\r\n或者借助于第三方工具LAMBDA PROBE来查看，它相对于TOMCAT自带的管理稍微多了点功能，但也不多 ；', '', '0', '2017-12-25 17:05:24', '10', '1');
INSERT INTO `topic` VALUES ('3499', '24', '2', 'da查看磁盘大小 df -h 带有单位显示磁盘信息', '5d228bb0-d06d-40c0-97cb-57e26fd7e6f0.', null, null, null, null, null, null, '正确', 'df查看磁盘大小 df -h 带有单位显示磁盘信息', '0', '2017-12-25 17:05:45', '30', '1');
INSERT INTO `topic` VALUES ('3500', '18', '3', 'Quota 的使用必须要核心与文件系统均支持。文件系统的参数必须含有 （）,（）', '3ea7a0a3-e1ed-42af-9ad7-c6d3493ea0bb.', null, null, null, null, null, null, 'USRQUOTA    GRPQUOTA', '', '0', '2017-12-25 17:05:50', '29', '1');
INSERT INTO `topic` VALUES ('3501', '26', '4', '我要启动一个系统默认的 Service，请问我可能可以由运行或修改哪些目录底下的文件来启动？', 'ab9a9434-d361-4f6d-8439-726dfda223ed.', null, null, null, null, null, null, '如果是 STAND ALONE 的服务，可以经由 /ETC/RC.D/INIT.D/* 里面的文件，如 /ETC/RC.D/INIT.D/SYSLOG START；\r\n如果是 SUPER DAEMON 的服务，就必须(1)先到 /ETC/XINETD.D 或者是 /ETC/INETD.CONF 修改相关文件或参数； (2)以 /ETC/RC.D/INIT.D/XINETD RESTART 来启动。', '', '0', '2017-12-25 17:05:52', '43', '1');
INSERT INTO `topic` VALUES ('3502', '4', '4', 'Bean 工厂和 Application contexts  有什么区别？', '822bef06-b840-438e-8c9a-23eb1240a1c0.', null, null, null, null, null, null, 'APPLICATION CONTEXTS提供一种方法处理文本消息，一个通常的做法是加载文件资源（比如镜像），它们可以向注册为监听器的BEAN发布事件。另外，在容器或容器内的对象上执行的那些不得不由BEAN工厂以程序化方式处理的操作，可以在APPLICATION CONTEXTS中以声明的方式处理。APPLICATION CONTEXTS实现了MESSAGESOURCE接口，该接口的实现以可插拔的方式提供获取本地化消息的方法。', '', '0', '2017-12-25 17:06:05', '52', '1');
INSERT INTO `topic` VALUES ('3503', '26', '4', '我要将我的 Linux 主机名改名字，步骤应该如何(更改那个档案？如何启用？)？', '3547807e-7373-431e-94c8-d875cb68d9f2.', null, null, null, null, null, null, 'LINUX 主机名在 /ETC/SYSCONFIG/NETWORK 这个档案里面的『HOSTNAME=主机名』来设定，先以 VI 来修改，改完后可以使用 /ETC/INIT.D/NETWORK RESTART 不过建议直接 REBOOT 启动主机名！', '', '0', '2017-12-25 17:06:25', '48', '1');
INSERT INTO `topic` VALUES ('3504', '26', '4', '如果我发现使用『 setfacl -m u:dmtsai:rwx /path/to/file 』时，系统却显示『setfacl: Operation not supported』， 你认为是哪里出问题？', 'e32d52fb-e66e-4d61-9e9f-f8f2f39d5b3b.', null, null, null, null, null, null, '这是由于你的 FILESYSTEM 没有启用 ACL 支持，或者是系统的核心不支持。 请先使用 MOUNT -O REMOUNT,ACL /MOUNT_POINT 测试看能否支持 ACL ，若不支持时，则可能是由于核心版本太旧了。', '', '0', '2017-12-25 17:06:26', '28', '1');
INSERT INTO `topic` VALUES ('3505', '32', '4', ' 数据库恢复的基本技术有哪些？', '1bfbac99-a03f-4f67-9871-97af8066e175.', null, null, null, null, null, null, '数据转储和登录日志文件是数据库恢复的基本技术。当系统运行过程中发生故障，利用转储的数据库后备副本和日志文件就可以将数据库恢复到故障前的某个一致性状态。', '', '0', '2017-12-25 17:06:41', '67', '1');
INSERT INTO `topic` VALUES ('3506', '4', '4', '有哪些不同类型的IOC（依赖注入）方式？', 'e46cfd70-1f1a-4dde-b812-516d6c90003e.', null, null, null, null, null, null, '构造器依赖注入：构造器依赖注入通过容器触发一个类的构造器来实现的，该类有一系列参数，每个参数代表一个对其他类的依赖。\r\n\r\nSETTER方法注入：SETTER方法注入是容器通过调用无参构造器或无参STATIC工厂 方法实例化BEAN之后，调用该BEAN的SETTER方法，即实现了基于SETTER的依赖注入。', '', '0', '2017-12-25 17:06:45', '52', '1');
INSERT INTO `topic` VALUES ('3507', '4', '4', ' 哪些是重要的bean生命周期方法？ 你能重载它们吗？', 'dd7bac19-4a2e-4d56-92d1-5bb9b3126c8f.', null, null, null, null, null, null, '有两个重要的BEAN 生命周期方法，第一个是SETUP ， 它是在容器加载BEAN的时候被调用。第二个方法是 TEARDOWN  它是在容器卸载类的时候被调用。\r\n\r\nTHE BEAN 标签有两个重要的属性（INIT-METHOD和DESTROY-METHOD）。用它们你可以自己定制初始化和注销方法。它们也有相应的注解（@POSTCONSTRUCT和@PREDESTROY）。', '', '0', '2017-12-25 17:06:49', '59', '1');
INSERT INTO `topic` VALUES ('3508', '24', '2', 'ifconfia查看网络情况', 'b767953e-3a73-4a60-9cd1-fe5df5f072b5.', null, null, null, null, null, null, '正确', 'ifconfig查看网络情况', '0', '2017-12-25 17:06:55', '30', '1');
INSERT INTO `topic` VALUES ('3509', '26', '4', '如果要设定 dmtsai 可以使用 /home/project 这个目录 (假设 /home 已经支持 ACL)，在该目录内 dmtsai 可以拥有完整的权限。请问该如何设定该目录？', '31e37ae7-2b0a-4064-8aa6-9ffc53e60946.', null, null, null, null, null, null, '除了使用 SETFACL -M U:DMTSAI:RWX /HOME/PROJECT 之外，还需要设定 SETFACL -M M:RWX /HOME/PROJECT ， 因为 ACL 在目录方面，必须透过用户权力及 MASK 的逻辑运算后才能生效！', '', '0', '2017-12-25 17:07:09', '28', '1');
INSERT INTO `topic` VALUES ('3510', '32', '4', '什么是日志文件？为什么要设立日志文件？', '5a6e7619-d726-4e34-bf07-a2f0ab71d646.', null, null, null, null, null, null, '（1） 日志文件是用来记录事务对数据库的更新操作的文件。（2） 设立日志文件的目的是： 进行事务故障恢复；进行系统故障恢复；协助后备副本进行介质故障恢复。', '', '0', '2017-12-25 17:07:13', '67', '1');
INSERT INTO `topic` VALUES ('3511', '26', '4', '您认为一个称职的网管人员应该具备什么能力？', 'd87cddb2-8fdb-4252-94e8-0859c305a112.', null, null, null, null, null, null, '能力需求相当高，如了(1)操作系统的基础知识(不论是 LINUX/UNIX/MAC/MS)；(2)网络基础的知识；(3)个别 INTERNET SERVICES 的运行知识之外，还需要(4)身心保持在备战状态，以及(5)具有相当高程度的道德感、责任感与使命感。', '', '0', '2017-12-25 17:07:14', '43', '1');
INSERT INTO `topic` VALUES ('3513', '4', '1', '题示代码的功能为:循环遍历输出Map当中的每一个元素 ', '96e396c6-e8f4-4731-83f4-35107517cad3.png', '<Entry> \r\nmap.keySet() \r\nEntry ', '<Entry> \r\nmap.entrySet() \r\nEntry ', '<Map.Entry<String, Integer>> \r\nmap.keySet() \r\nMap.Entry<String, Integer> ', '<Map.Entry<String, Integer>> \r\nmap.entrySet() \r\nMap.Entry<String, Integer> ', '', '', 'D', '', '0', '2017-12-25 17:07:19', '50', '1');
INSERT INTO `topic` VALUES ('3514', '4', '4', '哪种依赖注入方式你建议使用，构造器注入，还是 Setter方法注入？', 'e7bec057-562e-4bca-8abc-88b4fea725e5.', null, null, null, null, null, null, '你两种依赖方式都可以使用，构造器注入和SETTER方法注入。最好的解决方案是用构造器参数实现强制依赖，SETTER方法实现可选依赖。SPRING BEANS', '', '0', '2017-12-25 17:07:24', '52', '1');
INSERT INTO `topic` VALUES ('3515', '26', '4', '/etc/resolv.conf 与 /etc/hosts 的功能为何？', '6d7cf36d-77dc-4202-8ed6-a548ec47dadb.', null, null, null, null, null, null, '以主机名寻找 IP 的方法， /ETC/RESOLV.CONF 内填写 DNS 主机名，至于 /ETC/HOSTS 则直接填写主机名对应的 IP 即可！ 其中 /ETC/HOSTS 对于内部私有 IP 的主机名查询非常有帮助！', '', '0', '2017-12-25 17:07:57', '48', '1');
INSERT INTO `topic` VALUES ('3516', '26', '3', '系统可以透过（）命令来排程单一工作的任务', '37ec88ee-0f7c-4bd5-81ac-c5712eb34f54.', null, null, null, null, null, null, ' AT ', '', '0', '2017-12-25 17:08:14', '29', '1');
INSERT INTO `topic` VALUES ('3517', '3', '4', '什么是代理?', '4ae1fab2-0fcb-41c4-9711-64e351ed2bfa.', null, null, null, null, null, null, '代理是通知目标对象后创建的对象。从客户端的角度看，代理对象和目标对象是一样的。', '', '0', '2017-12-25 17:08:26', '51', '1');
INSERT INTO `topic` VALUES ('3518', '32', '4', '什么是检查点记录，检查点记录包括哪些内容？', '5263a67b-68fa-4df9-8e59-a2c89ca98134.', null, null, null, null, null, null, '检查点记录是一类新的日志纪录。它的内容包括： ① 建立检查点时刻所有正在执行的事务清单。 ② 这些事务的最近一个日志记录的地址。', '', '0', '2017-12-25 17:08:31', '67', '1');
INSERT INTO `topic` VALUES ('3519', '18', '4', '我使用 ADSL 拨接连上 Internet ，请问拨接成功之后，我的 Linux 上面会有几个网络接口 (假设我只有一个网络卡)？', '4d9ed9ba-4da6-4da2-870f-ebcf3ff477a3.', null, null, null, null, null, null, '因为拨接是使用 PPP (点对点)协议，所以拨接成功后会多出一个 PPP0 的接口，此外，系统原本即有 ETH0 及 LO 这两个界面，所以共有三个界面。', '', '0', '2017-12-25 17:08:45', '48', '1');
INSERT INTO `topic` VALUES ('3520', '24', '3', 'Ext3 透过（）命令，可以弹性的调整文件系统的大小', '83be08d2-c915-4fd0-a98f-1fc565cd5808.', null, null, null, null, null, null, ' RESIZE2FS ', '', '0', '2017-12-25 17:08:46', '29', '1');
INSERT INTO `topic` VALUES ('3521', '4', '4', '解释基于注解的切面实现', '47d8bcd2-88fb-4036-901f-50b2b53e7f69.', null, null, null, null, null, null, '在这种情况下(基于@ASPECTJ的实现)，涉及到的切面声明的风格与带有JAVA5标注的普通JAVA类一致。', '', '0', '2017-12-25 17:08:54', '51', '1');
INSERT INTO `topic` VALUES ('3522', '4', '4', '解释Spring支持的几种bean的作用域。', '6ddff7fb-2f57-40f3-a894-2e0d6652fe8e.', null, null, null, null, null, null, 'SPRING框架支持以下五种BEAN的作用域：\r\nSINGLETON : BEAN在每个SPRING IOC 容器中只有一个实例。\r\nPROTOTYPE：一个BEAN的定义可以有多个实例。\r\n\r\nREQUEST：每次HTTP请求都会创建一个BEAN，该作用域仅在基于WEB的SPRING APPLICATIONCONTEXT情形下有效。\r\nSESSION：在一个HTTP SESSION中，一个BEAN定义对应一个实例。该作用域仅在基于WEB的SPRING APPLICATIONCONTEXT情形下有效。\r\n\r\nGLOBAL-SESSION：在一个全局的HTTP SESSION中，一个BEAN定义对应一个实例。该作用域仅在基于WEB的SPRING APPLICATIONCONTEXT情形下有效。缺省的SPRING BEAN 的作用域是SINGLETON.', '', '0', '2017-12-25 17:09:13', '52', '1');
INSERT INTO `topic` VALUES ('3523', '26', '4', 'SELinux 是否为防火墙？', 'd780d4d0-9490-4172-93fd-4c34c4bc99f0.', null, null, null, null, null, null, '\r\nSELINUX 并非防火墙，他是用来作为更细部权限设定的一个核心模块。', '', '0', '2017-12-25 17:09:18', '28', '1');
INSERT INTO `topic` VALUES ('3524', '18', '3', '透过 （）, （） 可以查询与删除 at 的工作排程；', 'a2f9f5f4-c4b0-4922-9cda-2e648dba1b99.', null, null, null, null, null, null, 'ATQ   ATRM', '', '0', '2017-12-25 17:09:31', '29', '1');
INSERT INTO `topic` VALUES ('3525', '18', '4', '如何在 Linux 上面的文字接口搜寻你所在区域的无线 AP ？', 'b1892af0-51b8-4026-83c5-f227f447897f.', null, null, null, null, null, null, '透过直接使用『 IWLIST SCAN 』这个指令来指定某个无线网卡的搜寻！ 然后再以 IWCONFIG 来进行网卡的设定即可！', '', '0', '2017-12-25 17:09:31', '48', '1');
INSERT INTO `topic` VALUES ('3526', '26', '4', '良好的密码规划是防备主机的第一要务，请问 Linux 系统当中，关于密码相关的档案与规则设定在哪些档案里面？', '0d48e395-5061-4aaf-a115-8c8b6a229a06.', null, null, null, null, null, null, '密码的设定规则在 /ETC/LOGIN.DEFS 里面！至于密码档案在 /ETC/SHADOW 内！', '', '0', '2017-12-25 17:09:36', '28', '1');
INSERT INTO `topic` VALUES ('3527', '32', '4', '什么是数据库的安全性？', '6efcd78c-3823-4d69-87e4-b0292048e677.', null, null, null, null, null, null, '数据库的安全性是指保护数据库以防止不合法的使用所造成的数据泄露、更改或破坏。', '', '0', '2017-12-25 17:09:37', '67', '1');
INSERT INTO `topic` VALUES ('3528', '24', '3', '查找在当前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件，使用的命令是(      )', 'ad733113-94cb-433d-9e2e-894e56514519.', null, null, null, null, null, null, '  FIND . -PERM 644      ', '', '0', '2017-12-25 17:09:40', '10', '1');
INSERT INTO `topic` VALUES ('3529', '26', '4', 'FTP 在建立联机以及数据传输时，会建立哪些联机？', '4bdce67f-306d-49fb-90b9-6a7a00842901.', null, null, null, null, null, null, '需建立两种联机，分别是命令信道与数据传输信道。在主动式联机上为 PORT 21(FTP) 与 PORT 20(FTP-DATA)。', '', '0', '2017-12-25 17:09:46', '43', '1');
INSERT INTO `topic` VALUES ('3530', '18', '3', '查找在/tmp目录中，属主是benet用户的文件(     )；', 'ce254fac-7eb9-47b9-a4cc-67e4a652abc8.', null, null, null, null, null, null, ' FIND /TMP –USER BENET         ', '', '0', '2017-12-25 17:10:00', '10', '1');
INSERT INTO `topic` VALUES ('3531', '26', '4', '简易说明，当一部主机被入侵之后，应该如何处理？', '7786f0d0-73ee-481d-9ad4-691791b6123b.', null, null, null, null, null, null, '找出问题、重新安装、漏洞修补、数据还原！请参考本章最后一节的说明。', '', '0', '2017-12-25 17:10:17', '28', '1');
INSERT INTO `topic` VALUES ('3532', '24', '4', '暂时将你的 eth0 这张网络卡的 IP 设定为 192.168.1.100 ，如何进行？', '9f23f473-9285-483a-b209-c79eb3161b2b.', null, null, null, null, null, null, 'IFCONFIG ETH0 192.168.1.100', '', '0', '2017-12-25 17:10:22', '48', '1');
INSERT INTO `topic` VALUES ('3533', '24', '2', 'ping测试网络连通', 'eec341f8-880e-44d1-ba98-c5814b4a9689.', null, null, null, null, null, null, '正确', 'ping 测试网络连通', '0', '2017-12-25 17:10:29', '30', '1');
INSERT INTO `topic` VALUES ('3535', '26', '4', '有哪些动作可以让你的 FTP 主机更为安全 (secure) ？', '6f7ee510-e403-4ccc-b3ba-5e5494a3b058.', null, null, null, null, null, null, '随时更新服务器软件到最新版本；\r\n让 GUEST 与 ANONYMOUS 的家目录限制在固定的目录中(CHROOT 或是 RESTRICTED)；\r\n拒绝 ROOT 的登入或者其他系统账号的登入；\r\n拒绝大部分的 UPLOAD 行为！', '', '0', '2017-12-25 17:10:30', '43', '1');
INSERT INTO `topic` VALUES ('3536', '18', '3', '删除当目录中访问时间在7日以来、含有数字后缀的admin.log文件(   ）      ', '33c900c9-0a9b-4be4-b9f0-7cc7596806cc.', null, null, null, null, null, null, 'FIND / -MTIME -7 -NAME \'ADMIN.LOG[0-9][0-9][0-9]\' -EXEC RM {} \\  ', '', '0', '2017-12-25 17:10:47', '10', '1');
INSERT INTO `topic` VALUES ('3537', '18', '3', '程序管理的观察命令有： （）,（）, （） 等等；', '5c069bdb-a9c1-4376-8154-6eef1c719ba7.', null, null, null, null, null, null, 'PS   TOP  PSTREE', '', '0', '2017-12-25 17:11:01', '29', '1');
INSERT INTO `topic` VALUES ('3538', '24', '4', '我要增加一个路由规则，以 eth0 连接 192.168.100.100/24 这个网域，应该如何下达指令？', 'b46e40d5-9765-4b71-8457-b06bf21f3f40.', null, null, null, null, null, null, 'ROUTE ADD -NET 192.L68.100.0 NETMASK 255.255.255.0 DEV ETH0', '', '0', '2017-12-25 17:11:04', '48', '1');
INSERT INTO `topic` VALUES ('3539', '3', '4', 'ArrayList和Vector的区别,HashMap和Hashtable的区别', '24fd259c-9a43-4533-adcf-8ab2e4ef65fa.', null, null, null, null, null, null, '就ARRAYLIST与VECTOR主要从二方面来说.\r\n一.同步性:VECTOR是线程安全的，也就是说是同步的，而ARRAYLIST是线程序不安全的，不是同步的\r\n二.数据增长:当需要增长时,VECTOR默认增长为原来一培，而ARRAYLIST却是原来的一半\r\n就HASHMAP与HASHTABLE主要从三方面来说。\r\n一.历史原因:HASHTABLE是基于陈旧的DICTIONARY类的，HASHMAP是JAVA 1.2引进的MAP接口的一个实现\r\n二.同步性:HASHTABLE是线程安全的，也就是说是同步的，而HASHMAP是线程序不安全的，不是同步的\r\n三.值：只有HASHMAP可以让你将空值作为一个表的条目的KEY或VALUE', '', '0', '2017-12-25 17:11:18', '51', '1');
INSERT INTO `topic` VALUES ('3540', '5', '1', '代码分析：请看一下代码：（） ', 'c621b017-3a80-49f2-ba4d-a98162747f84.png', 'map.put(“jim”,map.get(“jim”)+100); ', 'map.set(“jim”,map.get(“jim”)+100); ', 'map.put(“jim”,234.5)', 'map.set(“jim”,234.5); ', '', '', 'A', '', '0', '2017-12-25 17:11:34', '50', '1');
INSERT INTO `topic` VALUES ('3541', '24', '4', '我的网络停顿的很厉害，尤其是连接到 tw.yahoo.com 的时候，那么我应该如何检查那个环节出了问题？', '33cdf20d-5ed5-43e2-8f62-11da88985378.', null, null, null, null, null, null, 'TRACEROUTE TW.YAHOO.COM', '', '0', '2017-12-25 17:11:40', '48', '1');
INSERT INTO `topic` VALUES ('3542', '26', '4', '我们知道 ftp 会启用两个 ports ，请问这两个 port 在哪里规范的 (以 vsftpd 为例)？而且，一般正规的 port 是几号？', 'aecba0b1-a038-4399-b71d-ce02accbdb29.', null, null, null, null, null, null, '主动式联机的时候，命令联机是由 CLIENT 端主动连接到服务器端，但是 FTP-DATA 则是由服务器端主动的联机到 CLIENT 端。至于被动式联机的时候，则不论 COMMAND 还是 FTP-DATA 的联机，服务器端都是监听客户端的要求的！', '', '0', '2017-12-25 17:11:48', '43', '1');
INSERT INTO `topic` VALUES ('3543', '4', '4', 'bean装配的定义 ', '0cf01635-3a55-4d87-8cab-97554bbc86a4.', null, null, null, null, null, null, '装配，或BEAN 装配是指在SPRING 容器中把BEAN组装到一起，前提是容器需要知道BEAN的依赖关系，如何通过依赖注入来把它们装配到一起。', '', '0', '2017-12-25 17:11:48', '59', '1');
INSERT INTO `topic` VALUES ('3544', '18', '3', 'nice 的给予可以有：（） ,（） ,（）等命令；', 'f72364f2-9ddd-4c1a-b9bd-cd9b4aeed241.', null, null, null, null, null, null, 'NICE   RENICE    TOP ', '', '0', '2017-12-25 17:11:49', '29', '1');
INSERT INTO `topic` VALUES ('3545', '4', '4', '自动装配有哪些局限性 ?', '426587c9-0e6c-4cb2-920d-ce1051ba9267.', null, null, null, null, null, null, '自动装配的局限性是：\r\n\r\n \r\n\r\n重写： 你仍需用 <CONSTRUCTOR-ARG>和 <PROPERTY> 配置来定义依赖，意味着总要重写自动装配。\r\n\r\n基本数据类型：你不能自动装配简单的属性，如基本数据类型，STRING字符串，和类。\r\n\r\n模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配。', '', '0', '2017-12-25 17:12:04', '52', '1');
INSERT INTO `topic` VALUES ('3547', '32', '4', '统计数据库中存在何种特殊的安全性问题？', 'b84ded0e-5c8d-4aa8-928d-8ade4b2c8bb3.', null, null, null, null, null, null, '统计数据库允许用户查询聚集类型的信息，如合计、平均值、最大值、最小值等，不允许查询单个记录信息。但是，人们可以从合法的查询中推导出不合法的信息，即可能存在隐蔽的信息通道，这是统计数据库要研究和解决的特殊的安全性问题。', '', '0', '2017-12-25 17:12:10', '67', '1');
INSERT INTO `topic` VALUES ('3548', '18', '4', '我发现我的 Linux 主机上面有个联机很怪异，想要将他断线，应该如何进行？', 'd3938abf-9ea7-453e-8004-070f0e18b77b.', null, null, null, null, null, null, '以 ROOT 的身份进行『NETSTAT -ANP |MORE』查出该联机的 PID，然后以『 KILL -9 PID 』踢掉该联机。', '', '0', '2017-12-25 17:12:16', '48', '1');
INSERT INTO `topic` VALUES ('3550', '18', '3', '硬连接只能建立对(      )链接', '958cfd91-8db9-4761-b7a6-ec8a87cafc1d.', null, null, null, null, null, null, '  文件 ', '', '0', '2017-12-25 17:12:29', '10', '1');
INSERT INTO `topic` VALUES ('3551', '18', '4', '你如何知道 green.ev.ncku.edu.tw 这部主机的 IP ？', 'a029c18d-e70e-4a68-a9a2-043688110261.', null, null, null, null, null, null, '方法很多，可以利用 HOST GREEN.EV.NCKU.EDU.TW 或 DIG GREEN.EV.NCKU.EDU.TW 或 NSLOOKUP GREEN.EV.NCKU.EDU.TW 等方法找出', '', '0', '2017-12-25 17:12:45', '48', '1');
INSERT INTO `topic` VALUES ('3552', '24', '2', 'netstat显示网络状态信息', '3d3e078d-4d09-4397-8090-b260ce7c2f81.', null, null, null, null, null, null, '正确', 'netstat   显示网络状态信息', '0', '2017-12-25 17:12:46', '30', '1');
INSERT INTO `topic` VALUES ('3553', '32', '4', '数据库的完整性概念与数据库的安全性概念有什么区别和联系？', 'cb7d4bf2-2382-4309-97f6-c0c35ccccadf.', null, null, null, null, null, null, '数据的完整性和安全性是两个不同的概念，但是有一定的联系。前者是为了防止数据库中存在不符合语义的数据，防止错误信息的输入和输出，即所谓垃圾进垃圾出（GARBAGE IN GARBAGE OUT）所造成的无效操作和错误结果。后者是保护数据库防止恶意的破坏和非法的存取。也就是说，安全性措施的防范对象是非法用户和非法操作，完整性措施的防范对象是不合语义的数据。', '', '0', '2017-12-25 17:12:54', '67', '1');
INSERT INTO `topic` VALUES ('3554', '4', '4', ' 什么是基于注解的容器配置?', 'a2b84cf0-d192-46b3-ba64-15b244cd3c6c.', null, null, null, null, null, null, '相对于XML文件，注解型的配置依赖于通过字节码元数据装配组件，而非尖括号的声明。\r\n开发者通过在相应的类，方法或属性上使用注解的方式，直接组件类中进行配置，而不是使用XML表述BEAN的装配关系。', '', '0', '2017-12-25 17:12:56', '52', '1');
INSERT INTO `topic` VALUES ('3555', '4', '4', 'bean的概念中自动装配定义', 'de32e9a5-ce25-4005-a45c-f611d499cb5c.', null, null, null, null, null, null, '\r\nSPRING 容器能够自动装配相互合作的BEAN，这意味着容器不需要<CONSTRUCTOR-ARG>和<PROPERTY>配置，能通过BEAN工厂自动处理BEAN之间的协作。', '', '0', '2017-12-25 17:13:22', '59', '1');
INSERT INTO `topic` VALUES ('3556', '18', '3', '安全性本文的一般配置为：（）其中又以 type 最重要；', 'c951b544-ebea-4fce-b864-5879f0e79426.', null, null, null, null, null, null, 'IDENTIFY:ROLE:TYPE', '', '0', '2017-12-25 17:13:52', '29', '1');
INSERT INTO `topic` VALUES ('3557', '18', '3', 'WC命令可以用于统计文件的信息，那么选项-c表示(          )', 'f00a163f-cc49-4f34-9a14-7dcec8460c2e.', null, null, null, null, null, null, ' 统计字节数', '', '0', '2017-12-25 17:13:53', '10', '1');
INSERT INTO `topic` VALUES ('3558', '18', '4', '请找出你的机器上面最适当的 MTU 应该是多少？', '114e75ed-efa8-4f15-9d74-4ac512cbfb1f.', null, null, null, null, null, null, '请利用『PING -C 3 -M DO -S MTU YOURIP 』找出你的 IP 的 MTU 数值。 事实上，你还可以先以 IP 设定网络卡较大的 MTU 后，在进行上述的动作，才能够找出网域内适合的 MTU。', '', '0', '2017-12-25 17:13:58', '48', '1');
INSERT INTO `topic` VALUES ('3559', '24', '3', '命令不会用了找 （）', 'c6042bc4-b1fa-4b0b-892c-7ef2ce2eae1c.', null, null, null, null, null, null, 'MAN ..', '', '0', '2017-12-25 17:14:12', '30', '1');
INSERT INTO `topic` VALUES ('3561', '33', '4', '什么是JVM？java虚拟机包括什么？', 'c34211dc-e270-4c9b-a254-a53d70421924.', null, null, null, null, null, null, 'JVM：JAVA虚拟机，运用硬件或软件手段实现的虚拟的计算机，JAVA虚拟机包括：寄存器，堆栈，处理器', '', '0', '2017-12-25 17:14:18', '51', '1');
INSERT INTO `topic` VALUES ('3562', '18', '4', 'SELinux 启动与关闭的配置档在： ', 'c9658548-50c7-410e-a458-a7f0a5c2f96f.', null, null, null, null, null, null, '/ETC/SELINUX/CONFIG', '', '0', '2017-12-25 17:14:30', '29', '1');
INSERT INTO `topic` VALUES ('3563', '26', '4', '简述linux系统的应用领域', '07e330af-97a8-48e5-98fe-0a9f1dfaa60e.', null, null, null, null, null, null, 'LIUNX系统的应用主要涉及四个方面：应用服务器、嵌入式领域、软件开发以及桌面应用，LINUX的长处主要在于服务器和嵌入式两个领域。', '', '0', '2017-12-25 17:14:33', '28', '1');
INSERT INTO `topic` VALUES ('3564', '33', '4', '什么是JDK？什么是JRE?', '27e29bf4-f285-4e62-89f8-156aca0bb526.', null, null, null, null, null, null, 'JDK：JAVA DEVELOPMENT KIT：JAVA开发工具包，是开发人员所需要安装的环境\r\nJRE：JAVA RUNTIME ENVIRONMENT：JAVA运行环境，JAVA程序运行所需要安装的环境', '', '0', '2017-12-25 17:14:48', '51', '1');
INSERT INTO `topic` VALUES ('3566', '18', '3', '选项-l表示(       )；选项-w表示(           )', '9ef08634-dde6-460a-9e98-3a5a9323b65d.', null, null, null, null, null, null, ' 统计行数. 统计字数 ', '', '0', '2017-12-25 17:14:59', '10', '1');
INSERT INTO `topic` VALUES ('3568', '18', '3', 'linux系统中进程管理工具较多，可以用来列出进程的树状结构的命令是( )', '3a25f342-b9e4-43e6-9914-ddfda6cb3f9a.', null, null, null, null, null, null, ' PSTREE  ', '', '0', '2017-12-25 17:15:16', '10', '1');
INSERT INTO `topic` VALUES ('3569', '24', '2', 'clear清屏', '19b565a2-8397-41b2-9ffb-7f488dc28d85.', null, null, null, null, null, null, '正确', 'clear清屏', '0', '2017-12-25 17:15:21', '30', '1');
INSERT INTO `topic` VALUES ('3570', '32', '4', 'DBMS的完整性控制机制应具有哪些功能？', 'b809edcd-7480-4b31-9347-a2f98e1dd970.', null, null, null, null, null, null, 'DBMS的完整性控制机制应具有三个方面的功能： 1. 定义功能，即提供定义完整性约束条件的机制。 2. 检查功能，即检查用户发出的操作请求是否违背了完整性约束条件。 3. 违约反应：如果发现用户的操作请求使数据违背了完整性约束条件，则采取一定的动作来保证数据的完整性。', '', '0', '2017-12-25 17:15:28', '67', '1');
INSERT INTO `topic` VALUES ('3571', '33', '4', '什么是数据结构？', '73a437b1-76c8-42bd-8c4e-d4db2541a056.', null, null, null, null, null, null, '计算机保存，组织数据的方式', '', '0', '2017-12-25 17:15:35', '51', '1');
INSERT INTO `topic` VALUES ('3572', '18', '3', '可以使用pgrep命令查找进程，用pgrep列出mingetty的进程号，使用的命令是(     )', 'd8cf9539-b20a-4b1c-8143-83b13b89778a.', null, null, null, null, null, null, '  PGREP -L MINGETTY', '', '0', '2017-12-25 17:15:45', '10', '1');
INSERT INTO `topic` VALUES ('3573', '26', '4', '简述linux和windows系统的区别与联系。', '4bf62244-f068-405e-aeba-9d5eea85beb8.', null, null, null, null, null, null, '共性：1.都是多用户操作系统，2.支持多种文件系统，3.支持多种端口设备，4.支持联网功能，5.都提供服务。  区别：1.应用目标不同，2.图形界面化不同，3.文件扩展名不同，4.重新引导功能不同，5.命令区分大小写。', '', '0', '2017-12-25 17:15:47', '28', '1');
INSERT INTO `topic` VALUES ('3574', '4', '4', ' 解释不同方式的自动装配 。', '8a8b10d4-9843-46dc-b0b8-59ebcecd0294.', null, null, null, null, null, null, '有五种自动装配的方式，可以用来指导SPRING容器用自动装配方式来进行依赖注入。\r\n\r\nNO：默认的方式是不进行自动装配，通过显式设置REF 属性来进行装配。\r\nBYNAME：通过参数名 自动装配，SPRING容器在配置文件中发现BEAN的AUTOWIRE属性被设置成BYNAME，之后容器试图匹配、装配和该BEAN的属性具有相同名字的BEAN。\r\nBYTYPE:：通过参数类型自动装配，SPRING容器在配置文件中发现BEAN的AUTOWIRE属性被设置成BYTYPE，之后容器试图匹配、装配和该BEAN的属性具有相同类型的BEAN。如果有多个BEAN符合条件，则抛出错误。\r\nCONSTRUCTOR：这个方式类似于BYTYPE， 但是要提供给构造器参数，如果没有确定的带参数的构造器参数类型，将会抛出异常。\r\nAUTODETECT：首先尝试使用CONSTRUCTOR来自动装配，如果无法工作，则使用BYTYPE方式。', '', '0', '2017-12-25 17:15:49', '59', '1');
INSERT INTO `topic` VALUES ('3576', '3', '4', '什么是OOP?', '8dd01f06-e145-4c29-84d6-65107d81065b.', null, null, null, null, null, null, '面向对象编程', '', '0', '2017-12-25 17:16:11', '51', '1');
INSERT INTO `topic` VALUES ('3578', '18', '3', '；用killall命令重载syslogd进程的命令是(      ) ', '51654759-1a1e-44dd-85ad-2c5e4639d727.', null, null, null, null, null, null, 'PS -EF|GREP SYSLOGD     KILLALL -1 SYSLOGD', '', '0', '2017-12-25 17:16:22', '10', '1');
INSERT INTO `topic` VALUES ('3579', '4', '4', '自动装配的局限性有哪些                        ', '7ce8f2c6-5a77-4104-9c11-ff4877c28449.', null, null, null, null, null, null, '自动装配的局限性是：\r\n\r\n重写： 你仍需用 <CONSTRUCTOR-ARG>和 <PROPERTY> 配置来定义依赖，意味着总要重写自动装配。\r\n基本数据类型：你不能自动装配简单的属性，如基本数据类型，STRING字符串，和类。\r\n模糊特性：自动装配不如显式装配精确，如果有可能，建议使用显式装配', '', '0', '2017-12-25 17:16:27', '59', '1');
INSERT INTO `topic` VALUES ('3580', '3', '4', '类与对象的关系?', '14ef01fc-319b-407f-858d-4d3ee393b1cc.', null, null, null, null, null, null, '类是对象的抽象，对象是类的具体，类是对象的模板，对象是类的实例', '', '0', '2017-12-25 17:16:28', '51', '1');
INSERT INTO `topic` VALUES ('3581', '26', '1', '下列代码的运行结果是（）：', 'fc01ed09-3176-41b2-afb7-256c716dc635.png', ' [One,_One_] ', ' [_One_,One] ', ' [One,One] ', '[_One_,_One_] ', '', '', 'B', '改变时候创建了新的对象，所以以前的没变化 ', '0', '2017-12-25 17:16:29', '50', '1');
INSERT INTO `topic` VALUES ('3582', '3', '4', '什么是隐式转换，什么是显式转换', 'd31d8d31-9749-4726-a030-dc391663a814.', null, null, null, null, null, null, '显示转换就是类型强转，把一个大类型的数据强制赋值给小类型的数据；隐式转换就是大范围的变量能够接受小范围的数据；隐式转换和显式转换其实就是自动类型转换和强制类型转换。', '', '0', '2017-12-25 17:16:39', '51', '1');
INSERT INTO `topic` VALUES ('3583', '18', '4', '如何在终端机接口上面进行 WWW 浏览？又该如何下载 WWW 上面提供的档案？', 'fbf3c7a3-f41d-4517-a0f9-165972a6059c.', null, null, null, null, null, null, '要浏览可以使用 LINKS 或 LYNX ，至于要下载则使用 WGET 这个软件。', '', '0', '2017-12-25 17:16:44', '48', '1');
INSERT INTO `topic` VALUES ('3584', '3', '4', 'Char类型能不能转成int类型？能不能转化成string类型，能不能转成double类型', 'fe33c188-09f8-4ff1-97ec-b95cdb7bbd2b.', null, null, null, null, null, null, 'CHAR在JAVA中也是比较特殊的类型，它的INT值从1开始，一共有2的16次方个数据；CHAR', '', '0', '2017-12-25 17:16:56', '51', '1');
INSERT INTO `topic` VALUES ('3585', '32', '4', '数据字典的内容是什么？', 'c1f609a5-1cde-4956-825e-957357f0427f.', null, null, null, null, null, null, '数据字典是系统中各类数据描述的集合。数据字典的内容通常包括： 数据项、数据结构、数据流、数据存储、 处理过程五个部分其中数据项是数据的最小组成单位，若干个数据项可以组成一个数据结构。数据字典通过对数据项和数据结构的定义来描述数据流、数据存储的逻辑内容。', '', '0', '2017-12-25 17:17:03', '67', '1');
INSERT INTO `topic` VALUES ('3587', '26', '4', '简述有哪些主流的linux发行版本。', '1d54e198-ea20-4776-a567-007ebfe6b4fb.', null, null, null, null, null, null, '1.MANDRIVA  2.RED HAT  3.SUSE  4.DEBIAN  5.UBUNTU 6.GENTOO 7.SLACKWARE 8.RED  FLAG', '', '0', '2017-12-25 17:17:20', '28', '1');
INSERT INTO `topic` VALUES ('3588', '32', '4', '事务的基本概念是什么？', '8bff35cb-86b5-47a7-94dc-f5d5b2a97bb0.', null, null, null, null, null, null, '事务是若干数据库操作语句的集合，这个集合中的操作作为一个整体，要么都完成，要么都取消。事务一个原子单位，用于完成用户特定的任务。', '', '0', '2017-12-25 17:18:19', '67', '1');
INSERT INTO `topic` VALUES ('3589', '26', '4', '如果我有一颗硬盘在 A 主机上面安装了 Linux 之后，拿到另一台配备相同的 B 主机上面去进行开机，结果竟然无法顺利开机，你认为可能的原因是什么？如果我有一颗硬盘在 A 主机上面安装了 Linux 之后，拿到另一台配备相同的 B 主机上面去进行开机，结果竟然无法顺利开机，你认为可能的原因是什么？', '4eab0dc6-425e-4935-8ca2-709a86fdc3ea.', null, null, null, null, null, null, '不能开机常常是因为找不到根目录的位置，而根目录找不到通常就是磁盘的装置文件名错误所致。目前由于 /ETC/FSTAB 配合 FILESYSTEM 都使用 LABEL NAME ，所以不容易发生这样的情况。但如果你曾经自行手动处理过 /ETC/FSTAB 的话，那就必须要注意磁盘的装置文件名了！ 透过修改 /ETC/FSTAB 以及 /BOOT/GRUB/MENU.LST 或许能够得到方法解决。', '自己想', '0', '2017-12-25 17:18:21', '47', '1');
INSERT INTO `topic` VALUES ('3590', '24', '3', 'Linux系统的日志管理功能非常强大，常用的安全日志文件有(  )', 'b06ab614-b841-4a6b-80cb-301d68d82b19.', null, null, null, null, null, null, ' UTMP、WTMP和LASTLOG  ', '', '0', '2017-12-25 17:18:33', '10', '1');
INSERT INTO `topic` VALUES ('3591', '4', '4', '怎样开启注解装配？', '598af89a-7eee-48c9-b5a4-ea41512a9c16.', null, null, null, null, null, null, '注解装配在默认情况下是不开启的，为了使用注解装配，我们必须在SPRING配置文件中配置 <CONTEXT:ANNOTATION-CONFIG/>元素。', '', '0', '2017-12-25 17:18:35', '59', '1');
INSERT INTO `topic` VALUES ('3592', '26', '4', '简述设置计算机IP地址的方法。', 'b9fc68c4-48a0-4b3c-a68d-2a1bf37e8cda.', null, null, null, null, null, null, '（1）通过DHCP自动配置TCP/IP属性值。（2）给计算机配置静态的TCP/IP属性值。', '', '0', '2017-12-25 17:18:43', '28', '1');
INSERT INTO `topic` VALUES ('3593', '26', '4', '桌面背景可以设置成哪些样式？ ', '35ed62ba-e3f3-4c77-90b8-12d96fe7250d.', null, null, null, null, null, null, '使用“外观首选项”工具可以更改桌面的背景，可以从/USR/SHARE/BACKGROUNDS/目录中选择图像，也可以使用自己的图像。', '', '0', '2017-12-25 17:19:05', '28', '1');
INSERT INTO `topic` VALUES ('3594', '18', '4', '在终端机接口中，如何连接 bbs.sayya.org 这个 BBS ？', 'b0929eae-e41c-45dc-a0bd-bd1a8b540c43.', null, null, null, null, null, null, '利用 TELNET BBS.SAYYA.ORG 即可连接上', '', '0', '2017-12-25 17:19:27', '48', '1');
INSERT INTO `topic` VALUES ('3595', '18', '3', '重设 SELinux 的安全性本文可使用 （） 与 （）', '53f0292c-4b67-409b-aaa5-649a246cddb6.', null, null, null, null, null, null, 'RESTORECON   CHCON', '', '0', '2017-12-25 17:19:37', '29', '1');
INSERT INTO `topic` VALUES ('3596', '32', '4', '叙述存储过程的概念及优点。', 'bcf27cc2-5046-4a07-a38e-5b96a7495582.', null, null, null, null, null, null, '存储过程是一种数据库对象，由SQL语句、变量、常量及程序控制语句组成的程序，在创建时被编译，然后已编译的代码形式存储在数据库的服务器中。  优点是：它可以在服务器端运行而且不需要编译，直接调用已编译好的二进制代码执行，速度很快；另外，通过存储过程访问数据库也提高了数据库的安全性。', '', '0', '2017-12-25 17:19:49', '67', '1');
INSERT INTO `topic` VALUES ('3597', '24', '3', '针对日志文件的服务是( ', '456f1630-32f6-4f90-ad0b-ab3d957c9748.', null, null, null, null, null, null, '   SYSLOG    ', '', '0', '2017-12-25 17:19:49', '10', '1');
INSERT INTO `topic` VALUES ('3598', '26', '4', '使用系统监视器可以查看哪些信息？', '755dc38c-7264-4058-b855-3d66672fa45c.', null, null, null, null, null, null, '使用“系统监视器”可以查看FEDORA 8系统的系统信息、进程信息、资源信息以及文件系统信息。', '', '0', '2017-12-25 17:19:50', '28', '1');
INSERT INTO `topic` VALUES ('3599', '3', '4', '一个java类中包含那些内容？', '7ba386d8-0cc3-45d6-ab2a-0c785699f161.', null, null, null, null, null, null, '属性、方法、内部类、构造方法、代码块。', '', '0', '2017-12-25 17:19:51', '51', '1');
INSERT INTO `topic` VALUES ('3600', '18', '2', '使用shutdown -k命令并不真正使系统关机', 'c8c7dadd-11fb-4f88-b8ff-ae594b0ed346.', null, null, null, null, null, null, '正确', '使用shutdown -k命令并不真正使系统关机，而只是给用户提出警告。', '0', '2017-12-25 17:20:44', '36', '1');
INSERT INTO `topic` VALUES ('3601', '24', '3', '而且linux系统中可以将日志文件轮替，使用的应用程序是(   )；', 'a005326c-7703-481c-84f3-16240f3f4aba.', null, null, null, null, null, null, ' LOGROTATE   ', '', '0', '2017-12-25 17:20:45', '10', '1');
INSERT INTO `topic` VALUES ('3602', '26', '4', 'fedora 8系统默认使用的桌面环境是什么？', 'd199b0b3-05c6-4509-be2f-6a3fad5218e2.', null, null, null, null, null, null, 'FEDORA 8系统默认图形化桌面环境是GNOME', '', '0', '2017-12-25 17:20:47', '28', '1');
INSERT INTO `topic` VALUES ('3603', '3', '4', '例如： if(a+1.0=4.0)，这样做好吗？', '05c1295b-cdbe-4d2f-89c5-4b9942e4fea9.', null, null, null, null, null, null, '不好，因为计算机在浮点型数据运算的时候，会有误差，尽量在布尔表达式中不使用浮点型数据(IF,WHILE,SWITCH中判断条件不使用浮点型)', '', '0', '2017-12-25 17:20:52', '51', '1');
INSERT INTO `topic` VALUES ('3604', '4', '4', '. @Required  注解', '905d6e2d-bf00-4858-acea-5428191327e5.', null, null, null, null, null, null, '这个注解表明BEAN的属性必须在配置的时候设置，通过一个BEAN定义的显式的属性值或通过自动装配，若@REQUIRED注解的BEAN属性未被设置，容器将抛出BEANINITIALIZATIONEXCEPTION。', '', '0', '2017-12-25 17:20:52', '59', '1');
INSERT INTO `topic` VALUES ('3605', '24', '3', '这2个日志相关的应用程序的配置文件分别是(    )。', 'b95968a8-bf61-44cc-ba1a-88b45b7e388c.', null, null, null, null, null, null, ' /ETC/SYSLOGD.CONF 和  /ETC/LOGROTATE.CONF       ', '', '0', '2017-12-25 17:21:03', '10', '1');
INSERT INTO `topic` VALUES ('3606', '26', '4', '当你利用你的 MTA 发信时，结果竟然被退信，退信的讯息 (/var/log/maillog) 最主要的错误是『mail loop to me』， 请问可能的发生原因及处理方式为何？', '2ef4f2ae-34b0-44b8-bc88-e89e9cab8301.', null, null, null, null, null, null, '可能发生的原因是由于你的 MTA 设定项目方面的主机名错误。判断你的 MTA 主机有多个 IP 存在， 不过你并未完全写入配置文件中，因此造成某些主机名无法被 MTA 所接收之故。在 SENDMAIL 方面， 你只要将需要的主机名写入 /ETC/MAIL/LOCAL-HOST-NAMES 即可，如果是 POSTFIX ，则在 /ETC/POSTFIX/MAIN.CF 当中修改 $MYDESTINATION 那个设定项目即可。', '', '0', '2017-12-25 17:21:07', '47', '1');
INSERT INTO `topic` VALUES ('3607', '26', '4', '网络时间协议（NTP）守护进程有什么作用？', 'c19f8ef4-65f8-4533-a287-2eef6a794a67.', null, null, null, null, null, null, '守护进程使用远程时间服务器或时间源（如卫星）来同步系统时钟，该程序允许配置NFS守护进程来与远程服务器同步系统时钟。', '', '0', '2017-12-25 17:21:10', '28', '1');
INSERT INTO `topic` VALUES ('3608', '18', '3', 'linux系统中常用的系统维护和监控工具，w和last命令的作用分别是什么(    )', '04fb0461-7920-4066-bef2-bc22057f1150.', null, null, null, null, null, null, '显示目前登入系统的用户信息    )和(  列出目前与过去登入系统的用户相关信息 ', '', '0', '2017-12-25 17:21:31', '10', '1');
INSERT INTO `topic` VALUES ('3609', '18', '3', '若要管理默认的 SELinux 布林值，可使用 （）, （）来管理！', '620e56d4-77ad-45f5-a9fa-129b5e60cb87.', null, null, null, null, null, null, 'GETSEBOOL   SETSEBOOL ', '', '0', '2017-12-25 17:21:32', '29', '1');
INSERT INTO `topic` VALUES ('3610', '26', '4', '请列出四个 Mail Server 的相关的组件，以及其功用为何？', '74420784-8c7f-402c-9e49-627f288282d8.', null, null, null, null, null, null, 'MAIL CLIENT ：邮件客户端，其实就是使用 MAIL 的那位用户所在的计算机即可称为 MAIL CLIENT ；\r\nMAIL USER AGENT ：为一个应用软件，主要的功能就是收受邮件主机的电子邮件，以及提供用户浏览与编写邮件的功能；\r\nMAIL TRANSFER AGENT ：为在计算机与本地端 MAIL SERVER 或 INTERNET 上面的 MAIL SERVER 传送讯息与邮件的主机；\r\nMAIL DILIVERY AGENT ：主要的功能就是将 MTA 所收受的本机信件，放置到本机账户下的邮件档案中 ( MAILBOX )！', '', '0', '2017-12-25 17:21:34', '47', '1');
INSERT INTO `topic` VALUES ('3611', '4', '4', ' @Autowired 注解', '16c5ea66-781a-416a-856e-a169f07d3158.', null, null, null, null, null, null, ' @AUTOWIRED 注解\r\n\r\n@AUTOWIRED 注解提供了更细粒度的控制，包括在何处以及如何完成自动装配。它的用法和@REQUIRED一样，修饰SETTER方法、构造器、属性或者具有任意名称和/或多个参数的PN方法。', '', '0', '2017-12-25 17:21:42', '59', '1');
INSERT INTO `topic` VALUES ('3612', '24', '3', '同时linux系统也自带了一个功能强大的文件系统检查和修复工具是(  )', 'fbd2a1c8-0d2a-46f2-955c-2d527196e571.', null, null, null, null, null, null, '  FSCK  ', '', '0', '2017-12-25 17:21:47', '10', '1');
INSERT INTO `topic` VALUES ('3613', '26', '4', '系统日志一般保存在哪些目录下？ ', 'fa8f7fda-dff8-49b2-ad28-5b93c417779b.', null, null, null, null, null, null, '一般情况，日志记录包括记录用户登录时间、登录地点、进行什么操作等内容', '', '0', '2017-12-25 17:21:52', '28', '1');
INSERT INTO `topic` VALUES ('3614', '26', '4', 'POP3 与 SMTP 的功能为何？', '79ec53bd-1447-419e-9500-a3e39e0b8e8f.', null, null, null, null, null, null, 'SMTP 为使用于 MUA 或 MTA 与 MTA 之间的传输协议，通常使用 PORT 25 ，只要主机支持 SMTP ，并且其他 RELAY 的条件能配合，就可以进行邮件传递！\r\nPOP3 可以提供使用者经由 MUA 到 MTA 下载邮件，同时并可将邮件从主机上面删除！', '', '0', '2017-12-25 17:21:52', '47', '1');
INSERT INTO `topic` VALUES ('3615', '24', '3', 'vmstat是Virtual Meomory Statistics（虚拟内存统计）的缩写, 是实时系统监控工具。在使用vmstat进行系统性能分析时，输出的信息共有6类，分别是(   )。', 'eebb524d-389a-4183-a194-ca8818d7fa33.', null, null, null, null, null, null, 'PROCS  MEMORY  SWAP   IO   SYSTEM   CPU   ', '', '0', '2017-12-25 17:22:08', '10', '1');
INSERT INTO `topic` VALUES ('3616', '26', '5', '手工运行fsck的最好时机是在系统备份文件之后，这样在发现错误后，还可以利用备份文件进行修复', null, null, null, null, null, null, null, null, '手工运行fsck的最好时机是在系统备份文件之后，这样在发现错误后，还可以利用备份文件进行修复', '0', '2017-12-25 17:22:09', '36', '1');
INSERT INTO `topic` VALUES ('3617', '26', '4', '请简单的说明 DNS 里面 MX 标志与 Mail 的关系为何？', 'bdbc5018-f19a-431d-9770-a693457a99f4.', null, null, null, null, null, null, 'MX RECODE 可以可以让 MAIL SERVER 经由 MX 以及 A ( ADDRESS ) 这个记录来进行 MAIL GATEWAY 与 MAIL ROUTE 的功能！能够达到的作用相当的多！', '', '0', '2017-12-25 17:22:11', '47', '1');
INSERT INTO `topic` VALUES ('3618', '26', '4', '简述进入命令行界面有哪些？', '14e7239a-d3c1-452f-82e1-7bef352ba138.', null, null, null, null, null, null, '1.通过字符界面  2.图形界面下的终端  3.虚拟控制台等多种方式。', '', '0', '2017-12-25 17:22:16', '28', '1');
INSERT INTO `topic` VALUES ('3619', '18', '3', 'super daemon 由于是经过一个统一的 xinetd 来管理，因此可以具有（）功能。', '2199e2d4-1f0b-4368-9a61-a1893181454d.', null, null, null, null, null, null, '类似防火墙管理', '', '0', '2017-12-25 17:22:26', '29', '1');
INSERT INTO `topic` VALUES ('3620', '26', '4', '什么是 mailling list ？在 postfix 底下有什么方法可以不藉由其他的软件达到 mailling list 的功能？', '6e06ef67-0979-4fc8-92e0-85a78620d9f5.', null, null, null, null, null, null, 'MAILLING LIST 就是将使用者寄给一个账号邮件时，该账号会主动的将该邮件传送到所有的用户去！有点类似目前的电子报！在 SENDMAIL 底下，我们可以透过 ALIASES (需配合 NEWALIASES) 以及 ~/.FORWARD 来达成喔！', '', '0', '2017-12-25 17:22:29', '47', '1');
INSERT INTO `topic` VALUES ('3621', '18', '4', '为什么我架设了防火墙，我的主机还是可能中毒？', 'e04ede30-54f5-469f-b7cf-e0586de44648.', null, null, null, null, null, null, '防火墙不是万灵丹，他还是可能被病毒或者是木马程序所入侵的！ 此外，如果你的主机本身就已经提供了多个网络服务，则当该网络服务的软件有漏洞时， 防火墙仍然无法克服该服务的漏洞的！因此仍然需要持续的进行主机的监视与后端分析工作', '', '0', '2017-12-25 17:22:42', '48', '1');
INSERT INTO `topic` VALUES ('3622', '4', '4', '在Spring框架中如何更有效地使用JDBC? ', '882f199e-4314-455d-b204-a9761d51013d.', null, null, null, null, null, null, '使用SPRINGJDBC 框架，资源管理和错误处理的代价都会被减轻。所以开发者只需写STATEMENTS 和 QUERIES从数据存取数据，JDBC也可以在SPRING框架提供的模板类的帮助下更有效地被使用，这个模板叫JDBCTEMPLATE ', '', '0', '2017-12-25 17:22:42', '59', '1');
INSERT INTO `topic` VALUES ('3623', '18', '2', 'syslogd守护进程，不仅可以将日志记录在本地机message文件中，还可以将日志记录通过网络发送出去。', '537b450e-fd95-4979-a78d-7ca0238bc729.', null, null, null, null, null, null, '正确', 'syslogd守护进程，不仅可以将日志记录在本地机message文件中，还可以将日志记录通过网络发送出去。', '0', '2017-12-25 17:22:50', '36', '1');
INSERT INTO `topic` VALUES ('3624', '26', '4', '磁盘分区有哪些方式？', 'b586c21f-8ca8-4e6a-8f95-9dbf912ff3cb.', null, null, null, null, null, null, '自动分区方式   手工分区方式', '', '0', '2017-12-25 17:22:52', '28', '1');
INSERT INTO `topic` VALUES ('3625', '26', '2', 'Samba服务器可以设置成在网络下对外宣称自己是一个Windows NT服务器或Win95客户机。', '2a011d08-be25-4422-8605-99554ec554be.', null, null, null, null, null, null, '正确', 'Samba服务器可以设置成在网络下对外宣称自己是一个Windows NT服务器或Win95客户机。', '0', '2017-12-25 17:23:07', '36', '1');
INSERT INTO `topic` VALUES ('3626', '18', '3', 'nmap是linux系统下功能强大的端口扫描工具，用nmap扫描192.168.0.0/24网段活跃的主机命令是(  )', '04bae1ee-f207-4e94-a2e4-da5b93094416.', null, null, null, null, null, null, ' NMAP -SP 192.168.0.0/24    ', '', '0', '2017-12-25 17:24:09', '10', '1');
INSERT INTO `topic` VALUES ('3628', '4', '4', 'Spring对DAO的支持', '953fbb3b-11f9-4b27-9b69-82ba927fe3f6.', null, null, null, null, null, null, 'SPRING对数据访问对象（DAO）的支持旨在简化它和数据访问技术如JDBC，HIBERNATE OR JDO 结合使用。这使我们可以方便切换持久层。编码时也不用担心会捕获每种技术特有的异常。', '', '0', '2017-12-25 17:24:09', '59', '1');
INSERT INTO `topic` VALUES ('3629', '26', '4', '请说明为何架设了防火墙，我的主机还是可能被入侵？入侵的依据可能是什么方法？', '2760d69f-d8ba-4bbb-a55f-60dc5354a680.', null, null, null, null, null, null, '因为防火墙仅是抵挡某些不受欢迎的封包，如果你有开放 WWW 的服务时，则要求你主机 PORT 80 的封包将可直接进入你的主机，万一 WWW 套件有漏洞时，那么就可能被入侵了！所以软件的更新很重要！', '', '0', '2017-12-25 17:24:12', '48', '1');
INSERT INTO `topic` VALUES ('3630', '26', '4', '什么是 Open Relay？', '9199663c-6206-4304-877c-5a90767f1c3f.', null, null, null, null, null, null, '所谓的 OPEN RELAY 就是，不论发信端来自何处，您的 OPEN RELAY 的主机均可以帮发信端将信件发送出去，这个称为 OPEN RELAY 。如果您的 MAIL SERVER 具有 OPEN RELAY 的情况，那么很容易遭受到垃圾邮件的填充， 不但造成网络带宽的耗损，也容易让您的主机被列入黑名单当中！', '', '0', '2017-12-25 17:24:29', '47', '1');
INSERT INTO `topic` VALUES ('3631', '18', '2', 'out是现代Linux的可执行文件、目标文件和系统函数库的标准格式。', '9aeb3946-2a72-4b59-90ea-38dd41929b57.', null, null, null, null, null, null, '正确', 'out是现代Linux的可执行文件、目标文件和系统函数库的标准格式。', '0', '2017-12-25 17:25:05', '36', '1');
INSERT INTO `topic` VALUES ('3632', '18', '4', 'Linux系统关机需要注意什么？', '6893bc9f-6480-4099-a348-eb1856c437f1.', null, null, null, null, null, null, 'LINUX不可以随意关机，否则会造成文件系统错乱或者是其他无法启动的问题', '', '0', '2017-12-25 17:25:18', '29', '1');
INSERT INTO `topic` VALUES ('3633', '32', '4', '什么是数据词典？它的主要作用是什么？', 'dbee2530-3087-477b-b881-34c2bf8bba2a.', null, null, null, null, null, null, '数据词典是用来描述数据库中有关信息的数据目录；作用:起着系统状态目录表的作用', '', '0', '2017-12-25 17:25:31', '67', '1');
INSERT INTO `topic` VALUES ('3634', '18', '3', '用nmap扫描192.168.0.0/24网段的端口,端口范围在1-1024命令是（  ）   ', 'eb24b4c9-41f9-4699-a939-debb6f13f5ba.', null, null, null, null, null, null, ' NMAP -P 1-1024 192.168.0.0/24', '', '0', '2017-12-25 17:25:48', '10', '1');
INSERT INTO `topic` VALUES ('3635', '26', '4', '我们知道核心为 2.6 的 Linux 使用的防火墙机制为 iptables ，请问，如何知道我的 Linux 核心版本？', '1fa83d71-6101-4b28-8f39-94d481d35c2b.', null, null, null, null, null, null, '利用 UNAME -R 可以查得！', '', '0', '2017-12-25 17:26:32', '48', '1');
INSERT INTO `topic` VALUES ('3636', '18', '3', '如果想变更帐号为benet并执行/command，所需要的命令是：(    ', 'ad556f35-d744-4d7b-a2b0-182e914f269c.', null, null, null, null, null, null, 'SU –L /COMMAND BENET   ', '', '0', '2017-12-25 17:26:41', '10', '1');
INSERT INTO `topic` VALUES ('3637', '18', '2', '安装过程中，如果是使用fdisk分区工具，我们必须十分小心，因为对分区表所作的修改在每一步完成后，都会立刻反映到分区表上，除非在第二次打开fdisk后，选择删除新分区，再重新分区。', 'a1285d0e-893a-4787-90fd-6f08d6a23a97.', null, null, null, null, null, null, '正确', '安装过程中，如果是使用fdisk分区工具，我们必须十分小心，因为对分区表所作的修改在每一步完成后，都会立刻反映到分区表上，除非在第二次打开fdisk后，选择删除新分区，再重新分区。', '0', '2017-12-25 17:27:15', '36', '1');
INSERT INTO `topic` VALUES ('3638', '26', '4', '如果要让 Postfix 可以收发来自非本机的外部信件，您可以修改 main.cf 里面的什么参数？', '2564aa30-ebb6-490b-a86b-41e46d39b4c5.', null, null, null, null, null, null, '需要在 MAIN.CF 里面修改的变量主要有：\r\n当 CLIENT 来自信任的网域，也就是 IP 符合 $MYNETWORKS 的设定值时；\r\n当 CLIENT 来自信任的机器，也就是主机名符合 $RELAY_DOMAINS 的设定项目时；\r\n当 CLIENT 来自不信任的网域，但是去的目的地主机端符合 $RELAY_DOMAINS 的设定时。', '', '0', '2017-12-25 17:27:23', '47', '1');
INSERT INTO `topic` VALUES ('3639', '26', '3', '•	计算机的五大单元包括：___、 ___、___、___与___五大部分；', 'fc9e9e9b-538a-49b9-8ee2-a07ccfe92c31.', null, null, null, null, null, null, '•	计算机的五大单元包括：输入单元、 输出单元、CPU内部的控制单元、算数逻辑单元与主内存五大部分；', '', '0', '2017-12-25 17:27:44', '28', '1');
INSERT INTO `topic` VALUES ('3640', '26', '3', '列印组件主要有：（）、（）、（）、（）、（）', 'd3c3c1b9-52ff-4c4d-a111-86a6622d4f9d.', null, null, null, null, null, null, '列印命令  列印工作   列印伫列  列印服务  打印机', '', '0', '2017-12-25 17:27:53', '29', '1');
INSERT INTO `topic` VALUES ('3641', '26', '4', '如何察看您目前的 Postfix 服务器的所有设定参数？(使用什么指令？)', 'b23910f9-a905-4b1c-95f0-6d3c940524dc.', null, null, null, null, null, null, '利用 POSTCONF -N 可以察看『目前 MAIN.CF 里面设定的参数』，而如果要看', '', '0', '2017-12-25 17:28:23', '47', '1');
INSERT INTO `topic` VALUES ('3642', '26', '2', '•	一般要求swap应该要是1.5~2倍的实体内存量；', '7ed064c0-b897-4bb7-a5aa-8a4c89b3153c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 17:28:31', '28', '1');
INSERT INTO `topic` VALUES ('3643', '26', '4', 'Mail Server 能否运作与 DNS ( MX 与 A recode )的相关性为何？', '8177c492-966e-4c1c-beae-16106d6bce41.', null, null, null, null, null, null, '目前因特网社会合法的 MAIL SERVER 通常仅会针对具有 MX 标志的邮件主机发出信件而已。 而如果有多重 MX 时，首先会选择最小 MX 主机寄信，依序处理。而最终依据 MX 主机的 A 标志来查得最终目标。', '', '0', '2017-12-25 17:28:44', '47', '1');
INSERT INTO `topic` VALUES ('3644', '26', '4', '什么是 smtp, pop3 以及 imap 协议，他们的用途分别是什么？', '76e20b89-a343-41c0-88a6-0967258bb209.', null, null, null, null, null, null, 'SMTP：用来传递邮件的协议，通常我们称为 MTA 即是此一协议所达成\r\nPOP3：让 CLIENT 端向主机端要求收信的协议，通常预设收信完成后，主机端的 MAIL BOX 会被删除；\r\nIMAP：与 POP3 类似，不过 IMAP 允许用户在主机的家目录建立邮件数据匣\r\n', '', '0', '2017-12-25 17:29:07', '47', '1');
INSERT INTO `topic` VALUES ('3645', '26', '2', '•	rmdir 仅能删除空目录，要删除非空目录需使用『 rm -r 』命令；', 'c3612cdb-6889-4294-89a0-c0130bdee4a6.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 17:29:31', '28', '1');
INSERT INTO `topic` VALUES ('3646', '26', '2', '•	touch 的目的在修改文件的时间参数，但亦可用来创建空文件', '4243b316-a034-4373-a1c2-dde87a1cb7a2.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 17:30:12', '28', '1');
INSERT INTO `topic` VALUES ('3647', '26', '4', 'Apache 的設定檔檔名一般為何？', 'ba5cea62-8495-4288-8794-76a908cff33b.', null, null, null, null, null, null, 'APACHE 的設定檔檔名為 HTTPD.CONF ，不過，由於 HTTPD.CONF 內容參數可以使用『 INCLUDE \"額外設定檔名\"』，所以也可能具有其他的額外設定檔喔！', '', '0', '2017-12-25 17:30:24', '47', '1');
INSERT INTO `topic` VALUES ('3648', '26', '4', '在 Apache 的設定檔當中，哪一個參數是用來設定『主網頁』的？', '616de03a-6588-4eed-a5c7-d502141c083a.', null, null, null, null, null, null, '設定主網頁的參數為：DOCUMENTROOT 喔！後面接的是主網頁放置的『目錄』！', '', '0', '2017-12-25 17:30:40', '47', '1');
INSERT INTO `topic` VALUES ('3649', '26', '2', '•	搜寻命令的完整档名可用 which 或 type ，这两个命令都是透过 PATH 变量来搜寻档名；', '140dcd6c-9a21-44db-8bc4-2cd4322c0418.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 17:30:41', '28', '1');
INSERT INTO `topic` VALUES ('3650', '24', '3', '、为了加强系统安全性，可以设置grub密码，grub密码有2种类型，分别是(   ', 'ee3d2ff6-1850-43d8-b508-65d57b3cb51a.', null, null, null, null, null, null, '全局密码    )和(  菜单密码   ', '', '0', '2017-12-25 17:30:47', '10', '1');
INSERT INTO `topic` VALUES ('3651', '26', '4', '當我使用 ps -aux 的時候，發現好多的 NFS 的主要配置文件为何？而在该档案内主要设定项目为何？', '922db36f-2330-403c-8b99-c4a146e771f1.', null, null, null, null, null, null, '主要的配置文件为 /ETC/EXPORTS 而至于其设定的内容项目在每一行当中则为：\r\n分享的目录\r\n针对此分享目录开放的主机或 IP或网域\r\n针对这部主机所开放的权限参数！', '', '0', '2017-12-25 17:32:05', '47', '1');
INSERT INTO `topic` VALUES ('3652', '26', '1', 'RHELServer5系统启动时默认由以下哪个系统引导程序实施系统加载？', 'f83bc327-8402-4dce-8c90-c2cdd627db59.', 'GRUB', 'LILO', 'KDE', 'GNOME', '', '', 'A', 'RHELServer5采用GRUB引导装载程序来实现多重引导，GRUB提供给用户交互式的图形界面，还允许用户定制个性化的图型界面。GRUB不但可以通过配置文件进行系统引导，还可以在引导前动态改变引导参数，动态加载各种设备。GRUB的配置文件为grub.conf，默认保存于/etc目录。', '0', '2017-12-25 17:34:57', '7', '1');
INSERT INTO `topic` VALUES ('3653', '18', '4', '假设现在所使用的磁盘是SCSI接口，当前由于系统负载过大，物理内存和交换分区空间不足，为了暂时增加存储空间，要求建立一个500M的交换空间，并设置改交换空间开机自动挂载请写出创建步骤。', '3f68799c-b7a6-4f43-b193-1b972a3a5b3a.', null, null, null, null, null, null, '1、创建交换分区  创建一个 500M大小的交换分区.  # DD IF=/DEV/ZERO OF=/SWAP1 BS=1024 COUNT=500M 2、格式化交换分区 # MKSWAP -C SWAP1 # SYNC  3、激活交换分区 # SWAPON SWAP1 4、关闭交换分区 # SWAPOFF SWAP1  如果要重启机器后仍然生效,则要求修改/ETC/FSTAB 5、修改/ETC/FSTAB VI /ETC/FSTAB ', '', '0', '2017-12-25 17:35:43', '10', '1');
INSERT INTO `topic` VALUES ('3654', '18', '4', '让内核读取最新的分区信息', 'd306c32f-b721-418c-85a8-3e315e7b12ef.', null, null, null, null, null, null, 'PARTPROBE', '', '0', '2017-12-25 17:36:54', '10', '1');
INSERT INTO `topic` VALUES ('3655', '18', '4', '扫描pv卷,并将sdb1/sdb2指定为PV格式', 'f604f586-8b29-4bb5-b0a1-134546a08a10.', null, null, null, null, null, null, 'PVSCAN  PVCREATE /DEV/SDB1 PVCREATE /DEV/SDB2 PVSCAN', '', '0', '2017-12-25 17:37:14', '10', '1');
INSERT INTO `topic` VALUES ('3656', '18', '4', '用sdb1和sdb2建立vg,vg名为ckvg,', '46853253-3f86-4d9b-9280-d49e93abcf21.', null, null, null, null, null, null, 'VGCREATE CKVG /DEV/SDB1 /DEV/SDB2', '', '0', '2017-12-25 17:37:38', '10', '1');
INSERT INTO `topic` VALUES ('3657', '18', '4', '在ckvg上创建lv,空间大小为1000M,vl取名为cklv', '50dcb783-8973-453d-ba73-40ce4d1681da.', null, null, null, null, null, null, 'LVCREATE -L 1000M -N CKLV CKVG', '', '0', '2017-12-25 17:37:55', '10', '1');
INSERT INTO `topic` VALUES ('3658', '18', '4', '格式化cklv,新建目录/mnt/lvm,并将cklv挂载到/mnt/lvm', '4bc7763e-c7d5-4cad-9705-5eab9917e333.', null, null, null, null, null, null, 'MKE2FS -J /DEV/CKVG/CKLV MKDIR /MNT/LVM  MOUNT -T EXT3 /DEV/CKVG/CKLV /MNT/LVM/', '', '0', '2017-12-25 17:38:20', '10', '1');
INSERT INTO `topic` VALUES ('3659', '18', '4', 'Linux系统中没有grub配置文件备份的情况下，如何实现grub的引导恢复，写出具体的操作步骤。', '435e1366-7f76-4eb7-9819-f63d59c654e7.', null, null, null, null, null, null, '1、删除GRUB.CONF配置文件后重新启动 2、出现GRUB> 提示符  3、使用FIND命令可以查找文件所在的磁盘分区 4、ROOT (HD0,0)  5、KERNEL /VMLINUZ-2.6.9-5.EL RO ROOT=LABEL=/ RHGB QUIET 6、INITRD /INITRD-2.6.9-5.EL.IMG 7、BOOT  8、登录系统后，重新建立/BOOT/GRUB/GRUB.CONF配置文件', '', '0', '2017-12-25 17:38:43', '10', '1');
INSERT INTO `topic` VALUES ('3660', '18', '4', '使用if和case对“是否选修了Linux课程”的问题做出回答', '9afc3b3a-a8b6-4143-9da0-8683dae377ad.', null, null, null, null, null, null, 'ECHO \'DO YOU WANT TO ANSWER QUESTION?Y/N\' READ X  IF [ $X = \'Y\' ] THEN {       ECHO \'是否选修了 LINUX课程?\'      READ Y      CASE $Y IN          YES|Y) ECHO \"OK\";;          NO|N) ECHO \"YOU NEED TO SELECT IT\"      ESAC } FI', '', '0', '2017-12-25 17:39:03', '10', '1');
INSERT INTO `topic` VALUES ('3661', '18', '4', '通过编译内核增加layer7应用层过滤功能，写出基本的操作步骤', '56f98344-a896-4bc5-9757-5dad35493fde.', null, null, null, null, null, null, '应该适当的写出操作命令： 给内核打补丁  编译内核时，选取LAYER7支持的配置 编译内核并安装 编译IPTABLES  给IPTABLES打补丁 安装LAYER7 PROTOCOLS  测试是否支持LAYER7过滤 ', '', '0', '2017-12-25 17:39:27', '10', '1');
INSERT INTO `topic` VALUES ('3662', '18', '4', '定制防火墙的NAT访问策略 清除所有NAT策略 重置ip_forward为1  通过SNAT设定来源于192.168.6.0网段通过eth1转发出去 用iptables观察转发的数据包', 'fb8fa66d-89a6-48f6-8b80-cf87d531add2.', null, null, null, null, null, null, 'IPTABLES -F -T NAT IPTABLES -X -T NAT IPTABLES -Z -T NAT  ECHO \"1\" > /PROC/SYS/NET/IPV4/IP_FORWARD  IPTABLES -T NAT -A POSTROUTING -O ETH1 -J SNAT --TO 192.168.6.217 IPTABLES -L -NV', '', '0', '2017-12-25 17:39:43', '10', '1');
INSERT INTO `topic` VALUES ('3663', '18', '4', 'Static Nested Class 和 Inner Class的不同 ', '7b6361ab-818f-4093-8f60-1a1aaaa886f7.', null, null, null, null, null, null, 'NESTED CLASS （一般是C++的说法），INNER CLASS (一般是JAVA的说法)。JAVA内部类与C++嵌套类最大的不同就在于是否有指向外部的引用上。注： 静态内部类（INNER CLASS）意味着1创建一个STATIC内部类的对象，不需要一个外部类对象，2不能从一个STATIC内部类的一个对象访问一个外部类对象 ', '', '0', '2017-12-25 17:39:57', '10', '1');
INSERT INTO `topic` VALUES ('3664', '18', '4', '什么时候用assert', '4e5aa6d4-2449-491a-9c84-73522940f7e9.', null, null, null, null, null, null, 'ASSERTION(断言)在软件开发中是一种常用的调试方式，很多开发语言中都支持这种机制。在实现中，ASSERTION就是在程序中的一条语句，它对一个BOOLEAN表达式进行检查，一个正确程序必须保证这个BOOLEAN表达式的值为TRUE；如果该值为FALSE，说明程序已经处于不正确的状态下，系统将给出警告或退出。一般来说，ASSERTION用于保证程序最基本、关键的正确性。ASSERTION检查通常在开发和测试时开启。为了提高性能，在软件发布后，ASSERTION检查通常是关闭的', '', '0', '2017-12-25 17:43:01', '10', '1');
INSERT INTO `topic` VALUES ('3665', '3', '4', '抽象类与接口？', '1d9d7cc7-2f86-4583-995c-671c5593b426.', null, null, null, null, null, null, '抽象类与接口都用于抽象，但是抽象类(JAVA中)可以有自己的部分实现，而接口则完全是一个标识(同时有多重继承的功能)', '', '0', '2017-12-25 17:44:45', '10', '1');
INSERT INTO `topic` VALUES ('3666', '3', '4', '面向对象的特征有哪些方面', 'b405611a-cd6b-48ac-a2d6-ec482860ed60.', null, null, null, null, null, null, '1.抽象：  抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有\r\n关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象', '', '0', '2017-12-25 17:46:18', '10', '1');
INSERT INTO `topic` VALUES ('3667', '3', '4', '继承', '9530b686-e1a6-4612-8278-0109be916623.', null, null, null, null, null, null, '继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。', '', '0', '2017-12-25 17:46:37', '10', '1');
INSERT INTO `topic` VALUES ('3668', '3', '4', '封装', 'f6f48802-c5a2-4a89-b11a-36d578a6da7a.', null, null, null, null, null, null, '封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象', '', '0', '2017-12-25 17:46:53', '10', '1');
INSERT INTO `topic` VALUES ('3669', '3', '4', '多态性', '63f095ec-caec-4afc-8108-f4af14165454.', null, null, null, null, null, null, '多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。', '', '0', '2017-12-25 17:47:08', '10', '1');
INSERT INTO `topic` VALUES ('3670', '3', '4', '排序都有哪几种方法？请列举', '21962193-7f38-4a43-8e57-e54ef4fff1b0.', null, null, null, null, null, null, '排序的方法有：插入排序（直接插入排序、希尔排序），交换排序（冒泡排序、快速排序），选择排序（直接选择排序、堆排序），归并排序，分配排序（箱排序、基数排序）  快速排序的伪代码。  / /使用快速排序方法对A[ 0 :N- 1 ]排序  从A[ 0 :N- 1 ]中选择一个元素作为M I D D L E，该元素为支点 把余下的元素分割为两段LEFT 和R I G H T，使得L E F T中的元素都小于等于支点，而RIGHT 中的元素都大于等于支点  递归地使用快速排序方法对LEFT 进行排序 递归地使用快速排序方法对RIGHT 进行排序  所得结果为L E F T + M I D D L E + R I G H T', '', '0', '2017-12-25 17:48:33', '10', '1');
INSERT INTO `topic` VALUES ('3671', '3', '4', 'java中实现多态的机制是什么？', 'b6b88220-9833-49ff-8165-e771f99811e2.', null, null, null, null, null, null, '方法的重写OVERRIDING和重载OVERLOADING是JAVA多态性的不同表现。重写OVERRIDING是父类与子类之间多态性的一种表现，重载OVERLOADING是一个类中多态性\r\n的一种表现', '', '0', '2017-12-25 17:49:17', '10', '1');
INSERT INTO `topic` VALUES ('3672', '26', '4', 'JSP中动态INCLUDE与静态INCLUDE的区别？', 'b656b599-f65d-411f-b793-7eb895218177.', null, null, null, null, null, null, '动态INCLUDE用JSP:INCLUDE动作实现     <JSP:INCLUDE PAGE=\"INCLUDED.JSP\" FLUSH=\"TRUE\" />它总是会检查所含文件中的变化，适合用于包含动态页面，并且可以带参数     静态INCLUDE用INCLUDE伪码实现,定不会检查所含文件的变化，适用于包含静态页面    <%@ INCLUDE FILE=\"INCLUDED.HTM\" %> ', '', '0', '2017-12-25 17:51:10', '10', '1');
INSERT INTO `topic` VALUES ('3673', '3', '4', '两种跳转方式分别是什么?有什么区别?', 'df31ac4b-f698-4184-9a4d-7006714e48ff.', null, null, null, null, null, null, '有两种，分别为：    <JSP:INCLUDE PAGE=\"INCLUDED.JSP\" FLUSH=\"TRUE\">   <JSP:FORWARD PAGE= \"NEXTPAGE.JSP\"/>  前者页面不会转向INCLUDE所指的页面，只是显示该页的结果，主页面还是原来的页面。执行完后还会回来，相当于函数调用。并且可以带参数.后者完全转向新页面，不会再回来。相当于GO TO 语句。', '', '0', '2017-12-25 17:51:42', '10', '1');
INSERT INTO `topic` VALUES ('3674', '3', '4', 'JSP的内置对象及方法。', 'ae91db15-182c-47df-ad56-aa2f4c2831af.', null, null, null, null, null, null, 'REQUEST表示HTTPSERVLETREQUEST对象。它包含了有关浏览器请求的信息，并且提供了几个用于获取COOKIE, HEADER, 和SESSION数据的有用的方法。       RESPONSE表示HTTPSERVLETRESPONSE对象，并提供了几个用于设置送回 浏览器的响应的方法（如COOKIES,头信息等）', '', '0', '2017-12-25 17:52:18', '10', '1');
INSERT INTO `topic` VALUES ('3675', '3', '4', 'JAVA SERVLET API中forward() 与redirect()的区别？', '05ceba1d-616a-48a4-884f-1a9ced53ae49.', null, null, null, null, null, null, '前者仅是容器中控制权的转向，在客户端浏览器地址栏中不会显示出转向后的地址；后者则是完全的跳转，浏览器将会得到跳转的地址，并重新发送请求链接。这样，从浏览器的地址栏中可以看到跳转后的链接地址。所以，前者更加高效，在前者可以满足需要时，尽量使用FORWARD()方法，并且，这样也有助于隐藏实际的链接。在有些情况下，比如，需要跳转到一个其它服务器上的资源，则必须使用SENDREDIRECT()方法', '', '0', '2017-12-25 17:53:05', '10', '1');
INSERT INTO `topic` VALUES ('3676', '3', '4', '什么情况下调用doGet()和doPost()？', '2089cbb2-20e5-4979-98c8-ea8ae7333c30.', null, null, null, null, null, null, 'JSP页面中的FORM标签里的METHOD属性为GET时调用DOGET()，为POST时调用DOPOST()。', '', '0', '2017-12-25 17:53:26', '10', '1');
INSERT INTO `topic` VALUES ('3677', '3', '4', '如何现实servlet的单线程模式 ', '4acf3e9e-a3c6-48b3-807b-decf5ac9f981.', null, null, null, null, null, null, '<%@ PAGE ISTHREADSAFE=\"FALSE\"%>', '', '0', '2017-12-25 17:54:05', '10', '1');
INSERT INTO `topic` VALUES ('3678', '3', '4', '页面间对象传递的方法', '0284deac-71c0-4607-8faa-462c6035a697.', null, null, null, null, null, null, 'REQUEST，SESSION，APPLICATION，COOKIE等', '', '0', '2017-12-25 17:54:22', '10', '1');
INSERT INTO `topic` VALUES ('3679', '3', '4', '四种会话跟踪技术', 'cf3e3a35-d741-4a3a-9ddd-69db0077b8d6.', null, null, null, null, null, null, 'JSP是SERVLET技术的扩展，本质上是SERVLET的简易方式，更强调应用的外表表达。JSP编译后是\"类SERVLET\"。SERVLET和JSP最主要的不同点在于，SERVLET的应用逻辑是在JAVA文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是JAVA和会话作用域SERVLETSJSP 页面描述  PAGE否是代表与一个页面相关的对象和属性。一个页面由一个编译好的 JAVA SERVLET 类（可以带有任何的 INCLUDE 指令，但是没有 INCLUDE 动作）表示。这既包括 SERVLET 又包括被编译成 SERVLET 的 JSP 页面', '', '0', '2017-12-25 17:55:08', '10', '1');
INSERT INTO `topic` VALUES ('3680', '3', '4', 'Request对象的主要方法', 'f08c9419-224e-471e-af8c-57e12052f557.', null, null, null, null, null, null, 'SETATTRIBUTE(STRING NAME,OBJECT)：设置名字为NAME的REQUEST的参数值 GETATTRIBUTE(STRING NAME)：返回由NAME指定的属性值  GETATTRIBUTENAMES()：返回REQUEST对象所有属性的名字集合，结果是一个枚举的实例 GETCOOKIES()：返回客户端的所有COOKIE对象，结果是一个COOKIE数组 GETCHARACTERENCODING()：返回请求中的字符编码方式', '', '0', '2017-12-25 17:55:52', '10', '1');
INSERT INTO `topic` VALUES ('3681', '3', '4', 'Servlet执行时一般实现哪几个方法？', '7b35b234-3620-4f9f-9d8c-61f168a1194d.', null, null, null, null, null, null, 'PUBLIC VOID INIT(SERVLETCONFIG CONFIG) PUBLIC SERVLETCONFIG GETSERVLETCONFIG() PUBLIC STRING GETSERVLETINFO()  PUBLIC VOID SERVICE(SERVLETREQUEST REQUEST,SERVLETRESPONSE RESPONSE) PUBLIC VOID DESTROY()  JDBC、JDO方面', '', '0', '2017-12-25 17:56:13', '10', '1');
INSERT INTO `topic` VALUES ('3682', '25', '4', '查找文件后缀是log的 三天前的文件删除 ', '84cb9ce8-a838-4d0a-954e-e70734d55e48.', null, null, null, null, null, null, '一句话思路：查找就一定是FIND\r\n  \r\n    FIND / -NAME \"*.LOG\" -AND -MTIME +3 -EXEC RM -RF {} \\;\r\n  \r\n    知识点：-MTIME  + 代表后面数字之外的，- 就是之内的。', '', '0', '2017-12-25 18:00:23', '10', '1');
INSERT INTO `topic` VALUES ('3683', '25', '4', '写一个脚本将目录下大于100kb的文件移动到/tmp下', '184354c4-3572-42d0-9f8a-787dd5ee6e94.', null, null, null, null, null, null, 'FIND ./ -SIZE +100K -EXEC MV {}  /TMP \\;', '', '0', '2017-12-25 18:00:46', '10', '1');
INSERT INTO `topic` VALUES ('3684', '25', '4', '过滤出当前目录下所有以字母（不区分大小写）开头的文件', '00852ee7-a0a0-4a30-b208-af1604097ddc.', null, null, null, null, null, null, '一句话思路：过滤就是GREP\r\n  \r\n    LS | GREP -P \"^[A-ZA-Z]\"\r\n  \r\n    LS | GREP -P -I \"^[A-Z]\"\r\n  \r\n    知识点：正则表达式，使用-I参数让GREP命令不区分大小写。\r\n  ', '', '0', '2017-12-25 18:01:10', '10', '1');
INSERT INTO `topic` VALUES ('3685', '25', '4', '文件A.txt内容为\"12:34:68\"，只输出A.txt中的\"34\"', 'a180ae78-dc45-4854-882c-56e978fd8ba8.', null, null, null, null, null, null, '一句话思路：提取内容就是AWK\r\n  \r\n    AWK  -F \":\" \'{PRINT $2}\' A.TXT\r\n  \r\n    知识点：AWK 域，-F参数指定分隔符，默认分隔符是空格。', '', '0', '2017-12-25 18:01:26', '10', '1');
INSERT INTO `topic` VALUES ('3686', '25', '4', '用sed命令实现直接将文件B.TXT中的所有123替换成345', 'ba611fa6-ff41-4efe-bb1b-5746ecbddf4e.', null, null, null, null, null, null, ' SED -I \'S/123/456/G\' B.TXT\r\n  \r\n    知识点：-I参数让SED修改文件，默认不修改源文件。题目中提到了所有字样，所以要使用G参数', '', '0', '2017-12-25 18:01:42', '10', '1');
INSERT INTO `topic` VALUES ('3687', '25', '4', '用sed修改文件mailbox.txt的20行的zhango为wang', 'ea605f89-88d3-42d1-9115-a36dc4b640f8.', null, null, null, null, null, null, 'SED -I \'20S/ZHANGO/WANG/\' MAILBOX.TXT\r\n  \r\n    知识点：上题是全局，这题规定了行。如果写成这样\"/20/\"，就是正则表达式了。', '', '0', '2017-12-25 18:02:02', '10', '1');
INSERT INTO `topic` VALUES ('3688', '25', '4', '正则表达式，IP地址的匹配，写一下', '33844b87-a0e5-49bf-8687-116f647a5ee1.', null, null, null, null, null, null, '  一句话思路：遥想当年，WEB开发程序员面试不出意外的第一道题。\r\n  \r\n    ([0-9]{1,3}\\.){1,3}([0-9]){1,3}', '', '0', '2017-12-25 18:02:23', '10', '1');
INSERT INTO `topic` VALUES ('3689', '25', '4', '写出命令。统计日志文件weblog.log中 今天14:00~15:00的记录条数(时间格式：2011-01-01—15:30:11)', 'bd6e6604-8de8-4e82-945e-59426dd12438.', null, null, null, null, null, null, ' SUM14=`GREP -C \"2011-01-01-14\" WEBLOG.LOG`\r\n    SUM15=`GREP -C \"2011-01-01-15\" WEBLOG.LOG`\r\n    ECHO $[$SUM14+$SUM15]\r\n\r\n    知识点：GREP命令-C参数，统计匹配的行数。SHELL中的数学计算。', '', '0', '2017-12-25 18:02:48', '10', '1');
INSERT INTO `topic` VALUES ('3690', '25', '4', '将当前目录所有文件扩展名改为log', 'fd39fe6e-e3d4-449e-afe2-8ee1b98e5e17.', null, null, null, null, null, null, 'FOR FILE IN `LS ./ | GREP -P \"(.*)(\\..*)\"`;DO  ECHO $FILE | MV $FILE `SED -R \'S#(.*)(\\..*)#\\1.LOG#\'`; DONE\r\n  \r\nFOR FILE IN `LS ./ | GREP -P \"(.*)(\\..*)\"`;DO  ECHO $FILE | MV $FILE `ECHO ${FILE%.**}`.LOG; DONE\r\n  ', '', '0', '2017-12-25 18:03:10', '10', '1');
INSERT INTO `topic` VALUES ('3691', '25', '4', '用shell在/usr/local下 建立20个子目录 xunlei1-xunlei20,再在这个子目录下分别建255个子目录dir1-dir255,再在255个子目录下创建10000个文件xunlei1.html-xunlei10000.html', 'd04f7aae-9a8e-450f-afa6-e70effb137f0.', null, null, null, null, null, null, ' MKDIR -P /USR/LOCA/XUNLIE{1..20}/DIR{1..255}/\r\n\r\n    TOUCH   /USR/LOCA/XUNLIE{1..20}/DIR{1..255}/XUNLEI{1..10000}.HTML  \r\n   \r\n\r\n    知识点：如果你就这么写上去，那你又中计了。为什么呢，因为超过了SHELL命令参数的最大限制。SHELL中参数的限制是：5452。所以要分着写。\r\n  ', '', '0', '2017-12-25 18:03:31', '10', '1');
INSERT INTO `topic` VALUES ('3692', '25', '4', '请用Iptables写出只允许10.1.8.179 访问本服务器的22端口。', 'c9dd4c95-5b4a-4a6c-ae33-11ca4ac213c4.', null, null, null, null, null, null, '/SBIN/IPTABLES -A INPUT -P TCP -DPORT 22 -S 10.1.8.179 -J ACCEPT     /SBIN/IPTABLES -A INPUT -P UDP -DPORT 22 -S 10.1.8.179 -J ACCEPT     /SBIN/IPTABLES -P INPUT -J DROP ', '', '0', '2017-12-25 18:05:06', '10', '1');
INSERT INTO `topic` VALUES ('3693', '25', '4', '有文件file1   查询file1里面空行的所在行号', 'c6e193d4-01dc-4413-ac0c-2ffff1235d7b.', null, null, null, null, null, null, 'GREP -N ^$ FILE1', '', '0', '2017-12-25 18:05:54', '10', '1');
INSERT INTO `topic` VALUES ('3695', '25', '4', '有文件file1 打印出file1文件第1到第三行', '378ac69d-7e7c-4d89-9d38-3c14eb44bdfa.', null, null, null, null, null, null, 'HEAD -N3 FILE1     SED \"3Q\" FILE1', '', '0', '2017-12-25 18:06:44', '10', '1');
INSERT INTO `topic` VALUES ('3696', '25', '4', '假设有一个脚本scan.sh，里面有1000行代码，并在vim模式下面，请按照如下 要求写入对应的指令将shutdown字符串全部替换成reboot', 'bf2a753a-15a7-40a7-bbc1-477aa26244d0.', null, null, null, null, null, null, ':%S/SHUTDOWN/REBOOT/G', '', '0', '2017-12-25 18:07:21', '10', '1');
INSERT INTO `topic` VALUES ('3697', '25', '4', '假设有一个脚本scan.sh，里面有1000行代码，并在vim模式下面，请按照如下 要求写入对应的指令 清空所有字符', '93985b2a-d041-4207-9f96-1632d84a4fd6.', null, null, null, null, null, null, ':%D', '', '0', '2017-12-25 18:07:41', '10', '1');
INSERT INTO `topic` VALUES ('3698', '25', '4', '1到10数字相加，写出shell脚本', '27c3037e-6808-4c93-8573-4eedf9a38781.', null, null, null, null, null, null, '#!/BIN/BASH     J=0      FOR((I=1;I<=10;I++));DO         J=$[J+I ]     DONE     ECHO $J', '', '0', '2017-12-25 18:08:39', '10', '1');
INSERT INTO `topic` VALUES ('3699', '25', '4', '常见shell有哪些？缺省的是哪个？', '60bd9a8e-5806-4dca-b614-948b341b16ba.', null, null, null, null, null, null, '/BIN/SH    /BIN/BASH    /BIN/ASH    /BIN/BSH    /BIN/CSH    /BIN/TCSH    /SBIN/NOLOGIN ', '', '0', '2017-12-25 18:08:53', '10', '1');
INSERT INTO `topic` VALUES ('3700', '25', '4', 'Shell循环语句有哪些？', '4c945399-5c6f-426f-a88a-69721a68dfb7.', null, null, null, null, null, null, 'FOR    WHILE    UNTIL', '', '0', '2017-12-25 18:09:17', '10', '1');
INSERT INTO `topic` VALUES ('3701', '25', '4', '用SHELL模拟LVS，脚本怎么写', '841db602-88be-48b6-9f42-461ab67c416d.', null, null, null, null, null, null, '/SBIN/IPTABLE -T NAT -A PREROUTING -P TCP --DPORT 80 -J DNAT --TO 192.168.1.11-192.168.1.12', '', '0', '2017-12-25 18:09:41', '10', '1');
INSERT INTO `topic` VALUES ('3702', '25', '4', '#!/bin/bash      file=`find / -size +50k -size -100k`      for i in $file;do', '767d82cb-97d6-48b8-aba1-f8d5f51e6d38.', null, null, null, null, null, null, '#!/BIN/BASH      FILE=`FIND / -SIZE +50K -SIZE -100K`      FOR I IN $FILE;DO', '', '0', '2017-12-25 18:10:21', '10', '1');
INSERT INTO `topic` VALUES ('3703', '25', '5', '脚本（如：目录dir1、dir2、dir3下分别有file1、file2、file2，请使用脚本将文 件改为dir1_file1、dir2_file2、dir3_file3）', null, null, null, null, null, null, null, null, '#!/bin/bash      file=`ls dir[123]/file[123]`     for i in $file;do          mv $i ${i%/*}/${i%%/*}_${i##*/}     done', '0', '2017-12-25 18:11:09', '10', '1');
INSERT INTO `topic` VALUES ('3704', '25', '4', '在shell脚本成功执行前，如何中断脚本执行？', '621cacf6-e40b-4664-936a-cae4b103a00f.', null, null, null, null, null, null, '我们需要使用‘EXIT’命令来实现以上描述的情境。‘EXIT’命令被强制输出非0值时，脚本会报错并退出。在UNIX环境下的SHELL脚本中，0值表示成功执行。因此，在脚本终止前执行一个不带引号的‘EXIT -1’命令将使脚本中止。', '', '0', '2017-12-25 18:13:27', '10', '1');
INSERT INTO `topic` VALUES ('3705', '25', '4', '创建以下一个名为“anything.sh”的脚本。', '2ccbd700-4908-483b-ae45-9a2981529203.', null, null, null, null, null, null, '\r\n#!/BIN/BASH\r\nECHO \"HELLO\"\r\nEXIT -1\r\nECHO \"BYE\"', '', '0', '2017-12-25 18:13:53', '10', '1');
INSERT INTO `topic` VALUES ('3706', '25', '4', '如何使用Linux命令来移除文件头？', '8fd6ade7-c042-4ce6-934b-01d15e99882f.', null, null, null, null, null, null, '当我们需要删除文件中的指定行时，‘SED’命令可以用来解决该问题。', '', '0', '2017-12-25 18:14:19', '10', '1');
INSERT INTO `topic` VALUES ('3707', '25', '4', '你怎么检查一个文本文件中某一行的长度？', '0d0f71fa-96ba-4133-af99-54a295f404a0.', null, null, null, null, null, null, '‘SED’命令也可以用来查找文本文件中的某一行或者检查其长度。', '', '0', '2017-12-25 18:14:34', '10', '1');
INSERT INTO `topic` VALUES ('3708', '25', '4', ' 可以在Linux系统上查看到所有非打印字符吗？你是怎么做到的？', 'db65fb8f-6b95-4e41-9e9f-d5abbce03d1a.', null, null, null, null, null, null, '可以。可以在LINUX中查看所有的非打印字符。要实现上面所讲的方案，我们需要‘VI’编辑器的帮助。 怎样在‘VI’编辑器中显示非打印字符？', '', '0', '2017-12-25 18:14:48', '10', '1');
INSERT INTO `topic` VALUES ('3709', '25', '4', '假如你是一个员工组的团队领导，为xyz公司工作。公司要求你创建一个‘dir_xyz’目录，让该组成员都能在该目录下创建或访问文件，但是除了文件创建者之外的其他人不能删除文件，你会怎么做？', '3df15b70-c752-45e3-8f8c-6bb2b7277183.', null, null, null, null, null, null, '这真是个有趣的工作方案。好吧，上面所讲的方案，我们需要通过下面的步骤来实施，这简直就是小菜一碟。', '', '0', '2017-12-25 18:15:02', '10', '1');
INSERT INTO `topic` VALUES ('3711', '25', '4', '在脚本中如何使用 \"expect\" ?', '2896d754-4c09-480c-b2a1-a8890423dd6e.', null, null, null, null, null, null, '/USR/BIN/EXPECT << EOD\r\nSPAWN RSYNC -AR ${LINE} ${DESTHOST}:${DESTPATH}\r\nEXPECT \"*?ASSWORD:*\"\r\nSEND \"${PASSWORD}\\R\"\r\nEXPECT EOF\r\nEOD', '', '0', '2017-12-25 18:19:16', '10', '1');
INSERT INTO `topic` VALUES ('3712', '25', '4', ' shell 脚本如何获取输入的值 ?', '020a2663-063b-4d80-a6d3-1141e2a5388d.', null, null, null, null, null, null, 'A) 通过参数\r\n\r\n./SCRIPT PARAM1 PARAM2\r\nB) 通过 READ 命令\r\n\r\nREAD -P \"DESTINATION BACKUP SERVER : \" DESTHOST', '', '0', '2017-12-25 18:19:32', '10', '1');
INSERT INTO `topic` VALUES ('3713', '25', '4', '如何在数组中添加 id 为 333 的元素 ?', 'd0ed64ea-5bd5-4e46-8d35-ee5f6923cbdb.', null, null, null, null, null, null, 'ARRAY[333]=\"NEW_ELEMENT\"', '', '0', '2017-12-25 18:19:52', '10', '1');
INSERT INTO `topic` VALUES ('3714', '25', '4', ' 如何移除数组中索引为 2 的元素 ?', '1c386f93-4a1f-4804-b706-0a45c2ce7025.', null, null, null, null, null, null, 'UNSET ARRAY[2]', '', '0', '2017-12-25 18:20:43', '10', '1');
INSERT INTO `topic` VALUES ('3715', '25', '4', '如何输出所有数组索引 ?', 'd9bc018d-2b72-419d-ae85-62bcb81b379f.', null, null, null, null, null, null, 'ECHO ${!ARRAY[@]}', '', '0', '2017-12-25 18:20:56', '10', '1');
INSERT INTO `topic` VALUES ('3716', '25', '4', ' 如何打印数组的所有元素 ?', '9361fb61-8418-419f-b6ec-8781336a56ce.', null, null, null, null, null, null, ' 如何打印数组的所有元素 ?', '', '0', '2017-12-25 18:21:11', '10', '1');
INSERT INTO `topic` VALUES ('3717', '25', '4', '如何在 bash 中定义数组 ?', 'ff0dc4e1-84ab-460c-98a3-2f865f4b8796.', null, null, null, null, null, null, 'ARRAY=(\"HI\" \"MY\" \"NAME\" \"IS\")', '', '0', '2017-12-25 18:21:41', '10', '1');
INSERT INTO `topic` VALUES ('3718', '25', '4', '如何获取传递给脚本的参数数目 ?', '3d011557-a489-46d4-b8e5-7b5cb5d78fd9.', null, null, null, null, null, null, 'ECHO $#', '', '0', '2017-12-25 18:22:12', '10', '1');
INSERT INTO `topic` VALUES ('3719', '25', '4', '$? 表示什么意思 ?', '06c81629-1c71-498b-96f2-c144571ce563.', null, null, null, null, null, null, '前台最近命令的结束状态。', '', '0', '2017-12-25 18:22:37', '10', '1');
INSERT INTO `topic` VALUES ('3720', '25', '4', 'bash 中 $! 表示什么意思 ?', '86d274fa-31b6-4f76-8d91-0c01daa377b7.', null, null, null, null, null, null, '后台最近执行命令的 PID.', '', '0', '2017-12-25 18:22:50', '10', '1');
INSERT INTO `topic` VALUES ('3721', '25', '4', '[[ $string == abc* ]] 和 [[ $string == \"abc*\" ]] 有什么区别', '7ae0e75a-5015-4ccb-a8e1-d6ccc23c9281.', null, null, null, null, null, null, '\r\n[[ $STRING == ABC* ]] - 检查字符串是否以字母 ABC 开头\r\n[[ $STRING == \"ABC\" ]] - 检查字符串是否完全等于 ABC', '', '0', '2017-12-25 18:23:23', '10', '1');
INSERT INTO `topic` VALUES ('3722', '25', '4', '如何检查字符串是否以字母 \"abc\" 开头 ?', 'e595cd23-72d7-4781-ac92-e56e4e1ff134.', null, null, null, null, null, null, '[[ $STRING == ABC* ]]', '', '0', '2017-12-25 18:23:42', '10', '1');
INSERT INTO `topic` VALUES ('3723', '25', '4', '写出输出数字 0 到 100 中 3 的倍数(0 3 6 9 …)的命令 ?', '336640a2-7398-409d-bf70-7a4c21e9c903.', null, null, null, null, null, null, 'FOR I IN {0..100..3}; DO ECHO $I; DONE\r\n或\r\n\r\nFOR (( I=0; I<=100; I=I+3 )); DO ECHO \"WELCOME $I TIMES\"; DONE', '', '0', '2017-12-25 18:24:49', '10', '1');
INSERT INTO `topic` VALUES ('3724', '25', '4', '重写这个命令，将输出变量转换为复数: item=\"car\"; echo \"I like $item\" ?', '9450373b-8a33-4065-a35b-90df2d18f32c.', null, null, null, null, null, null, 'ITEM=\"CAR\"; ECHO \"I LIKE ${ITEM}S\"', '', '0', '2017-12-25 18:25:05', '10', '1');
INSERT INTO `topic` VALUES ('3725', '25', '4', '如何去除字符串中的所有空格 ?', '1d190e1a-74e3-4bdd-a236-15d2387af2a3.', null, null, null, null, null, null, 'ECHO $STRING|TR -D \" \"', '', '0', '2017-12-25 18:25:17', '10', '1');
INSERT INTO `topic` VALUES ('3726', '25', '4', '如何将整数 a 加到 b 并赋值给 c ?', '4e8fb434-9259-4d0a-be69-c40b7c8483b9.', null, null, null, null, null, null, 'C=$((A+B))\r\n或\r\n\r\nC=`EXPR $A + $B`\r\n或\r\n\r\nC=`ECHO \"$A+$B\"|BC`', '', '0', '2017-12-25 18:25:30', '10', '1');
INSERT INTO `topic` VALUES ('3727', '25', '4', '如何列出第二个字母是 a 或 b 的文件 ?', '40382b40-b28e-4e37-95b5-d635095a71fa.', null, null, null, null, null, null, 'LS -D ?[AB]*', '', '0', '2017-12-25 18:25:43', '10', '1');
INSERT INTO `topic` VALUES ('3728', '25', '4', '\"export $variable\" 或 \"export variable\" 哪个正确 ?', '0cdce857-1f52-4e37-bd0c-0c90e870aa89.', null, null, null, null, null, null, 'EXPORT VARIABLE', '', '0', '2017-12-25 18:26:02', '10', '1');
INSERT INTO `topic` VALUES ('3729', '25', '4', '不用 wc 命令如何计算字符串中的单词数目 ?', '83455c26-1b8d-4339-bc44-74c77ac4757b.', null, null, null, null, null, null, 'SET ${STRING}\r\nECHO $#', '', '0', '2017-12-25 18:26:14', '10', '1');
INSERT INTO `topic` VALUES ('3730', '25', '4', '如何计算本地用户数目 ?', '2d9b1d5e-2fbe-4527-acb1-88c38602a2d8.', null, null, null, null, null, null, 'WC -L /ETC/PASSWD|CUT -D\" \" -F1 或者 CAT /ETC/PASSWD|WC -L', '', '0', '2017-12-25 18:26:26', '10', '1');
INSERT INTO `topic` VALUES ('3731', '25', '4', '哪个命令将命令替换为大写 ?', 'fa1e825a-a83c-48a1-aad1-29aee8152c58.', null, null, null, null, null, null, 'TR \'[:LOWER:]\' \'[:UPPER:]\'', '', '0', '2017-12-25 18:26:37', '10', '1');
INSERT INTO `topic` VALUES ('3732', '25', '4', '如何只用 echo 命令替换字符串的一部分 ?', '135be9a0-c0b3-4765-bca0-42589cfdfe0c.', null, null, null, null, null, null, 'ECHO ${VARIABLE//PATTERN/REPLACEMENT}', '', '0', '2017-12-25 18:26:47', '10', '1');
INSERT INTO `topic` VALUES ('3733', '25', '4', '${variable:-10} 和 ${variable: -10} 有什么区别?', '5130b519-6bdd-4e3d-94e4-d067faa8767f.', null, null, null, null, null, null, '\r\n${VARIABLE:-10} - 如果之前没有给 VARIABLE 赋值则输出 10；如果有赋值则输出该变量\r\n${VARIABLE: -10} - 输出 VARIABLE 的最后 10 个字符', '', '0', '2017-12-25 18:26:58', '10', '1');
INSERT INTO `topic` VALUES ('3734', '25', '4', ' 如何打印变量的最后 5 个字符 ?', 'bafa3c2f-49a3-4476-8c82-0d46af504ac7.', null, null, null, null, null, null, 'ECHO ${VARIABLE: -5}', '', '0', '2017-12-25 18:27:11', '10', '1');
INSERT INTO `topic` VALUES ('3735', '25', '4', '如何获取变量长度 ?', '5e5ab697-85df-4330-baf7-252e16d6a463.', null, null, null, null, null, null, '${#VARIABLE}', '', '0', '2017-12-25 18:27:22', '10', '1');
INSERT INTO `topic` VALUES ('3736', '25', '4', '如何在 bash shell 中更改标准的域分隔符为 \":\" ?', '9ef97f0c-a98f-4194-8906-53a6baf90d9f.', null, null, null, null, null, null, 'IFS=\":\"', '', '0', '2017-12-25 18:27:38', '10', '1');
INSERT INTO `topic` VALUES ('3737', '25', '4', '写程序为用户计算主组数目并显示次数和组名', 'c8809915-aa85-4908-9a69-66be4ce339d2.', null, null, null, null, null, null, 'CAT /ETC/PASSWD|CUT -D: -F4|SORT|UNIQ -C|WHILE READ C G\r\nDO\r\n{ ECHO $C; GREP :$G: /ETC/GROUP|CUT -D: -F1;}|XARGS -N 2\r\nDONE', '', '0', '2017-12-25 18:27:49', '10', '1');
INSERT INTO `topic` VALUES ('3738', '25', '4', '如何使用 awk 列出 UID 小于 100 的用户 ?', '4b87942e-3629-47f1-ac92-a529bc299036.', null, null, null, null, null, null, 'AWK -F: \'$3<100\' /ETC/PASSWD', '', '0', '2017-12-25 18:28:02', '10', '1');
INSERT INTO `topic` VALUES ('3739', '25', '4', ' 如何从上面的字符串中获取 “User” ?', 'a2e24966-3753-4e13-8b89-5d3db2ee076b.', null, null, null, null, null, null, 'ECHO ${VARIABLE%:*:*:*}\r\n或\r\n\r\nECHO ${VARIABLE%%:*}', '', '0', '2017-12-25 18:28:19', '10', '1');
INSERT INTO `topic` VALUES ('3740', '25', '4', '如果给定字符串 variable=\"User:123:321:/home/dir\"，如何只用 echo 命令获取 home_dir ?', '1c85b046-e2dc-47f0-8969-2f2a06e501c9.', null, null, null, null, null, null, 'ECHO ${VARIABLE#*:*:*:}\r\n或\r\n\r\nECHO ${VARIABLE##*:}', '', '0', '2017-12-25 18:28:29', '10', '1');
INSERT INTO `topic` VALUES ('3741', '32', '4', 'mysql如何创建一个库，添加一个表，在表中插入数据。', 'f4dfc19a-f26f-40c7-8b12-12a63b8448d9.', null, null, null, null, null, null, 'CREATE DATABASE DATABASE_NAME; CREATE TABLE TABLE_NAME( ID VARCHAR (4) NOT NULL,  NAME VARCHAR (50) NOT NULL );  INSERT INTO TABLE_NAME() VAULES();', '', '0', '2017-12-25 18:38:01', '10', '1');
INSERT INTO `topic` VALUES ('3742', '32', '4', 'mysql如何查询一个表中的所有数据？', '4e686310-e22a-4acb-adef-b2f4f2e681f6.', null, null, null, null, null, null, 'SELECT * FROM TABLE_NAME; ', '', '0', '2017-12-25 18:38:22', '10', '1');
INSERT INTO `topic` VALUES ('3743', '32', '4', 'mysql如何给一个表添加完整性约束？', '9ba0f9c3-ca73-4ba5-8a99-b2313982e751.', null, null, null, null, null, null, 'ALTER TABLE COMMENT ADD CONSTRAINT FK_COMMENT_BLOG_ID FOREIGN KEY (BLOG_ID) REFERENCES TABLE_NAME(ID) ON DELETE RESTRICT ON UPDATE RESTRICT; ', '', '0', '2017-12-25 18:38:38', '10', '1');
INSERT INTO `topic` VALUES ('3744', '32', '4', '如何清空TabB表的数据', '8aad1bd0-b782-4c65-8596-19d53197c4d0.', null, null, null, null, null, null, 'TRUNCATE TABLE TABB;', '', '0', '2017-12-25 18:38:54', '10', '1');
INSERT INTO `topic` VALUES ('3745', '32', '4', '如何登陆mysql数据库', '1e6c3c79-38c9-4487-b14c-e4ff06c9988a.', null, null, null, null, null, null, 'MYSQL-U USERNAME -P', '', '0', '2017-12-25 18:39:09', '10', '1');
INSERT INTO `topic` VALUES ('3746', '32', '4', '如何开启/关闭mysql服务', '5a955cd5-4777-43e1-8a09-d9b882a9a350.', null, null, null, null, null, null, 'SERVICE MYSQL START/STOP', '', '0', '2017-12-25 18:39:21', '10', '1');
INSERT INTO `topic` VALUES ('3747', '32', '4', '查看mysql的状态', 'f91c0595-af00-46e6-a03c-9bbfdfd371f2.', null, null, null, null, null, null, 'SERVICE MYSQL STATUS ', '', '0', '2017-12-25 18:39:27', '10', '1');
INSERT INTO `topic` VALUES ('3748', '32', '4', '如何显示数所有数据库', '3190e86e-42ec-47ce-955d-a691d0ff93d9.', null, null, null, null, null, null, 'SHOW DATABASES', '', '0', '2017-12-25 18:39:51', '10', '1');
INSERT INTO `topic` VALUES ('3749', '32', '4', '如何获取表内所有字段对象的名称和类型', '48710c5a-938c-41d0-8bbe-0a8ce061ee2e.', null, null, null, null, null, null, 'DESCRIBE TABLE_NAME; ', '', '0', '2017-12-25 18:40:09', '10', '1');
INSERT INTO `topic` VALUES ('3750', '32', '4', 'varchar和char的区别', '83c9ae3b-5946-41e6-b366-70a16aeba630.', null, null, null, null, null, null, 'CHAR是一种固定长度的类型，VARCHAR是一种可变长度的类型', '', '0', '2017-12-25 18:40:26', '10', '1');
INSERT INTO `topic` VALUES ('3751', '32', '4', '数据库事物属性有哪几种？', '137792ff-b8e1-4716-b7e4-12dae047b4b0.', null, null, null, null, null, null, '隔离性、持续性、一致性、原子性', '', '0', '2017-12-25 18:40:43', '10', '1');
INSERT INTO `topic` VALUES ('3752', '32', '4', 'mysql里记录货币用什么字段类型好？', '9c2d9b68-3f81-407d-a866-1b186366e393.', null, null, null, null, null, null, 'NUMERIC和DECIMAL类型被MYSQL实现为同样的类型，这在SQL92标准允许。他们被用于保存值，该值的准确精度是极其重要的值，例如与金钱有关的数据', '', '0', '2017-12-25 18:41:05', '10', '1');
INSERT INTO `topic` VALUES ('3753', '32', '4', 'mysql数据库索引类型都有哪些?', '4b311043-a2f9-464e-a47c-d4c1dcd5ff43.', null, null, null, null, null, null, '索引类型: B-TREE索引，哈希索引', '', '0', '2017-12-25 18:41:19', '10', '1');
INSERT INTO `topic` VALUES ('3754', '32', '4', 'mysql取得当前时间的函数是?，格式化日期的函数是？', '75fc0a25-5720-416d-a463-c9b6bd014786.', null, null, null, null, null, null, ' 取得当前时间用 NOW() 就行。  在数据库中格式化时间 用DATE_FORMA T(DATE, FORMAT)。', '', '0', '2017-12-25 18:41:42', '10', '1');
INSERT INTO `topic` VALUES ('3755', '32', '4', 'mysql批量替换的SQL语句怎么写?', 'f8c2728c-f217-412d-ad58-8e948c5737ac.', null, null, null, null, null, null, 'UPDATE `DEDE_ADDONARTICLE` SET BODY = REPLACE(BODY,’OLDVALUE’,\'NEWVALUE’) 其中 DEDE_ADDONARTICLE 为你的表名。BODY为字段名', '', '0', '2017-12-25 18:41:56', '10', '1');
INSERT INTO `topic` VALUES ('3756', '32', '4', 'mysql数据库是怎么备份的？', '394a7847-0df0-4525-8209-f4347edd654c.', null, null, null, null, null, null, '备份数据库：  MYSQLDUMP –USER=ROOT –PASSWORD=ROOT密码 –LOCK-ALL-TABLES 数据库名 >  备份文件.SQL  恢复数据库：  MYSQL -U ROOT –\r\nPASSWORD=ROOT密码 数据库名 < 备份文件.SQL', '', '0', '2017-12-25 18:42:34', '10', '1');
INSERT INTO `topic` VALUES ('3757', '26', '2', '•	CPU每次能够处理的数据量称为字长大小(word size)，字长大小依据CPU的设计而有48位与62位。', '3045a39c-fbe8-419e-a429-81b68bdcce43.', null, null, null, null, null, null, '错误', '•	CPU每次能够处理的数据量称为字长大小(word size)，字长大小依据CPU的设计而有32位与64位。', '0', '2017-12-25 18:42:45', '28', '1');
INSERT INTO `topic` VALUES ('3758', '32', '4', '数据库死锁概念', 'a60e61d4-ec10-4fb1-90f5-57f37d660286.', null, null, null, null, null, null, '如果需要\"修改\"一条数据，首先数据库管理系统会在上面加锁，以保证在同一时间只有一个事务能进行修改操作。锁定(LOCKING)发生在当一个事务获得对某一资源的\"锁\"时，这时，其他的事务就不能更改这个资源了，这种机制的存在是为了保证数据一致性', '', '0', '2017-12-25 18:42:52', '10', '1');
INSERT INTO `topic` VALUES ('3759', '26', '2', '•	计算机主要以二进位作为单位，常用的磁碟容量单位为bytes，其单位换算为1 Byte = 8bits', '662198e2-df50-4410-b4ae-3de29a84b1e3.', null, null, null, null, null, null, '正确', '没毛病', '0', '2017-12-25 18:44:03', '28', '1');
INSERT INTO `topic` VALUES ('3760', '32', '4', ' innodb的读写参数优化 ', 'cfc1d4c6-8eab-49f8-96b2-b4577684fbb9.', null, null, null, null, null, null, '（1）读取参数，GLOBAL BUFFER POOL以及 LOCAL BUFFER （2）写入参数 （3）与IO相关的参数  （4）缓存参数以及缓存的适用场景', '', '0', '2017-12-25 18:44:41', '10', '1');
INSERT INTO `topic` VALUES ('3761', '32', '4', '备份计划，mysqldump以及\r\nxtranbackup的实现原理，', '77a15d7d-51f4-4534-833f-6e6893d24b7a.', null, null, null, null, null, null, '（1\r\n） 备份计划 （2）备份恢复时间 \r\n（3）备份恢复失败如何处理', '', '0', '2017-12-25 18:45:05', '10', '1');
INSERT INTO `topic` VALUES ('3762', '26', '2', '计算机主要以二进制作为单位，全部磁盘容量单位都是以1024为倍数.', '8eb4dc54-4825-4708-9c36-401181a7b4a0.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 18:45:49', '28', '1');
INSERT INTO `topic` VALUES ('3763', '3', '1', ' 以下对TCP和UDP描述正确的是（）', '4338fb51-809c-4786-9697-a7a9e316ef5a.', 'TCP不能提供数据的可靠性', ' UDP能够保证数据库的可靠性', 'TCP数据传输效率高于UDP', 'UDP数据传输效率高于TCP', '', '', 'D', '', '0', '2017-12-25 18:46:19', '75', '1');
INSERT INTO `topic` VALUES ('3764', '26', '2', '•	群组最有用的功能之一，就是当你在团队开发资源的时候，且每个账号都可以有多个群组的支持；', 'f37cdd56-6669-4eee-aaea-64fb82860f3f.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 18:46:49', '28', '1');
INSERT INTO `topic` VALUES ('3765', '3', '1', '在Java中，下面对于构造函数的描述正确的是（）。', '27dc2b8b-5c57-4a29-9b41-9141a9ebd867.', '类必须显示定义构造函数', '构造函数的返回类型是void', ' 构造函数和类有相同的名称，并且不能带任何参数', '一个类可以定义多个构造函数', '', '', 'D', '', '0', '2017-12-25 18:47:06', '75', '1');
INSERT INTO `topic` VALUES ('3766', '26', '2', 'vi 有三种模式，一般模式可变换到编辑与指令列模式，但编辑模式与指令列模式可以互换；', '6fe3133e-3bee-4efe-aea3-ca74daa06969.', null, null, null, null, null, null, '错误', 'vi 有三种模式，一般模式可变换到编辑与指令列模式，但编辑模式与指令列模式不能互换；', '0', '2017-12-25 18:47:42', '28', '1');
INSERT INTO `topic` VALUES ('3767', '3', '1', '根据下面的代码，\r\nString s = null;\r\n会抛出NullPointerException异常的有（）。[两项]', '911b9c33-6841-4552-b619-5c43e9014318.', 'if( (s!=null) & (s.length()>) )', ' if( (s!=null) & & (s.length()>) )', ' if( (s==null) | (s.length()==) )', ' if( (s==null) || (s.length()==) )', '', '', 'AC', '', '0', '2017-12-25 18:48:22', '75', '1');
INSERT INTO `topic` VALUES ('3768', '3', '1', '.在Java中，关于HashMap类的描述，以下廉洁错误的是(  )。', '8400a79f-2c42-470c-b627-ee4ca5a80456.', 'HashMap使用键/值得形式保存数据', ' HashMap 能够保证其中元素的顺序', ' HashMap允许将null用作键', ' HashMap允许将null用作值', '', '', 'B', '', '0', '2017-12-25 18:49:11', '75', '1');
INSERT INTO `topic` VALUES ('3769', '18', '4', '运行命令 drop table table_name;', '5fb2858a-f54b-4e65-b9c3-e6d5f241a685.', null, null, null, null, null, null, '运行命令 DROP TABLE TABLE_NAME;', '', '0', '2017-12-25 18:49:13', '10', '1');
INSERT INTO `topic` VALUES ('3770', '26', '2', '进入编辑模式几乎只要记住： i, o, R 三个按钮即可！尤其是新增一行的 o 与取代的 R', '32a734e6-af72-4ecd-be7a-dd3e8c333294.', null, null, null, null, null, null, '正确', '进入编辑模式', '0', '2017-12-25 18:49:47', '28', '1');
INSERT INTO `topic` VALUES ('3771', '3', '1', '下列选项中关于java中super关键字的说法错误的是（ ）', '0aa756de-d711-43da-bdea-86eeafb866f2.', ' super关键字是在子类对象内部指代其父类对象的引用', 'super关键字不仅可以指代子类的直接父类，还可以指代父类的父类', '子类可以通过super关键字调用父类的方法', ' 子类可以通过super关键字调用父类的属性', '', '', 'B', '', '0', '2017-12-25 18:49:52', '75', '1');
INSERT INTO `topic` VALUES ('3772', '3', '1', '下列代码的执行结果为(如图):', 'a4ff8cb7-87fb-4c3f-8934-dd5b0260fffe.png', '4,4', '4,5', '5,4', '5,5', '代码不能编译', '', 'E', '', '0', '2017-12-25 18:50:01', '73', '1');
INSERT INTO `topic` VALUES ('3773', '3', '1', '在Java中，以下代码(  )正确地创建了一个InputStreamReader对象。', '4d1bd909-44eb-4036-a711-93ddb87b2de0.', ' InuptStreamReader(new FileInputStream(̶1.dat”));', 'InuptStreamReader(new FileReader(̶1.dat”));', ' InuptStreamReader(new BufferReader(̶1.dat”));', ' InuptStreamReader (̶1.dat”);', '', '', 'A', '', '0', '2017-12-25 18:50:42', '75', '1');
INSERT INTO `topic` VALUES ('3774', '26', '2', 'vim编辑模式中数字是有意义的，用来说明重复进行几次动作的意思，如 5aa 为复制 5 行之意；', '3a54e76f-4d5d-40b3-b59b-43803f2ac19b.', null, null, null, null, null, null, '正确', 'vim编辑模式中数字是有意义的，用来说明重复进行几次动作的意思，如 5yy 为复制 5 行之意；', '0', '2017-12-25 18:50:44', '28', '1');
INSERT INTO `topic` VALUES ('3775', '3', '1', '在Java中，(  )类提供定位本地文件系统，对文件或目录及其属性进行基本操作。', '958a3bce-ccef-423d-b570-fad60c53c2c2.', 'FileInputStream', ' FileReader', ' FileWriter', ' File', '', '', 'D', '', '0', '2017-12-25 18:51:28', '75', '1');
INSERT INTO `topic` VALUES ('3776', '26', '2', '在vim中，使用 :sp 功能可以分割窗口', '1dacfe11-5bfd-4667-9620-5024cb003e8a.', null, null, null, null, null, null, '正确', '：sp分隔窗口', '0', '2017-12-25 18:52:07', '28', '1');
INSERT INTO `topic` VALUES ('3777', '3', '1', ' Java中的集合类包括ArrayList、LinkedList、HashMap等类，下列关于集合类描述错误的是（）（选择一项）', '2a1a075f-87d8-4c2b-b870-dc768e864dfd.', 'ArrayList和LinkedList均实现了List接口', 'ArrayList的访问速度比LinkedList快', ' 添加和删除元素时，ArrayList的表现更佳', ' HashMap实现Map接口，它允许任何类型的键和值对象，并允许将null用作键或值\r\n', '', '', 'C', '', '0', '2017-12-25 18:52:32', '75', '1');
INSERT INTO `topic` VALUES ('3778', '3', '1', ' 在Java中开发JDBC应用程序时，使用DriverManager类的getConnection（）方法\r\n建立与数据源的连接语句为：\r\nConnection con = DriverManager.getConnection(̶jdbc:odbc:news”);\r\nURL连接中的”n ews”表示的是（）（选择一项）', '3e984a39-cac1-496a-b1ed-d59830576801.', '数据库中表的名称', '数据库服务器的机器名', '数据源的名称', '用户名', '', '', 'C', '', '0', '2017-12-25 18:53:17', '75', '1');
INSERT INTO `topic` VALUES ('3779', '3', '1', '在Java中，JDBCAPI定义了一组用于与数据库进行通信的接口和类，它们包括在（）包中。', 'f859cc9f-ac91-4210-912c-53aad6c921e2.', 'java.lang', ' java.sql', ' java.util', ' java.math', '', '', 'B', '', '0', '2017-12-25 18:54:05', '75', '1');
INSERT INTO `topic` VALUES ('3780', '26', '4', ' 打包压缩', 'd8cecc1f-0a57-4965-a3a6-c8360002e2ab.', null, null, null, null, null, null, 'TAR:   ', '', '0', '2017-12-25 18:54:13', '47', '1');
INSERT INTO `topic` VALUES ('3781', '24', '3', '\r\n查看ip', 'aa94dc74-33a6-46fa-9802-607ecedd81b0.', null, null, null, null, null, null, 'IFCONFIG', '', '0', '2017-12-25 18:54:15', '10', '1');
INSERT INTO `topic` VALUES ('3782', '26', '4', '   关机重启', '01d92ee5-16ee-4a71-bb27-9b4025abf869.', null, null, null, null, null, null, ' -R', '', '0', '2017-12-25 18:54:30', '47', '1');
INSERT INTO `topic` VALUES ('3783', '24', '3', '3.获取ip', 'a7708d6d-d874-44d5-8cc8-3492b25e59a6.', null, null, null, null, null, null, 'DHCLIENT 网卡名称', '', '0', '2017-12-25 18:54:35', '10', '1');
INSERT INTO `topic` VALUES ('3784', '18', '2', '对谈式脚本可用 write 命令达成；', 'ff060782-d098-4ab7-b8b0-bcfed4f1e737.', null, null, null, null, null, null, '错误', '对谈式脚本可用 read 命令达成；', '0', '2017-12-25 18:54:37', '28', '1');
INSERT INTO `topic` VALUES ('3785', '3', '1', 'Java中，以下(  )接口以键_值对的方式存储对象。', 'b03c3a0d-68de-4803-9389-801829a397a2.', 'java.util.Collection', ' java.util.Map', ' java.util.List', ' java.util.Set', '', '', 'B', '', '0', '2017-12-25 18:54:47', '75', '1');
INSERT INTO `topic` VALUES ('3786', '26', '4', '立刻关机', '61463291-f198-4b36-8182-720093df3326.', null, null, null, null, null, null, ' NOW   ', '', '0', '2017-12-25 18:54:53', '47', '1');
INSERT INTO `topic` VALUES ('3787', '24', '3', '查看程序进程', '84986bea-1ca9-47dd-a18c-57170bd0c6d1.', null, null, null, null, null, null, 'PS -EF|GREP 程序名', '', '0', '2017-12-25 18:54:59', '10', '1');
INSERT INTO `topic` VALUES ('3788', '24', '3', '停止进程', 'fbaf5c86-9332-4ed4-856b-da9ec5317b89.', null, null, null, null, null, null, 'KILL -9 进程PID', '', '0', '2017-12-25 18:55:19', '10', '1');
INSERT INTO `topic` VALUES ('3789', '26', '2', '磁盘阵列建置的考量依据为『容量』、『效能』、『数据可靠性』等', 'eb5cd561-b5a8-4618-8bbf-334f682a296a.', null, null, null, null, null, null, '正确', '磁盘阵列建置的考量依据为『容量』、『效能』、『数据可靠性』等', '0', '2017-12-25 18:55:22', '28', '1');
INSERT INTO `topic` VALUES ('3790', '26', '4', '安装软件命令', '5c6fc199-33d0-46d8-aa7d-235af516b23d.', null, null, null, null, null, null, 'SUDO DPKG -I TREE_1.5.3-1_I386.DEB ', '', '0', '2017-12-25 18:55:33', '47', '1');
INSERT INTO `topic` VALUES ('3791', '3', '1', '以下关于对象序列化描述正确的是（）[两项]', 'd2348d77-c813-4826-abe5-b58f99fda6eb.', ' 使用FileOutputStream可以将对象进行传输', '使用PrintWriter可以将对象进行传输', '使用ObjectOutputStream类完成对象存储，使用ObjectInputStream类完成对象读取', ' 对象序列化的所属类需要实现Serializable接口\r\n', '', '', 'CD', '', '0', '2017-12-25 18:55:34', '75', '1');
INSERT INTO `topic` VALUES ('3792', '24', '4', '停止服务', 'cb1a313e-98d3-4104-97cc-38e15feaf916.', null, null, null, null, null, null, 'SERVICE 服务名 STOP', '', '0', '2017-12-25 18:55:38', '10', '1');
INSERT INTO `topic` VALUES ('3793', '3', '4', '请说明构造方法的作用和特征', '8e9ebb54-e853-4c8f-81ec-d54b82ccf667.', null, null, null, null, null, null, '构造方法的作用是用来创建对象，使用NEW关键字调用，构造方法的名字必须与类的名字相同，并且大小写敏感，同时构造方法不能声明返回值类型，可以使用任意一种访问修饰符，但是不能使用其它修饰符进行修饰，如STATIC,FINAL,ABSTACT等修饰符都可以修饰构造方法。', '', '0', '2017-12-25 18:56:07', '51', '1');
INSERT INTO `topic` VALUES ('3794', '24', '4', '用列表方式查看所有文件和文件夹（包含隐藏的）', '0c3f0ef4-b122-4bac-bbdb-adaf85bff6e0.', null, null, null, null, null, null, 'LS -LA', '', '0', '2017-12-25 18:56:11', '10', '1');
INSERT INTO `topic` VALUES ('3795', '3', '1', '在Java中，(  )类可用于创建链表数据结构的对象。', 'bc05b960-be5d-40a5-a284-5349568d97fe.', 'LinkedList', 'ArrayList', 'Collection', ' HashMap', '', '', 'A', '', '0', '2017-12-25 18:56:15', '75', '1');
INSERT INTO `topic` VALUES ('3796', '24', '4', '卸载软件命令', 'ea32eb55-0049-46ff-aad7-283791f033e4.', null, null, null, null, null, null, 'SUDO DPKG -R TREE  ', '', '0', '2017-12-25 18:56:17', '47', '1');
INSERT INTO `topic` VALUES ('3797', '26', '4', '  安装tree命令', 'c4ab4ece-08f4-4900-9d7f-617b4184230b.', null, null, null, null, null, null, 'SUDO APT-GET INSTALL TREE', '', '0', '2017-12-25 18:56:38', '47', '1');
INSERT INTO `topic` VALUES ('3798', '24', '4', '跳转指定路径', '591cfe80-1878-41da-85d9-c3a5ca1d2834.', null, null, null, null, null, null, 'CD 相对路径|/绝对路径    /开头表示绝对路径', '', '0', '2017-12-25 18:56:41', '10', '1');
INSERT INTO `topic` VALUES ('3799', '24', '4', '创建多层文件夹', '9e08476d-97d2-4620-b600-6d9feb296dfc.', null, null, null, null, null, null, 'MKDIR -P /文件夹1/文件夹2', '', '0', '2017-12-25 18:56:58', '10', '1');
INSERT INTO `topic` VALUES ('3800', '26', '2', 'crontab-e配置项目分为七档，[份、时、日、月、周、命令、运行者]为其配置依据；', '640bde8f-8db0-4db6-8449-8172df02bf35.', null, null, null, null, null, null, '错误', 'crontab-e配置项目分为六档，[份、时、日、月、周、命令]为其配置依据；', '0', '2017-12-25 18:57:01', '28', '1');
INSERT INTO `topic` VALUES ('3801', '26', '2', '程序管理的观察命令有：ps,top,pstree等等；', 'f62b63e7-28d8-47a2-90be-d26bcce2f215.', null, null, null, null, null, null, '正确', '程序管理的观察命令有：ps,top,pstree等等；', '0', '2017-12-25 18:58:03', '28', '1');
INSERT INTO `topic` VALUES ('3803', '3', '1', '分析下面这段Java代码，它的运行结果是(  )。Import java.io.*;\r\nPublic class B{\r\nPublic static void main(string [] args){\r\nint i=12;\r\nSystem.out.println(i+=i-=i*=i);}}', '6eef5c39-94fc-4a52-b06c-df13b7947ca9.', '1', '2', ' -12', '程序无法编译', '', '', 'C', '', '0', '2017-12-25 18:58:04', '75', '1');
INSERT INTO `topic` VALUES ('3804', '26', '2', '•	若想要同一管理防火墙的功能，可以透过/etc/hosts.{allow,deny}，或有安装TCP Wrappers时，还能够使用额外的spawn功能等', 'f532d85b-eb8c-4b3f-a2c7-9ffc7a48b017.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 18:58:23', '28', '1');
INSERT INTO `topic` VALUES ('3806', '3', '1', '(如下图所示)下列代码执行结果为:', '09af460c-cf17-4c59-b95f-358425a737d2.png', '代码能编译，打印出\"s=\"', '代码能编译，打印出\"s=null\"', '代码不能编译，因为String s 没有初始化代码能够编译，但是当调用toString()时抛出NullPointerException异常', '代码能编译，打印出\"s=   \"', '', '', 'B', '', '0', '2017-12-25 18:59:06', '73', '1');
INSERT INTO `topic` VALUES ('3807', '24', '4', '查看指定用户信息', 'e0c8c96a-66d6-4572-8dc6-528c5dde1d00.', null, null, null, null, null, null, 'CAT /ETC/PASSWD | GREP TEST1', '', '0', '2017-12-25 18:59:14', '10', '1');
INSERT INTO `topic` VALUES ('3808', '26', '2', '立即启动stand alone daemon的方法亦可以使用stand这个命令', '84e547fa-2196-4a51-a225-0f1c97f2250e.', null, null, null, null, null, null, '错误', '立即启动stand alone daemon的方法亦可以使用service这个命令', '0', '2017-12-25 18:59:19', '28', '1');
INSERT INTO `topic` VALUES ('3809', '24', '4', '查看服务是否随机启动', '70d4131e-93b9-42ba-82a3-4adef7ff7635.', null, null, null, null, null, null, 'CHKCONFIG --LIST |GREP MYSQL ', '', '0', '2017-12-25 18:59:41', '10', '1');
INSERT INTO `topic` VALUES ('3810', '24', '4', '设置mysqld随机启动', '66902c8e-db8b-4fcc-a9ed-a5909a2510d7.', null, null, null, null, null, null, 'CHKCONFIG MYSQLD ON ', '', '0', '2017-12-25 18:59:53', '10', '1');
INSERT INTO `topic` VALUES ('3811', '26', '2', '系统的登录文件默认都集中放置到/var/log/目录内，其中又以messages记录的资讯最多！', 'e4531517-01c2-42dc-b016-4b115d0fc087.', null, null, null, null, null, null, '正确', '系统的登录文件默认都集中放置到/var/log/目录内，其中又以messages记录的资讯最多！', '0', '2017-12-25 19:00:00', '28', '1');
INSERT INTO `topic` VALUES ('3812', '24', '4', '查看CentOS自带mysql是否已安装。', '8fc30f2a-26dc-461d-9c71-aedf059f0309.', null, null, null, null, null, null, 'YUM LIST INSTALLED | GREP MYSQL', '', '0', '2017-12-25 19:00:16', '10', '1');
INSERT INTO `topic` VALUES ('3813', '3', '1', '存储过程pro有两个参数，第一个为输入参数，第二个为输出参数，以下代码正确的是（）', 'dfc573ad-1e1d-44c2-9249-4ab545dc53ec.', 'CallableStatement cst=con.prepareCall(̶(call pro(?，?))”);', ' CallableStatement cst=con.prepareCall(̶(call pro(?))”);', ' CallableStatement cst=con.prepareCall(̶{call pro(?，?)}”);', 'CallableStatement cst=con.prepareCall(̶{call pro(?，?，?)}”);\r\n', '', '', 'C', '', '0', '2017-12-25 19:00:22', '75', '1');
INSERT INTO `topic` VALUES ('3814', '26', '2', '其实核心就是系统上面的一个文件而已，这个文件包含了驱动主机各项硬件的侦测程序与驱动模块；', '3625b712-9497-4e5d-b748-66f4f57a5822.', null, null, null, null, null, null, '正确', '其实核心就是系统上面的一个文件而已，这个文件包含了驱动主机各项硬件的侦测程序与驱动模块；', '0', '2017-12-25 19:00:39', '28', '1');
INSERT INTO `topic` VALUES ('3816', '32', '4', '左向外连接，右向外连接，全联接的关键字如何写？', 'c7d8ba6c-3a14-4ba0-8152-947387159bb5.', null, null, null, null, null, null, 'LEFT OUTER JOIN或LEFT JOIN\r\nRIGHT JOIN或RIGHT OUTER JOIN\r\nFULL JOIN或FULL OUTER JOIN', '多看有关的课本', '0', '2017-12-25 19:01:05', '64', '1');
INSERT INTO `topic` VALUES ('3818', '24', '4', '41.查看用户所在的组', '8e5145c9-0858-4bcd-ba12-ab3d065e27d0.', null, null, null, null, null, null, 'GROUPS 用户名', '', '0', '2017-12-25 19:01:39', '10', '1');
INSERT INTO `topic` VALUES ('3819', '26', '4', '从组内删除用户', '1b3ca2ec-cd26-429b-a2af-61eec99b54d4.', null, null, null, null, null, null, '编辑/ETC/GROUP 找到GROUP1那一行，删除 A删除用户', '', '0', '2017-12-25 19:01:57', '10', '1');
INSERT INTO `topic` VALUES ('3820', '26', '2', '储存媒体的选择方式，需要考虑的地方有：下载速度、媒体的容量、经费与网速的可靠性等。', '2e13b0a1-c768-4be2-a39b-270eafc2ad98.', null, null, null, null, null, null, '错误', '储存媒体的选择方式，需要考虑的地方有：备份速度、媒体的容量、经费与媒体的可靠性等。', '0', '2017-12-25 19:02:08', '28', '1');
INSERT INTO `topic` VALUES ('3821', '24', '4', '给已有的用户增加工作组（会把用户从其他组中去掉）', '5fe5b3e6-f78c-4b68-92bb-1ebf36ca0ca1.', null, null, null, null, null, null, 'USERMOD -G 组名 用户名', '', '0', '2017-12-25 19:02:20', '10', '1');
INSERT INTO `topic` VALUES ('3822', '33', '4', 'EJB与JAVA BEAN的区别?', '80dde309-9fb4-4791-9778-9b2e2b63706c.', null, null, null, null, null, null, 'JAVA BEAN 是可复用的组件，对JAVA BEAN并没有严格的规范，理论上讲，任何一个JAVA类都可以是一个BEAN。但通常情况下，由于JAVA BEAN是被容器所创建(如TOMCAT)的，所以JAVA BEAN应具有一个无参的构造器，另外，通常JAVA BEAN还要实现SERIALIZABLE接口用于实现BEAN的持久性。JAVA BEAN实际上相当于微软COM模型中的本地进程内COM组件，它是不能被跨进程访问的', '', '0', '2017-12-25 19:02:23', '51', '1');
INSERT INTO `topic` VALUES ('3823', '24', '4', '新建用户同时增加工作组', '7fce4add-c93c-45e4-a8d6-d96461bc7c20.', null, null, null, null, null, null, 'USERADD -G 组名 用户名', '', '0', '2017-12-25 19:02:38', '10', '1');
INSERT INTO `topic` VALUES ('3824', '26', '2', '列印组件主要有：列印命令、列印工作、列印伫列、列印服务、打印机', '8c475568-d06d-4172-9c57-f12a1cdcf70e.', null, null, null, null, null, null, '正确', '列印组件主要有：列印命令、列印工作、列印伫列、列印服务、打印机', '0', '2017-12-25 19:02:53', '28', '1');
INSERT INTO `topic` VALUES ('3825', '24', '4', '删除用户组（组必须是空的）', 'c453cf2d-499d-4862-840c-c2e56edb1f3d.', null, null, null, null, null, null, 'GROUPDEL 组名', '', '0', '2017-12-25 19:03:09', '10', '1');
INSERT INTO `topic` VALUES ('3826', '3', '4', '用Runnable还是Thread?', '22c016cf-69f7-4806-a783-280e0879ed38.', null, null, null, null, null, null, '这个问题是上题的后续，大家都知道我们可以通过继承THREAD类或者调用RUNNABLE接口来实现线程，问题是，那个方法更好呢?什么情况下使 用它?这个问题很容易回答，如果你知道JAVA不支持类的多重继承，但允许你调用多个接口。所以如果你要继承其他类，当然是调用RUNNABLE接口好 了。更多详细信息请点击这里。', '', '0', '2017-12-25 19:03:12', '51', '1');
INSERT INTO `topic` VALUES ('3827', '26', '2', '网络打印机的格式主要有：app，sbb等类别', 'bae1b9c4-e1c0-4cd2-8966-a4ede9844f5e.', null, null, null, null, null, null, '错误', '网络打印机的格式主要有：ipp，smb等类别', '0', '2017-12-25 19:03:37', '28', '1');
INSERT INTO `topic` VALUES ('3829', '3', '1', '下列描述中，哪些符合Java语言的特征（多选）', '8d74193b-53bf-4748-b860-8d156b34487c.', '支持跨平台（Windows，Linux，Unix）等', 'GC（自动垃圾回收），提高了代码的安全性', '支持类C的指针运算操作', '不支持与其他语言书写的程序进行通讯', '', '', 'AB', '', '0', '2017-12-25 19:03:42', '73', '1');
INSERT INTO `topic` VALUES ('3830', '24', '4', '文件拷贝', '45f3ea5d-d3cb-40cb-9608-a2a0190e4906.', null, null, null, null, null, null, 'CP SOURCEFILE DESTFILE', '', '0', '2017-12-25 19:04:08', '47', '1');
INSERT INTO `topic` VALUES ('3831', '24', '4', '查看目录结构', 'e4e7ceb3-b38b-4b75-a4bc-9df6ff5b15b5.', null, null, null, null, null, null, 'TREE 文件夹名', '', '0', '2017-12-25 19:04:16', '10', '1');
INSERT INTO `topic` VALUES ('3832', '26', '4', '重命名文件或移动文件', '98524945-afbe-45c5-bf34-24d292259368.', null, null, null, null, null, null, 'MV OLDNAME NEWNAME ', '', '0', '2017-12-25 19:04:30', '47', '1');
INSERT INTO `topic` VALUES ('3833', '26', '4', '删除文件', '91d0f4a2-6b35-4468-a38a-655e944421ee.', null, null, null, null, null, null, 'RM FILE', '', '0', '2017-12-25 19:04:58', '47', '1');
INSERT INTO `topic` VALUES ('3834', '24', '4', '得到文件类型', '94f79697-be39-43a6-8861-d8626241ab5d.', null, null, null, null, null, null, 'FILE SOMEFILE', '', '0', '2017-12-25 19:05:21', '47', '1');
INSERT INTO `topic` VALUES ('3835', '32', '4', 'inner join 是什么意思？作用是什么？写出基本语法结构', '739f395f-6136-41fe-a78b-1aa50e15108a.', null, null, null, null, null, null, '内连接\r\n此内连接称为相等联接。他返回两个表中的所有列，但只返回在连接列中具有相等值的行\r\nSELECT * FROM T1 INNER JOIN T2 ON T1.ID=T2.ID', '', '0', '2017-12-25 19:05:24', '64', '1');
INSERT INTO `topic` VALUES ('3836', '24', '4', '提示用户输入，并将输入赋值给变量', 'd3ce9df1-4080-471f-b041-745f11b6cff0.', null, null, null, null, null, null, 'READ VAR', '', '0', '2017-12-25 19:05:38', '47', '1');
INSERT INTO `topic` VALUES ('3837', '26', '4', ' 打印文本文件开头几行', 'aa7c339b-e20b-4574-9965-7032c50216aa.', null, null, null, null, null, null, 'HEAD FILE', '', '0', '2017-12-25 19:05:52', '47', '1');
INSERT INTO `topic` VALUES ('3839', '3', '1', ' 以下对异常的描述不正确的有（）', '4685a30b-6aa3-4524-9a2f-affa8a6bc5b1.', 'Throwable是所有异常类的父类', 'Exception是所有异常类父类', '异常分为Error和Exception', ' Exception包括RuntimeException和RuntimeException之外的异常', '', '', 'B', '', '0', '2017-12-25 19:06:32', '75', '1');
INSERT INTO `topic` VALUES ('3840', '33', '4', 'Java中什么是竞态条件? 举个例子说明。', 'd62dc14a-0266-4d8d-b210-52c60bf29b7e.', null, null, null, null, null, null, '竞态条件会导致程序在并发情况下出现一些BUGS。多线程对一些资源的竞争的时候就会产生竞态条件，如果首先要执行的程序竞争失败排到后面执行了， 那么整个程序就会出现一些不确定的BUGSJAVA面试题2017年及答案文章JAVA面试题2017年及答案出自HTTP://WWW.GKSTK.COM/ARTICLE/WK-78500001980498.HTML，转载请保留此链接！。这种BUGS很难发现而且会重复出现，因为线程间的随机竞争。一个例子就是无序处理，详见答案。', '', '0', '2017-12-25 19:06:58', '51', '1');
INSERT INTO `topic` VALUES ('3841', '26', '4', 'linux内核里面，内存申请有哪几个函数，各自的区别？', 'd3786cff-589c-4da7-a54f-74f3890641a3.', null, null, null, null, null, null, 'KMALLOC()   __GET_FREE_PAGE()  MEMPOOL_CREATE()', '', '0', '2017-12-25 19:07:00', '28', '1');
INSERT INTO `topic` VALUES ('3842', '26', '4', '设备驱动模型三个重要成员是？platfoem总线的匹配规则是？在具体应用上要不要先注册驱动再注册设备？有先后顺序没？', 'b0943be3-2384-4e09-b6ae-1a0603eb524e.', null, null, null, null, null, null, '设备驱动模型三个重要成员是 总线、设备、驱动；\r\n         PLATFOEM总线的匹配规则是：要匹配的设备和驱动都要注册；', '', '0', '2017-12-25 19:07:37', '28', '1');
INSERT INTO `topic` VALUES ('3843', '33', '4', 'Java中如何停止一个线程?', '39f9e58b-c314-4e4a-bed7-7da0e0b2c999.', null, null, null, null, null, null, 'JAVA提供了很丰富的API但没有为停止线程提供API。JDK 1.0本来有一些像STOP(), SUSPEND() 和 RESUME()的控制方法但是由于潜在的死锁威胁因此在后续的JDK版本中他们被弃用了，之后JAVA API的设计者就没有提供一个兼容且线程安全的方法来停止一个线程。当RUN() 或者 CALL() 方法执行完的时候线程会自动结束,如果要手动结束一个线程，你可以用VOLATILE 布尔变量来退出RUN()方法的循环或者是取消任务来中断线程。点击这里查看示例代码。', '', '0', '2017-12-25 19:07:39', '51', '1');
INSERT INTO `topic` VALUES ('3844', '32', '4', 'truncate table 命令是什么含义？', 'e6cd368d-38e4-4459-9277-0cee8d60deb6.', null, null, null, null, null, null, 'TRUNCATE是SQL中的一个删除数据表内容耳朵语句', '', '0', '2017-12-25 19:07:45', '64', '1');
INSERT INTO `topic` VALUES ('3845', '33', '4', '一个线程运行时发生异常会怎样?', '40f42684-f719-47be-a4b8-361da0a4a281.', null, null, null, null, null, null, '这是我在一次面试中遇到的一个很刁钻的JAVA面试题, 简单的说，如果异常没有被捕获该线程将会停止执行。THREAD.UNCAUGHTEXCEPTIONHANDLER是用于处理未捕获异常造成线程突然中 断情况的一个内嵌接口。当一个未捕获异常将造成线程中断的时候JVM会使用THREAD.GETUNCAUGHTEXCEPTIONHANDLER()来 查询线程的UNCAUGHTEXCEPTIONHANDLER并将线程和异常作为参数传递给HANDLER的UNCAUGHTEXCEPTION()方法 进行处理。', '', '0', '2017-12-25 19:08:16', '51', '1');
INSERT INTO `topic` VALUES ('3846', '3', '1', '在try-catch-finally语句块中，以下可以单独与finally一起使用的是（）', '07066be4-1e7f-4148-abc9-69570e6d6a1d.', ' catch', ' try', 'throws', 'throw', '', '', 'B', '', '0', '2017-12-25 19:08:35', '75', '1');
INSERT INTO `topic` VALUES ('3847', '26', '4', 'spinlock自旋锁是如何实现的？', '6a57ec0d-f524-4f86-8b84-c15cc1734f90.', null, null, null, null, null, null, '自旋锁在同一时刻只能被最多一个内核任务持有，所以一个时刻只有一个线程允许存在于临界区中。这点可以应用在多处理机器、或运行在单处理器上的抢占式内核中需要的锁定服务。', '', '0', '2017-12-25 19:08:55', '28', '1');
INSERT INTO `topic` VALUES ('3848', '26', '4', '如何在两个线程间共享数据?', '5ece135c-2377-4aa7-9cb7-81805359aab2.', null, null, null, null, null, null, '你可以通过共享对象来实现这个目的，或者是使用像阻塞队列这样并发的数据结构JAVA面试题2017年及答案JAVA认证\r\n\r\nWISEMEDIA\r\n\r\n这篇教程《JAVA线程间通信》(涉及到在两个线程间共享对象)用WAIT和NOTIFY方法实现了生产者消费者模型。', '', '0', '2017-12-25 19:09:03', '51', '1');
INSERT INTO `topic` VALUES ('3849', '26', '4', '在Linux C中，ls这个命令是怎么被执行的?', '865eff24-ad51-4dd3-b495-f07a51960a8f.', null, null, null, null, null, null, '使用FORK创建一个进程或EXEC函数族覆盖原进程。\r\n', '', '0', '2017-12-25 19:09:21', '28', '1');
INSERT INTO `topic` VALUES ('3850', '3', '4', 'Java中notify 和 notifyAll有什么区别?', '0cceff35-722d-48b3-a6dc-30ee2d60d6c3.', null, null, null, null, null, null, '这又是一个刁钻的问题，因为多线程可以等待单监控锁，JAVA API 的设计人员提供了一些方法当等待条件改变的时候通知它们，但是这些方法没有完全实现。NOTIFY()方法不能唤醒某个具体的线程，所以只有一个线程在等 待的时候它才有用武之地。而NOTIFYALL()唤醒所有线程并允许他们争夺锁确保了至少有一个线程能继续运行。我的博客有更详细的资料和示例代码。', '', '0', '2017-12-25 19:09:55', '51', '1');
INSERT INTO `topic` VALUES ('3851', '32', '4', 'truncate table 和 delete from 表名有什么区别？', 'fee6527b-334b-4f9e-8309-908d806f8a0f.', null, null, null, null, null, null, '二者都是删除表中的全部行，但前者比后者速度快且使用的系统和事务日志资源少', '', '0', '2017-12-25 19:10:14', '64', '1');
INSERT INTO `topic` VALUES ('3852', '18', '4', 'YSQL相比于其他数据库有哪些特点？', '202b89b4-28ba-4c20-9597-780ced31d27f.', null, null, null, null, null, null, 'MYSQL是一个小型关系型数据库管理系统，开发者为瑞典MYSQL AB公司，现在已经被SUN公司收购，支持FREEBSD、LINUX、MAC、WINDOWS等多种操作系统与其他的大型数据库例如ORACLE、DB2、SQL SERVER等相比功能稍弱一些 \r\n1、可以处理拥有上千万条记录的大型数据 \r\n2、支持常见的SQL语句规范 \r\n3、可移植行高，安装简单小巧 \r\n4、良好的运行效率，有丰富信息的网络支持 \r\n5、调试、管理，优化简单（相对其他大型数据库）', '', '0', '2017-12-25 19:10:29', '19', '1');
INSERT INTO `topic` VALUES ('3853', '3', '1', '访问修饰符作用范围由大到小是（）', 'd09215dc-a75c-4685-a3f2-1f110c83b7c2.', 'private-default-protected-public', 'public-default-protected-private', ' private-protected-default-public', ' public-protected-default-private\r\n', '', '', 'D', '', '0', '2017-12-25 19:10:44', '75', '1');
INSERT INTO `topic` VALUES ('3854', '3', '1', '以下关于final关键字说法错误的是（）（两项）', '351f372d-d0b9-4c41-8455-540f67178ee8.', ' final是java中的修饰符，可以修饰类、接口、抽象类、方法和属性', 'final修饰的类肯定不能被继承', ' final修饰的方法不能被重载', 'final修饰的变量不允许被再次赋值', '', '', 'AC', '', '0', '2017-12-25 19:11:28', '75', '1');
INSERT INTO `topic` VALUES ('3855', '3', '4', '什么是FutureTask?', 'e7114b3c-4bad-426b-874b-292e431a9170.', null, null, null, null, null, null, '在JAVA并发程序中FUTURETASK表示一个可以取消的异步运算JAVA面试题2017年及答案JAVA面试题2017年及答案。它有启动和取消运算、查询运算是否完成和取回运算结果等方法。只有当运算完 成的时候结果才能取回，如果运算尚未完成GET方法将会阻塞。一个FUTURETASK对象可以对调用了CALLABLE和RUNNABLE的对象进行包 装，由于FUTURETASK也是调用了RUNNABLE接口所以它可以提交给EXECUTOR来执行。', '', '0', '2017-12-25 19:11:29', '51', '1');
INSERT INTO `topic` VALUES ('3856', '18', '4', '请简洁地描述下MySQL中InnoDB支持的四种事务隔离级别名称，以及逐级之间的区别？', '42a738d7-42cc-4425-b3ab-f5eacecb23e4.', null, null, null, null, null, null, 'SQL标准定义的四个隔离级别为： \r\nREAD UNCOMMITED：读取未提交内容 \r\nREAD COMMITTED：读取提交内容 \r\nREPEATABLE READ：可重读 \r\nSERIALIZABLE：可串行化 ', '', '0', '2017-12-25 19:11:43', '19', '1');
INSERT INTO `topic` VALUES ('3857', '32', '4', '说出以下聚合函数的含义：avg,sum,max,min,count', 'ad9f1ba4-9a40-4076-af17-6432f3a1cc8c.', null, null, null, null, null, null, '平均值，求和，最大值，最小值，数量', '', '0', '2017-12-25 19:12:04', '64', '1');
INSERT INTO `topic` VALUES ('3858', '26', '2', '设置samba文件共享需要编译的文件是/etc/samba/smb/smb.conf文件 。  ', '7c715de9-9311-4300-820a-34928c31f3c3.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:12:20', '40', '1');
INSERT INTO `topic` VALUES ('3859', '3', '4', ' Java中interrupted 和 isInterruptedd方法的区别?', '81f67238-dcc3-484e-80d4-e8ad3d67edd3.', null, null, null, null, null, null, 'INTERRUPTED() 和 ISINTERRUPTED()的主要区别是前者会将中断状态清除而后者不会。JAVA多线程的中断机制是用内部标识来实现的，调用THREAD.INTERRUPT()来中断一个线程就会设置中断标识为TRUE。当中断线程调用静态方法THREAD.INTERRUPTED()来 检查中断状态时，中断状态会被清零。而非静态方法ISINTERRUPTED()用来查询其它线程的中断状态且不会改变中断状态标识。简单的说就是任何抛 出INTERRUPTEDEXCEPTION异常的方法都会将中断状态清零。', '', '0', '2017-12-25 19:12:23', '51', '1');
INSERT INTO `topic` VALUES ('3860', '26', '2', '查看NFS服务器中的输出目录的命令是 showmount 。               ', 'f676078e-16de-4984-941a-67918003c5aa.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:12:38', '40', '1');
INSERT INTO `topic` VALUES ('3861', '3', '4', '为什么wait和notify方法要在同步块中调用?', '93122fdb-279b-4f53-8360-06b3fd57e15e.', null, null, null, null, null, null, '主要是因为JAVA API强制要求这样做，如果你不这么做，你的代码会抛出ILLEGALMONITORSTATEEXCEPTION异常。还有一个原因是为了避免WAIT和NOTIFY之间产生竞态条件。', '', '0', '2017-12-25 19:12:46', '51', '1');
INSERT INTO `topic` VALUES ('3862', '26', '2', 'ifconfig命令是用于做简单的主机名的信息查询。 ', 'e42e9add-d7f9-4f95-a021-5818dfb569b0.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:12:57', '40', '1');
INSERT INTO `topic` VALUES ('3863', '26', '2', 'search用于指明DNS域名搜索的顺序 。         ', '03939eee-2bfb-41bc-9ca0-08274cdc429f.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:13:15', '40', '1');
INSERT INTO `topic` VALUES ('3864', '33', '4', '为什么你应该在循环中检查等待条件?', 'b2cdce40-7329-4ead-bb6d-e0a889f86312.', null, null, null, null, null, null, '处于等待状态的线程可能会收到错误警报和伪唤醒，如果不在循环中检查等待条件，程序就会在没有满足结束条件的情况下退出。因此，当一个等待线程醒来 时，不能认为它原来的等待状态仍然是有效的，在NOTIFY()方法调用之后和等待线程醒来之前这段时间它可能会改变。这就是在循环中使用WAIT()方 法效果更好的原因，你可以在ECLIPSE中创建模板调用WAIT和NOTIFY试一试。', '', '0', '2017-12-25 19:13:27', '51', '1');
INSERT INTO `topic` VALUES ('3865', '26', '2', '图形界面下使用system-config-network对DHCP进行配置。', 'ea165ee2-7ac3-4bb9-b453-92c1273244e5.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:13:29', '40', '1');
INSERT INTO `topic` VALUES ('3866', '26', '2', '自旋锁在同一时刻只能被最多一个内核任务持有，所以一个时刻只有一个线程允许存在于临界区中。', '3f386cbe-6376-4945-91df-978fa9e39ce9.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:13:39', '28', '1');
INSERT INTO `topic` VALUES ('3867', '26', '4', '你如何确定 MySQL 是否处于运行状态？', '5c6bcd27-02ab-480a-9683-2d84c54578a0.', null, null, null, null, null, null, '你如何确定 MYSQL 是否处于运行状态？', '', '0', '2017-12-25 19:13:49', '19', '1');
INSERT INTO `topic` VALUES ('3868', '3', '4', '方法重载（Overloading）和 Java中的方法覆盖（Overwrite）是什么意思？', '5a60d3e9-0df0-4803-ac77-c9ba703e3489.', null, null, null, null, null, null, '重载OVERLOAD表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同(即参数个数或类型不同)。\r\n重写OVERRIDE表示子类中的方法可以与父类的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现。\r\n', '', '0', '2017-12-25 19:15:28', '73', '1');
INSERT INTO `topic` VALUES ('3869', '33', '4', 'Java中堆和栈有什么不同?', '4f46afc6-2495-4e94-afe0-a5af59322001.', null, null, null, null, null, null, '为什么把这个问题归类在多线程和并发面试题里?因为栈是一块和线程紧密相关的内存区域。每个线程都有自己的栈内存，用于存储本地变量，方法参数和栈 调用，一个线程中存储的变量对其它线程是不可见的。而堆是所有线程共享的一片公用内存区域。对象都在堆里创建，为了提升效率线程会从堆中弄一个缓存到自己 的栈，如果多个线程使用该变量就可能引发问题，这时VOLATILE 变量就可以发挥作用了，它要求线程从主存中读取变量的值。', '', '0', '2017-12-25 19:15:44', '51', '1');
INSERT INTO `topic` VALUES ('3870', '26', '4', '本章所安装的 samba 软件未来还会使用到，因此请先移除 samba 软件，并将本章例题中改写的 /etc/crontab 内容取消 (共两行)。', 'a9d12e7a-7842-4d70-9f08-68d46cb657f0.', null, null, null, null, null, null, '透过 YUM REMOVE SAMBA 或 RPM -E SAMBA 均可，然后用 VIM /ETC/CRONTAB 将那两行取消吧！', '', '0', '2017-12-25 19:16:02', '47', '1');
INSERT INTO `topic` VALUES ('3871', '26', '4', '什么是线程池? 为什么要使用它?', '296f9179-927b-4827-b17a-58e4fef0cccf.', null, null, null, null, null, null, '创建线程要花费昂贵的资源和时间，如果任务来了才创建线程那么响应时间会变长，而且一个进程能创建的线程数有限。为了避免这些问题，在程序启动的时 候就创建若干线程来响应处理，它们被称为线程池，里面的线程叫工作线程从JDK1.5开始，JAVA API提供了EXECUTOR框架让你可以创建不同的线程池。比如单线程池，每次处理一个任务;数目固定的线程池或者是缓存线程池(一个适合很多生存期短 的任务的程序的可扩展线程池)。', '', '0', '2017-12-25 19:16:19', '51', '1');
INSERT INTO `topic` VALUES ('3873', '26', '4', 'linux抢占发生的时间分为哪两部分？', '18d1223a-519f-4f23-9904-a1764c2135e8.', null, null, null, null, null, null, '抢占分为用户抢占和内核抢占', '', '0', '2017-12-25 19:16:30', '28', '1');
INSERT INTO `topic` VALUES ('3874', '26', '2', 'chkconfig命令用于检测、设置系统的各种服务。', 'd28f56df-ef75-426e-97ce-44ffd9943c29.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:17:08', '40', '1');
INSERT INTO `topic` VALUES ('3875', '26', '4', '用户抢占在哪种情况下产生', '854d3fee-59a9-440e-a158-643cce644618.', null, null, null, null, null, null, ' 从系统调用返回用户空间\r\n 从中断处理程序返回用户空间', '', '0', '2017-12-25 19:17:38', '28', '1');
INSERT INTO `topic` VALUES ('3878', '26', '2', '管理员用户是Vsftp中的三类用户之一。', 'f4024d8e-bdcc-4420-a748-6e80a585aabe.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:17:42', '40', '1');
INSERT INTO `topic` VALUES ('3881', '26', '2', 'IMAP4是常用的电子邮件协议。', 'b14350c7-4bde-4c90-bc2b-d220d9435124.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:17:56', '40', '1');
INSERT INTO `topic` VALUES ('3882', '26', '2', 'Apache服务器的主配置文件httpd.conf放在/etc/httpd.conf中。', 'f097ce8e-2f72-4677-8488-8e12e56c1b3a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:18:18', '40', '1');
INSERT INTO `topic` VALUES ('3883', '32', '4', 'ajax请求总共有多少种callback?', '81fe0ee6-91a5-452f-81c7-9f67a52e902b.', null, null, null, null, null, null, 'ONSUCCESS\r\nONFAILUER\r\nONUNINITIALIZED\r\nONLOADING\r\nONLOADED\r\nONINTERACTIVE\r\nONCOMPLETE\r\nONEXCEPTION', '', '0', '2017-12-25 19:18:43', '64', '1');
INSERT INTO `topic` VALUES ('3884', '3', '4', '什么是ThreadLocal变量？', 'e8eedca5-4851-4db4-864b-4af4b19026ca.', null, null, null, null, null, null, 'THREADLOCAL是JAVA里一种特殊的变量。每个线程都有一个THREADLOCAL就是每个线程都拥有了自己独立的一个变量，竞争条件被彻底消除了。它是为创建代价高昂的对象获取线程安全的好方法，比如你可以用THREADLOCAL让SIMPLEDATEFORMAT变成线程安全的，因为那个类创建代价高昂且每次调用都需要创建不同的实例所以不值得在局部范围使用它，如果为每个线程提供一个自己独有的变量拷贝，将大大提高效率。首先，通过复用减少了代价高昂的对象的创建个数。其次，你在没有使用高代价的同步或者不变性的情况下获得了线程安全。线程局部变量的另一个不错的例子是THREADLOCALRANDOM类，它在多线程环境中减少了创建代价高昂的RANDOM对象的个数。', '', '0', '2017-12-25 19:19:09', '51', '1');
INSERT INTO `topic` VALUES ('3885', '26', '4', '我以原始码的方式进行一个软件的安装，但是在分析系统的时候，分析程序一直告诉我找不到 cc 这个指令，请问这是什么问题？为何需要 cc ？又，我该如何解决这个问题，好让软件可以顺利的被安装在我的 Linux 上面？', '229a2f2e-b49f-481c-bee2-be9533eb28c8.', null, null, null, null, null, null, '因为是原始码，所以还需要编译程序来将该原始码编译成为可以在你的 LINUX 系统上面跑的 BINARY 档案，在 LINUX 上头默认的编译程序就是 GCC 这个编译程序(COMPILER)。如果你在安装 LINUX 的时候，使用 LINUX INSTALLER 默认的软件选择，那通常会没有安装 GCC 以及 MAKE 等软件，此时，请使用 YUM 去处理软件的安装吧！', '', '0', '2017-12-25 19:19:31', '47', '1');
INSERT INTO `topic` VALUES ('3886', '26', '4', '内核抢占会发生在什么情况下', '57d90937-fa65-4abb-b470-291c17636d31.', null, null, null, null, null, null, '当从中断处理程序返回内核空间的时候，且当时内核具有可抢占性；\r\n当内核代码再一次具有可抢占性的时候。（如:SPIN_UNLOCK时）\r\n内核中的任务显式的调用SCHEDULE()\r\n内核中的任务阻塞。', '', '0', '2017-12-25 19:19:51', '28', '1');
INSERT INTO `topic` VALUES ('3887', '26', '2', '.Linux\r\n\r\n操作系统不能像\r\n\r\nWindows\r\n\r\n那样使用桌面系统（\r\n\r\n错\r\n\r\n  \r\n\r\n）\r\n', 'df030b89-77b2-4707-99de-08eacef040ea.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:19:53', '40', '1');
INSERT INTO `topic` VALUES ('3888', '24', '4', '列出文件详细信息l(list)', '2e259908-f752-49e7-bd76-493d5a95f334.', null, null, null, null, null, null, '  -L ', '', '0', '2017-12-25 19:20:17', '19', '1');
INSERT INTO `topic` VALUES ('3889', '26', '4', '我发现我的 Linux 系统怪怪的，似乎有什么不知名的程序在内存当中跑，我该如何将这个不知名的程序捉出来，并且将他移除？', 'd796194f-d87b-45b6-b6ab-57fb7bbe5e2e.', null, null, null, null, null, null, '如果要捉出程序(PROCESS)的话，可以使用 PS -AUX 或者是直接输入 TOP 来查询 PROCESS 的 ID (PID)，找到 PID 号码后，再以 KILL -9 PID 来删除该程序即可。', '', '0', '2017-12-25 19:20:17', '47', '1');
INSERT INTO `topic` VALUES ('3890', '26', '4', '我总是无法编辑某个档案，你认为应该是什么问题造成的？那又要怎么解决？', 'ca7a74df-8727-4773-b77f-73a6ae88b2b7.', null, null, null, null, null, null, '法编辑某个档案，可以先使用 FILE 这个指令来查询一下该档案的格式，例如想察看 /ETC/SHADOW 的格式，可以下达： 『FILE /ETC/SHADOW』，如果是文本文件，却还是无法编辑，那么最可能发生的原因就是『权限』的问题了。可以使用 LS -L FILENAME 察看档案权限，再以 CHMOD 或 CHOWN 来修订该档案的权限。此外，该档案也可能含有隐藏属性，可以使用 LSATTR FILENAME 查阅，再以 CHATTR 来修订隐藏属性。', '', '0', '2017-12-25 19:20:30', '47', '1');
INSERT INTO `topic` VALUES ('3891', '26', '4', ' 列出当前目录下所有文件及目录，包括隐藏的a(all)', '4e1934e0-cf9b-4ca5-96b9-92fda5492083.', null, null, null, null, null, null, ' -A   ', '', '0', '2017-12-25 19:20:35', '19', '1');
INSERT INTO `topic` VALUES ('3892', '26', '2', '主机的网络配置要成功，必须要有底下的数据：（1）IP（2）Netmask（3）gateway（4）DNS服务器等项目；', 'aa2865a5-0e16-4857-8d85-817528142408.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:20:36', '28', '1');
INSERT INTO `topic` VALUES ('3893', '26', '2', '与普通的\r\n\r\nUNIX\r\n\r\n系统一样，\r\n\r\nLinux\r\n\r\n使用树状的文件系统\r\n', 'bc629850-48ee-45b5-9ca4-335346b1b29d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:20:47', '40', '1');
INSERT INTO `topic` VALUES ('3894', '26', '2', 'CentOS 提供了好用的setup功能，可以帮忙配置（1）认证方式（2）防火墙配置（3）键盘格式（4）网络配置（5）系统默认启动的服务配置（6）时区配置（7）X解析度与硬件配置等功能；', 'f20f1467-d708-498b-b6d5-7a8ef0b4108d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:20:55', '28', '1');
INSERT INTO `topic` VALUES ('3895', '33', '4', '如何避免死锁？', '443d410e-35a6-4cae-b9b2-62b71ce613da.', null, null, null, null, null, null, 'JAVA多线程中的死锁\r\n死锁是指两个或两个以上的进程在执行过程中，因争夺资源而造成的一种互相等待的现象，若无外力作用，它们都将无法推进下去。这是一个严重的问题，因为死锁会让你的程序挂起无法完成任务，死锁的发生必须满足以下四个条件：\r\n\r\n互斥条件：一个资源每次只能被一个进程使用。\r\n请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。\r\n不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。\r\n循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。', '', '0', '2017-12-25 19:20:57', '51', '1');
INSERT INTO `topic` VALUES ('3896', '33', '4', ' Java中活锁和死锁有什么区别？', '32c3172f-d100-4ba4-b037-081534e1d11d.', null, null, null, null, null, null, '这是上题的扩展，活锁和死锁类似，不同之处在于处于活锁的线程或进程的状态是不断改变的，活锁可以认为是一种特殊的饥饿。一个现实的活锁例子是两个人在狭小的走廊碰到，两个人都试着避让对方好让彼此通过，但是因为避让的方向都一样导致最后谁都不能通过走廊。简单的说就是，活锁和死锁的主要区别是前者进程的状态可以改变但是却不能继续执行。', '', '0', '2017-12-25 19:21:21', '51', '1');
INSERT INTO `topic` VALUES ('3897', '26', '2', 'Linux\r\n\r\n中，设备被当成文件来处理，通常\r\n\r\nLinux\r\n\r\n的设备文件被分成字符设备和块设备，字符设备通常是类似于终端那样可\r\n\r\n以用处理文本文件的方式来处理的东西。\r\n', '7969fc0f-ad0d-4a42-91c9-771c56fe101d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:21:37', '40', '1');
INSERT INTO `topic` VALUES ('3898', '6', '4', 'ajax的优点？', 'f4f64593-f251-401d-87bb-7831fb686a5e.', null, null, null, null, null, null, '能在不更新整个页面的前提下维护数据，这使得WEB应用程序更为迅捷地回应用户动作，并避免了在网络上发送那些没有改变过的信息', '', '0', '2017-12-25 19:22:09', '64', '1');
INSERT INTO `topic` VALUES ('3899', '26', '2', '在Linux系统当中，最标准的C语言编译器为C#；', '9f2ccbff-6705-4864-b2cb-35d31c794363.', null, null, null, null, null, null, '错误', '在Linux系统当中，最标准的C语言编译器为gcc；', '0', '2017-12-25 19:22:40', '28', '1');
INSERT INTO `topic` VALUES ('3900', '26', '4', '  创建目录', '414fd562-d27a-40a1-8798-7f388bf91c3b.', null, null, null, null, null, null, 'MKDIR', '', '0', '2017-12-25 19:22:41', '19', '1');
INSERT INTO `topic` VALUES ('3901', '26', '4', '创建目录，若无父目录，则创建p(parent)', 'd5cb240f-c26d-4fca-84f1-9ad0598fcb5c.', null, null, null, null, null, null, '    -P', '', '0', '2017-12-25 19:23:12', '19', '1');
INSERT INTO `topic` VALUES ('3903', '26', '2', 'Linux中的信号量是一种睡眠锁。', '7d2931dd-8242-45b8-a88e-ded939469492.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:23:39', '28', '1');
INSERT INTO `topic` VALUES ('3904', '26', '2', 'Shell\r\n\r\n仅仅是一个命令语言解释器，无法用它进行编程。\r\n', 'f253a134-29c9-4ebf-8574-19775ab0ceaf.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:24:20', '40', '1');
INSERT INTO `topic` VALUES ('3905', '24', '4', '切换目录', '7c076517-3f32-47b4-b038-effafc4d9429.', null, null, null, null, null, null, 'CD', '', '0', '2017-12-25 19:24:37', '19', '1');
INSERT INTO `topic` VALUES ('3906', '33', '4', '怎么检测一个线程是否拥有锁？', '7fdb4c68-327a-444d-b808-05df4ccdc459.', null, null, null, null, null, null, '我一直不知道我们竟然可以检测一个线程是否拥有锁，直到我参加了一次电话面试。在JAVA.LANG.THREAD中有一个方法叫HOLDSLOCK()，它返回TRUE如果当且仅当当前线程拥有某个具体对象的锁。', '', '0', '2017-12-25 19:24:57', '51', '1');
INSERT INTO `topic` VALUES ('3907', '24', '4', ' 创建空文件', '27d99ad5-aec0-41de-bc17-29ebcdbc9426.', null, null, null, null, null, null, 'TOUCH', '', '0', '2017-12-25 19:25:01', '19', '1');
INSERT INTO `topic` VALUES ('3908', '24', '4', '创建带有内容的文件。', '31f108f1-ad63-418f-8f80-1eca3fd55326.', null, null, null, null, null, null, 'ECHO ', '', '0', '2017-12-25 19:25:21', '19', '1');
INSERT INTO `topic` VALUES ('3909', '18', '4', '1+1等于几', 'a02e0986-3b64-4675-bf4f-bdfd56e45744.', null, null, null, null, null, null, '当然是啊', '', '0', '2017-12-25 19:25:27', '43', '1');
INSERT INTO `topic` VALUES ('3910', '26', '2', 'mmap实现共享内存也是其主要应用之一，mmap系统调用使得进程之间通过映射同多个普通文件实现共享内存。', '739b2b64-7bbe-40df-b533-88711181a18b.', null, null, null, null, null, null, '正确', 'mmap实现共享内存也是其主要应用之一，mmap系统调用使得进程之间通过映射同一个普通文件实现共享内存。', '0', '2017-12-25 19:26:24', '28', '1');
INSERT INTO `topic` VALUES ('3912', '33', '4', '你如何在Java中获取线程堆栈?', 'bb2b5095-d52a-48e5-a3be-989af8241fd6.', null, null, null, null, null, null, '对于不同的操作系统，有多种方法来获得JAVA进程的线程堆栈。当你获取线程堆栈时，JVM会把所有线程的状态存到日志文件或者输出到控制台。在WINDOWS你可以使用CTRL + BREAK组合键来获取线程堆栈，LINUX下用KILL -3命令。你也可以用JSTACK这个工具来获取，它对线程ID进行操作，你可以用JPS这个工具找到ID。', '', '0', '2017-12-25 19:27:00', '51', '1');
INSERT INTO `topic` VALUES ('3914', '3', '4', '创建线程有几种不通的方式？', 'ceb8d09d-3982-4025-8edd-ce274bd96d28.', null, null, null, null, null, null, '1.自定义类继承THREAD类方式\r\n2.自定义类实现RUNNABLE接口方式', '', '0', '2017-12-25 19:29:04', '73', '1');
INSERT INTO `topic` VALUES ('3915', '26', '4', '两台电脑都在同一个网络环境中，A电脑访问不到B电脑的共享文件。此现象可能是哪 些方面所至？如何处理？', 'e3198b53-0906-4de6-bbdb-b8f162b93b60.', null, null, null, null, null, null, '首先你要确定是不是在一个工作组内，只有在一个工作组内才可以共享文件，查看共享服务是否被关闭或者是否被防火墙阻挡等，然后确定文件是不是已经共享。如果还是不行，可能是中病毒了，需要查杀病毒。', '', '0', '2017-12-25 19:29:26', '47', '1');
INSERT INTO `topic` VALUES ('3916', '24', '4', '查看文件内容', '73f5c5c0-3c84-4570-a8fb-d6941a99b1cf.', null, null, null, null, null, null, 'CAT', '', '0', '2017-12-25 19:29:28', '19', '1');
INSERT INTO `topic` VALUES ('3917', '18', '4', '电脑开机时，风扇转，但是屏幕没有任何显示，此现象可能是哪些方面所至？如何处理？', '7efd6403-a319-4e30-b81a-0d1252968095.', null, null, null, null, null, null, '不一定是硬件坏了，可能是内存，显卡或ＣＰＵ松动，把内存取下来擦一擦再装上去就好了', '', '0', '2017-12-25 19:29:49', '47', '1');
INSERT INTO `topic` VALUES ('3918', '24', '4', '拷贝', '3299550a-0925-4ae2-8212-b3072d535cab.', null, null, null, null, null, null, 'CP', '', '0', '2017-12-25 19:30:06', '19', '1');
INSERT INTO `topic` VALUES ('3919', '18', '4', '在做SQL备份时应该先开启什么服务？', '533794f2-7a50-41b8-abd6-4a1a2cc6d591.', null, null, null, null, null, null, '要开启SQLSERVER AGENT，这种服务主要是用于在设定的时间备份、复制数据，以及在自动执行调度表上设置的其他项目。启动这个服务后，设定好在什么时候做什么事，这个服务会让它自动运行，不需要人工干预。', '', '0', '2017-12-25 19:30:06', '47', '1');
INSERT INTO `topic` VALUES ('3920', '33', '4', '有三个线程T1，T2，T3，怎么确保它们按顺序执行？', 'b21fcb56-7260-48b6-90f8-04afcaa6de62.', null, null, null, null, null, null, '在多线程中有多种方法让线程按特定顺序执行，你可以用线程类的JOIN()方法在一个线程中启动另一个线程，另外一个线程完成该线程继续执行。为了确保三个线程的顺序你应该先启动最后一个(T3调用T2，T2调用T1)，这样T1就会先完成而T3最后完成。', '', '0', '2017-12-25 19:30:15', '51', '1');
INSERT INTO `topic` VALUES ('3921', '18', '4', '局域网内，一台机器不能上网，而其他机器可以。所有的机器都安装的WinXP系统，且该电脑可以访问局域网内电脑，试分析原因？', '332c0649-5926-4566-a6eb-5e4bb2c31893.', null, null, null, null, null, null, '（1）、检查有无 MICROSOFT网络客户端、 MICROSOFT网络的文件和打印机共享、 INTERNET协议(TCP/IP) 。 \r\n（2）、检查 IP地址、网关、DNS 、网络是否连上等。 \r\n（3）、查杀木马、病毒', '', '0', '2017-12-25 19:30:42', '46', '1');
INSERT INTO `topic` VALUES ('3922', '24', '4', '递归删除，可删除子目录及文件', '26247abf-b31e-475c-a596-6878f0591b95.', null, null, null, null, null, null, '     -R ', '', '0', '2017-12-25 19:31:35', '19', '1');
INSERT INTO `topic` VALUES ('3924', '24', '4', '强制删除', '8f244765-f341-4d1b-8433-529491aff1c2.', null, null, null, null, null, null, '   -F', '', '0', '2017-12-25 19:32:03', '19', '1');
INSERT INTO `topic` VALUES ('3925', '18', '4', '如果有一个不太懂电脑的客户，你应该采取什么样的方法去教他用公司的软件产品？', '382f6881-60c8-4a18-8aeb-a3b35dd73c60.', null, null, null, null, null, null, '（1）、如果软件产品比较难懂，你就可以先教一些简单的。再告诉他需要再了解哪些知识来掌握这个软件。\r\n（2）、如果软件产品比较简单，就可以直接一步一步的教他怎么操作，一直操作熟练就行了。', '', '0', '2017-12-25 19:32:17', '46', '1');
INSERT INTO `topic` VALUES ('3926', '26', '4', '请依序说明：如果你想要新增一块新的网络卡在你的主机上，并给予一个固定的私有 IP ，应如何进行？', '1d88af15-4f6b-4249-8bb9-b79a5393e991.', null, null, null, null, null, null, '先关掉主机的 POWER ，然后拆掉机壳，装上网络卡；\r\n开机完成后，以 DMESG | GREP ETH 查询是否可捉到该网络卡，若无法捉到，请编译模块，若可捉到，找出网卡代号， 并且将该模块与网卡代号写入 /ETC/MODPROBE.CONF 当中，以利未来开机时可自动达成对应；\r\n利用『 IFCONFIG \"网卡代号\" 』来查询 MAC 为何？\r\n开始在 /ETC/SYSCONFIG/NETWORK-SCRIPTS 内建立 IFCFG-\"网卡代号\" 档案，同时给予 HWADDR 的对应；\r\n启动 /ETC/INIT.D/NETWORK RESTART 测试是否能成功！', '', '0', '2017-12-25 19:32:20', '43', '1');
INSERT INTO `topic` VALUES ('3927', '18', '4', '你熟悉的远程有哪些方法？各种方法应该怎么配置？', '99a97b6c-e995-426c-9394-abcdf7d8f183.', null, null, null, null, null, null, '1）、最简单的QQ上有，打开对话框  上边有个 “应用”图标  \r\n点击“远程协助”。 （2）、系统自带的远程桌面服务，右击我的电脑—属性，点远程，把两个够都打上去。 （3）、远程协助软件，在要远程的主机安装代理程序后，即可使用远程服务。 （4）、专业通信系统，即时通、 OA之类的。', '', '0', '2017-12-25 19:32:24', '10', '1');
INSERT INTO `topic` VALUES ('3928', '3', '4', 'Thread类中的yield方法有什么作用？', '6740b073-f1de-430d-898a-9147b824909f.', null, null, null, null, null, null, 'YIELD方法可以暂停当前正在执行的线程对象，让其它有相同优先级的线程执行。它是一个静态方法而且只保证当前线程放弃CPU占用而不能保证使其它线程一定能占用CPU，执行YIELD()的线程有可能在进入到暂停状态后马上又被执行。', '', '0', '2017-12-25 19:32:35', '51', '1');
INSERT INTO `topic` VALUES ('3929', '18', '4', '在你进行实施的过程中，公司制作的一款软件系统缺少某一项功能，而且公司也明确 表示不会再为系统做任何的修改或添加任何的功能，而客户也坚决要求需要这一项功能！对于实施人员来说，应该怎么去合理妥善处理这个问题？', '5fcd3090-e363-4340-b308-5c90860c22bf.', null, null, null, null, null, null, '先看客户要求合不合理，不合理就可以坚决退还需求。如果需求合理的话，可以  （1）、申请做二次开发,并且收取一定的费用,这个两边都要沟通好。 （2）、第二种方法,使用第三方软件做补助', '', '0', '2017-12-25 19:32:51', '10', '1');
INSERT INTO `topic` VALUES ('3930', '26', '4', '查看驱动模块中打印信息应该使用什么命令？', '9fb7693b-16a7-4098-a3cc-0299c9d5b8a1.', null, null, null, null, null, null, '查看驱动模块中打印信息的命令：DMESG', '', '0', '2017-12-25 19:33:03', '28', '1');
INSERT INTO `topic` VALUES ('3931', '33', '4', 'Java中ConcurrentHashMap的并发度是什么？', '4e28b1bf-cb8e-4080-9b00-4d09c24fd2b0.', null, null, null, null, null, null, 'CONCURRENTHASHMAP把实际MAP划分成若干部分来实现它的可扩展性和线程安全。这种划分是使用并发度获得的，它是CONCURRENTHASHMAP类构造函数的一个可选参数，默认值为16，这样在多线程情况下就能避免争用。', '', '0', '2017-12-25 19:33:18', '51', '1');
INSERT INTO `topic` VALUES ('3932', '18', '4', '在项目实施过程中，使用者对产品提出了适合自己习惯的修改意见，但多个使用者相互矛盾，应该如何去处理？', 'd72845ff-7e0f-4dff-82b4-0467a21505a0.', null, null, null, null, null, null, '对于客户提出的修改意见，我们实施人员应该有自己的方案。当使用者之间意见出现不一致时，我们应当引导他们内部之间的意见统一，和客户经过沟通或确认后，找到切实可行的方案，双方认可并达成共识', '', '0', '2017-12-25 19:33:28', '10', '1');
INSERT INTO `topic` VALUES ('3933', '26', '4', '系统启动后，不能连接数据库，可能是哪方面的原因？', 'ae56db3d-4983-43b2-8735-94adb5a5a102.', null, null, null, null, null, null, '系统启动后，不能连接数据库，可能是哪方面的原因？', '', '0', '2017-12-25 19:33:34', '47', '1');
INSERT INTO `topic` VALUES ('3934', '3', '4', 'Java中Semaphore是什么？', 'a60f5cf5-9a98-463d-9688-4f925edb5544.', null, null, null, null, null, null, 'JAVA中的SEMAPHORE是一种新的同步类，它是一个计数信号。从概念上讲，从概念上讲，信号量维护了一个许可集合。如有必要，在许可可用前会阻塞每一个 ACQUIRE()，然后再获取该许可。每个 RELEASE()添加一个许可，从而可能释放一个正在阻塞的获取者。但是，不使用实际的许可对象，SEMAPHORE只对可用许可的号码进行计数，并采取相应的行动。信号量常常用于多线程的代码中，比如数据库连接池。', '', '0', '2017-12-25 19:33:40', '51', '1');
INSERT INTO `topic` VALUES ('3935', '18', '4', '5个皮球,其中1个比其他4个略轻一些,如果用天平来称,你打算怎样最快把它找出来?', 'e41481c3-7eb0-44a5-8035-df425d854318.', null, null, null, null, null, null, ' 1. 、任意找4个球，2个在左盘，2个在右盘，如果天平平衡，则剩下的那个球就是略轻一些的球', '', '0', '2017-12-25 19:33:58', '47', '1');
INSERT INTO `topic` VALUES ('3936', '33', '4', '如果你提交任务时，线程池队列已满。会时发会生什么？', '2c313440-0f16-4549-a3ae-b0b67fdd9c56.', null, null, null, null, null, null, '这个问题问得很狡猾，许多程序员会认为该任务会阻塞直到线程池队列有空位。事实上如果一个任务不能被调度执行那么THREADPOOLEXECUTOR’S SUBMIT()方法将会抛出一个REJECTEDEXECUTIONEXCEPTION异常。', '', '0', '2017-12-25 19:34:04', '51', '1');
INSERT INTO `topic` VALUES ('3937', '18', '4', '什么是DHCP？如何快速为多台（20台）电脑安装操作系统？多台电脑如何组网？', '8a971299-09b0-4f66-a8df-25223a845920.', null, null, null, null, null, null, '（1）、DHCP：动态主机设置协议，是一个局域网的网络协议，使用UDP协议工作，主要有两个用途：给内部网络或网络服务供应商自动分配IP地址、给用户给内部网络管理员作为对所有计算机作中央管理的手段。  （2）、可以通过网络硬盘克隆，过程为：在装有软驱的工作站上，用一张引导盘来启动 机器，连接到服务器，使用 GHOST 多播服务（MULTICAST SERVER）将硬盘或分区的映像克隆到工作站，这样就实现了不拆机、安全、快速的网络硬盘克隆', '', '0', '2017-12-25 19:34:10', '10', '1');
INSERT INTO `topic` VALUES ('3938', '18', '4', '同在一个网络环境中A电脑IP：192.168.1.100，B电脑IP:192.168.0.100,路由器的IP： 192.168.1.1.请问用哪些方法可以让B电脑既可以上公网也可以访问到A电脑', '675255db-a59f-467e-a7ca-5ab0d0dc995d.', null, null, null, null, null, null, '192.168.1.1.请问用哪些方法可以让B电脑既可以上公网也可以访问到A电脑？  如果你的公网是需要拨号的，那么这需要两个路由器来进行转换，首先要使一个路由能上公网。再使用另一台路由器进行两个网段进行路由转换，在路由器中设置静态路由转换，一个为192.168.1.*，一个为192.168.0*,这样这两台电脑就能进行互访。把这台路由器和一台电脑分别连接到原公网的路由上就能使两个不同网段的电脑都能上网。如果你的公网不需要拨号，你可以把原连接公网的那台路由器更换为交换机就OK，其他连接同上。', '', '0', '2017-12-25 19:34:21', '47', '1');
INSERT INTO `topic` VALUES ('3939', '26', '4', '如何查看内核中已有的字符设备的信息？', '78728f0f-e2be-4d98-9b0c-feee5fe9cfb7.', null, null, null, null, null, null, '查看字符设备信息可以用LSMOD 和MODPROBE，LSMOD可以查看模块的依赖关系，MODPROBE在加载模块时会加载其他依赖的模块。', '', '0', '2017-12-25 19:34:28', '28', '1');
INSERT INTO `topic` VALUES ('3940', '33', '4', ' Java线程池中submit() 和 execute()方法有什么区别？', '475ba7e8-636d-4960-ab90-d5b27aa20117.', null, null, null, null, null, null, '两个方法都可以向线程池提交任务，EXECUTE()方法的返回类型是VOID，它定义在EXECUTOR接口中, 而SUBMIT()方法可以返回持有计算结果的FUTURE对象，它定义在EXECUTORSERVICE接口中，它扩展了EXECUTOR接口，其它线程池类像THREADPOOLEXECUTOR和SCHEDULEDTHREADPOOLEXECUTOR都有这些方法。', '', '0', '2017-12-25 19:34:29', '51', '1');
INSERT INTO `topic` VALUES ('3941', '33', '4', '什么是阻塞式方法？', 'f8bcfbb4-4908-4505-9a87-cd8072fbc9af.', null, null, null, null, null, null, '阻塞式方法是指程序会一直等待该方法完成期间不做其他事情，SERVERSOCKET的ACCEPT()方法就是一直等待客户端连接。这里的阻塞是指调用结果返回之前，当前线程会被挂起，直到得到结果之后才会返回。此外，还有异步和非阻塞式方法在任务完成前就返回。', '', '0', '2017-12-25 19:34:49', '51', '1');
INSERT INTO `topic` VALUES ('3942', '26', '4', '如何查看正在使用的有哪些中断号？', '0dddf5ed-8475-49c1-9302-94c5e780069a.', null, null, null, null, null, null, '显示当前使用的中断号CAT /PROC/INTERRUPT', '', '0', '2017-12-25 19:34:54', '28', '1');
INSERT INTO `topic` VALUES ('3943', '18', '3', '模块编译成功后的安装方式为:', '3069722b-f769-4e3f-aae0-7592b72ee9e9.', null, null, null, null, null, null, 'MAKE MODUES_INSTALL', '', '0', '2017-12-25 19:35:50', '29', '1');
INSERT INTO `topic` VALUES ('3944', '18', '2', '在\r\n\r\nLinux\r\n\r\n中，一个网卡可以绑定多个\r\n\r\nIp\r\n\r\n地址。\r\n', 'a6ef3ae1-934f-4f5c-8cd4-57c654a82940.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:36:15', '40', '1');
INSERT INTO `topic` VALUES ('3945', '24', '4', '写一个中断服务需要注意哪些？', '21d0a6f1-e616-41d8-985e-def10948b0f3.', null, null, null, null, null, null, ' 中断处理例程应该尽量短，把能放在后半段(TASKLET，等待队列等)的任务尽量放在后半段。\r\n     写一个中断服务程序要注意快进快出，在中断服务程序里面尽量快速采集信息，包括硬件信息，然后退出中断，要做其它事情可以使用工作队列或者TASKLET方式。也就是中断上半部和下半部。', '', '0', '2017-12-25 19:36:35', '28', '1');
INSERT INTO `topic` VALUES ('3946', '26', '2', '一般总是把文件系统连结到某个空目录。如果加载到非空目录，卸载后原目录中内容仍可访问', '35e28ca8-5731-4bc5-9fe3-318999d42685.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:36:58', '40', '1');
INSERT INTO `topic` VALUES ('3947', '18', '4', '说明静态路由和动态路由的区别？', 'efcffd3a-91dd-48c0-afc4-0902876341ab.', null, null, null, null, null, null, '静态路由：就是由管理员在路由器中手工设置的固定的路由信息，静态路由不能对网络的改变做出反映，一般用于规模不大、拓扑结构固定的网络中，其优点是设置简单、高效，在所有路由中，静态路由优先级最高，当动态路由与静态路由发生冲突时，以静态路由为准。  动态路由：就是由网络中的路由器之间互相通信，传递路由信息，利用收到的路由信息更新路由表的过程，它能实时地适应网络结构的变化。主要用于规模大、拓扑结构复杂的网络。', '', '0', '2017-12-25 19:37:02', '10', '1');
INSERT INTO `topic` VALUES ('3948', '26', '2', 'Alt+F1\r\n\r\n—\r\n\r\nAlt+F7\r\n\r\n从字符界面的虚拟终端切换到其他虚拟终端。\r\n', '97f9a6dc-fc91-4b20-a132-6c4703e9ac50.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:37:22', '40', '1');
INSERT INTO `topic` VALUES ('3949', '4', '4', '请说出struts框架的几大组件？', 'd49aace9-8d5e-40d7-b77f-c54c2089fe92.', null, null, null, null, null, null, 'MVC,标签库，校验框架，国际化，TILES', '', '0', '2017-12-25 19:37:57', '64', '1');
INSERT INTO `topic` VALUES ('3953', '24', '4', '查找张三和李四所在部门所有人员的姓名', '3e40caae-3ca9-49eb-81d5-9857f9703841.', null, null, null, null, null, null, 'SELECT  NAME  FROM  PERSONNEL  WHERE  NAME=’张三’  AND  NAME=’李四’;', '', '0', '2017-12-25 19:38:05', '10', '1');
INSERT INTO `topic` VALUES ('3954', '33', '4', 'Swing是线程安全的吗？ 为什么？', '98de3b02-7eac-40ce-920f-de31d8098b1f.', null, null, null, null, null, null, '你可以很肯定的给出回答，SWING不是线程安全的，但是你应该解释这么回答的原因即便面试官没有问你为什么。当我们说SWING不是线程安全的常常提到它的组件，这些组件不能在多线程中进行修改，所有对GUI组件的更新都要在AWT线程中完成，而SWING提供了同步和异步两种回调方法来进行更新。', '', '0', '2017-12-25 19:38:17', '51', '1');
INSERT INTO `topic` VALUES ('3955', '26', '4', '你认为客户服务的重点是什么？', '13b1951f-661e-40eb-8f3b-1b66d0bfd15e.', null, null, null, null, null, null, '随着市场的竞争进一步加剧，服务已经成为企业核心竞争力的要素之一，服务的重点是沟通，沟通可以消除客户的误会和不满，沟通可以提高客户的感知度。因此，我认为我们客户服务管理工作就应该从做好沟通的管理开始。', '', '0', '2017-12-25 19:38:22', '47', '1');
INSERT INTO `topic` VALUES ('3956', '24', '4', '只打包，不压缩', '4d8462ff-277d-421b-bd6e-2d6b0721ee0e.', null, null, null, null, null, null, 'TAR -CVF /HOME/ABC.TAR /HOME/ABC ', '', '0', '2017-12-25 19:38:24', '19', '1');
INSERT INTO `topic` VALUES ('3958', '32', '4', '查找工资大于2000元的员工所在部门、部门编号、部门经理、员工名称', 'f02ebf85-344a-46c0-b532-e1a6cd1f12fd.', null, null, null, null, null, null, 'SELECT  DEPT_NAME,DEPT_ID,DEPT_LEADER FROM DEPARTMENT WHERE DEPT_ID IN(SELECT  DEPT_ID  FROM PERSONNEL  WHERE  SALARY INTEGER>2000 );', '', '0', '2017-12-25 19:38:44', '10', '1');
INSERT INTO `topic` VALUES ('3959', '26', '2', '输出重定向的符号是\r\n\r\n&lt;\r\n\r\n。\r\n', 'fc3325df-78d3-4240-b075-782d08541697.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:38:46', '40', '1');
INSERT INTO `topic` VALUES ('3960', '18', '3', '开放原始码可以', 'dd7778a9-fbe8-446f-9988-d9687880143a.', null, null, null, null, null, null, '加速软件的升级速度，让软件效能更快、漏洞修补更及时', '', '0', '2017-12-25 19:38:56', '29', '1');
INSERT INTO `topic` VALUES ('3961', '24', '4', '打包，并用gzip压缩', '811c4ca2-9e7b-4223-9d8d-bcb91a267edb.', null, null, null, null, null, null, 'TAR -ZCVF /HOME/ABC.TAR.GZ /HOME/ABC ', '', '0', '2017-12-25 19:38:59', '19', '1');
INSERT INTO `topic` VALUES ('3962', '32', '4', '查找工资大于2000元的员工记录，并按员工号id升序排列', '291e8aa4-52fb-44e2-86d3-0724ef70eb18.', null, null, null, null, null, null, 'SELECT  NAME  FROM  PERSONNEL  WHERE  SALARY INTEGER>2000  ORDER  BY  ID;', '', '0', '2017-12-25 19:39:04', '10', '1');
INSERT INTO `topic` VALUES ('3963', '26', '2', '\r\n\r\n从\r\n\r\nvi\r\n\r\n中的输入模式返回到命令模式按”\r\n\r\n:\r\n\r\n”键。\r\n', '3e77b173-655e-4a95-ae24-563db9a299d9.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:39:09', '40', '1');
INSERT INTO `topic` VALUES ('3965', '32', '4', '一般数据库若出现日志满了，会出现什么情况，是否还能使用？', 'b78063e5-57ae-44f6-8015-7f604aea490c.', null, null, null, null, null, null, '数据库满了就不能使用数据库.数据库满是指数据文件达到设置的最大文件大小,没设置的时候就是最大可用磁盘空间只能执行查询，等读的操作，不能执行更改、备份等写操作，原因是任何写操作都要记录日志。也就是说基础处于不可用的状态。', '', '0', '2017-12-25 19:39:51', '10', '1');
INSERT INTO `topic` VALUES ('3966', '24', '4', 'vim三种模式', '73ddb5c2-cec3-4795-aad6-84e882bc2b91.', null, null, null, null, null, null, '命令模式、插入模式、编辑模式', '', '0', '2017-12-25 19:40:07', '19', '1');
INSERT INTO `topic` VALUES ('3967', '18', '4', '当你觉得工作的付出和你的收入不成正比的时候你会怎么想？', '91e8559a-e7d1-4a08-a25c-a325112b5b78.', null, null, null, null, null, null, '无论干什么工作，必须干一行爱一行，脚踏实地、用心去钻研， 只要真正有能力，只要有思想和技术，终会出头。砖石总会发光的。接受你不能接受的，改变你能改变的。会争取到更高的薪水的。', '', '0', '2017-12-25 19:40:10', '46', '1');
INSERT INTO `topic` VALUES ('3968', '18', '4', '核心的功能在于管控整个系统的硬件，这包括了CPU 运算单元的管理，输入/输出 的管理，记忆体的管理等等。那么请问一个较为完整的作业系统，应该包含哪些部 分？  ', 'd1e26301-27e4-4ddd-b5c9-0b23384bb264.', null, null, null, null, null, null, '应包含KERNEL + KERNEL TOOLS + APPLICATIONS 等等 ', '', '0', '2017-12-25 19:40:27', '29', '1');
INSERT INTO `topic` VALUES ('3969', '24', '4', '存储用户账号', 'dba1572b-6714-40ed-8a98-643682b6ad09.', null, null, null, null, null, null, '/ETC/PASSWD', '', '0', '2017-12-25 19:40:33', '19', '1');
INSERT INTO `topic` VALUES ('3970', '26', '2', '在\r\n\r\n/etc/users\r\n\r\n文件中保存有用户帐号的信息。\r\n', '843ba8bb-482f-43ef-88f8-b569ea85345a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:40:43', '40', '1');
INSERT INTO `topic` VALUES ('3972', '24', '4', '存储组账号', '21e1433a-15ab-4b27-8b21-fbf1601172ef.', null, null, null, null, null, null, '/ETC/GROUP', '', '0', '2017-12-25 19:40:56', '19', '1');
INSERT INTO `topic` VALUES ('3973', '26', '2', '在\r\n\r\nLinux\r\n\r\n中运行\r\n\r\nreboot\r\n\r\n可以重启计算机。\r\n', 'cd1df2a7-949e-4290-bdbd-39b13dbc9ba1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:40:59', '40', '1');
INSERT INTO `topic` VALUES ('3974', '26', '4', 'SQL 数据库表名为 guest 、 数据库表名为 帐号 Accounts S0001 S0001 S0001 S0002 S0003 S0004 S0005 S0005 消费 Details 房费 酒水 房费 酒水 房费', '33ff048e-9424-4b7d-be2c-0177a4b75d91.', null, null, null, null, null, null, '房费 酒水 房费 时间 DATE 2010-01-01 2010-01-02 2010-01-08 2010-01-29 2010-01-31 2010-02-01 2010-02-01 2010-02-02 金额 MONEY 280 120 300 50', '', '0', '2017-12-25 19:41:04', '47', '1');
INSERT INTO `topic` VALUES ('3975', '26', '4', '180 230 100 128 班次 Class 001 001 003 002 001 001', 'bf0a74d1-d876-4e28-9762-7a4655e9ac41.', null, null, null, null, null, null, '1） 查询出房费都大于 200 的帐号。 ） 查询出房费 房费都大于 帐号。 SELECT ACCOUNTS FORM GUEST WHERE MONEY >’200’\r\n2） 查询出 1 月份每个帐号酒水和房费的总金额。 月份每个帐号酒水和房费的总金额。 每个帐号酒水和房费的总金额 ） SELECT SUM(DETAIL),DETAILS FORM', '', '0', '2017-12-25 19:41:16', '47', '1');
INSERT INTO `topic` VALUES ('3976', '24', '4', '存储用户账号的密码', 'f03ea335-9082-4ec1-9c10-526d9afbf5b6.', null, null, null, null, null, null, '/ETC/SHADOW ', '', '0', '2017-12-25 19:41:19', '19', '1');
INSERT INTO `topic` VALUES ('3977', '26', '2', 'Linux\r\n\r\n是一套免费使用和自由传播类\r\n\r\nUNIX\r\n\r\n操作系统\r\n', 'c65bf06e-eee8-4401-a48c-7423d4668ab0.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:41:54', '40', '1');
INSERT INTO `topic` VALUES ('3978', '3', '4', 'Java中invokeAndWait 和 invokeLater有什么区别？', '2bd928ba-3c68-4f01-b1b2-8fa49ae92c42.', null, null, null, null, null, null, '这两个方法是SWING API 提供给JAVA开发者用来从当前线程而不是事件派发线程更新GUI组件用的。INVOKEANDWAIT()同步更新GUI组件，比如一个进度条，一旦进度更新了，进度条也要做出相应改变。如果进度被多个线程跟踪，那么就调用INVOKEANDWAIT()方法请求事件派发线程对组件进行相应更新。而INVOKELATER()方法是异步调用更新组件的。', '', '0', '2017-12-25 19:41:55', '51', '1');
INSERT INTO `topic` VALUES ('3980', '18', '4', '什 么 是软件的移植？', '0c69993d-6ab5-469a-90cc-35fc79eb6418.', null, null, null, null, null, null, '程序是由程序码(通成为ASCII 格式)经过编译器编译成为BINARY FILE 之后，才能够在该作业系  统上面执行。因此，您可以将您的程序的程序码修改成可以适应其他作业系统的环境，并且 加以编译，使程序可以在其他平台上运作，这个修改的动作即为移植', '', '0', '2017-12-25 19:42:36', '29', '1');
INSERT INTO `topic` VALUES ('3981', '26', '2', '在\r\n\r\n Linux \r\n\r\n的安装过程中可进行网络配置\r\n', '03cd9ba9-0b6e-4185-bc36-7b13999de7da.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:44:03', '40', '1');
INSERT INTO `topic` VALUES ('3982', '26', '2', '简单点，测试计划里应有详细的测试策略和测试方法，合理详尽的资源安排等，至于测试用例，那是依赖于需求(包括功能与非功能需求)是否细化到功能点，是否可测试等。', '0e8702b5-e478-40f0-9a15-2312259ed376.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:44:18', '10', '1');
INSERT INTO `topic` VALUES ('3983', '26', '2', 'shell \r\n\r\n是一个命令解释器\r\n', 'e32493f2-e8c7-43bf-9b52-4b9aadd47d77.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:44:28', '40', '1');
INSERT INTO `topic` VALUES ('3984', '26', '2', 'RedHat Linux \r\n\r\n在它的发布版内没有捆绑\r\n\r\n MySQL\r\n', '92814e0e-90f0-4e80-8a19-d074fb89ed02.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:44:39', '40', '1');
INSERT INTO `topic` VALUES ('3985', '33', '4', 'Swing API中那些方法是线程安全的？', '852d12d0-3e1c-493e-8e28-ab23e5a1367b.', null, null, null, null, null, null, '这个问题又提到了SWING和线程安全，虽然组件不是线程安全的但是有一些方法是可以被多线程安全调用的，比如REPAINT(), REVALIDATE()。 JTEXTCOMPONENT的SETTEXT()方法和JTEXTAREA的INSERT() 和 APPEND() 方法也是线程安全的。', '', '0', '2017-12-25 19:44:47', '51', '1');
INSERT INTO `topic` VALUES ('3986', '18', '4', '触发器的作用是什么？', '6e09f0d6-9ca9-4f17-aea6-c8a7872e2dbf.', null, null, null, null, null, null, '触发器是针对数据表（库）的特殊的存储过程，当这个表发生了 INSERT、UPDATE或DELETE操作时，数据库就会自动执行触发器所定义的SQL语句，从而确保对数据的处理必须符合这些SQL语句所定义的规则。', '', '0', '2017-12-25 19:44:50', '47', '1');
INSERT INTO `topic` VALUES ('3987', '18', '4', '解释Oracle数据库、数据文件、表空间？ ', '53136b20-43d6-416d-863f-7c8360015d9a.', null, null, null, null, null, null, '（1）、ORACLE数据库：ORACLE DATABASE，又名ORACLE RDBMS，或简称ORACLE。是甲骨文公司的一款关系数据库管理系统。   （2）、数据文件：每一个ORACLE数据库有一个或多个物理的数据文件(DATA FILE)。一个数据库的数据文件包含全部数据库数据。逻辑数据库结构(如表、索引)的数据物理地存储在数据库的数据文件中。   （3）、表空间：表空间是数据库的逻辑划分，一个表空间只能属于一个数据库。所有的数据库对象都存放在指定的表空间中。但主要存放的是表，所以称作表空间。', '', '0', '2017-12-25 19:44:53', '46', '1');
INSERT INTO `topic` VALUES ('3988', '26', '2', 'Samba\r\n\r\n配置文件修改后\r\n\r\n,\r\n\r\n要重新用\r\n\r\n testparm\r\n\r\n测试配置文件\r\n\r\n,\r\n\r\n不需要重启\r\n\r\n Samba \r\n\r\n服务器程序\r\n', 'e85a0f4b-530f-4890-ab45-e2124af8a7a1.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:44:59', '40', '1');
INSERT INTO `topic` VALUES ('3989', '26', '2', 'Linux \r\n\r\n不可以与\r\n\r\n MS-DOS,OS/2,Windows \r\n\r\n等其他操作系统共存于同一台机器上\r\n', '5e28f405-7267-441f-b7f5-c205d9c388ef.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:45:11', '40', '1');
INSERT INTO `topic` VALUES ('3990', '26', '2', 'Linux \r\n\r\n中的\r\n\r\n ls \r\n\r\n命令的功能是变换工作目录到目标指定目录\r\n', '5f0ffc62-05e3-4496-881a-955c558d5cb0.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:45:23', '40', '1');
INSERT INTO `topic` VALUES ('3991', '18', '4', '显示/root文件夹下所有文件和目录（包括隐含文件和子文件夹下内容）', 'f4f1fd9e-5373-4f82-b7e0-783dfa3e4bec.', null, null, null, null, null, null, '答案：LS –AL /ROOT', '', '0', '2017-12-25 19:45:26', '29', '1');
INSERT INTO `topic` VALUES ('3992', '33', '4', '如何在Java中创建Immutable对象？', 'b243cd05-84e3-4a65-b1ee-e564fcf23f82.', null, null, null, null, null, null, '这个问题看起来和多线程没什么关系， 但不变性有助于简化已经很复杂的并发程序。IMMUTABLE对象可以在没有同步的情况下共享，降低了对该对象进行并发访问时的同步化开销。可是JAVA没有@IMMUTABLE这个注解符，要创建不可变类，要实现下面几个步骤：通过构造方法初始化所有成员、对变量不要提供SETTER方法、将所有的成员声明为私有的，这样就不允许直接访问这些成员、在GETTER方法中，不要直接返回对象本身，而是克隆对象，并返回对象的拷贝。', '', '0', '2017-12-25 19:45:31', '51', '1');
INSERT INTO `topic` VALUES ('3993', '26', '2', '进入文本编辑器\r\n\r\n vi \r\n\r\n后\r\n\r\n,\r\n\r\n编辑后可文本模式下输入\r\n\r\n:q \r\n\r\n退出\r\n\r\n vi \r\n\r\n环境\r\n', '41dd694c-8d27-4215-afbd-ffc843983524.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:45:34', '40', '1');
INSERT INTO `topic` VALUES ('3994', '18', '4', '文件权限管理三种基本权限', 'ff021206-1708-4636-940a-12704f3b808d.', null, null, null, null, null, null, 'R           读         数值表示为4\r\nW          写         数值表示为2\r\nX           可执行  数值表示为1', '', '0', '2017-12-25 19:45:42', '19', '1');
INSERT INTO `topic` VALUES ('3995', '33', '4', 'Java中的ReadWriteLock是什么？', '94cff001-a47d-4f6c-a934-c8a825134cbd.', null, null, null, null, null, null, '一般而言，读写锁是用来提升并发程序性能的锁分离技术的成果。JAVA中的READWRITELOCK是JAVA 5 中新增的一个接口，一个READWRITELOCK维护一对关联的锁，一个用于只读操作一个用于写。在没有写线程的情况下一个读锁可能会同时被多个读线程持有。写锁是独占的，你可以使用JDK中的REENTRANTREADWRITELOCK来实现这个规则，它最多支持65535个写锁和65535个读锁。', '', '0', '2017-12-25 19:45:51', '51', '1');
INSERT INTO `topic` VALUES ('3996', '33', '4', '多线程中的忙循环是什么?', 'f9b15f35-3bbd-48e9-b347-8e855b6f2abd.', null, null, null, null, null, null, '忙循环就是程序员用循环让一个线程等待，不像传统方法WAIT(), SLEEP() 或 YIELD() 它们都放弃了CPU控制，而忙循环不会放弃CPU，它就是在运行一个空循环。这么做的目的是为了保留CPU缓存，在多核系统中，一个等待线程醒来的时候可能会在另一个内核运行，这样会重建缓存。为了避免重建缓存和减少等待重建的时间就可以使用它了。', '', '0', '2017-12-25 19:46:11', '51', '1');
INSERT INTO `topic` VALUES ('3997', '26', '2', '可以在\r\n\r\n shell \r\n\r\n提示下或图形方式创建用户帐号\r\n', '47f6a8dc-234a-42fc-a90b-681357287273.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:46:24', '40', '1');
INSERT INTO `topic` VALUES ('3998', '18', '4', '用cat命令显示/root/install.log文件，要求显示文件的每行必须有行号。', '820e86a1-9c85-45af-8512-1a881b5cb4c1.', null, null, null, null, null, null, '答案：CAT –N /ROOT/INSTALL.LOG ', '', '0', '2017-12-25 19:46:35', '29', '1');
INSERT INTO `topic` VALUES ('3999', '26', '4', 'Linux中引入模块机制有什么好处？', 'c9652963-652e-49dd-8603-b9acdbaf605d.', null, null, null, null, null, null, '1) 应用程序在退出时，可以不管资源的释放或者其他的清除工作，但是模块的退出函数却必须仔细此撤销初始化函数所作的一切。\r\n2) 该机制有助于缩短模块的开发周期。即：注册和卸载都很灵活方便。', '', '0', '2017-12-25 19:46:50', '28', '1');
INSERT INTO `topic` VALUES ('4001', '18', '4', '用more和less命令显示/root/install.log文件，感受各种翻页命令', 'bb03ec53-4c43-4258-b4d4-71da2ec38bb4.', null, null, null, null, null, null, '答案：MORE /ROOT/INSTALL.LOG       LESS /ROOT/INSTALL.LOG  MORE和LESS可以用来分屏查看文件内容，当文件内容超过一个屏幕时，可以实现分屏显示文件的功能，但是，MORE只能向下分屏和查看，不能使用向上翻页的功能，而LESS除了能完成MORE的功能之外，还可以实现前后翻屏。', '', '0', '2017-12-25 19:47:47', '29', '1');
INSERT INTO `topic` VALUES ('4002', '26', '4', '静态路由：就是由管理员在路由器中手工设置的固定的路由信息，静态路由不能对网络的改变做出反映，一般用于规模不大、拓扑结构固定的网络中，其优点是设置简单、高效，在所有路由中，静态路由优先级最高，当动态路由与静态路由发生冲突时，以静态路由为准。  动态路由：就是由网络中的路由器之间互相通信，传递路由信息，利用收到的路由信息更新路由表的过程，它能实时地适应网络结构的变化。主要用于规模大、拓扑结构复杂的网络。 数据库部分', '8c83389b-3cdf-47c8-a637-3bcca8fcc7f5.', null, null, null, null, null, null, '静态路由：就是由管理员在路由器中手工设置的固定的路由信息，静态路由不能对网络的改变做出反映，一般用于规模不大、拓扑结构固定的网络中，其优点是设置简单、高效，在所有路由中，静态路由优先级最高，当动态路由与静态路由发生冲突时，以静态路由为准。  动态路由：就是由网络中的路由器之间互相通信，传递路由信息，利用收到的路由信息更新路由表的过程，它能实时地适应网络结构的变化。主要用于规模大、拓扑结构复杂的网络。 数据库部分', '', '0', '2017-12-25 19:48:37', '47', '1');
INSERT INTO `topic` VALUES ('4003', '3', '4', 'volatile 变量和 atomic 变量有什么不同？', '26c2de99-ee40-4d92-b794-30197e92c014.', null, null, null, null, null, null, '这是个有趣的问题。首先，VOLATILE 变量和 ATOMIC 变量看起来很像，但功能却不一样。VOLATILE变量可以确保先行关系，即写操作会发生在后续的读操作之前, 但它并不能保证原子性。例如用VOLATILE修饰COUNT变量那么 COUNT++ 操作就不是原子性的。而ATOMICINTEGER类提供的ATOMIC方法可以让这种操作具有原子性如GETANDINCREMENT()方法会原子性的进行增量操作把当前值加一，其它数据类型和引用变量也可以进行相似操作。', '', '0', '2017-12-25 19:48:59', '51', '1');
INSERT INTO `topic` VALUES ('4004', '26', '2', ' 字符设备和块设备的区别仅仅在于内核内部管理数据的方式', 'fec6a4c9-25f1-4130-95e3-f3bb89f0b74e.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:49:15', '28', '1');
INSERT INTO `topic` VALUES ('4005', '26', '2', 'Linux   shell   \r\n\r\n实际上是一个命令解释器，它解释由用户输入的命令并且把他们送到内核\r\n', 'b9c703bf-8765-4c17-8065-725213abd563.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:49:27', '40', '1');
INSERT INTO `topic` VALUES ('4006', '33', '4', '如果同步块内的线程抛出异常会发生什么？', '5756e9d7-a01c-4741-8a5c-6807db631e61.', null, null, null, null, null, null, '这个问题坑了很多JAVA程序员，若你能想到锁是否释放这条线索来回答还有点希望答对。无论你的同步块是正常还是异常退出的，里面的线程都会释放锁，所以对比锁接口我更喜欢同步块，因为它不用我花费精力去释放锁，该功能可以在FINALLY BLOCK里释放锁实现。', '', '0', '2017-12-25 19:49:30', '51', '1');
INSERT INTO `topic` VALUES ('4007', '26', '2', '\r\n\r\n由于\r\n\r\n8259\r\n\r\n提供了\r\n\r\n15\r\n\r\n种中断，\r\n\r\nCPU\r\n\r\n都可以响应这些中断，所以中断是可以重入的。\r\n', '9b7e3b8c-9db9-4c7c-9caa-edcd6dda1347.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:49:46', '40', '1');
INSERT INTO `topic` VALUES ('4008', '26', '2', '内核交换守护进程的任务就是保证系统中具有足够的空闲页。', 'db4a7eb4-1acf-4a73-bd8d-a399d9a839b5.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:49:56', '40', '1');
INSERT INTO `topic` VALUES ('4009', '26', '2', 'Linux\r\n\r\n支持内核空间的多线程管理，采用线程调度程序选则线程占用\r\n\r\nCPU\r\n\r\n运行。\r\n', 'deeec689-8924-4cad-bc85-05a8dd80bb7a.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:50:07', '40', '1');
INSERT INTO `topic` VALUES ('4010', '33', '4', '单例模式的双检锁是什么？', '9b0bb386-a445-45fc-9c50-9977d8c2964d.', null, null, null, null, null, null, '这个问题在JAVA面试中经常被问到，但是面试官对回答此问题的满意度仅为50%。一半的人写不出双检锁还有一半的人说不出它的隐患和JAVA1.5是如何对它修正的。它其实是一个用来创建线程安全的单例的老方法，当单例实例第一次被创建时它试图用单个锁进行性能优化，但是由于太过于复杂在JDK1.4中它是失败的，我个人也不喜欢它。无论如何，即便你也不喜欢它但是还是要了解一下，因为它经常被问到。', '', '0', '2017-12-25 19:50:16', '51', '1');
INSERT INTO `topic` VALUES ('4011', '26', '2', 'Linux\r\n\r\n支持多种总线，但不支持微通道结构总线。\r\n', '864648e0-fc20-47d4-b73f-22de45b9d962.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:50:38', '40', '1');
INSERT INTO `topic` VALUES ('4012', '26', '2', 'EXT2\r\n\r\n文件系统将逻辑分区划分为块组管理的\r\n', '316f8441-d843-435b-998c-d5393e8c2df9.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:50:50', '40', '1');
INSERT INTO `topic` VALUES ('4013', '26', '2', '在请求分页存储管理中，\r\n\r\n从主存中刚刚移走某一页面后，\r\n\r\n根据请求马上又调进该页，\r\n\r\n这种反复调进调出的现象，\r\n\r\n称为系统\r\n\r\n颠簸，也叫系统抖动\r\n', 'a81af7cd-0c33-4b75-ba63-ccd1c8028db5.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:51:08', '40', '1');
INSERT INTO `topic` VALUES ('4014', '26', '2', '在单机系统中可采用屏蔽中断的方式保证操作的原子性。', '6babe242-100b-43ca-b2c3-ac77423d68cf.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:51:22', '40', '1');
INSERT INTO `topic` VALUES ('4015', '18', '4', '登录linux，我们除了使用密码验证，还可以使用哪种方式？简述配置过程。', 'e132ae9d-10ba-43c4-9554-178094df632e.', null, null, null, null, null, null, '使用密钥加密登录，客户端生成公钥和私钥，客户端保存私钥，公钥复制到远程LINUX主机，登录时使用密钥加密登录；\r\n在LINUX主机执行下面的操作：\r\nMKDIR /ROOT/.SSH\r\nCHMOD  700 /ROOT/.SSH\r\nVI /ROOT/.SSH/AUTHORIZED_KEYS    粘贴复制的公钥，保存退出；\r\nCHMOD 600 /ROOT/.SSH/AUTHORIZED_KEYS\r\nVI /ETC/SELINUX/CONFIG    编辑SELINUX防火墙配置\r\n更改 SELINUX=DISABLED    永久关闭SELINUX；\r\nIPTABLES -F    清空防火墙规则；\r\n/ETC/INIT.D/IPTABLES SAVE    保存防火墙设置；\r\n客户端使用密钥登录；', '', '0', '2017-12-25 19:51:27', '19', '1');
INSERT INTO `topic` VALUES ('4016', '18', '4', '1 TX+(传输)', '6096d2b2-f1d4-493b-83c3-608e8fcd2505.', null, null, null, null, null, null, '白绿', '', '0', '2017-12-25 19:51:28', '47', '1');
INSERT INTO `topic` VALUES ('4017', '33', '4', '如何在Java中创建线程安全的Singleton？', '1bf6f815-f40c-42d1-84d1-98294f6f48d5.', null, null, null, null, null, null, '这是上面那个问题的后续，如果你不喜欢双检锁而面试官问了创建SINGLETON类的替代方法，你可以利用JVM的类加载和静态变量初始化特征来创建SINGLETON实例，或者是利用枚举类型来创建SINGLETON，我很喜欢用这种方法。', '', '0', '2017-12-25 19:51:31', '51', '1');
INSERT INTO `topic` VALUES ('4018', '26', '2', './proc\r\n\r\n逻辑文件系统主要负责系统管理文件的管理，与硬件有关。\r\n', '79a4d673-3fc7-40dd-b9c9-c768cc8f3340.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:51:38', '40', '1');
INSERT INTO `topic` VALUES ('4019', '18', '4', '测试过程中是如何来保证软件质量的', '99eeb099-0bf4-41be-84de-04474be5c19b.', null, null, null, null, null, null, '测试用例编写完毕后要加强评审的力度，确保测试用例覆盖所有需求点 执行测试过程中注意做小结检查覆盖情况、审视所提缺陷质量，复测时应注意相关模块的测试  测试时间宽裕的话可以做交叉测试，用以确保测试质量', '', '0', '2017-12-25 19:51:48', '10', '1');
INSERT INTO `topic` VALUES ('4020', '26', '2', 'PCI   BIOS\r\n\r\n是由一组\r\n\r\nPCI\r\n\r\n设备访问功能函数组成\r\n\r\n,   \r\n\r\n但不同的平台其具有的函数不一样\r\n', '975b807d-3fb8-4750-8444-ec33f5379080.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:51:50', '40', '1');
INSERT INTO `topic` VALUES ('4021', '18', '4', '删除表Department 中的所有记录', 'd52b7406-6a63-42a4-b37d-41f5ace75541.', null, null, null, null, null, null, 'DELETE FROM DEPARTMENT ；', '', '0', '2017-12-25 19:52:01', '46', '1');
INSERT INTO `topic` VALUES ('4022', '18', '4', '有没有做过接口测试，是如何做的', '3e5fcc9c-aa0a-49d4-8069-1881829f6e6f.', null, null, null, null, null, null, '通过编写测试程序， 获得接口指针， 逐个调用接口函数验证其正确性， 及失败操作', '', '0', '2017-12-25 19:52:03', '10', '1');
INSERT INTO `topic` VALUES ('4023', '26', '2', '在\r\n\r\ninternet\r\n\r\n网络中，\r\n\r\ntcp/ip\r\n\r\n网络协议只能提供面向无连接服务\r\n', '688d5af1-55d2-48e4-a0f7-beb4a612f80a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:52:07', '40', '1');
INSERT INTO `topic` VALUES ('4024', '18', '4', '如何查看系统版本？（3个方法）', '379a7447-d0ec-444d-be65-a5a3cae422d1.', null, null, null, null, null, null, 'CAT /ETC/CENTOS-RELEASE\r\nCAT /ETC/ISSUE\r\nRPM -QA | GREP RELEASE', '', '0', '2017-12-25 19:52:11', '19', '1');
INSERT INTO `topic` VALUES ('4025', '33', '4', '如何强制启动一个线程？', 'f4bac32e-b2e3-4470-bb39-61bdf85b920e.', null, null, null, null, null, null, '这个问题就像是如何强制进行JAVA垃圾回收，目前还没有觉得方法，虽然你可以使用SYSTEM.GC()来进行垃圾回收，但是不保证能成功。在JAVA里面没有办法强制启动一个线程，它是被线程调度器控制着且JAVA没有公布相关的API。', '', '0', '2017-12-25 19:52:19', '51', '1');
INSERT INTO `topic` VALUES ('4026', '18', '4', '为什么要把二根线双绞？', '6fe05737-8a3d-4ddc-8e12-3a4d5fddc2d1.', null, null, null, null, null, null, '因为这种相互缠绕改变了电缆原有的电子特性。这样不但可以减少自身的串扰，也可以最大程度上防止其它电缆上的信号对这对线缆上的干扰。', '', '0', '2017-12-25 19:52:19', '47', '1');
INSERT INTO `topic` VALUES ('4027', '26', '2', 'linux\r\n\r\n是一个真正的多任务和分时操作系统，允许多个用户在相同的机器上一次运行很多程序。\r\n', '2fe4ad7a-0c90-46f8-a975-4c30518b13d4.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:52:21', '40', '1');
INSERT INTO `topic` VALUES ('4028', '26', '4', '对于软中断，I/O操作是否是由内核中的I/O设备驱动程序完成？', '2e13bb59-fb03-4929-bf76-924d287d5fdc.', null, null, null, null, null, null, '对于I/O请求，内核会将这项工作分派给合适的内核驱动程序，这个程序会对I/O进行队列化，以可以稍后处理（通常是磁盘I/O），或如果可能可以立即执行它。通常，当对硬中断进行回应的时候，这个队列会被驱动所处理。当一个I/O请求完成的时候，下一个在队列中的I/O请求就会发送到这个设备上。', '', '0', '2017-12-25 19:52:22', '28', '1');
INSERT INTO `topic` VALUES ('4029', '18', '4', '客户没给性能指数，怎么开展性能测试', '9b62eeb7-1b8b-411b-a22f-5b2b9bd2e124.', null, null, null, null, null, null, '如果客户没有提出明确的性能指标，可以按照惯例和经验设置，需要和PM协商，一般由PM确认，QA负责给出建议。  举例说一个SERVER端程序，要求峰值时CPU和MEM消耗在75％以下，而一个页面的访问响应时间一般认为用户的忍耐时间是3－5秒以内，这些要参考实际的应用来确定用户规模、操作频率、同时在线数等', '', '0', '2017-12-25 19:52:24', '10', '1');
INSERT INTO `topic` VALUES ('4030', '4', '4', 'Java中的fork join框架是什么？', 'a5b067cb-f547-4acb-81d8-725bd9e9a9fa.', null, null, null, null, null, null, 'FORK JOIN框架是JDK7中出现的一款高效的工具，JAVA开发人员可以通过它充分利用现代服务器上的多处理器。它是专门为了那些可以递归划分成许多子模块设计的，目的是将所有可用的处理能力用来提升程序的性能。FORK JOIN框架一个巨大的优势是它使用了工作窃取算法，可以完成更多任务的工作线程可以从其它线程中窃取任务来执行。', '', '0', '2017-12-25 19:52:36', '51', '1');
INSERT INTO `topic` VALUES ('4031', '26', '4', '软中断所经过的操作流程是比硬中断的少吗？换句话说，对于软中断就是：进程 -&gt;内核中的设备驱动程序；对于硬中断：硬件-&gt;CPU-&gt;内核中的设备驱动程序？', 'bad8f0ce-7c06-4a6c-ad7f-4cabdba4b8a0.', null, null, null, null, null, null, '是的，软中断比硬中断少了一个硬件发送信号的步骤。产生软中断的进程一定是当前正在运行的进程，因此它们不会中断CPU。但是它们会中断调用代码的流程。', '', '0', '2017-12-25 19:52:37', '28', '1');
INSERT INTO `topic` VALUES ('4032', '18', '4', '双绞线分类', '78995dc3-ba33-4e66-9703-3d3b312100e9.', null, null, null, null, null, null, '1）双绞线按其绞线对数可分为：2对，4对，25对。（如2对的用于电话，4对的用于网络传输，25对的用于电信通讯大对数线缆）', '', '0', '2017-12-25 19:52:43', '47', '1');
INSERT INTO `topic` VALUES ('4033', '33', '4', 'Java多线程中调用wait() 和 sleep()方法有什么不同？', 'fc69ea0d-1c43-4978-ac4a-5d56c7e1f979.', null, null, null, null, null, null, 'AVA程序中WAIT 和 SLEEP都会造成某种形式的暂停，它们可以满足不同的需要。WAIT()方法用于线程间通信，如果等待条件为真且其它线程被唤醒时它会释放锁，而SLEEP()方法仅仅释放CPU资源或者让当前线程停止执行一段时间，但不会释放锁。', '', '0', '2017-12-25 19:52:56', '51', '1');
INSERT INTO `topic` VALUES ('4034', '18', '4', '怎么进行工作流的测试', 'be748fb1-3c98-4d8b-90ee-8ea063db7cf2.', null, null, null, null, null, null, '软件测试工程师面试题,自动化测试面试题，不可错过  1、怎么来设计测试方案  根据测试需求（包括功能需求和非功能性需求），识别测试要点，识别测试环境要求，安排测试轮次，根据项目计划和开发计划做整体的测试安排。  被测试的特性：通过对需求规格说明书进行分析，列出本次测试需要进行测试的各部分特性（如要测试的功能需求、性能需求、安全性需求等等）；  不被测试的特性：由于资源、进度等方面原因，本次测试不列入测试范围的特性； 测试组网图：进行本次系统测试所需要的软硬件设备、配置数据已及相互间的逻辑、物理连接。今后测试执行时需要依据这个组网图来进行环境的搭建。 2、如果给你一个B/S系统你怎么来进行测试  此题答案还可用于回答测试流程，测试流程题亦可参考15题。  阅读系统需求，充分理解需求，记录问题，并与项目需求人员充分沟通。 编写测试需求，包括系统功能和非功能测试要点、测试类型、测试进度质量要求等。  制定测试计划，包括熟悉测试业务、设计测试用例、执行测试用例、进行测试小结、编写测试报告，任务颗粒度一般应小于5人天  编写测试用例，根据测试方案设计用例，即便没有明确的性能和安全测试要求，也应识别进行此两项测试。 执行软件测试，  进行测试小结，如果测试持续时间较长，每个版本间隙总结本轮测试。 编写测试报告，总结测试过程，汇总度量数据。 3、怎么进行工作流的测试  把握需求，找准结点，理清流程，画出流转图，弄清节点间的数据流转，设计测试用例的时候必须覆盖所有可能的流程。 工作流如果问到有没有做过，根据对工作流的了解情况回答，如果比较了解，可以把参与的某个项目中说上一些有工作流的，如果不是很了解就说没有做过，但是学习过相关知识', '', '0', '2017-12-25 19:53:00', '10', '1');
INSERT INTO `topic` VALUES ('4035', '26', '2', '软中断的处理非常像硬中断。然而，它们仅仅是由当前正在运行的进程所产生的。', 'bf9a4a77-2459-4ef4-8fc5-74ed184a0920.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:53:00', '28', '1');
INSERT INTO `topic` VALUES ('4036', '18', '4', '双绞线的性能指标对于双绞线，用户最关心的是表征其性能的几个指标。这些指标包括衰减、近端串扰、阻抗特性、分布电容、直流电阻等', '054ba851-e36b-4a5d-8d14-ee63c632c756.', null, null, null, null, null, null, '（1）衰减。60      衰减（ATTENUATION）是沿链路的信号损失度量。衰减与线缆的长度有关系，随着长度的增加，信号衰减也随之增加。衰减用\"DB\"作单位，表示源传送端信号到接收端信号强度的比率。由于衰减随频率而变化，因此，应测量在应用范围内的全部频率上的衰减。     （2）近端串扰+：      串扰分近端串扰和远端串扰（FEXT），测试仪主要是测量NEXT，由于存在线路损耗，因此FEXT的量值的影响较小。近端串扰（NEXT）损耗是测量一条UTP链路中从一对线到另一对线的信号耦合。对于UTP链路，NEXT是一个关键的性能指标，也是最难精确测量的一个指标。随着信号频率的增加，其测量难度将加大。 ', '', '0', '2017-12-25 19:53:13', '47', '1');
INSERT INTO `topic` VALUES ('4037', '24', '4', '用cat如何向文件里重定向字符串', '6fa0c7ae-dd46-48ee-8da5-cb5d0d1282cd.', null, null, null, null, null, null, ' 第一种方法：\r\n [USER1@LOCALHOST TMP]$ CAT >>1.TXT\r\n000000000000\r\n111111111111\r\n222222222222\r\n最后按CTRL + D       \r\n第二种方法：\r\nCAT >>1.TXT<<EOF  (以EOF为结束符，可以换成别的如ABC)\r\n> 000000000000\r\n> QQQQQQQQQQQQQ\r\n>EOF(这个结束)', '', '0', '2017-12-25 19:53:25', '19', '1');
INSERT INTO `topic` VALUES ('4038', '26', '2', '管道是借助用户空间进行进程通信的一种方式。', '9b8d1f71-3334-42de-98b2-408d66ab3cac.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:53:30', '40', '1');
INSERT INTO `topic` VALUES ('4039', '26', '4', '建立一个公共目录/opt/public,要求每个用户都可以创建文件和目录，但只能自己本人和root可以删除；', 'f8bc0693-2b06-407a-94ac-d82e9f6c43d0.', null, null, null, null, null, null, 'MKDIR /OPT/PUBLIC\r\nCHMOD 1777 /OPT/PUBLIC', '', '0', '2017-12-25 19:53:46', '19', '1');
INSERT INTO `topic` VALUES ('4040', '26', '4', '请写出568A与568B的线序', '83a4a4fe-7062-4739-95fb-cd7c8dc04712.', null, null, null, null, null, null, '568A 白绿 绿 白橙 蓝 白蓝 橙 白棕 棕 568B 白橙 橙 白绿 蓝 白蓝 绿 白棕 棕', '', '0', '2017-12-25 19:53:46', '43', '1');
INSERT INTO `topic` VALUES ('4041', '18', '4', '什么是T568A标准和T568B标准？', 'bae76145-3b2c-4bc9-83aa-a58277a85884.', null, null, null, null, null, null, ' 这是超五类双绞线为达到性能指标和统一接线规范而制定的二种国际标准线序', '', '0', '2017-12-25 19:53:49', '47', '1');
INSERT INTO `topic` VALUES ('4042', '26', '2', '硬中断不能直接中断CPU。它会引起内核中相关的代码被触发。对于那些需要花费一些时间去处理的进程，中断代码本身也可以被其他的硬中断中断。', '621192e7-cf91-4344-8ee0-2c7ed672cc57.', null, null, null, null, null, null, '错误', '硬中断可以直接中断CPU。它会引起内核中相关的代码被触发。对于那些需要花费一些时间去处理的进程，中断代码本身也可以被其他的硬中断中断。', '0', '2017-12-25 19:54:06', '28', '1');
INSERT INTO `topic` VALUES ('4043', '24', '4', '如何查看当前的Linux服务器的运行级别？', '5aa38a4d-5b83-435c-a22e-63b3b049a345.', null, null, null, null, null, null, '‘WHO -R’ 和 ‘RUNLEVEL’ 命令可以用来查看当前的LINUX服务器的运行级别。', '', '0', '2017-12-25 19:54:11', '19', '1');
INSERT INTO `topic` VALUES ('4044', '18', '4', '表和视图的区别：', '4980bf44-bd25-43f4-aba1-02af49b350f7.', null, null, null, null, null, null, '表：是数据库中的主要结构，它总是表示单个的、特定的集合。每个表至少包含一个字段，即一个主键，他唯一地标识表的每条记录。  视图：是由来自数据库中的一个或多个表或多个表的字段所组成的一个虚拟的表。实际上它自身不存储任何数据，存储在数据库中的有关视图的唯一信息几句是它的结构。', '', '0', '2017-12-25 19:55:01', '10', '1');
INSERT INTO `topic` VALUES ('4045', '26', '2', 'Linux中所有进程的用户空间都是各自独立的。', '530ec0f7-fe9c-47bf-bca2-e0c152de36d5.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:55:10', '40', '1');
INSERT INTO `topic` VALUES ('4046', '26', '2', ' 对于时钟中断，内核调度代码会将当前正在运行的进程挂起，从而让其他的进程来运行。它的存在是为了让调度代码（或称为调度器）可以调度多任务', '725d028b-1e00-484e-8964-8c2d0298f830.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:55:11', '28', '1');
INSERT INTO `topic` VALUES ('4047', '26', '4', 'QQ等即时消息软件采用的基本网络传输协议是什么？ ', '4b6edf4a-cc7a-4416-9b8b-6e6a09b3a7e2.', null, null, null, null, null, null, '采用的是UDP和TCP协议，QQ主要采用UDP，在某些情况下采用TCP，即时消息多数采用UDP协议 ', '', '0', '2017-12-25 19:55:20', '43', '1');
INSERT INTO `topic` VALUES ('4048', '26', '2', 'Linux内存管理中先描述虚拟内存空间，然后才分配物理内存', 'a0684a91-969c-4a65-82f9-5373a21faa25.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:55:37', '40', '1');
INSERT INTO `topic` VALUES ('4049', '18', '4', '删除表Department ', '029f9a18-6d28-4eb9-8263-da5f38c28c7d.', null, null, null, null, null, null, 'DROP TABLE DEPARTMENT；', '', '0', '2017-12-25 19:55:40', '10', '1');
INSERT INTO `topic` VALUES ('4050', '18', '4', '如何查看Linux的默认网关？', 'f30a2ceb-8fd3-4ba4-991e-6afdc37adee0.', null, null, null, null, null, null, '用 “ROUTE -N” 和 “NETSTAT -NR” 命令，我们可以查看默认网关。除了默认的网关信息，这两个命令还可以显示当前的路由表。', '', '0', '2017-12-25 19:56:01', '19', '1');
INSERT INTO `topic` VALUES ('4051', '26', '2', '伙伴算法是以页为单位分配虚拟内存的算法。', 'a38a8c8f-1023-477a-a6b0-6c42a935e294.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 19:56:07', '40', '1');
INSERT INTO `topic` VALUES ('4052', '18', '1', 'PON网络由  OLT  、   ONU   、  ODN  组成。 EPON系统下行使用波长为_1490_nm，上行波长_1310_nm。 FTTB是指（       ）。 ', '3ed50941-ca1d-45dd-96ec-4a8fc525cb6f.', 'A、光纤到户 ', ' B、光纤到楼  ', 'C、光纤到办公室  ', 'D、光纤到室', '', '', 'F', '', '0', '2017-12-25 19:56:12', '47', '1');
INSERT INTO `topic` VALUES ('4053', '32', '4', '写出表Department增加一条记录 和 更新一条记录的 SQL语句', 'bb675064-85cd-4492-afe8-d16fc7e456e6.', null, null, null, null, null, null, '增加记录值 (‗12‘, ‗研发部‘, ‗张三‘) ； 更新 DEPT_ID=‘12‘的记录 (‗12‘, ‗研发部‘, ‗张三新‘)  参考答案： 增加记录:INSERT INTO DEPARTMENT(DEPT_ID,DEPT_NAME,DEPT_LEADER) VALUES (‗12‘,‘研发部‘,‘张三‘)  更新记录:UPDATE DEPARTMENT SET DEPT_LEADER=‘张三新‘ WHERE DEPT_ID=‘12‘;', '', '0', '2017-12-25 19:56:21', '10', '1');
INSERT INTO `topic` VALUES ('4054', '18', '4', '如何在Linux上重建初始化内存盘镜像文件？', '2dc5c947-633e-477b-929d-3cff23b71eca.', null, null, null, null, null, null, ' 在CENTOS 5.X / RHEL 5.X中，可以用MKINITRD命令来创建初始化内存盘文件，举例如下：\r\n# MKINITRD -F -V /BOOT/INITRD-$(UNAME -R).IMG $(UNAME -R)\r\n如果你想要给特定的内核版本创建初始化内存盘，你就用所需的内核名替换掉 ‘UNAME -R’ 。\r\n在CENTOS 6.X / RHEL 6.X中，则用DRACUT命令来创建初始化内存盘文件，举例如下：\r\n# DRACUT -F\r\n以上命令能给当前的系统版本创建初始化内存盘，给特定的内核版本重建初始化内存盘文件则使用以下命令：\r\n# DRACUT -F INITRAMFS-2.X.XX-XX.EL6.X86_64.IMG 2.X.XX-XX.EL6.X86_64', '', '0', '2017-12-25 19:56:45', '19', '1');
INSERT INTO `topic` VALUES ('4055', '26', '2', 'API函数并不一定都是系统调用', 'b9623674-81f4-44c1-b6d6-80f7045c4fa8.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 19:57:00', '40', '1');
INSERT INTO `topic` VALUES ('4056', '26', '3', '32分光器插入损耗典型值是', '7e78b397-6613-4fff-b70e-96c0ccbaf32d.', null, null, null, null, null, null, '17DB___', '', '0', '2017-12-25 19:57:14', '47', '1');
INSERT INTO `topic` VALUES ('4057', '32', '4', '软件工程的结构化分析方法强调的是分析开发对象的哪项？', '13c17fac-4939-49f3-8df5-b106e8a8e45f.', null, null, null, null, null, null, '数据流；控制流；时间限制；进程通信', '', '0', '2017-12-25 19:57:23', '10', '1');
INSERT INTO `topic` VALUES ('4058', '24', '4', 'cpio命令是什么？', 'f1620b53-3cd8-425e-bc77-152ded4fc3e4.', null, null, null, null, null, null, 'CPIO就是复制入和复制出的意思。CPIO可以向一个归档文件（或单个文件）复制文件、列表，还可以从中提取文件。', '', '0', '2017-12-25 19:57:24', '19', '1');
INSERT INTO `topic` VALUES ('4060', '33', '4', 'EJB是基于哪些技术实现的？并说出SessionBean和EntityBean的区别，StatefulBean和StatelessBean的区别。', 'a6140296-cf48-4260-9d74-71816162263f.', null, null, null, null, null, null, 'EJB包括SESSION BEAN、ENTITY BEAN、MESSAGE DRIVEN BEAN，基于JNDI、RMI、JAT等技术实现。\r\nSESSIONBEAN在J2EE应用程序中被用来完成一些服务器端的业务操作，例如访问数据库、调用其他EJB组件。ENTITYBEAN被用来代表应用系统中用到的数据。\r\n对于客户机，SESSIONBEAN是一种非持久性对象，它实现某些在服务器上运行的业务逻辑。\r\n对于客户机，ENTITYBEAN是一种持久性对象，它代表一个存储在持久性存储器中的实体的对象视图，或是一个由现有企业应用程序实现的实体。\r\nSESSION BEAN 还可以再细分为 STATEFUL SESSION BEAN 与 STATELESS SESSION BEAN ，这两种的 SESSION BEAN都可以将系统逻辑放在 METHOD之中执行，不同的是 STATEFUL SESSION BEAN 可以记录呼叫者的状态，因此通常来说，一个使用者会有一个相对应的 STATEFUL SESSION BEAN 的实体。STATELESS SESSION BEAN 虽然也是逻辑组件，但是他却不负责记录使用者状态，也就是说当使用者呼叫 STATELESS SESSION BEAN 的时候，EJB CONTAINER 并不会找寻特定的 STATELESS SESSION BEAN 的实体来执行这个 METHOD。换言之，很可能数个使用者在执行某个 STATELESS SESSION BEAN 的 METHODS 时，会是同一个 BEAN 的 INSTANCE 在执行。从内存方面来看， STATEFUL SESSION BEAN 与 STATELESS SESSION BEAN 比较， STATEFUL SESSION BEAN 会消耗 J2EE SERVER 较多的内存，然而 STATEFUL SESSION BEAN 的优势却在于他可以维持使用者的状态。', '', '0', '2017-12-25 19:57:57', '51', '1');
INSERT INTO `topic` VALUES ('4061', '24', '4', 'patch命令是什么？如何使用？', '245dda9a-5560-4e8f-a163-d9a53986b4ec.', null, null, null, null, null, null, '顾名思义，PATCH命令就是用来将修改（或补丁）写进文本文件里。PATCH命令通常是接收DIFF的输出并把文件的旧版本转换为新版本。举个例子，LINUX内核源代码由百万行代码文件构成，所以无论何时，任何代码贡献者贡献出代码，只需发送改动的部分而不是整个源代码，然后接收者用PATCH命令将改动写进原始的源代码里。\r\n创建一个DIFF文件给PATCH使用，\r\n# DIFF -NAUR OLD_FILE NEW_FILE > DIFF_FILE\r\n旧文件和新文件要么都是单个的文件要么都是包含文件的目录，-R参数支持目录树递归。\r\n一旦DIFF文件创建好，我们就能在旧的文件上打上补丁，把它变成新文件：\r\n# PATCH < DIFF_FILE', '', '0', '2017-12-25 19:58:03', '19', '1');
INSERT INTO `topic` VALUES ('4062', '24', '4', 'aspell有什么用 ?', '7f4e90b9-3c41-404e-9482-cd9f1a98841a.', null, null, null, null, null, null, '顾名思义，ASPELL就是LINUX操作系统上的一款交互式拼写检查器。ASPELL命令继任了更早的一个名为ISPELL的程序，并且作为一款免费替代品 ，最重要的是它非常好用。当ASPELL程序主要被其它一些需要拼写检查能力的程序所使用的时候，在命令行中作为一个独立运行的工具的它也能十分有效。', '', '0', '2017-12-25 19:58:22', '19', '1');
INSERT INTO `topic` VALUES ('4063', '26', '4', '公司里面有一位人力资源经理李小姐，她在网络上的一个共享文件夹里面保存了她工 作中的一些文件，并且她为这些文件实施了一些权限设置并且加密了。后来她离职了，新的人力资源经理需要访问李小姐以前做的一些文件，但是不能成功。你如何解决这个问题？（这个公司的网络是一个域模式的网络）', 'abaa882f-4d26-4bd2-b407-3d4bac2d9426.', null, null, null, null, null, null, '以管理员登录进入网络，重新设置李小姐的文件的权限；指定新来的人力资源经理帐号为李小姐的加密文件的恢复代理人。', '', '0', '2017-12-25 19:58:34', '43', '1');
INSERT INTO `topic` VALUES ('4064', '24', '4', '如何从命令行查看域SPF记录？', '9397d920-5af3-496b-aa8b-9c87367b6bae.', null, null, null, null, null, null, '我们可以用DIG命令来查看域SPF记录。举例如下：\r\nLINUXTECHI@LOCALHOST:~$ DIG -T TXT GOOGLE.COM', '', '0', '2017-12-25 19:58:45', '19', '1');
INSERT INTO `topic` VALUES ('4065', '26', '1', '以下哪些宽带账号输入正确的是', '98552142-fafc-42ac-8fee-dea11f188815.', 'A.39800001234＠１３９．ｇｄ', 'B.398 00001234@139.GD', 'C.39800001234@139.JD', 'D.39800001234@139.gd', '', '', 'D', '', '0', '2017-12-25 19:58:56', '47', '1');
INSERT INTO `topic` VALUES ('4066', '26', '4', '你在一台Windows 2000 的域控制器上安装了终端服务，在用户的计算机上安装了终 端服务客户端。当用户使用终端服务客户端用他自己的帐号试图连接到终端服务器的 时候，他们看到系统提示“本地策略不允许交互式登录”，但是当你使用管理员的帐号登录的时候，发现可以登录进入终端服务器。你想让用户使用他们自己的帐号登录进入终端服务器，你应该怎么做', 'f86e5048-6c64-4763-b09f-1734a2b3ca4c.', null, null, null, null, null, null, '修改域控制器安全策略，赋予这些用户帐号本地登录的权限。', '', '0', '2017-12-25 19:59:01', '43', '1');
INSERT INTO `topic` VALUES ('4067', '24', '4', '如何识别Linux系统中指定文件(/etc/fstab)的关联包？', '0585d70f-8e23-4c9c-90a7-4d77906ba6c6.', null, null, null, null, null, null, '# RPM -QF /ETC/FSTAB\r\n以上命令能列出提供“/ETC/FSTAB”这个文件的包。', '', '0', '2017-12-25 19:59:12', '19', '1');
INSERT INTO `topic` VALUES ('4068', '26', '4', '用户抱怨说公司的网站越来越慢，请问你从哪些方面考虑检查这些问题？', 'fb4977ec-3e81-45c0-8c8c-d99d608dd864.', null, null, null, null, null, null, '首先检查网络是否拥塞，访问一下公司网络里面的其他一些服务器，使用网络检测工具如PING命令检测一下延时，如果很正常，证明网络是健康的；然后检测一下服务器的状态，比如磁盘IO、内存使用状况、CPU使用状况，如发现瓶颈，再针对瓶颈解决问题。', '', '0', '2017-12-25 19:59:14', '43', '1');
INSERT INTO `topic` VALUES ('4069', '26', '4', '你的网络包含了10个域控制器，10个成员服务器，和超过1000个客户计算机，所有 的服务器都运行着Windows 2000 Server，并且所有的客户机都运行着Windows 2000 Professional。两个域控制器作为DNS服务器，用户之间使用文件共享。网络分成了10个子网并且使用TCP/IP作为唯一的通讯协议。你想让这个网络上所有的计算机都使用DNS来解析彼此的名字，并且当其中一个DNS服务器宕机的时候，客户计仍然能够注册自己的名字和解析其他计算机的名字，你应该如何部署这个网络？', '40bbf26f-3c2a-4876-8ef3-28ec7aa1745c.', null, null, null, null, null, null, '至少配置两个DNS服务器上的标准主要区域为活动目录集成区域。', '', '0', '2017-12-25 19:59:37', '43', '1');
INSERT INTO `topic` VALUES ('4070', '24', '4', '哪条命令用来查看bond0的状态？', '608a6c51-f997-40c9-aa24-d109e5efa439.', null, null, null, null, null, null, 'CAT /PROC/NET/BONDING/BOND0', '', '0', '2017-12-25 19:59:37', '19', '1');
INSERT INTO `topic` VALUES ('4071', '26', '4', '你是一个服务器的管理员，为了保障服务器上数据的安全，你能想到那些安全措施？', '9bc88e7a-945c-41ec-8831-d0e504e3aaab.', null, null, null, null, null, null, '首先应该保证硬件的安全，比如为服务器配备不间断电源、在磁盘使用上应用RAID1或者RAID5等；然后保证服务器系统及软件的安全，比如说安装系统的安全补丁、检查权限设置是否严密，检查应用程序是否有漏洞、防病毒等等', '', '0', '2017-12-25 19:59:52', '43', '1');
INSERT INTO `topic` VALUES ('4072', '18', '4', 'Linux系统中的/proc文件系统有什么用？', '4833644c-e30c-4ce7-8d9a-c2e9339a895b.', null, null, null, null, null, null, ' /PROC文件系统是一个基于内存的文件系统，其维护着关于当前正在运行的内核状态信息，其中包括CPU、内存、分区划分、I/O地址、直接内存访问通道和正在运行的进程。这个文件系统所代表的并不是各种实际存储信息的文件，它们指向的是内存里的信息。/PROC文件系统是由系统自动维护的。', '', '0', '2017-12-25 20:00:06', '19', '1');
INSERT INTO `topic` VALUES ('4073', '33', '4', '如何查看在weblogic中已经发布的EJB?', 'a01b0f36-4392-4900-b7b6-c85e9623ea55.', null, null, null, null, null, null, '可以使用管理控制台，在它的DEPLOYMENT中可以查看所有已发布的EJB', '', '0', '2017-12-25 20:00:12', '51', '1');
INSERT INTO `topic` VALUES ('4074', '18', '4', 'Fedora10在安装时提供哪几种方式建立Linux的分区？ ', '7272a4c3-279e-4825-a40b-6cdcee85ebe8.', null, null, null, null, null, null, 'FEDORA10在安装时提供了五个关于分区的选项：  在选定磁盘上删除所有分区并创建默认分区结构：如果想在磁盘上仅安装一个FEDORA系统，可以选择这个选项。特别注意，如果选择了这个选项，那么该磁盘中已经安装的所有其他系统将被破坏', '', '0', '2017-12-25 20:00:27', '29', '1');
INSERT INTO `topic` VALUES ('4075', '26', '4', '公司所在地经常停电，造成服务器非正常关机而丢失了部分文件，你如何解决这个问 题？', '3089309e-f9f2-42e2-b80f-e944d5efda7f.', null, null, null, null, null, null, '配备UPS，可以选择后备式的UPS。', '', '0', '2017-12-25 20:00:55', '43', '1');
INSERT INTO `topic` VALUES ('4076', '24', '4', '如何在/usr目录下找出大小超过10MB的文件？', 'fcbb785a-f0a5-4328-a3ed-1afa3e299cba.', null, null, null, null, null, null, 'FIND /USR -SIZE +10M', '', '0', '2017-12-25 20:01:35', '19', '1');
INSERT INTO `topic` VALUES ('4077', '18', '4', ' Linux有几种安装方法？ ', '3dbd0e56-6f27-4b2f-9f6e-c27e5521e1d7.', null, null, null, null, null, null, '1)    从光盘安装 2)    从硬盘安装', '', '0', '2017-12-25 20:01:49', '29', '1');
INSERT INTO `topic` VALUES ('4078', '26', '1', '某客户家庭宽带从A小区搬迁至B小区（由不同的OLT覆盖）后宽带连接拨号时提示 691错误代码，但是上门使用测试账号能正常拨号上网，确认客户账号密码输入正确，通过互联网感知服务平台查询认证信息查询账号不在线。最可能的原因是', '85a6ccbf-54b1-48d7-8249-8508686168e7.', 'A.账号被盗用', 'B.账号的密码被更改，重置密码即可', 'C.账号到期', 'D.账号绑定在原有端口，需要重新绑定', '', '', 'D', '', '0', '2017-12-25 20:01:49', '47', '1');
INSERT INTO `topic` VALUES ('4079', '24', '4', '如何在/home目录下找出120天之前被修改过的文件？', '47e1cd44-68ae-4650-8618-3efdadb72857.', null, null, null, null, null, null, ' FIND /HOME -MTIME +120', '', '0', '2017-12-25 20:03:10', '19', '1');
INSERT INTO `topic` VALUES ('4080', '18', '4', '在安装Linux之前应该如何获取系统的硬件资料？', '15ee127d-b683-4ffe-87de-36dcaad069b0.', null, null, null, null, null, null, '在安装LINUX之前，先确定你的计算机的硬件是否能被LINUX所支持。需要关注的硬件包括显卡、声卡、网卡、打印机、鼠标等。要获知相应硬件的型号，可以在WINDOWS下查看，也可以通过设备本身的标志查看。检查有没有相应的设备驱动程序。关注硬盘分区、大小等信息。如果声卡、显卡的型号不能识别，一般可以模拟成标准硬件来使用。', '', '0', '2017-12-25 20:03:52', '29', '1');
INSERT INTO `topic` VALUES ('4081', '24', '4', '如何在/var目录下找出90天之内未被访问过的文件？', 'a01b85ef-0f8e-44c1-b2f8-658822deb7bb.', null, null, null, null, null, null, 'FIND /VAR \\! -ATIME -90', '', '0', '2017-12-25 20:03:56', '19', '1');
INSERT INTO `topic` VALUES ('4082', '18', '1', '5. 确定某客户宽带账号（限定端口）被盗用且该账号一直在线使用，但通过账号绑定的信 息无法知盗用账号人的信息。以下办法最可行的是', '9271a2b1-c836-409d-99fe-50cf5945f7b8.', 'A.联系客服对账号进行重新绑定后让客户登录使用', 'B.告知客户联系客服重置密码后再登录', 'C.联系城域网专业在BRAS设备上将该账号强制下线', 'D.修改密码并重新绑定端口，再在BRAS侧强制下线', '', '', 'D', '', '0', '2017-12-25 20:04:00', '47', '1');
INSERT INTO `topic` VALUES ('4083', '24', '4', '在整个目录树下查找文件“core”，如发现则无需提示直接删除它们。', '8e804aa7-451c-4b76-826b-7b65db09f868.', null, null, null, null, null, null, 'FIND / -NAME CORE -EXEC RM {} \\;', '', '0', '2017-12-25 20:04:16', '19', '1');
INSERT INTO `topic` VALUES ('4084', '25', '4', '什么是shell，shell的作用是什么？', '7c4e5a6a-f6c6-48bd-a085-912577792cc3.', null, null, null, null, null, null, 'SHELL是系统的用户界面，它实际上是一个命令解释器，它解释由用户输入的命令并把它们送到内核，把执行的结果显示给用户。不仅如此，SHELL有自己的编程语言，允许用户编写由SHELL命令组成的程序。', '', '0', '2017-12-25 20:04:25', '29', '1');
INSERT INTO `topic` VALUES ('4085', '26', '4', '软中断和硬中断的区别', 'd78c88f5-89cc-4d13-ae81-5014f1ae7063.', null, null, null, null, null, null, '1、软中断发生的时间是由程序控制的,而硬中断发生的时间是随机的\r\n2、软中断是由程序调用发生的,而硬中断是由外设引发的\r\n3、硬件中断处理程序要确保它能快速地完成它的任务,这样程序执行时才不会等待较长时间‍', '', '0', '2017-12-25 20:04:26', '28', '1');
INSERT INTO `topic` VALUES ('4086', '33', '4', 'CORBA是什么?用途是什么? ', 'faf96b0a-8029-40ad-ac8a-21d8fdbee1ed.', null, null, null, null, null, null, 'CORBA 标准是公共对象请求代理结构(COMMON OBJECT REQUEST BROKER ARCHITECTURE)，由对象管理组织 (OBJECT MANAGEMENT GROUP，缩写为 OMG)标准化。它的组成是接口定义语言(IDL), 语言绑定(BINDING:也译为联编)和允许应用程序间互操作的协议。 其目的为：用不同的程序设计语言书写在不同的进程中运行，为不同的操作系统开发。', '', '0', '2017-12-25 20:04:29', '51', '1');
INSERT INTO `topic` VALUES ('4087', '18', '4', 'strings命令有什么作用？', '7bd45ff0-537e-4712-bdb5-14c2338b1dbb.', null, null, null, null, null, null, 'STRINGS命令用来提取和显示非文本文件中的文本字符串。（LCTT 译注：当用来分析你系统上莫名其妙出现的二进制程序时，可以从中找到可疑的文件访问，对于追查入侵有用处）', '', '0', '2017-12-25 20:04:33', '19', '1');
INSERT INTO `topic` VALUES ('4088', '26', '4', '公司有一个项目，需要架设两个网站，其中一个网站访问量比较小，数据库中存储的 数据也比较少，另外一个网站访问量非常大，数据库中的数据也非常庞大，数据文件 大概有超过5GB，你是公司的系统工程师，如何设计建设网站的方案？程序有程序员来做。', '9930bb09-12a2-4d4a-8aa2-090452ee7853.', null, null, null, null, null, null, '对于访问量比较小的网站，可以采用LINUX+APACHE+PHP+MYSQL。对于访问量比较大的网站，可以采用LINUX+APACHE+JSP+ORACLE或者WINDOWS+ASP（JSP）+SQLSERVER  ', '', '0', '2017-12-25 20:05:14', '43', '1');
INSERT INTO `topic` VALUES ('4089', '33', '4', 'EJB需直接实现它的业务接口或Home接口吗，请简述理由。', '457a465e-d34f-43cb-b2e5-f9c81ee64cf0.', null, null, null, null, null, null, '远程接口和HOME接口不需要直接实现，他们的实现代码是由服务器产生的，程序运行中对应实现类会作为对应接口类型的实例被使用。', '', '0', '2017-12-25 20:05:21', '51', '1');
INSERT INTO `topic` VALUES ('4090', '18', '4', 'tee 过滤器有什么作用 ?', 'd85619e1-1ba3-4f59-95ea-a4de06ae6c0e.', null, null, null, null, null, null, ' TEE 过滤器用来向多个目标发送输出内容。如果用于管道的话，它可以将输出复制一份到一个文件，并复制另外一份到屏幕上（或一些其它程序）。\r\nLINUXTECHI@LOCALHOST:~$ LL /ETC | NL | TEE /TMP/LL.OUT\r\n在以上例子中，从LL输出可以捕获到 /TMP/LL.OUT 文件中，并且同样在屏幕上显示了出来。', '', '0', '2017-12-25 20:05:27', '19', '1');
INSERT INTO `topic` VALUES ('4091', '18', '4', '内核的含义，简述内核的作用是什么？', '1593e5f8-5230-4c09-b102-7f2216041579.', null, null, null, null, null, null, '内核是系统的心脏，是运行程序和管理磁盘、打印机等硬件设备的核心程序。它的总有是管理CPU、内存和外设。', '', '0', '2017-12-25 20:05:39', '29', '1');
INSERT INTO `topic` VALUES ('4092', '26', '4', '计算机中的端口共有多少个', '7357dbc7-a1c8-490e-88ec-10e61a8422ed.', null, null, null, null, null, null, 'TCP0-65535，UDP0-65535也就是共有65536*2=131072个端口 ', '', '0', '2017-12-25 20:05:47', '43', '1');
INSERT INTO `topic` VALUES ('4093', '18', '4', 'export PS1 = ”$LOGNAME@hostname:\\$PWD: 这条命令是在做什么？', '0b4f9ad8-de7f-4985-a9a1-805824873672.', null, null, null, null, null, null, '这条EXPORT命令会更改登录提示符来显示用户名、本机名和当前工作目录。', '', '0', '2017-12-25 20:05:49', '19', '1');
INSERT INTO `topic` VALUES ('4094', '26', '2', '硬中断是可屏蔽的（NMI硬中断不可屏蔽），软中断不可屏蔽。', 'e25cb641-7c37-4638-80be-fc1502472308.', null, null, null, null, null, null, '正确', '硬中断是可屏蔽的（NMI硬中断不可屏蔽），软中断不可屏蔽。', '0', '2017-12-25 20:05:58', '28', '1');
INSERT INTO `topic` VALUES ('4095', '33', '4', '排序都有哪几种方法？请列举。用JAVA实现一个快速排序。', '98d3d0dd-b769-41e2-b3b7-bd17e628d084.', null, null, null, null, null, null, '排序的方法有：插入排序（直接插入排序、希尔排序），交换排序（冒泡排序、快速排序），选择排序（直接选择排序、堆排序），归并排序，分配排序（箱排序、基数排序）\r\n快速排序的伪代码。\r\n/ /使用快速排序方法对A[ 0 :N- 1 ]排序\r\n从A[ 0 :N- 1 ]中选择一个元素作为M I D D L E，该元素为支点\r\n把余下的元素分割为两段LEFT 和R I G H T，使得L E F T中的元素都小于等于支点，而RIGHT 中的元素都大于等于支点\r\n递归地使用快速排序方法对LEFT 进行排序\r\n递归地使用快速排序方法对RIGHT 进行排序\r\n所得结果为L E F T + M I D D L E + R I G H T', '', '0', '2017-12-25 20:06:05', '51', '1');
INSERT INTO `topic` VALUES ('4096', '26', '4', '什么是Cache 什么是Buffer？区别是什么？', '904719e6-a528-4812-a229-58ebcfea0958.', null, null, null, null, null, null, 'CACHE，直译是高速缓存存储器，有硬件来实现。起到设备间处理速度协调作用。例如CPU的L2，L1，内存的作用等。  BUFFER，直译是缓冲区，有软件在RAM中实现。起到加快响应速度的作用。例   如：WEB缓存，各个应用软件中的缓存，队列。共同点都是在RAM中实现，但实现的方式不一样。', '', '0', '2017-12-25 20:06:05', '43', '1');
INSERT INTO `topic` VALUES ('4097', '24', '4', ' ll | awk ‘{print $3,”owns”,$9}’ 这条命令是在做什么？', '38ff9091-3676-4461-83c1-9a90b40a1cd0.', null, null, null, null, null, null, ' 这条LL命令会显示这些文件的文件名和它们的拥有者。', '', '0', '2017-12-25 20:06:10', '19', '1');
INSERT INTO `topic` VALUES ('4098', '26', '4', '什么是MBR', '82ff68b3-9960-41d4-9b04-6456b2916dd6.', null, null, null, null, null, null, 'MBR，MASTER BOOT RECORD，主引导记录。引导OS作用的。', '', '0', '2017-12-25 20:06:25', '43', '1');
INSERT INTO `topic` VALUES ('4099', '24', '4', ' linux中lspci命令的作用是什么？', 'ab2ace4b-fc3b-4582-bfdc-c0da1b06752a.', null, null, null, null, null, null, ' LSPCI命令用来显示你的系统上PCI总线和附加设备的信息。指定-V，-VV或-VVV来获取越来越详细的输出，加上-R参数的话，命令的输出则会更具有易读性。', '', '0', '2017-12-25 20:06:45', '19', '1');
INSERT INTO `topic` VALUES ('4100', '18', '1', '客户建立宽带连接过程中提示无效、无法成功建立，最可能的原因是', 'eb4078ea-a803-4483-a49c-c0799252f2db.', 'A 客户网卡被禁用', 'B 客户网线没有接好', 'C 客户网卡硬件故障或是驱动异常', 'D 客户网线损坏', '', '', 'C', '', '0', '2017-12-25 20:06:45', '47', '1');
INSERT INTO `topic` VALUES ('4101', '3', '4', 'java中有几种类型的流？JDK为每种类型的流提供了一些抽象类以供继承，请说出他们分别是哪些类？', '3d3045ec-9c61-4f13-982e-e65b5b0260be.', null, null, null, null, null, null, '字节流，字符流。字节流继承于INPUTSTREAM OUTPUTSTREAM，字符流继承于INPUTSTREAMREADER OUTPUTSTREAMWRITER。在JAVA.IO包中还有许多其他的流，主要是为了提高性能和使用方便。', '', '0', '2017-12-25 20:06:47', '51', '1');
INSERT INTO `topic` VALUES ('4102', '24', '4', '什么是GNU软件，什么是GPL和LGPL?', '238452a5-54e7-4e5d-ba5a-b2e0f4d727c3.', null, null, null, null, null, null, 'GUN项目主要由自由软件基金资助的一个项目，目标是开发一个自由的、UNIX类型的操作系统，称为GNU系统。GNU是―GNU’S NOT UNIX‖的首字母的递归缩写，目前使用LINUX内核的各种GNU操作系统应用非常广泛。所有的GNU软件和派生工作均遵循GNU通用公共许可证，即GPL。  GPL和软件是否免费无关，它主要目标是保证软件对所有的用户来说是自由的。GPL通过如下途径实现这一目标：  L  它要求软件以源代码的形式发布，并规定任何用户能够以源代码的形式将软件复制或发布给别的用户。  L  它提醒每个用户，对于该软件不提供任何形式的担保。  L  如果用户的软件使用了受GPL保护的任何软件的一部分，那么该软件就继承了GPL软件，并因此而成为GPL软件，也就是说必须随应用程序一起发布源代码。  L  GPL并不排斥对自由软件进行商业性质的包装和发行，也不限制在自由软件的基础上打包发行其他非自由软件。  L  遵照GPL的软件并不是可以任意传播的，这些软件通常都有正式的版权，GPL在发布软件或者复制软件时声明限制条件。但是，从用户的角度考虑，这些根本不能算是限制条件，相反用户只会从中受益，因为用户可以确保获得源代码  LGPL允许用户在自己的应用程序中使用程序库，即使不公开自己的源代码。但是，要求用户必须能够获得在应用程序中使用的程序库的源代码，并且允许用户对这些程序库进行修改。 遵循LGPL的一种方法是，随应用程序一起发布目标代码以及可以将这些目标程序和受LGPL保护的程序库链接起来的MAKEFILE文件。 遵循LGPL的另一种比较好的方法是使用动态链接', '', '0', '2017-12-25 20:07:05', '29', '1');
INSERT INTO `topic` VALUES ('4103', '26', '4', '将FAT32转换为NTFS分区的命令是什么', 'fc6f8c42-84f8-4bc1-9043-f450f6a43641.', null, null, null, null, null, null, 'CONVERT X: /FS:NTFS X:表示要转换的分区 ', '', '0', '2017-12-25 20:07:13', '43', '1');
INSERT INTO `topic` VALUES ('4105', '3', '4', 'Java是一个支持并发、基于类和面向对象的计算机编程语言。下面列出了面向对象软件开发的优点：', '14863dc1-5ffd-4d85-8345-57f0859c30fe.', null, null, null, null, null, null, '代码开发模块化，更易维护和修改 \r\n代码复用。\r\n增强代码的可靠性和灵活性。\r\n增加代码的可理解性。', '', '0', '2017-12-25 20:07:53', '50', '1');
INSERT INTO `topic` VALUES ('4106', '26', '4', '手动更新DHCP分配的IP地址是什么', '339b53b4-5f1b-4640-a6ed-b3b9721c5d12.', null, null, null, null, null, null, 'IPCONFIG /RENEW ', '', '0', '2017-12-25 20:07:56', '43', '1');
INSERT INTO `topic` VALUES ('4107', '26', '4', 'XP每个分区下都有个System Volume Information名的隐藏目录是做什么的？还有 pagefile.sys文件？ ', '5d80ee0b-1e43-4488-92e9-f1e2ccf01d89.', null, null, null, null, null, null, 'SYSTEM VOLUME INFORMATION 该目录是XP的自动还原功能所要用到的，存储的是还原点文件。PAGEFILE.SYS就是PF，虚拟内存的文件。', '', '0', '2017-12-25 20:08:17', '43', '1');
INSERT INTO `topic` VALUES ('4108', '3', '4', '什么是java序列化，如何实现java序列化？', '88648711-19a0-457f-84bc-f9a16f0f85e2.', null, null, null, null, null, null, '序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决在对对象流进行读写操作时所引发的问题。\r\n序列化的实现：将需要被序列化的类实现SERIALIZABLE接口，该接口没有需要实现的方法，IMPLEMENTS SERIALIZABLE只是为了标注该对象是可被序列化的，然后使用一个输出流(如：FILEOUTPUTSTREAM)来构造一个OBJECTOUTPUTSTREAM(对象流)对象，接着，使用OBJECTOUTPUTSTREAM对象的WRITEOBJECT(OBJECT OBJ)方法就可以将参数为OBJ的对象写出(即保存其状态)，要恢复的话则用输入流。', '', '0', '2017-12-25 20:08:25', '51', '1');
INSERT INTO `topic` VALUES ('4109', '26', '4', '默认时XP的文件共享是没办法设置用户权限的，只有一个是否允许网络用户更改我的 文件选项，但要需要对此共享文件夹设置不同的用户权限，该怎么做？', '100e0180-c3f8-46bd-aa39-058b74c542f4.', null, null, null, null, null, null, '打开资源管理器---工具---文件夹选项---查看---使用简单文件共享（推荐）把前面的勾勾去掉，或者打开组策略编辑器---计算机配置----WINDOWS设置---本地策略---安全选项---网络访问:本地帐户的共享安全模式，把该属性修改为“经典”模式也可以。', '', '0', '2017-12-25 20:08:40', '43', '1');
INSERT INTO `topic` VALUES ('4110', '3', '4', '封装有哪些好处：', '142130f2-cd8b-4570-a47b-395f3627b034.', null, null, null, null, null, null, '\r\n    通过隐藏对象的属性来保护对象内部的状态。\r\n    提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展。\r\n    禁止对象之间的不良交互提高模块化。\r\n', '', '0', '2017-12-25 20:08:49', '50', '1');
INSERT INTO `topic` VALUES ('4111', '18', '4', 'Windows XP系统盘C 盘根目录下都有哪几个重要的文件（隐藏文件）', '50bfcc2b-bf3f-46cb-a29e-114e683dd553.', null, null, null, null, null, null, 'NTLDR ,NTDETECT.COM,BOOT.INI', '', '0', '2017-12-25 20:09:37', '43', '1');
INSERT INTO `topic` VALUES ('4112', '33', '4', '开发中都用到了那些设计模式?用在什么场合? ', '7dce8bc9-b341-49cc-ba10-9aeb76e54fd8.', null, null, null, null, null, null, '每个模式都描述了一个在我们的环境中不断出现的问题，然后描述了该问题的解决方案的核心。通过这种方式，你可以无数次地使用那些已有的解决方案，无需在重复相同的工作。主要用到了MVC的设计模式。用来开发JSP/SERVLET或者J2EE的相关应用。简单工厂模式等。', '', '0', '2017-12-25 20:09:39', '51', '1');
INSERT INTO `topic` VALUES ('4113', '18', '2', '在DOS系统(实模式)下，从0x20开始，用于操作系统本身。', 'a7616b80-fc7a-4aa9-9ad3-faed4f278c80.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:09:51', '28', '1');
INSERT INTO `topic` VALUES ('4114', '18', '1', '下列哪个选项不是Linux 支持的？', '8c8eb508-4880-4771-8561-e91e24087b51.', ' 多用户 ', '超进程', '可移植', '多进程 ', '', '', 'B', '', '0', '2017-12-25 20:10:46', '29', '1');
INSERT INTO `topic` VALUES ('4115', '26', '4', '请解释一下什么是多态', '8e392676-c89b-4374-96db-9267ffe7cf1c.', null, null, null, null, null, null, '多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面。', '', '0', '2017-12-25 20:10:50', '50', '1');
INSERT INTO `topic` VALUES ('4116', '18', '4', '电脑开机时主机内发出嘀嘀的鸣叫声，且显示器无任何信号，此现象可能是哪方面所 导致，怎样处理？ ', '43ca2764-323e-4b38-b037-55f520bae1da.', null, null, null, null, null, null, '可能是内存问题导致，一般是内存松动，灰尘较多。可以做清扫灰尘，从新插好内存等操作。根据不同的鸣叫身也可以判断是其他硬件等问题 ', '', '0', '2017-12-25 20:11:02', '43', '1');
INSERT INTO `topic` VALUES ('4118', '26', '4', '如果电脑的系统瘫痪（XP系统盘为C），正常启动无法进入系统，而C盘中又有重要文 件，请问有几种拯救方法，该如何操作？ ', '51575c18-4924-467c-b552-377de31b6c12.', null, null, null, null, null, null, '最简单的是把硬盘挂到其他计算机上，直接把重要文件COPY出来，如果磁盘分区是FAT的，可以用启动盘进入到DOS模式下进行文件COPY操作，如果磁盘分区是NTFS的，可以用工具盘启动到DOS下加载NTFSDOS工具进行对NTFS分区进行COPY操作。', '', '0', '2017-12-25 20:11:30', '43', '1');
INSERT INTO `topic` VALUES ('4119', '18', '4', '网络管理就是通过某种方式对网络进行管理，是网络能够正常高效的运行。 2. 网络管理的基本任务是什么？', '13948ce0-4d18-481a-aaec-5bda9041c607.', null, null, null, null, null, null, '使网络中的资源得到更加有效的利用，维护网络的正常运行，当网络出现故障时能够及时报告和处理。', '', '0', '2017-12-25 20:11:47', '47', '1');
INSERT INTO `topic` VALUES ('4120', '26', '4', '什么是FTP？', '176c658e-9259-4701-b4ce-235e595485bc.', null, null, null, null, null, null, 'FTP（FILE TRANSFER PROTOCAL） \r\n    是用于INTERNET上的控制文件的双向传输的协议。同时，也是一个应用程序。用户可以通过FTP把自己的PC机与世界各地所有运行FTP协议的服务器相连，访问服务器上的大量程序和信息。为了更好的运用我们的网络资源，让用户与用户之间实现资源共享。 ', '', '0', '2017-12-25 20:11:50', '46', '1');
INSERT INTO `topic` VALUES ('4121', '26', '4', '重装系统格式化C盘之前该注意哪些方面？（系统可运行前提）', '5eebe923-5832-443e-a35c-8a5f207e1b88.', null, null, null, null, null, null, '磁盘空间允许最好备份整个WINDOWS目录。主要备份PROGRAM FILES 目录，我的文档目录，DOCUMENTS AND SETTINGS目录。另：备份一些软件的安装信息等', '', '0', '2017-12-25 20:11:53', '43', '1');
INSERT INTO `topic` VALUES ('4122', '24', '4', 'df 命令报告文件系统磁盘空间利用率，使用-T选项显示特定的磁盘分区的文件系统类型，-h人类可读方式显示。', '95d7fab6-2ba2-45f4-a946-9849c9cccab4.', null, null, null, null, null, null, '[ROOT@LINUXIDC.COM ~]# DF -TH \r\nFILESYSTEM     TYPE   SIZE  USED AVAIL USE% MOUNTED ON \r\n/DEV/SDA2      EXT4    19G   12G  6.3G  65% / \r\nTMPFS          TMPFS  491M     0  491M   0% /DEV/SHM\r\n/DEV/SDA1      EXT4   190M   65M  116M  36% /BOOT', '', '0', '2017-12-25 20:11:55', '19', '1');
INSERT INTO `topic` VALUES ('4124', '26', '4', '5大基本功能：配置管理、故障管理、性能管理、安全管理和计费管理。 4. 网络管理的基本模型及其组成部分', 'baa913a6-dd12-4d8a-a40e-664451302526.', null, null, null, null, null, null, '：网络管理的基本模块由4部分组成：多个被管代理、至少一个网络管理者或称管理工作站、一个通用的网络管理协议和一个或多个管理信息库', '', '0', '2017-12-25 20:12:05', '47', '1');
INSERT INTO `topic` VALUES ('4125', '26', '4', '管理信息库MIB的定义及其功能', '4345d3ec-e48d-492a-92d9-318a5cdf9a7e.', null, null, null, null, null, null, '管理信息库指记录网络中各种管理对象的信息库。为网络管理提供有关被管网络设备的信息。', '', '0', '2017-12-25 20:12:18', '47', '1');
INSERT INTO `topic` VALUES ('4126', '24', '4', '.fsck 命令可以用来检测与修复文件系统，也可以输出指定磁盘分区的文件系统类型。-N 参数禁用检查文件系统错误，只是显示会做什么。', 'e47ac6b9-7b10-4cee-8eed-187fd5d3fa36.', null, null, null, null, null, null, '[ROOT@LINUXIDC.COM ~]# FSCK -N /DEV/SDA1  \r\nFSCK FROM UTIL-LINUX-NG 2.17.2 \r\n[/SBIN/FSCK.EXT4 (1) -- /BOOT] FSCK.EXT4 /DEV/SDA1', '', '0', '2017-12-25 20:12:20', '19', '1');
INSERT INTO `topic` VALUES ('4127', '18', '4', 'win2000有那两种远程访问方法？', 'c5dfc099-0535-46fc-b393-1bb3d3e892a2.', null, null, null, null, null, null, '拨号远程访问和VPN(虚拟专用网络)。', '', '0', '2017-12-25 20:12:24', '43', '1');
INSERT INTO `topic` VALUES ('4128', '18', '4', '如何根据管理树写出管理对象的名字和对象标识符OID?', 'dfc9f306-03ec-47d4-8cee-9d1584ddac2e.', null, null, null, null, null, null, '可以通过文本字符串，也可以通过MIB为每个对象所分配的一个数字标识（OID）来简洁的表示该对象，如“1.3.6.1.2.15.2”。', '', '0', '2017-12-25 20:12:55', '47', '1');
INSERT INTO `topic` VALUES ('4129', '26', '4', '以太网的主要特点是什么？', '4a5c0f93-db16-470d-b030-2edc30f8d5e2.', null, null, null, null, null, null, '以太网（ETHERNET）是目前应用最广泛的一类局域网，属于基带总线局域网。以太网的核心技术是采用CSMA/CD（CARRIER SENSE MULTIPLE ACCESS WITH COLLISION DETECTION）通信　　控制机制。CSMA/CD是一种算法，主要用于传输及解码格式化的数据包，包括检测结点地址　　并监控传输错误。以无源的电缆作为总线来传送数据帧，并以曾经在历史上表示传播电磁波的以太 (ETHER)来命名。当不涉及到网络的协议细节时，将802.3简称为以太网。以太网的连接距离有一定限制。', '', '0', '2017-12-25 20:13:26', '47', '1');
INSERT INTO `topic` VALUES ('4130', '18', '4', '配置NT主域控制器与2000域控制器有哪些区别？NT域控制器升级到2000需要注意 哪些方面。', 'deb6d540-d037-4c12-9d6f-5a8278caa204.', null, null, null, null, null, null, 'WINDOWS2000的活动目录没有主域控制器和备份域控制器的区别，所有的域控制器在用户访问和提供服务方面都是相同的．   将NT4域升级到WIN2000域时必须注意以下几点：  A.主域控制器必须是使用NTFS的文件系统。  B.升级WIN2000后不能再回到NT4的环境。  C.必须先备份重要数据及前置的准备作业。  D.先升级PDC再升级BDC。   E.安装程序会有ACTIVE DIRECTORY的数据库, LOG文件和SYSVOL三个目录会要求设定.目录的路径必须在NTFS的文件系统下。', '', '0', '2017-12-25 20:13:31', '43', '1');
INSERT INTO `topic` VALUES ('4131', '26', '4', '如果一个公司的服务器需要保证每天24小时不间断工作，如：医院，你能用什么方法 做到，有几种方法，请说出基本原理。 ', '63de2dbb-81eb-4dfc-840f-11bb07f0d0f5.', null, null, null, null, null, null, '使用一台主服务器和一台备用服务器，平时工作的时候是主服务器，当主服务器出现问题的时候就换上备用服务器。另外可以使用大的备份设备，将服务器上的数据备份几份，当服务器上的存储设备出现问题时立刻换上备份存储设备。 ', '', '0', '2017-12-25 20:13:51', '43', '1');
INSERT INTO `topic` VALUES ('4132', '26', '4', 'X.25的主要协议内容是什么？它的特点是什么？', 'cef8704f-c604-4269-a8e1-d68bbe0aaa50.', null, null, null, null, null, null, 'X.25是一个对公用分组交换网（PUBLIC DATA NETWORK，PDN）接口的规格说明。网络内部由各个网络自己决定。“X.25网” 仅说明该网络与网络外部数据终端设备（DATA TERMINAL EQUIPMENT，DTE）的接口应遵循X.25标准。X.25是以虚电路服务为基础。X.25接口为3个层次，最下层的物理层接口标准采用X.21建议书，使用最多的就是RS-232标准。第2层是数据链路层采用的接口标准，是平衡型链路接入，它是 HDLC 的1个子集。第3层是分组层（不叫网络层），DTE 与 DCE 之间可以建立多条逻辑信道(0～4095)，1个DTE可在网上同时建立多个虚电路进行通信。', '', '0', '2017-12-25 20:13:53', '47', '1');
INSERT INTO `topic` VALUES ('4133', '26', '4', '知道现在流行的SAN网络平台吗？它主要是为计算机的哪个领域提出的一个解决方 案？', 'ebdc00cd-1f60-4c5e-aea8-13dad7ca053a.', null, null, null, null, null, null, 'A：如在交换机和网络核心交换机之间用的是级联链路，当终端比较多数据传输量较大时，级联链路就可能出现拥塞而造成客户端网速慢。解决方法就是将级联链路用以太网通道代替。   B：当客户端的网络传输设备没有达到100M时，如只有10M，那么客户端就不可能走到100M。  14.SAN是指存储区域网络，它是一种高速网络或子网络，提供在计算机与存储系统之间的数据传输。一个 SAN 网络由负责网络连接的通信结构、负责组织连接的管理层、存\r\n\r\n储部件以及计算机系统构成，从而保证数据传输的安全性和力度。', '', '0', '2017-12-25 20:14:18', '43', '1');
INSERT INTO `topic` VALUES ('4134', '26', '4', 'Internet网的安全解决方案是什么？', '886d8498-1f18-4d6d-b23c-f43fe1377e6e.', null, null, null, null, null, null, ' 网络管理是控制一个复杂的计算机网络使得它具有最高的效率和生产力的过程。网络管理功能主要包括以下几个方面：\r\n　（L）故障管理：包括故障检测、故障定位和故障改正；\r\n  （2）配置管理：只有在有权配置整个网络时，才可能正确地管理该网络；\r\n    （3）计费管理：跟踪用户对网络资源的使用情况，对其收取合理的费用；\r\n    （4）性能管理：包括网络性能和系统性能； \r\n从整体上看，INTERNET网络安全问题可分为以下几个层次，即操作系统层、用户层、应用层、网络层（路由器）和数据链路层。这5个层次的网络系统安全体系理论已得到了国际网络安全界的广泛承认和支持。\r\n　  网络层的安全是INTERNET网络安全解决方案中最重要的部分。涉及到3个方面：\r\n　　（1）IP协议本身的安全性。IP协议本身未经加密使人们非法盗窃信息和口令成为可能；\r\n　　（2）网管协议的安全性。由于SNMP协议的认证机制非常简单，而且使用未加保密的明码传输，这就可能通过非法途径获得SNMP协议分组并分析破解有关网络管理信息；\r\n（3）最重要的方面，就是网络交换设备的安全性。交换设备包括路由器和ATM设备。由于INTERNET普遍采用路由器方式的无连接转发技术，而且路由协议是动态更新的 OSPF和 RIP协议。这些协议动态更新都装有协议的路由器路由表。一旦某一个路由器发生故障或问题，将迅速波及到路由器相关的整个INTERNET自治域。', '', '0', '2017-12-25 20:14:45', '47', '1');
INSERT INTO `topic` VALUES ('4135', '3', '4', '集合框架中的泛型有什么优点？', 'dbed49d0-271b-4a89-bf25-580762edbf29.', null, null, null, null, null, null, 'JAVA1.5引入了泛型，所有的集合接口和实现都大量地使用它。泛型允许我们为集合提供一个可以容纳的对象类型，因此，如果你添加其它类型的任何元素，它会在编译时报错。这避免了在运行时出现CLASSCASTEXCEPTION，因为你将会在编译时得到报错信息。泛型也使得代码整洁，我们不需要使用显式转换和INSTANCEOF操作符。它也给运行时带来好处，因为不会产生类型检查的字节码指令。', '', '0', '2017-12-25 20:15:00', '50', '1');
INSERT INTO `topic` VALUES ('4136', '3', '4', '下面程序的运行结果是（）\r\nString str1 = “hello”; \r\nString str2 = “he” + new String(“llo”); \r\nSystem.err.println(str1 == str2); ', 'd9969a64-8f7b-4f2e-93a6-2cf109aa4097.', null, null, null, null, null, null, 'FALSE', '', '0', '2017-12-25 20:15:15', '53', '1');
INSERT INTO `topic` VALUES ('4137', '18', '4', '试述TCP和UDP协议的主要特点及适用场合。', '2b8389a7-c1fa-4681-83fb-5ffc335e74fe.', null, null, null, null, null, null, '特点：TCP协议是一种面向连接的，可靠的传输层协议，并且允许全双工通信，支持流传输，传输和连接的可靠性很高，还有流量控制和拥塞控制。传输速度慢。', '', '0', '2017-12-25 20:15:18', '47', '1');
INSERT INTO `topic` VALUES ('4138', '33', '4', '统计ip访问情况，要求分析nginx访问日志，找出访问页面数量在前十位的ip', 'd1d55fba-b84a-4fe8-8bc3-5f401c12d149.', null, null, null, null, null, null, 'CATACCESS.LOG | AWK \'{PRINT $1}\' | UNIQ -C | SORT -RN | HEAD -10', '', '0', '2017-12-25 20:15:38', '10', '1');
INSERT INTO `topic` VALUES ('4139', '18', '4', '为了解决网络规模与网络性能之间的矛盾，针对传统的共享介质局域网存在的问题，人们提出了哪3种改善局域网性能的基本方法？', 'e4f65547-9942-458c-8886-2ac21e647f5c.', null, null, null, null, null, null, '提高局域网的传输宽带，由原先的10MB/S提高到100MB/S甚至到1GB/S、10GB/S。 ②将一个局域网划分成数个由网桥或者路由器连接起来的子网。 ③将“共享介质方式”换成“交换方式”，它允许在多个端口之间建立多个并发连接，降低了冲突的发生，提高了传输效率。', '', '0', '2017-12-25 20:15:38', '47', '1');
INSERT INTO `topic` VALUES ('4140', '3', '2', 'GC线程是否为守护线程？（） ', 'e2a27550-d7ae-41db-9e7a-6121f0419f5b.', null, null, null, null, null, null, '正确', '线程分为守护线程和非守护线程（即用户线程）。 \r\n只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。 \r\n守护线程最典型的应用就是 GC (垃圾回收器)', '0', '2017-12-25 20:15:57', '53', '1');
INSERT INTO `topic` VALUES ('4141', '24', '4', '写一个脚本查找最后创建时间是三天前，后缀是*.log的文件并删除', 'ade892a8-555a-40b7-b3ad-c7bcd9f0161b.', null, null, null, null, null, null, 'FIND .-CTIME +3 -NAME \'*.LOG\' | RM -RF\r\n', '', '0', '2017-12-25 20:15:58', '10', '1');
INSERT INTO `topic` VALUES ('4142', '18', '4', '防火墙有哪些主要功能，防火墙防不住哪些攻击？', '89530d3a-f7df-4445-a9be-6b2202dfa2d3.', null, null, null, null, null, null, '①面向连接服务的数据传输必须经过连接建立，连接维护，释放连接3个阶段。 \r\n②面向连接服务在数据传输过程中，各个分组不需要携带目的节点的地址。 ③面向连接服务传输可靠性高，但是协议复杂，通信效率低。', '', '0', '2017-12-25 20:15:58', '47', '1');
INSERT INTO `topic` VALUES ('4143', '26', '1', '在一台WWW服务器上将端口号设定为8000，默认的网页文件index.html，服务器\r\n 网页的根目录/www。在本机访问服务器时，正确的用法是（）', '9aebee85-03bf-4fae-a1d5-3f8cc8457cac.', ' 浏览器访问该服务器的URL 地址http://localhost/', '浏览器访问该服务器的URL 地址http://localhost:8000/', '浏览器访问该服务器的用户li 网页URL 地址http://localhost/~li', '浏览器访问该服务器的用户li 网页URL 地址http://localhost:8000/~li', '浏览器访问该服务器的URL 地址localhost:8000/', '', 'BDE', '', '0', '2017-12-25 20:16:11', '19', '1');
INSERT INTO `topic` VALUES ('4144', '3', '2', 'volatile关键字是否能保证线程安全？（） ', 'b5390328-2939-47a2-95e5-5c2d6784d1d7.', null, null, null, null, null, null, '错误', 'volatile关键字用在多线程同步中，可保证读取的可见性，JVM只是保证从主内存加载到线程工作内存的值是最新的读取值，而非cache中。但多个线程对 \r\nvolatile的写操作，无法保证线程安全。例如假如线程1，线程2 在进行read,load 操作中，发现主内存中count的值都是5，那么都会加载这个最新的值，在线程1堆count进行修改之后，会write到主内存中，主内存中的count变量就会变为6；线程2由于已经进行read,load操作，在进行运算之后，也会更新主内存count的变量值为6；导致两个线程及时用volatile关键字修改之后，还是会存在并发的情况。', '0', '2017-12-25 20:16:12', '53', '1');
INSERT INTO `topic` VALUES ('4145', '18', '1', 'Linux 是所谓的“Free Software”，这个“Free”的含义是什么？', 'a2b86e16-d56d-4d00-bc70-36c4a9043095.', 'Linux 不需要付费   ', ' Linux 发行商不能向用户收费', ' Linux 可自由修改和发布  ', '只有Linux 的作者才能向用户收费', '', '', 'C', '', '0', '2017-12-25 20:16:12', '29', '1');
INSERT INTO `topic` VALUES ('4147', '26', '4', '9、试述OSI管理标准中定义的五个功能域的主要内容', '519762bd-5955-458a-861f-48b2a2866463.', null, null, null, null, null, null, '.配置管理 2.故障管理 3.性能管理 4.安全管理\r\n  5.记账管理 \r\n配置管理:是用来定义网络、识别初始化网络、配置网络、控制和检测网络中被管对象的功能集合，它包括客体管理、状态管理和关系管理三个标准。 \r\n故障管理:其功能主要是使管理中心能够实时监测网络中的故障，并能对故障原因做出诊断和进行定位，从而能够对故障进行排除或能够对网络故障进行快速隔离．以保证网络能够连续可靠地运行。  性能管理\r\n:是以提高网络性能为准则，其目的是保证在使用最少的网络资源和具有最小网络时延的前提下，网络提供可靠、连续的通信能力。  安全管理:\r\n一是为了网络用户和网络资源不被非法使用，二是确保网络管理系统本身不被非法访问.  记账管理:记账管理主要记录用户使用网络情况和统计不同线路、不同资源的利用情况', '', '0', '2017-12-25 20:16:22', '47', '1');
INSERT INTO `topic` VALUES ('4148', '3', '4', '利用Python打印前一天的本地时间，格式为\'2016-03-29 13:58:34\'', 'f97cb4b2-f977-4745-b9f2-76e33c6b292a.', null, null, null, null, null, null, 'TIME.STRFTIME(\'%Y-%M-%D%H:%M%:%S\' TIME.LOCATIME(TIME.TIME() -86400))', '', '0', '2017-12-25 20:16:35', '10', '1');
INSERT INTO `topic` VALUES ('4149', '18', '4', '10、简述域名地址、IP地址和物理地址的含义及它们之间的区别与关系', '3edb4de5-5959-442c-85e1-f8bd8f88555d.', null, null, null, null, null, null, '物理地址（MAC\r\n地址）通常指的是网卡的物理地址，它是网卡在出厂时由厂商烧进去的一组ROM。处于硬件层面，并且是全球唯一的。  IP\r\n地址是因特网统一地址标识符，由点分制的十进制数字组成。当一台主机接入因特网的时候，需要跟其他主机进行通信，而IP地址则是它们辨别对方的标识。  域名地址指的是由由一系列字符串组成的具有层次结构的地址，且具有全网唯一性。它是服务器主机IP地址的一个映射，简单易记。 它们之间的关系 ', '', '0', '2017-12-25 20:16:43', '47', '1');
INSERT INTO `topic` VALUES ('4150', '3', '1', '0.6332的数据类型是（） ', '423da6c8-50fd-4a27-a51d-af0ab68215d3.', 'float ', 'double ', 'Float ', 'Double ', '', '', 'B', '默认为double型，如果为float型需要加上f显示说明，即0.6332f', '0', '2017-12-25 20:16:57', '53', '1');
INSERT INTO `topic` VALUES ('4153', '18', '1', '一般而言，项目的范围确定后，项目的三个基本目标是\r\n___。 ', '8f28fb55-e4a9-4eac-832f-0850a65027ac.', '时间、成本、质量标准。', '时间、功能、成本。 ', '成本、功能、质量标准。', '时间、功能、质量标准。', '', '', 'B', '', '0', '2017-12-25 20:17:16', '43', '1');
INSERT INTO `topic` VALUES ('4154', '26', '1', '在shell 编程中关于$2 的描述正确的是（）', '42c347c5-51a0-4711-b665-34fc78736bb4.', '程序后携带了两个位置参数', ' 宏替换', '程序后面携带的第二个位置参数', '携带位置参数的个数', '用$2 引用第二个位置参数', '', 'CE', '', '0', '2017-12-25 20:17:18', '19', '1');
INSERT INTO `topic` VALUES ('4155', '3', '4', '为何Map接口不继承Collection接口？', '2669379f-7abe-4a27-9537-b89fdf4c8b25.', null, null, null, null, null, null, '尽管MAP接口和它的实现也是集合框架的一部分，但MAP不是集合，集合也不是MAP。因此，MAP继承COLLECTION毫无意义，反之亦然。\r\n\r\n如果MAP继承COLLECTION接口，那么元素去哪儿？MAP包含KEY-VALUE对，它提供抽取KEY或VALUE列表集合的方法，但是它不适合“一组对象”规范。\r\n\r\n一些其它的接口有QUEUE、DEQUEUE、SORTEDSET、SORTEDMAP和LISTITERATOR。', '', '0', '2017-12-25 20:17:21', '50', '1');
INSERT INTO `topic` VALUES ('4156', '3', '1', '下面哪个流类属于面向字符的输入流( ) ', '8dffd591-bf98-4a73-9117-874e2868596c.', 'BufferedWriter', 'FileInputStream', 'ObjectInputStream', 'InputStreamReader ', '', '', 'D', 'Java的IO操作中有面向字节(Byte)和面向字符(Character)两种方式。 \r\n面向字节的操作为以8位为单位对二进制的数据进行操作，对数据不进行转换，这些类都是InputStream和OutputStream的子类。 \r\n面向字符的操作为以字符为单位对数据进行操作，在读的时候将二进制数据转为字符，在写的时候将字符转为二进制数据，这些类都是Reader和Writer的子类。 \r\n总结：以InputStream（输入）/OutputStream（输出）为后缀的是字节流；以Reader（输入）/Writer（输出）为后缀的是字符流。', '0', '2017-12-25 20:17:34', '53', '1');
INSERT INTO `topic` VALUES ('4157', '24', '4', '用Python将‘123456’反转为‘654321’', '36e1e0e6-ae6e-414b-ba6c-2091163da5bf.', null, null, null, null, null, null, '‘123456’[::-1]', '', '0', '2017-12-25 20:17:37', '10', '1');
INSERT INTO `topic` VALUES ('4161', '26', '4', 'Iterator是什么？', 'f7034827-3d63-40ec-9dab-66783de7d843.', null, null, null, null, null, null, 'ITERATOR接口提供遍历任何COLLECTION的接口。我们可以从一个COLLECTION中使用迭代器方法来获取迭代器实例。迭代器取代了JAVA集合框架中的ENUMERATION。迭代器允许调用者在迭代过程中移除元素。', '', '0', '2017-12-25 20:17:47', '50', '1');
INSERT INTO `topic` VALUES ('4162', '4', '4', '持久层设计要考虑的问题有哪些？你用过的持久层框架有哪些？ ', 'c2c9a627-a97a-4ee5-a98f-d687b5c05d3d.', null, null, null, null, null, null, '所谓\"持久\"就是将数据保存到可掉电式存储设备中以便今后使用，简单的说，就是将内存中的数据保存到关系型数据库、文件系统、消息队列等提供持久化支持的设备中。持久层就是系统中专注于实现数据持久化的相对独立的层面。持久层设计的目标包括： \r\n- 数据存储逻辑的分离，提供抽象化的数据访问接口。 \r\n- 数据访问底层实现的分离，可以在不修改代码的情况下切换底层实现。 \r\n- 资源管理和调度的分离，在数据访问层实现统一的资源调度（如缓存机制）。 \r\n- 数据抽象，提供更面向对象的数据操作。\r\n\r\n持久层框架有： \r\n- HIBERNATE \r\n- MYBATIS \r\n- TOPLINK \r\n- GUZZ \r\n- JOOQ \r\n- SPRING DATA \r\n- ACTIVEJDBC', '', '0', '2017-12-25 20:17:49', '51', '1');
INSERT INTO `topic` VALUES ('4163', '26', '1', '某文件的权限是 - r w x r - - r- -，下面描述正确的是()', '1150da29-0c05-4f07-8388-12b582f0074f.', '文件的权限值是755', ' 文件的所有者对文件只有读权 限', '文件的权限值是 744', ' 其他用户对文件只有读权限 E 同组用户对文件只有写权限', '', '', 'CD', '', '0', '2017-12-25 20:18:11', '19', '1');
INSERT INTO `topic` VALUES ('4164', '3', '2', '不通过构造函数也能创建对象吗（） ', 'f99e6e77-7790-4df9-abba-42a3e7e360e0.', null, null, null, null, null, null, '正确', 'Java创建对象的几种方式（重要）： \r\n(1) 用new语句创建对象，这是最常见的创建对象的方法。 \r\n(2) 运用反射手段,调用java.lang.Class或者java.lang.reflect.Constructor类的newInstance()实例方法。 \r\n(3) 调用对象的clone()方法。 \r\n(4) 运用反序列化手段，调用java.io.ObjectInputStream对象的 readObject()方法。 \r\n(1)和(2)都会明确的显式的调用构造函数 ；(3)是在内存上对已有对象的影印，所以不会调用构造函数 ；(4)是从文件中还原类的对象，也不会调用构造函数。', '0', '2017-12-25 20:18:12', '53', '1');
INSERT INTO `topic` VALUES ('4165', '4', '4', 'Hibernate中SessionFactory是线程安全的吗？Session是线程安全的吗（两个线程能够共享同一个Session吗）？ ', '06eb4bd4-57ac-4180-a019-8beaee57bd17.', null, null, null, null, null, null, 'SESSIONFACTORY对应HIBERNATE的一个数据存储的概念，它是线程安全的，可以被多个线程并发访问。SESSIONFACTORY一般只会在启动的时候构建。对于应用程序，最好将SESSIONFACTORY通过单例模式进行封装以便于访问。SESSION是一个轻量级非线程安全的对象（线程间不能共享SESSION），它表示与数据库进行交互的一个工作单元。SESSION是由SESSIONFACTORY创建的，在任务完成之后它会被关闭。SESSION是持久层服务对外提供的主要接口。SESSION会延迟获取数据库连接（也就是在需要的时候才会获取）。为了避免创建太多的SESSION，可以使用THREADLOCAL将SESSION和当前线程绑定在一起，这样可以让同一个线程获得的总是同一个SESSION。HIBERNATE 3中SESSIONFACTORY的GETCURRENTSESSION()方法就可以做到。', '', '0', '2017-12-25 20:18:15', '51', '1');
INSERT INTO `topic` VALUES ('4166', '26', '4', '试简要说明下列协议的作用：IP，ARP，RARP和ICMP', '7fbfa854-48fd-4c5d-8cab-750044e7ec17.', null, null, null, null, null, null, '①IP协议：是一种网际协议，是 TCP/IP \r\n体系结构中最主要的两个协议之一，它是一种标准化协议，用于无连接的数据报传输和数据报路由  ②ARP（地址解析协议）的作用是：实现地址转换，即IP地址到MAC\r\n地址的转换，或者说，如何将IP地址转换成MAC地址。  ③RARP （反向地址解析协议）的作用是：实现MAC地址到IP地址的转换，即将\r\nMAC地址转换成IP地址。  ④ICMP协议(控制报文协议)的作用是：差错控制和传输控制', '', '0', '2017-12-25 20:18:21', '47', '1');
INSERT INTO `topic` VALUES ('4167', '26', '4', '为何迭代器没有一个方法可以直接获取下一个元素，而不需要移动游标', 'cc893180-d460-4764-8ba7-cd3afdfb5ead.', null, null, null, null, null, null, '它可以在当前ITERATOR的顶层实现，但是它用得很少，如果将它加到接口中，每个继承都要去实现它，这没有意义。', '', '0', '2017-12-25 20:18:24', '50', '1');
INSERT INTO `topic` VALUES ('4168', '26', '2', '模块是一个为内核(从某种意义上来说，内核也是一个模块)或其他内核模块提供使用功能的代码块。', 'f44bd029-6437-4a0b-8546-2025b90bc926.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:18:34', '28', '1');
INSERT INTO `topic` VALUES ('4169', '3', '1', 'ArrayList list = new ArrayList(20);中的list扩充几次（） ', '7bc0853a-a7b9-44c8-a7b8-b71925b327f2.', '0', '1', '2', '3', '', '', 'A', '这里有点迷惑人，大家都知道默认ArrayList的长度是10个，所以如果你要往list里添加20个元素肯定要扩充一次（扩充为原来的1.5倍），但是这里显示指明了需要多少空间，所以就一次性为你分配这么多空间，也就是不需要扩充了。', '0', '2017-12-25 20:18:37', '53', '1');
INSERT INTO `topic` VALUES ('4170', '24', '4', '利用Python执行shell命令并取得返回结果', 'd36ecd65-cc93-4f83-8096-03a31092b74f.', null, null, null, null, null, null, '>>> IMPORT SUBPROCESS>>>\r\n\r\nA=SUBPROCESS.POPEN(\'LS\',SHELL=TRUE,STDOUT=SUBPROCOSS.PIPE, STDERR=SUBPROCESS.PIPE)>>>STDOUT,STERR = A.COMMUNICATE()>>>PRINT STDOUT', '', '0', '2017-12-25 20:18:39', '10', '1');
INSERT INTO `topic` VALUES ('4171', '26', '1', '下列能代表计算机本地主机的是\r\n（）。', '910e65ae-0a3d-49e1-8a2b-bcb263168f02.', 'LocalHostB.127.0.0.1', '计算机名称', '192.168.1.1', '没有', '', '', 'ABC', '', '0', '2017-12-25 20:18:41', '43', '1');
INSERT INTO `topic` VALUES ('4172', '18', '4', 'TCP为何采用三次握手来建立连接，若采用二次握手可以吗？', '01914664-dd63-4a02-a226-c14e8a9bddbd.', null, null, null, null, null, null, '三次握手是为了防止已失效的连接请求再次传送到服务器端。 采用二次握手是不行的！它会对服务器端造成资源的浪费。   先简单说明一下二次握手的情形：  假如客户端发送（1）报文给服务器端，服务器端返回（2）报文给客户端。这时候（2）报文丢失了，没有返回客户端。于是，客户端认为连接没有建立，服务器端认为连接已经建立，于是客户端要求重传，这浪费服务器端的端口。如果存在大量的这种问题，对服务器资源来说是极大的浪费。 ', '', '0', '2017-12-25 20:18:50', '47', '1');
INSERT INTO `topic` VALUES ('4173', '24', '4', '请用Python继承process，并写一个并行执行的类，并写出使用过程。', '21d1e2a3-5602-4f02-aaaa-99112b0152f0.', null, null, null, null, null, null, 'IMPORT MULTIPROCESSINGIMPORT TIMECLASS CLOCKPROCESS(MULTIPROCESSING.PROCESS):    DEF __INIT__(SELF, INTERVAL):        MULTIPROCESSING.PROCESS.__INIT__(SELF)        SELF.INTERVAL = INTERVAL    DEF RUN(SELF):        N = 5        WHILE N > 0:            PRINT(\"THE TIME IS {0}\".FORMAT(TIME.CTIME()))            TIME.SLEEP(SELF.INTERVAL)            N -= 1', '', '0', '2017-12-25 20:19:01', '10', '1');
INSERT INTO `topic` VALUES ('4174', '26', '1', '新建一个流对象，下面哪个选项的代码是错误的？（） ', 'e7af9a7c-7c11-40af-8e08-1457e100ec94.', 'new BufferedWriter(new FileWriter(“a.txt”)); //BufferedWriter(Writer out) BufferedWriter(Writer out, int sz) ', 'new BufferedReader(new FileInputStream(“a.dat”)); //BufferedReader(Reader in) BufferedReader(Reader in, int sz) ', 'new GZIPOutputStream(new FileOutputStream(“a.zip”));// ', 'new ObjectInputStream(new FileInputStream(“a.dat”)); ', '', '', 'B', 'Reader只能用FileReader进行实例化。', '0', '2017-12-25 20:19:15', '53', '1');
INSERT INTO `topic` VALUES ('4175', '26', '1', '以下关于Linux 内核版本的说法，错误的是？ ', 'd7a0ce8e-44bc-4a4f-be68-47f1f9e11638.', '依次表示为主版本号.次版本号.修正次数的形式 ', '1.2.2 表示稳定的发行版 ', '2.2.6 表示对内核2.2 的第6 次修正', '1.3.2 表示稳定的发行版 ', '', '', 'D', '', '0', '2017-12-25 20:19:27', '29', '1');
INSERT INTO `topic` VALUES ('4176', '4', '4', 'Hibernate中Session的load和get方法的区别是什么？ ', '66e0139b-cddc-47e0-8ade-5d8ec883843e.', null, null, null, null, null, null, '主要有以下三项区别： \r\n① 如果没有找到符合条件的记录，GET方法返回NULL，LOAD方法抛出异常。 \r\n② GET方法直接返回实体类对象，LOAD方法返回实体类对象的代理。 \r\n③ 在HIBERNATE 3之前，GET方法只在一级缓存中进行数据查找，如果没有找到对应的数据则越过二级缓存，直接发出SQL语句完成数据读取；LOAD方法则可以从二级缓存中获取数据；从HIBERNATE 3开始，GET方法不再是对二级缓存只写不读，它也是可以访问二级缓存的。', '', '0', '2017-12-25 20:19:27', '51', '1');
INSERT INTO `topic` VALUES ('4177', '26', '1', '关于OpenSSH 的作用的描述正确的是（）', '14fbc15d-75b3-4079-bd55-8159c59c0c52.', '开放源代码的安全加密程序', 'OpenSSH 常用于为http 协议加密', 'OpenSSH 用于提高远程登录访问的安全性', '它和telnet 实用同样的端口号', 'OpenSSH 是免费下载的应程序', '', 'ACE', '', '0', '2017-12-25 20:19:35', '19', '1');
INSERT INTO `topic` VALUES ('4178', '3', '4', 'Query接口的list方法和iterate方法有什么区别？ ', 'f0e7e1bf-59c1-42c1-9eba-e4036154d000.', null, null, null, null, null, null, '① LIST()方法无法利用一级缓存和二级缓存（对缓存只写不读），它只能在开启查询缓存的前提下使用查询缓存；ITERATE()方法可以充分利用缓存，如果目标数据只读或者读取频繁，使用ITERATE()方法可以减少性能开销。 \r\n② LIST()方法不会引起N+1查询问题，而ITERATE()方法可能引起N+1查询问题', '', '0', '2017-12-25 20:20:00', '51', '1');
INSERT INTO `topic` VALUES ('4179', '3', '1', '下列哪种异常是检查型异常，需要在编写程序时声明 （） ', '2e974247-c84b-44b4-a0f0-50afd0c138c7.', 'NullPointerException ', 'ClassCastException', 'FileNotFoundException', 'IndexOutOfBoundsException ', '', '', 'C', '', '0', '2017-12-25 20:20:08', '53', '1');
INSERT INTO `topic` VALUES ('4180', '18', '1', '以下哪个软件不是Linux 发行版本？', '2a46c50d-6c9a-407b-a963-58b83e98ec1d.', ' 红旗 Server 4   ', 'Solaris 10  ', 'RedHat 9', ' Fedora 8', '', '', 'B', '', '0', '2017-12-25 20:20:20', '29', '1');
INSERT INTO `topic` VALUES ('4181', '4', '4', 'Hibernate如何实现分页查询？ ', '3f8e0d92-99d2-4850-8022-224e7baddff5.', null, null, null, null, null, null, '通过HIBERNATE实现分页查询，开发人员只需要提供HQL语句（调用SESSION的CREATEQUERY()方法）或查询条件（调用SESSION的CREATECRITERIA()方法）、设置查询起始行数（调用QUERY或CRITERIA接口的SETFIRSTRESULT()方法）和最大查询行数（调用QUERY或CRITERIA接口的SETMAXRESULTS()方法），并调用QUERY或CRITERIA接口的LIST()方法，HIBERNATE会自动生成分页查询的SQL语句。', '', '0', '2017-12-25 20:20:26', '51', '1');
INSERT INTO `topic` VALUES ('4182', '26', '1', '关于sed 描述正确的是（）', 'e3ed2b1f-225b-4d38-a324-4dac9633d74a.', 'sed 是Linux 系统中的流编辑器', 'sed 是UNIX 系统中的流编辑器', 'sed 网络文件系统的类型', ' 利用管道对标准输入/标准输入的数据进行编辑和组合', 'sed 是NFS 的应用程序', '', 'ABD', '', '0', '2017-12-25 20:20:35', '19', '1');
INSERT INTO `topic` VALUES ('4183', '26', '4', '但内核最大的优点是什么？', '5319aa2f-4a38-476f-9bbc-217f8b4aacfb.', null, null, null, null, null, null, '单内核的最大优点是效率高，因为所有的内容都集成在一起', '', '0', '2017-12-25 20:20:42', '28', '1');
INSERT INTO `topic` VALUES ('4184', '33', '4', '锁机制有什么用？简述Hibernate的悲观锁和乐观锁机制。', '68a01c13-1899-487f-bca2-3210edcf2257.', null, null, null, null, null, null, '有些业务逻辑在执行过程中要求对数据进行排他性的访问，于是需要通过一些机制保证在此过程中数据被锁住不会被外界修改，这就是所谓的锁机制。 \r\nHIBERNATE支持悲观锁和乐观锁两种锁机制。悲观锁，顾名思义悲观的认为在数据处理过程中极有可能存在修改数据的并发事务（包括本系统的其他事务或来自外部系统的事务），于是将处理的数据设置为锁定状态。悲观锁必须依赖数据库本身的锁机制才能真正保证数据访问的排他性，关于数据库的锁机制和事务隔离级别在《JAVA面试题大全（上）》中已经讨论过了。乐观锁，顾名思义，对并发事务持乐观态度（认为对数据的并发操作不会经常性的发生），通过更加宽松的锁机制来解决由于悲观锁排他性的数据访问对系统性能造成的严重影响。最常见的乐观锁是通过数据版本标识来实现的，读取数据时获得数据的版本号，更新数据时将此版本号加1，然后和数据库表对应记录的当前版本号进行比较，如果提交的数据版本号大于数据库中此记录的当前版本号则更新数据，否则认为是过期数据无法更新。HIBERNATE中通过SESSION的GET()和LOAD()方法从数据库中加载对象时可以通过参数指定使用悲观锁；而乐观锁可以通过给实体类加整型的版本字段再通过XML或@VERSION注解进行配置。', '', '0', '2017-12-25 20:20:53', '51', '1');
INSERT INTO `topic` VALUES ('4185', '33', '4', '编写多线程程序有几种实现方式？', '229820bd-f4be-4f35-ae9b-92fcccf799ee.', null, null, null, null, null, null, 'JAVA 5以前实现多线程有两种实现方法：一种是继承THREAD类；另一种是实现RUNNABLE接口。两种方式都要通过重写RUN()方法来定义线程的行为，推荐使用后者，因为JAVA中的继承是单继承，一个类有一个父类，如果继承了THREAD类就无法再继承其他类了，显然使用RUNNABLE接口更为灵活。', '', '0', '2017-12-25 20:21:00', '70', '1');
INSERT INTO `topic` VALUES ('4186', '18', '4', '请说明DES算法的基本过程？', 'c8450c9d-f194-4541-ac64-ab4bf3bde9d7.', null, null, null, null, null, null, 'DES加密算法特点：分组比较短、密钥太短、密码生命周期短、运算速度较慢。  DES工作的基本原理是，其入口参数有三个:KEY、DATA、MODE。 KEY为加密解密使用的密钥，DATA为加密解密的数据，MODE为其工作模式。当模式为加密模式时，明文按照64位进行分组，形成明文组，KEY用于对数据加密，当模式为解密模式时，KEY用于对数据解密。实际运用中，密钥只用到了64位中的56位，这样才具有高的安全性。', '', '0', '2017-12-25 20:21:26', '47', '1');
INSERT INTO `topic` VALUES ('4187', '26', '1', '关于限制磁盘限额，描述正确的是（）', '162132e8-5a52-48a2-a134-4f1037e60ae1.', '使用edquota 可以监控系统所有用户使用的磁盘空间，并在接近极限时提示用户', '用户组的磁盘限额是用户组内所有用户予设磁盘空间总和', ' 单个用户的磁盘限额就是该用户所在用户组内所有磁盘限额的总合', '在Linux 系统下限制用户使用的磁盘空间可以使用edquota', '用户组的磁盘限额就是该用户组内拥有最大磁盘限额值的用户的磁盘限额', '', 'ABD', '', '0', '2017-12-25 20:21:49', '19', '1');
INSERT INTO `topic` VALUES ('4188', '26', '1', 'Java是从（ ）语言改进重新设计。', 'f814e376-48fa-4a59-a04a-1330533551c2.', 'Ada', 'C++', 'Pasacal', 'BASIC', '', '', 'B', '', '0', '2017-12-25 20:22:08', '53', '1');
INSERT INTO `topic` VALUES ('4189', '4', '4', '谈一谈Hibernate的一级缓存、二级缓存和查询缓存。 ', '4b13b850-c5a5-4d54-9839-42a3bdd2d9ea.', null, null, null, null, null, null, 'HIBERNATE的SESSION提供了一级缓存的功能，默认总是有效的，当应用程序保存持久化实体、修改持久化实体时，SESSION并不会立即把这种改变提交到数据库，而是缓存在当前的SESSION中，除非显示调用了SESSION的FLUSH()方法或通过CLOSE()方法关闭SESSION。通过一级缓存，可以减少程序与数据库的交互，从而提高数据库访问性能。 \r\nSESSIONFACTORY级别的二级缓存是全局性的，所有的SESSION可以共享这个二级缓存。不过二级缓存默认是关闭的，需要显示开启并指定需要使用哪种二级缓存实现类（可以使用第三方提供的实现）。一旦开启了二级缓存并设置了需要使用二级缓存的实体类，SESSIONFACTORY就会缓存访问过的该实体类的每个对象，除非缓存的数据超出了指定的缓存空间。 \r\n一级缓存和二级缓存都是对整个实体进行缓存，不会缓存普通属性，如果希望对普通属性进行缓存，可以使用查询缓存。查询缓存是将HQL或SQL语句以及它们的查询结果作为键值对进行缓存，对于同样的查询可以直接从缓存中获取数据。查询缓存默认也是关闭的，需要显示开启。', '', '0', '2017-12-25 20:22:30', '51', '1');
INSERT INTO `topic` VALUES ('4190', '26', '1', '以下说法√的是\r\n（）。', '1f455ceb-dc00-4410-a902-44be2c0a8216.', 'Web.config文件是一个XML文本文件，它用来储存ASP.NETWeb 应用程序的配置信息，它可以出现在应用程序的每一个目录中。', 'IIS7.0适用于Windows XP 操作系统。', 'MySQL 是最流行的关系型数据库管理系统之一，在 WEB 应用方面，MySQL是最好的 RDBMS应用软件。', 'SOA（面向服务的架构）是一个组件模型，它将应用程序的不同功能单元（称为服务）通过这些服务之间定义良好的接口和契约联系起来。', '', '', 'ACD', '', '0', '2017-12-25 20:22:40', '43', '1');
INSERT INTO `topic` VALUES ('4191', '4', '4', 'Hibernate中DetachedCriteria类是做什么的？ ', 'dd813822-1821-43a3-b082-443e10aaf0a0.', null, null, null, null, null, null, 'DETACHEDCRITERIA和CRITERIA的用法基本上是一致的，但CRITERIA是由SESSION的CREATECRITERIA()方法创建的，也就意味着离开创建它的SESSION，CRITERIA就无法使用了。DETACHEDCRITERIA不需要SESSION就可以创建（使用DETACHEDCRITERIA.FORCLASS()方法创建），所以通常也称其为离线的CRITERIA，在需要进行查询操作的时候再和SESSION绑定（调用其GETEXECUTABLECRITERIA(SESSION)方法），这也就意味着一个DETACHEDCRITERIA可以在需要的时候和不同的SESSION进行绑定。', '', '0', '2017-12-25 20:22:53', '51', '1');
INSERT INTO `topic` VALUES ('4192', '3', '1', '执行如下程序代码\r\na=0;c=0;\r\ndo{\r\n--c;\r\na=a-1;\r\n}while(a&gt;0);\r\n后，C的值是（  ）', '1eda61c8-5f1a-4e30-b519-667d149f2a4f.', '0', '1', '-1', '死循环', '', '', 'C', '', '0', '2017-12-25 20:23:00', '53', '1');
INSERT INTO `topic` VALUES ('4193', '4', '4', '@OneToMany注解的mappedBy属性有什么作用？ ', '736c1b62-b736-4a85-9d50-ec90cd4f45d0.', null, null, null, null, null, null, '@ONETOMANY用来配置一对多关联映射，但通常情况下，一对多关联映射都由多的一方来维护关联关系，例如学生和班级，应该在学生类中添加班级属性来维持学生和班级的关联关系（在数据库中是由学生表中的外键班级编号来维护学生表和班级表的多对一关系），如果要使用双向关联，在班级类中添加一个容器属性来存放学生，并使用@ONETOMANY注解进行映射，此时MAPPEDBY属性就非常重要。如果使用XML进行配置，可以用<SET>标签的INVERSE=\"TRUE\"设置来达到同样的效果', '', '0', '2017-12-25 20:23:16', '51', '1');
INSERT INTO `topic` VALUES ('4194', '4', '1', '按照MVC设计模式，JSP用于实现', '72e02cdc-4ed1-4be1-ae98-4f09f7f47547.', 'Model', 'View', 'Controller', '容器', '', '', 'B', '', '0', '2017-12-25 20:23:32', '53', '1');
INSERT INTO `topic` VALUES ('4195', '4', '4', 'MyBatis中使用#和$书写占位符有什么区别？ ', 'ab8b4956-4b1e-438d-b365-78c9cbe904b7.', null, null, null, null, null, null, '#将传入的数据都当成一个字符串，会对传入的数据自动加上引号；$将传入的数据直接显示生成在SQL中。注意：使用$占位符可能会导致SQL注射攻击，能用#的地方就不要使用$，写ORDER BY子句的时候应该用$而不是#。', '', '0', '2017-12-25 20:23:35', '51', '1');
INSERT INTO `topic` VALUES ('4196', '18', '4', '信息安全有哪些常见的威胁？信息安全的实现有哪些主要技术措施？', '8f50d69b-75a3-4d5d-831a-f919d1de9758.', null, null, null, null, null, null, '常见威胁有非授权访问、信息泄露、破坏数据完整性，拒绝服务攻击，恶意代码。信息安全的实现可以通过物理安全技术，系统安全技术，\r\n网络安全技术，应用安全技术，数据加密技术，认证授权技术，访问控制技术，审计跟踪技术，防病毒技术，灾难恢复和备份技术。', '', '0', '2017-12-25 20:23:39', '47', '1');
INSERT INTO `topic` VALUES ('4197', '4', '4', '解释一下MyBatis中命名空间（namespace）的作用。 ', '422a36c5-4644-4938-b125-e1b864df8403.', null, null, null, null, null, null, '在大型项目中，可能存在大量的SQL语句，这时候为每个SQL语句起一个唯一的标识（ID）就变得并不容易了。为了解决这个问题，在MYBATIS中，可以为每个映射文件起一个唯一的命名空间，这样定义在这个映射文件中的每个SQL语句就成了定义在这个命名空间中的一个ID。只要我们能够保证每个命名空间中这个ID是唯一的，即使在不同映射文件中的语句ID相同，也不会再产生冲突了。', '', '0', '2017-12-25 20:23:48', '51', '1');
INSERT INTO `topic` VALUES ('4198', '18', '2', 'OFFICE中“格式刷”的快捷键为“Ctrl+Shift+C Ctrl+Shift+V”（）', 'ee2822ac-3c0a-40eb-8737-ee3c37ab3162.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:23:49', '43', '1');
INSERT INTO `topic` VALUES ('4199', '18', '4', '什么是密码分析，其攻击类型有哪些？DES算法中S盒的作用是什么？', '03453ff7-7337-4322-8aeb-464738134094.', null, null, null, null, null, null, '密码分析是指研究在\r\n不知道密钥的情况下来恢复明文的科学。攻击类型有\r\n只有密文的攻击，已知明文的攻击，选择明文的攻击，适应性选择明文攻击，选择密文的攻击，选择密钥的攻击，橡皮管密码攻击。S盒是DES算法的核心。其功能是把6BIT数据变为4BIT数据\r\n', '', '0', '2017-12-25 20:23:57', '47', '1');
INSERT INTO `topic` VALUES ('4200', '3', '1', '下面哪个不是表单标记( )', 'b5c1f95a-1a65-4389-93c9-aa2cf5a78241.', 'INPUT', 'RADIO', 'CHECKBOX', 'TR', '', '', 'D', '', '0', '2017-12-25 20:24:06', '53', '1');
INSERT INTO `topic` VALUES ('4201', '18', '4', '什么事通信网络安全？涉及哪些方面？', 'a9f7f75b-00b9-4b36-8883-53abc43f8598.', null, null, null, null, null, null, '通信网络安全保护网络系统的硬件、软件、数据及通信过程，不应偶然或恶意原因遭到破坏、更改和泄漏，\r\n保证系统连续可靠正常地运行，\r\n保证网络服务不中断。  涉及通信网络上信息的\r\n机密性、完整性、可用性、真实性、可控性，要求具有抵御各种安全威胁能力。', '', '0', '2017-12-25 20:24:12', '47', '1');
INSERT INTO `topic` VALUES ('4202', '4', '4', 'MyBatis中的动态SQL是什么意思？ ', '5c872116-c551-4750-9035-74b3047cd68a.', null, null, null, null, null, null, '对于一些复杂的查询，我们可能会指定多个查询条件，但是这些条件可能存在也可能不存在，例如在58同城上面找房子，我们可能会指定面积、楼层和所在位置来查找房源，也可能会指定面积、价格、户型和所在位置来查找房源，此时就需要根据用户指定的条件动态生成SQL语句。如果不使用持久层框架我们可能需要自己拼装SQL语句，还好MYBATIS提供了动态SQL的功能来解决这个问题。MYBATIS中用于实现动态SQL的元素主要有： \r\n- IF \r\n- CHOOSE / WHEN / OTHERWISE \r\n- TRIM \r\n- WHERE \r\n- SET \r\n- FOREACH', '', '0', '2017-12-25 20:24:15', '51', '1');
INSERT INTO `topic` VALUES ('4203', '18', '4', '密码体制分类', '41ba4124-229d-4a8a-8145-ee06415c0f9f.', null, null, null, null, null, null, '1）对称加密算法：\r\n加密密钥和解密密钥相同或等价的，且都需要保密。DES IDEA FEAL-8 LOKI。 优点：加密算法简单、高效、密钥简短，破译极其困难。缺点：密钥必须通过安全的途径传送。  （2）\r\n非对称密码体制（公钥、收信方和发信方使用的密钥互不相同，而且几乎不可能从加密密钥推导出解密密钥）RSA。优点：可以适应网络的开放要求，且密钥管理问题也较为简单，方便地实现数字签名和验证。缺点：算法复杂，加密数据的速率较低。', '', '0', '2017-12-25 20:24:28', '47', '1');
INSERT INTO `topic` VALUES ('4204', '26', '4', '包过滤基本特点和工作原理？', '93617ccf-b3fd-4f2d-ae00-b98bdaccccba.', null, null, null, null, null, null, '基本特点：可以让我们\r\n在一台机器上提供对整个网络的保护。  工作原理：包过滤是一种安全机制，\r\n它控制哪些数据包可以进出网络，而哪些数据包应被网络拒绝。 包过滤路由器是具有包过滤特性的一种路由器。在对包做出路由决定时，普通路由器只依据包的目的地址引导包，而\r\n包过滤路由器就必须依据路由器中的包过滤规则做出是否引导该包的决定。', '', '0', '2017-12-25 20:24:50', '47', '1');
INSERT INTO `topic` VALUES ('4205', '4', '4', '什么是IoC和DI？DI是如何实现的？ ', '15f4c1f7-7976-496c-a8d7-89a3a569dc5b.', null, null, null, null, null, null, 'IOC叫控制反转，是INVERSION OF CONTROL的缩写，DI（DEPENDENCY INJECTION）叫依赖注入，是对IOC更简单的诠释。控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的\"控制反转\"就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。IOC体现了好莱坞原则 - \"DON’T CALL ME, WE WILL CALL YOU\"。依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。DI是对IOC更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。', '举个例子：一个类A需要用到接口B中的方法，那么就需要为类A和接口B建立关联或依赖关系，最原始的方法是在类A中创建一个接口B的实现类C的实例，但这种方法需要开发人员自行维护二者的依赖关系，也就是说当依赖关系发生变动的时候需要修改代码并重新构建整个系统。如果通过一个容器来管理这些对象以及对象的依赖关系，则只需要在类A中定义好用于关联接口B的方法（构造器或setter方法），将类A和接口B的实现类C放入容器中，通过对容器的配置来实现二者的关联。\r\n\r\n依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。', '0', '2017-12-25 20:24:59', '51', '1');
INSERT INTO `topic` VALUES ('4206', '18', '2', 'iis是Internet Information Services的缩写，意为互联网信息服务，是由微软公司提供的基于运行Microsoft Windows的互联网基本服务（）', 'a7e61230-08df-49e5-99b5-f5670dd40c63.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:24:59', '43', '1');
INSERT INTO `topic` VALUES ('4207', '26', '4', '代理服务器作用？', 'a00156a3-a651-48bc-a293-74513e999a6a.', null, null, null, null, null, null, '代理，也称为应用级网关，是一个提供替代连接并且充当服务的网关。代理服务是运行在防火墙主机上的一些特定应用程序或者服务程序。代理服务位于内部用户（在内部的网络上）和外部服务（在因特网上）之间。代理在后台处理所有用户和因特网服务之间的通信以代替相互间的直接交谈。代理服务器可使得一些不能访问因特网的主机通过代理服务也可以完成访问因特网的工作', '', '0', '2017-12-25 20:25:03', '47', '1');
INSERT INTO `topic` VALUES ('4209', '18', '4', '简述主动攻击与被动攻击的特点，并列举主动攻击与被动攻击现象。', '7ba0d4c7-7a66-4206-8e5a-b686f8551f49.', null, null, null, null, null, null, '主动攻击是攻击者通过网络线路将虚假信息或计算机病毒传入信息系统内部，破坏信息的真实性、完整性及系统服务的可用性，\r\n即通过中断、伪造、篡改和重排信息内容造成信息破坏，使系统无法正常运行。\r\n被动攻击是攻击者非正常截获、窃取通信线路中的信息，使信息保密性遭到破坏，信息泄露而无法察觉，给用户带来巨大的损失。', '', '0', '2017-12-25 20:25:19', '47', '1');
INSERT INTO `topic` VALUES ('4210', '4', '4', 'Spring中Bean的作用域有哪些？ ', '3ce7d330-677a-40a9-831b-6339481b847f.', null, null, null, null, null, null, '在SPRING的早期版本中，仅有两个作用域：SINGLETON和PROTOTYPE，前者表示BEAN以单例的方式存在；后者表示每次从容器中调用BEAN时，都会返回一个新的实例，PROTOTYPE通常翻译为原型。', '', '0', '2017-12-25 20:25:22', '51', '1');
INSERT INTO `topic` VALUES ('4211', '18', '4', '简述对称密钥密码体制的原理和特点。', '07abda80-33cc-4bc9-a230-ebaef9d667aa.', null, null, null, null, null, null, '对称密钥密码体制，对于大多数算法，解密算法是加密算法的逆运算，加密密钥和解密密钥相同，同属一类的加密体制。它保密强度高但开放性差，要求发送者和接收者在安全通信之前，需要有可靠的密钥信道传递密钥，而此密钥也必须妥善保管', '', '0', '2017-12-25 20:25:42', '47', '1');
INSERT INTO `topic` VALUES ('4212', '4', '4', '解释一下什么叫AOP（面向切面编程）？', 'd5123a4b-2b73-4473-8680-626469551124.', null, null, null, null, null, null, 'AOP（ASPECT-ORIENTED PROGRAMMING）指一种程序设计范型，该范型以一种称为切面（ASPECT）的语言构造为基础，切面是一种新的模块化机制，用来描述分散在对象、类或方法中的横切关注点（CROSSCUTTING CONCERN）。', '', '0', '2017-12-25 20:25:50', '51', '1');
INSERT INTO `topic` VALUES ('4213', '26', '4', '完成 extname 函数，它会接受一个文件名作为参数，你需要返回它的扩展名。\r\n\r\n例如，输入 emoji.png，返回 .png。\r\nconst extname = (filename) =&gt; {\r\n  /* TODO */\r\n}', 'e54fb17d-1acf-4d23-9574-7f28a3a9c695.', null, null, null, null, null, null, 'WRONG ANSWER\r\n输入 HELLO.JPG 你应该返回一个字符串', '', '0', '2017-12-25 20:27:04', '72', '1');
INSERT INTO `topic` VALUES ('4214', '33', '4', '用Java写一个折半查找。', '61fa063d-70d4-49f9-aa35-d15ac94b2d51.', null, null, null, null, null, null, '折半查找，也称二分查找、二分搜索，是一种在有序数组中查找某一特定元素的搜索算法。搜素过程从数组的中间元素开始，如果中间元素正好是要查找的元素，则搜素过程结束；如果某一特定元素大于或者小于中间元素，则在数组大于或小于中间元素的那一半中查找，而且跟开始一样从中间元素开始比较。如果在某一步骤数组已经为空，则表示找不到指定的元素。这种搜索算法每一次比较都使搜索范围缩小一半，其时间复杂度是O(LOGN)。', '', '0', '2017-12-25 20:27:07', '70', '1');
INSERT INTO `topic` VALUES ('4215', '3', '4', 'XML包括哪些解释技术，区别是什么？', '046f43fb-ca16-4914-8ba2-8c7236fc4074.', null, null, null, null, null, null, 'DOM（DOCUMENT OBJECT MODAL）文档对象模型，SAX（SIMPLE API FOR XML）。DOM是一次性将整个文档读入内存操作，如果是文档比较小，读入内存，可以极大提高操作的速度，但如果文档比较大，那么这个就吃力了。所以此时SAX应用而生，它不是一次性的将整个文档读入内存，这对于处理大型文档就比较就力了', '', '0', '2017-12-25 20:28:31', '53', '1');
INSERT INTO `topic` VALUES ('4216', '26', '4', 'JSP有哪些内置对象和动作？它们的作用分别是什么？', 'f664067c-1927-4fab-8c93-3883ac933771.', null, null, null, null, null, null, 'JSP共有以下9种基本内置组件：\r\nREQUEST 用户端请求，此请求会包含来自GET/POST请求的参数\r\nRESPONSE 网页传回用户端的回应\r\nPAGECONTEXT 网页的属性是在这里管理\r\nSESSION 与请求有关的会话期\r\nAPPLICATION SERVLET 正在执行的内容\r\nOUT 用来传送回应的输出\r\nCONFIG SERVLET的构架部件\r\nPAGE JSP网页本身\r\nEXCEPTION 针对错误网页，未捕捉的例外\r\n常用的组件：REQUEST、RESPONSE、OUT、SESSION、APPLICATION、EXCEPTION', '', '0', '2017-12-25 20:28:59', '53', '1');
INSERT INTO `topic` VALUES ('4217', '24', '4', '解释什么是Jasper?', '403a5f2a-6145-4b3f-9aa6-a7bfeb0a6252.', null, null, null, null, null, null, 'JASPER是TOMCAT的JSP引擎', '', '0', '2017-12-25 20:29:23', '10', '1');
INSERT INTO `topic` VALUES ('4218', '18', '2', '安装SQL 2005标准版时，CPU核心数必须是2的n次方，即核心数位1，2,4,8,16···（）', 'b120a7d0-17dc-4379-b18f-e7918514ba79.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:29:24', '43', '1');
INSERT INTO `topic` VALUES ('4219', '3', '4', 'Java 中能创建 volatile 数组吗？', 'd67299a2-b555-4114-b094-569b76c76fe6.', null, null, null, null, null, null, '能，JAVA 中可以创建 VOLATILE 类型数组，不过只是一个指向数组的引用，而不是整个数组。我的意思是，如果改变引用指向的数组，将会受到 VOLATILE 的保护，但是如果多个线程同时改变数组的元素，VOLATILE 标示符就不能起到之前的保护作用了。', '', '0', '2017-12-25 20:29:36', '72', '1');
INSERT INTO `topic` VALUES ('4220', '18', '4', '密钥的产生需要注意哪些问题？', '7eac9740-fe04-4251-924a-bea624766a8b.', null, null, null, null, null, null, '算法的安全性依赖于密钥，如果用一个弱的密钥产生方法，那么整个系统都将是弱的。DES有56位的密钥，正常情况下任何一个56位的数据串都能成为密钥，所以共有256种可能的密钥。在某些实现中，仅允许用ASCII码的密钥，并强制每一字节的最高位为零。有的实现甚至将大写字母转换成小写字母。这些密钥产生程序都使得DES的攻击难度比正常情况下低几千倍。因此，对于任何一种加密方法，其密钥产生方法都不容忽视。', '', '0', '2017-12-25 20:29:44', '47', '1');
INSERT INTO `topic` VALUES ('4221', '18', '1', '与Windows 相比Linux 在哪个方面相对应用得较少？', '49430026-9c1d-48ff-b945-805725fa9cb1.', ' 桌面 ', ' 嵌入式系统', '服务器 ', '集群', '', '', 'A', '', '0', '2017-12-25 20:29:44', '29', '1');
INSERT INTO `topic` VALUES ('4222', '26', '4', '请说明select * from tab的输出结果是什么?', '563fc8d2-82c5-4dc6-9c05-241dc45ac70a.', null, null, null, null, null, null, '显示数据库中的默认表', '', '0', '2017-12-25 20:30:03', '10', '1');
INSERT INTO `topic` VALUES ('4223', '18', '2', 'SQL Server自动备份需要启动的服务是：SQLServer Agent服务（）。', '7a487b3a-cbec-418e-8f36-10354265c7f7.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:30:06', '43', '1');
INSERT INTO `topic` VALUES ('4224', '3', '4', 'volatile 能使得一个非原子操作变成原子操作吗？', 'c0f16555-ec95-4716-835d-a1e91fafc3f8.', null, null, null, null, null, null, '一个典型的例子是在类中有一个 LONG 类型的成员变量。如果你知道该成员变量会被多个线程访问，如计数器、价格等，你最好是将其设置为 VOLATILE。为什么？因为 JAVA 中读取 LONG 类型变量不是原子的，需要分成两步，如果一个线程正在修改该 LONG 变量的值，另一个线程可能只能看到该值的一半（前 32 位）。但是对一个 VOLATILE 型的 LONG 或 DOUBLE 变量的读写是原子', '', '0', '2017-12-25 20:30:07', '72', '1');
INSERT INTO `topic` VALUES ('4225', '24', '4', '请解释如何配置Tomcat来使用IIS和NTLM ?', '071a9c59-24e0-427c-a7d9-d344d8daaa0c.', null, null, null, null, null, null, '必须遵循ISAPI_REDIRECTOR.DLL的标准指令\r\n配置IIS使用“集成WINDOWS验证”\r\n确保在服务器.XML中您已经禁用了TOMCAT身份验证\r\n&LT;CONNECTOR PORT = “8009” ENABLELOOKSUP = “FALSE” REDIRECT PORT = “8443” PROTOCOL = “AJP/1.3” TOMCATAUTHENTICATION = “FALSE” /&GT;', '', '0', '2017-12-25 20:30:28', '10', '1');
INSERT INTO `topic` VALUES ('4226', '18', '4', '请解释一下什么时候可以使用“.”，什么时候可以使用“[]”?', '325bbc1c-9a0c-487b-8ecf-f9353c5ef181.', null, null, null, null, null, null, '如果正在运行BEAN属性，请使用“.”操作符，如果正在执行映射值或数组索引，则首选使用“[]”运算符。虽然两个运算符可以互换', '', '0', '2017-12-25 20:30:49', '10', '1');
INSERT INTO `topic` VALUES ('4227', '33', '4', '请解释Tomcat的默认端口是什么?', '9894eead-905d-43ac-8475-4e304dfdc3b1.', null, null, null, null, null, null, 'TOMCAT的默认端口是8080。在本地机器上初始化TOMCAT之后，您可以验证TOMCAT是否正在运行URL:HTTP://LOCALHOST:8080', '', '0', '2017-12-25 20:31:05', '10', '1');
INSERT INTO `topic` VALUES ('4228', '3', '4', 'volatile 修饰符的有过什么实践？', 'f716c626-5cdc-43b3-b01f-9b83a30d7623.', null, null, null, null, null, null, '一种实践是用 VOLATILE 修饰 LONG 和 DOUBLE 变量，使其能按原子类型来读写。DOUBLE 和 LONG 都是64位宽，因此对这两种类型的读是分为两部分的，第一次读取第一个 32 位，然后再读剩下的 32 位，这个过程不是原子的，但 JAVA 中 VOLATILE 型的 LONG 或 DOUBLE 变量的读写是原子的。VOLATILE 修复符的另一个作用是提供内存屏障（MEMORY BARRIER），例如在分布式框架中的应用。简单的说，就是当你写一个 VOLATILE 变量之前，JAVA 内存模型会插入一个写屏障（WRITE BARRIER），读一个 VOLATILE 变量之前，会插入一个读屏障（READ BARRIER）。意思就是说，在你写一个 VOLATILE 域时，能保证任何线程都能看到你写的值，同时，在写之前，也能保证任何数值的更新对所有线程是可见的，因为内存屏障会将其他所有写的值更新到缓存。', '', '0', '2017-12-25 20:31:10', '72', '1');
INSERT INTO `topic` VALUES ('4229', '33', '4', '请解释Tomcat中使用的连接器是什么?', '2448eefa-5d37-45cf-830d-6a0a07d8fa6b.', null, null, null, null, null, null, '在TOMCAT中，使用了两种类型的连接器：\r\nHTTP连接器:它有许多可以更改的属性，以确定它的工作方式和访问功能，如重定向和代理转发\r\nAJP连接器:它以与HTTP连接器相同的方式工作，但是他们使用的是HTTP的AJP协议。AJP连接器通常通过插件技术MOD_JK在TOMCAT中实现', '', '0', '2017-12-25 20:31:22', '10', '1');
INSERT INTO `topic` VALUES ('4230', '3', '4', '请说出const与#define 相比，有何优点？ ', 'a6564bf3-3c99-45c3-81c9-a018595db8d5.', null, null, null, null, null, null, '1） CONST 常量有数据类型，而宏常量没有数据类型。编译器可以对前者进行类型安全检查。而对后者只进行字符替换，没有类型安全检查，并且在字符替换可能会产生意料不到的错误。 \r\n            2） 有些集成化的调试工具可以对CONST 常量进行调试，但是不能对宏常量进行调试。  ', '', '0', '2017-12-25 20:31:27', '53', '1');
INSERT INTO `topic` VALUES ('4231', '3', '4', '简述数组与指针的区别？ ', '89624257-663b-47a8-b811-864cb485ae66.', null, null, null, null, null, null, '数组要么在静态存储区被创建（如全局数组），要么在栈上被创建。指针可以随时指向任意类型的内存块。', '', '0', '2017-12-25 20:31:37', '53', '1');
INSERT INTO `topic` VALUES ('4232', '33', '4', '请阐述Catalina的配置文件有哪些?', '3c154d1f-c4ce-4e94-bf36-bae6cc117e47.', null, null, null, null, null, null, 'CATALINA包含的配置文件有：\r\n·POLICY\r\n·PROPERTIES\r\n·XML\r\n·TOMCAT-USERS.XML', '', '0', '2017-12-25 20:31:55', '10', '1');
INSERT INTO `topic` VALUES ('4233', '33', '4', 'volatile 类型变量提供什么保证？', '8936e506-e513-408a-b41f-35b5b13d0685.', null, null, null, null, null, null, 'VOLATILE 变量提供顺序和可见性保证，例如，JVM 或者 JIT为了获得更好的性能会对语句重排序，但是 VOLATILE 类型变量即使在没有同步块的情况下赋值也不会与其他语句重排序。 VOLATILE 提供 HAPPENS-BEFORE 的保证，确保一个线程的修改能对其他线程是可见的。某些情况下，VOLATILE 还能提供原子性，如读 64 位数据类型，像 LONG 和 DOUBLE 都不是原子的，但 VOLATILE 类型的 DOUBLE 和 LONG 就是原子的。', '', '0', '2017-12-25 20:32:03', '72', '1');
INSERT INTO `topic` VALUES ('4234', '33', '4', '请解释将Tomcat作为一个Windows 服务运行会带来哪些好处?', 'ddb5ace4-d765-4300-a962-a8f181d32248.', null, null, null, null, null, null, '运行TOMCAT作为WINDOWS服务带来了以下的好处：\r\n自动启动:对于需要在维护后远程重新启动系统的环境来说，这是至关重要的\r\n启动无活动用户登录的服务器:TOMCAT通常在刀片服务器上运行，这些服务器甚至可能没有一个活动监视器，WINDOWS服务可以在没有活动用户的情况下启动\r\n安全性:在WINDOWS服务下的TOMCAT可以让您在一个特殊的系统帐户下运行它，这个账户可以从其他用户帐户中得到保护', '', '0', '2017-12-25 20:32:15', '10', '1');
INSERT INTO `topic` VALUES ('4235', '26', '4', '解释身份认证的基本概念。', '46783b04-d0c9-41d5-acc0-b3c6baa91385.', null, null, null, null, null, null, '身份认证是指用户必须提供他是谁的证明，这种证实客户的真实身份与其所声称的身份是否相符的过程是为了限制非法用户访问网络资源，它是其他安全机制的基础。      身份认证是安全系统中的第一道关卡，识别身份后，由访问监视器根据用户的身份和授权数据库决定是否能够访问某个资源。一旦身份认证系统被攻破，系统的所有安全措施将形同虚设，黑客攻击的目标往往就是身份认证系统', '', '0', '2017-12-25 20:32:33', '47', '1');
INSERT INTO `topic` VALUES ('4236', '3', '4', '10 个线程和 2 个线程的同步代码，哪个更容易写？', 'b3d2823e-4f61-4987-bee9-36119f6132d8.', null, null, null, null, null, null, '从写代码的角度来说，两者的复杂度是相同的，因为同步代码与线程数量是相互独立的。但是同步策略的选择依赖于线程的数量，因为越多的线程意味着更大的竞争，所以你需要利用同步技术，如锁分离，这要求更复杂的代码和专业知识。', '', '0', '2017-12-25 20:32:59', '72', '1');
INSERT INTO `topic` VALUES ('4237', '33', '4', '解释何时在Tomcat使用SSL ?', '2a3a562c-3707-4674-9129-e8887dba5885.', null, null, null, null, null, null, '当你将TOMCAT作为独立的WEB服务器运行时，需使用TOMCAT来处理连接', '', '0', '2017-12-25 20:33:10', '10', '1');
INSERT INTO `topic` VALUES ('4238', '26', '4', '利用智能卡进行的双因素的认证方式的原理是什么', '2a97fa04-f67c-450f-b0fc-521e7c41235b.', null, null, null, null, null, null, '智能卡具有硬件加密功能，有较高的安全性。每个用户持有一张智能卡，智能卡存储用户个性化的秘密信息，同时在验证服务器中也存放该秘密信息。进行认证时，用户输入PIN（个人身份识别码），智能卡认证PIN，成功后，即可读出智能卡中的秘密信息，进而利用该秘密信息与主机之间进行认证。      双因素的认证方式（PIN+智能卡），即使PIN或智能卡被窃取，用户仍不会被冒充。智能卡提供硬件保护措施和加密算法，可以利用这些功能加强安全性能。', '', '0', '2017-12-25 20:33:54', '47', '1');
INSERT INTO `topic` VALUES ('4239', '3', '4', '什么是多线程环境下的伪共享（false sharing）？', 'eff8e810-2cc4-408c-bfdf-f71f866ec14d.', null, null, null, null, null, null, '伪共享是多线程系统（每个处理器有自己的局部缓存）中一个众所周知的性能问题。伪共享发生在不同处理器的上的线程对变量的修改依赖于相同的缓存行伪共享问题很难被发现，因为线程可能访问完全不同的全局变量，内存中却碰巧在很相近的位置上。如其他诸多的并发问题，避免伪共享的最基本方式是仔细审查代码，根据缓存行来调整你的数据结构。', '', '0', '2017-12-25 20:34:13', '72', '1');
INSERT INTO `topic` VALUES ('4240', '33', '4', '什么是 Busy spin？我们为什么要使用它？', 'bf0ce4f5-3254-4d0a-8577-ee5245679d7f.', null, null, null, null, null, null, 'BUSY SPIN 是一种在不释放 CPU 的基础上等待事件的技术。它经常用于避免丢失 CPU 缓存中的数据（如果线程先暂停，之后在其他CPU上运行就会丢失）。所以，如果你的工作要求低延迟，并且你的线程目前没有任何顺序，这样你就可以通过循环检测队列中的新消息来代替调用 SLEEP() 或 WAIT() 方法。它唯一的好处就是你只需等待很短的时间，如几微秒或几纳秒。LMAX 分布式框架是一个高性能线程间通信的库，该库有一个 BUSYSPINWAITSTRATEGY 类就是基于这个概念实现的，使用 BUSY SPIN 循环 EVENTPROCESSORS 等待屏障。', '', '0', '2017-12-25 20:34:46', '72', '1');
INSERT INTO `topic` VALUES ('4241', '26', '4', '有哪些生物特征可以作为身份认证的依据，这种认证的过程是怎样的？', '0ca78c4f-503b-4694-96f7-4c088e6ee7b4.', null, null, null, null, null, null, '以人体唯一的、可靠的、稳定的生物特征（如指纹、虹膜、脸部、掌纹等）为依据，采用计算机强大的计算功能和网络技术进行图象处理和模式识别。该技术具有很好的安全性、可靠性和有效性。      所有的工作有4个步骤：抓图、抽取特征、比较和匹配。生物捕捉系统捕捉到生物特征的样品，唯一的特征将会被提取并且被转化成数字符号，这些符号被存成那个人的特征摸板，人们同识别系统交互进行身份认证，以确定匹配或不匹配授权与访问控制', '', '0', '2017-12-25 20:35:23', '47', '1');
INSERT INTO `topic` VALUES ('4242', '33', '4', '解释如何使用WAR文件部署web应用程序?', '35d8eb03-2119-4aeb-b3c5-9001fab4e0d1.', null, null, null, null, null, null, '在TOMCAT的WEB应用程序目录下，JSP、SERVLET和它们的支持文件被放置在适当的子目录中。你可以将WEB应用程序目录下的所有文件压缩到一个压缩文件中，以.WAR文件扩展名结束。你可以通过在WEBAPPS目录中放置WAR文件来执行WEB应用程序。当一个WEB服务器开始执行时，它会将WAR文件的内容提取到适当的WEBAPPS子目录中。', '', '0', '2017-12-25 20:35:24', '10', '1');
INSERT INTO `topic` VALUES ('4243', '33', '4', 'Java 中怎么获取一份线程 dump 文件？', 'eb8bc7b1-0bda-4762-a2b3-577318d3c8fd.', null, null, null, null, null, null, '在 LINUX 下，你可以通过命令 KILL -3 PID （JAVA 进程的进程 ID）来获取 JAVA 应用的 DUMP 文件。在 WINDOWS 下，你可以按下 CTRL + BREAK 来获取。这样 JVM 就会将线程的 DUMP 文件打印到标准输出或错误文件中，它可能打印在控制台或者日志文件中，具体位置依赖应用的配置。如果你使用TOMCAT。', '', '0', '2017-12-25 20:35:27', '72', '1');
INSERT INTO `topic` VALUES ('4244', '18', '1', 'Linux 系统各组成部分中哪一项是基础？ ', '6696b326-0787-426b-997f-3e859098615c.', '内核 ', 'X Window      ', 'Shell', 'Gnome ', '', '', 'A', '', '0', '2017-12-25 20:35:35', '29', '1');
INSERT INTO `topic` VALUES ('4245', '33', '4', '解释什么是Tomcat Valve?', 'a328c315-8f8a-4e2f-b5ed-76fcae264914.', null, null, null, null, null, null, 'TOMCAT VALVE——TOMCAT 4引入的新技术，它允许您将JAVA类的实例链接到一个特定的CATALINA容器。', '', '0', '2017-12-25 20:35:37', '10', '1');
INSERT INTO `topic` VALUES ('4246', '18', '4', '电子邮件存在哪些安全性问题？', 'e2ae05c0-0e0d-4d39-b165-bc470e8da4cc.', null, null, null, null, null, null, '1）垃圾邮件包括广告邮件、骚扰邮件、连锁邮件、反动邮件等。垃圾邮件会增加网络负荷，影响网络传输速度，占用邮件服务器的空间。 2）诈骗邮件通常指那些带有恶意的欺诈性邮件。利用电子邮件的快速、便宜，发信人能迅速让大量受害者上当。 3）邮件炸弹指在短时间内向同一信箱发送大量电子邮件的行为，信箱不能承受时就会崩溃。  4）通过电子邮件传播的病毒通常用VBSCRIPT编写，且大多数采用附件的形式夹带在电子邮件中。当收信人打开附件后，病毒会查询他的通讯簿，给其上所有或部分人发信，并将自身放入附件中，以此方式继续传播扩散。', '', '0', '2017-12-25 20:35:44', '47', '1');
INSERT INTO `topic` VALUES ('4247', '33', '4', '说明Tomcat配置了多少个Valve?', '6e7a8a64-7620-41cb-8594-07ace7db1e0c.', null, null, null, null, null, null, 'TOMCAT配置了四种类型的VALVE：\r\n·访问日志\r\n·远程地址过滤\r\n·远程主机过滤器\r\n·客户请求记录器', '', '0', '2017-12-25 20:36:05', '10', '1');
INSERT INTO `topic` VALUES ('4248', '26', '4', ' 什么是防火墙，为什么需要有防火墙？ ', 'fb828657-7ec7-46aa-a0c0-6f4ac9a9bb2e.', null, null, null, null, null, null, '防火墙是一种装置，它是由软件/硬件设备组合而成，通常处于企业的内部局域网与INTERNET之间，限制INTERNET用户对内部网络的访问以及管理内部用户访问INTERNET的权限。换言之，一个防火墙在一个被认为是安全和可信的内部网络和一个被认为是不那么安全和可信的外部网络(通常是INTERNET)之间提供一个封锁工具。  如果没有防火墙，则整个内部网络的安全性完全依赖于每个主机，因此，所有的主机都必须达到一致的高度安全水平，这在实际操作时非常困难。而防火墙被设计为只运行专用的访问控制软件的设备，没有其他的服务，因此也就意味着相对少一些缺陷和安全漏洞，这就使得安全管理变得更为方便，易于控制，也会使内部网络更加安全。  防火墙所遵循的原则是在保证网络畅通的情况下，尽可能保证内部网络的安全。它是一种被动的技术，是一种静态安全部件。', '', '0', '2017-12-25 20:36:12', '47', '1');
INSERT INTO `topic` VALUES ('4251', '33', '4', '请说明NAT协议的目的是什么?', '79399569-fb6c-4ac8-9f2e-3480397419e4.', null, null, null, null, null, null, 'NAT协议的目的是将私有IP地址从公共IP地址隐藏起来，并给组织提供一定的安全性。', '', '0', '2017-12-25 20:36:45', '10', '1');
INSERT INTO `topic` VALUES ('4252', '33', '4', '什么是线程局部变量？\r\n', '7eaf853a-5267-4ca0-968b-73a0845aea8d.', null, null, null, null, null, null, '线程局部变量是局限于线程内部的变量，属于线程自身所有，不在多个线程间共享。JAVA 提供 THREADLOCAL 类来支持线程局部变量，是一种实现线程安全的方式。但是在管理环境下（如 WEB 服务器）使用线程局部变量的时候要特别小心，在这种情况下，工作线程的生命周期比任何应用变量的生命周期都要长。任何线程局部变量一旦在工作完成后没有释放，JAVA 应用就存在内存泄露的风险。', '', '0', '2017-12-25 20:36:47', '72', '1');
INSERT INTO `topic` VALUES ('4253', '33', '4', '请解释一下MAC代表什么?', '152599b6-32e4-4472-9466-47a0b5a284b9.', null, null, null, null, null, null, 'MAC意味着中访问控制', '', '0', '2017-12-25 20:37:00', '10', '1');
INSERT INTO `topic` VALUES ('4254', '18', '4', '防火墙应满足的基本条件是什么？', '47aae700-45eb-4d56-9500-b055d8ad7149.', null, null, null, null, null, null, '作为网络间实施网间访问控制的一组组件的集合，防火墙应满足的基本条件如下： (1) 内部网络和外部网络之间的所有数据流必须经过防火墙。 (2) 只有符合安全策略的数据流才能通过防火墙。  (3) 防火墙自身具有高可靠性，应对渗透(PENETRATION)免疫，即它本身是不可被侵入的。', '', '0', '2017-12-25 20:37:01', '47', '1');
INSERT INTO `topic` VALUES ('4255', '33', '4', '请解释什么是Tomcat Coyote ?', '09ae6c9e-1c71-46f3-bcc4-46f7729d9dd1.', null, null, null, null, null, null, 'TOM COYOTE是基于HTTP / 1.1规范的HTTP连接器，通过监听TCP / IP端口并将请求发送回请求客户端，向TOMCAT引擎接收和传输WEB请求。', '', '0', '2017-12-25 20:37:19', '10', '1');
INSERT INTO `topic` VALUES ('4256', '33', '4', '用 Java 写一个线程安全的单例模式（Singleton）？', 'd484ce44-e7b2-479a-97e4-0e5eee612c8a.', null, null, null, null, null, null, '请参考答案中的示例代码，这里面一步一步教你创建一个线程安全的 JAVA 单例类。当我们说线程安全时，意思是即使初始化是在多线程环境中，仍然能保证单个实例。JAVA 中，使用枚举作为单例类是最简单的方式来创建线程安全单例模式的方式。', '', '0', '2017-12-25 20:37:20', '72', '1');
INSERT INTO `topic` VALUES ('4257', '26', '4', 'iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT\r\n \r\n\r\n这条OUTPUT规则可以这么描述', '4d4bf860-5eba-4433-bbb9-445c4d40f7e6.', null, null, null, null, null, null, '1.这是一条从内部出去的数据。\r\n\r\n        2.出去的目的（DPORT）端口是22。\r\n\r\n        3.允许以上数据行为。', '', '0', '2017-12-25 20:37:40', '28', '1');
INSERT INTO `topic` VALUES ('4260', '33', '4', '我们能创建一个包含可变对象的不可变对象吗？', '9967ec65-1c76-480f-abd9-3e145078e204.', null, null, null, null, null, null, '是的，我们是可以创建一个包含可变对象的不可变对象的，你只需要谨慎一点，不要共享可变对象的引用就可以了，如果需要变化时，就返回原对象的一个拷贝。最常见的例子就是对象中包含一个日期对象的引用。', '', '0', '2017-12-25 20:38:31', '72', '1');
INSERT INTO `topic` VALUES ('4261', '25', '1', '下面关于Shell 的说法，不正确的是哪个？ ', '2a09a3a5-7cfb-4169-b47a-d196ec5c64a1.', '操作系统的外壳   ', '用户与Linux 内核之间的接口 ', '一种和C 类似的高级程序设计语言 ', '一个命令语言解释器', '', '', 'C', '', '0', '2017-12-25 20:38:36', '29', '1');
INSERT INTO `topic` VALUES ('4262', '18', '2', 'JDK是 Java 语言的软件开发工具包，主要用于移动设备、嵌入式设备上的java应用程序。JDK是整个java开发的核心，它包含了JAVA的运行环境（JVM+Java系统类库）和JAVA工具（）', 'e804eab2-a73a-41e3-aa06-f11beda509ee.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:38:54', '43', '1');
INSERT INTO `topic` VALUES ('4263', '32', '4', '怎么将 byte 转换为 String？', '7957ab8f-6029-4642-96be-1f2cbfec3e1f.', null, null, null, null, null, null, '可以使用 STRING 接收 BYTE[] 参数的构造器来进行转换，需要注意的点是要使用的正确的编码，否则会使用平台默认编码，这个编码可能跟原来的编码相同，也可能不同。', '', '0', '2017-12-25 20:39:38', '72', '1');
INSERT INTO `topic` VALUES ('4264', '3', '4', 'GUI组件如何来处理它自己的事件？', '8b03ce5d-e7c2-4cfb-9521-1b1a6b266651.', null, null, null, null, null, null, 'GUI组件可以处理它自己的事件，只要它实现相对应的事件监听器接口，并且把自己作为事件监听器。', '', '0', '2017-12-25 20:39:59', '53', '1');
INSERT INTO `topic` VALUES ('4265', '26', '2', 'Tomcat 服务器是一个免费的开放源代码的Web 应用服务器，属于轻量级应用服务器，在中小型系统和并发访问用户不是很多的场合下被普遍使用，是开发和调试JSP 程序的首选（）。', '1079d383-8866-4eba-8e43-16a327ed3958.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:40:05', '43', '1');
INSERT INTO `topic` VALUES ('4266', '18', '4', '列举防火墙的几个基本功能？ ', '266e9407-4c41-4e39-b94e-ef642da23e1c.', null, null, null, null, null, null, '1) 隔离不同的网络，限制安全问题的扩散，对安全集中管理，简化了安全管理的复杂程度。 (2) 防火墙可以方便地记录网络上的各种非法活动，监视网络的安全性，遇到紧急情况报警。  (3) 防火墙可以作为部署NAT的地点，利用NAT技术，将有限的IP地址动态或静态地与内部的IP地址对应起来，用来缓解地址空间短缺的问题或者隐藏内部网络的结构。  (4) 防火墙是审计和记录INTERNET使用费用的一个最佳地点。 (5) 防火墙也可以作为IPSEC的平台。  (6) 内容控制功能。根据数据内容进行控制，比如防火墙可以从电子邮件中过滤掉垃圾邮件，可以过滤掉内部用户访问外部服务的图片信息。只有代理服务器和先进的过滤才能实现。 ', '', '0', '2017-12-25 20:40:10', '47', '1');
INSERT INTO `topic` VALUES ('4267', '26', '2', 'Linux\r\n\r\n系统以文本文件的形式保存大部分系统日志，如\r\n\r\nlastlog\r\n\r\n。\r\n', '75fd1763-dae3-4aa2-8b7a-bea876b52a9d.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:40:11', '40', '1');
INSERT INTO `topic` VALUES ('4268', '3', '4', '裁剪(clipping)和重绘(repainting)有什么联系？', 'ec17b7b0-94aa-4878-93b8-c5a9fe23d493.', null, null, null, null, null, null, '当窗口被AWT重绘线程进行重绘的时候，它会把裁剪区域设置成需要重绘的窗口的区域。', '', '0', '2017-12-25 20:40:26', '53', '1');
INSERT INTO `topic` VALUES ('4269', '18', '2', 'Oracle数据库：Oracle Database，又名Oracle RDBMS，或简称Oracle。是甲骨文公司的一款关系数据库管理系统（）', '6423e65f-fa7a-4b5b-93fc-f0ccf6fae214.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:40:28', '43', '1');
INSERT INTO `topic` VALUES ('4270', '18', '4', '防火墙有哪些局限性？', '879f1e0a-37e7-4c5a-8ef9-92e52d6e3d0c.', null, null, null, null, null, null, '(1) 网络上有些攻击可以绕过防火墙（如拨号）。 (2) 防火墙不能防范来自内部网络的攻击。  (3) 防火墙不能对被病毒感染的程序和文件的传输提供保护。 (4) 防火墙不能防范全新的网络威胁。  (5) 当使用端到端的加密时，防火墙的作用会受到很大的限制。  (6) 防火墙对用户不完全透明，可能带来传输延迟、瓶颈以及单点失效等问题。  (7) 防火墙不能防止数据驱动式攻击。有些表面无害的数据通过电子邮件或其他方式发送到主机上，一旦被执行就形成攻击（附件）', '', '0', '2017-12-25 20:40:31', '47', '1');
INSERT INTO `topic` VALUES ('4271', '33', '4', 'Window和Frame有什么区别？', '343fe4e8-b2fc-44ca-a7ad-613e08208162.', null, null, null, null, null, null, 'FRAME类继承了WINDOW类，它定义了一个可以有菜单栏的主应用窗口。', '', '0', '2017-12-25 20:40:40', '53', '1');
INSERT INTO `topic` VALUES ('4272', '25', '1', '以下哪种Shell 类型在Linux 环境下不能使用? ', 'a8a20100-8e25-4941-ab8c-a63f772c7a71.', 'B Shell ', 'K Shel', 'R Shell   ', 'Bash ', '', '', 'C', '', '0', '2017-12-25 20:40:44', '29', '1');
INSERT INTO `topic` VALUES ('4273', '18', '4', '常见的计算机操作系统有那些（列举7种以上）？常见的服务器有那些（列举3种以上）？常见的数据库有那些（列举3种以上）？常见的远程控制软件有那些（列举3种以上）？', 'ef649a70-3889-4859-a82b-17ec09b56b8b.', null, null, null, null, null, null, '常用计算机操作系统有：XP、WIN7、WIN8、WIN10、WINDOWS', '', '0', '2017-12-25 20:40:53', '43', '1');
INSERT INTO `topic` VALUES ('4274', '26', '2', '通常情况下，\r\n\r\nlinux\r\n\r\n向进程传送的信号，将告诉系统内核按特殊的处理方法\r\n\r\n去处理额外的事件。\r\n', '0ce4458b-5bb5-48cc-a1b9-0628583f41da.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:41:17', '40', '1');
INSERT INTO `topic` VALUES ('4275', '26', '2', '在\r\n\r\nsamba\r\n\r\n配置文件中设置\r\n\r\nsecurity = domain\r\n\r\n，这时\r\n\r\nsamba\r\n\r\n服务器将使用远\r\n\r\n程\r\n\r\nSMB\r\n\r\n服务器\r\n\r\n(\r\n\r\n如\r\n\r\nWindows \r\n\r\nNT\r\n\r\n）进行身份验证，如果失败则自动切换\r\n\r\n \r\n\r\n到\r\n\r\nuser\r\n\r\n安\r\n\r\n全级。\r\n', '0c120b9b-6dfc-492a-af2d-ff135862062a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:41:52', '40', '1');
INSERT INTO `topic` VALUES ('4276', '3', '4', '什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？', '275c3ed3-8f2b-4b70-8c19-91889e24d7bd.', null, null, null, null, null, null, 'ALLABLESTATEMENT用来执行存储过程。存储过程是由数据库存储和提供的。存储过程可以接受输入参数，也可以有返回结果。非常鼓励使用存储过程，因为它提供了安全性和模块化。准备一个CALLABLESTATEMENT的方法是：CALLABLESTAMENT.PREPARECALL();', '', '0', '2017-12-25 20:42:02', '53', '1');
INSERT INTO `topic` VALUES ('4277', '26', '4', '遍历一个List有哪些不同的方式？', '0bee63e0-e790-417e-8c46-4bbe0469571b.png', null, null, null, null, null, null, '使用迭代器更加线程安全，因为它可以确保，在当前遍历的集合元素被更改的时候，它会抛出CONCURRENTMODIFICATIONEXCEPTION。', '', '0', '2017-12-25 20:42:14', '50', '1');
INSERT INTO `topic` VALUES ('4278', '3', '4', '存在两个类，B 继承 A，C 继承 B，我们能将 B 转换为 C 么？如 C = (C) B；', 'f4979ddb-19d0-4be3-acae-a9160e73b3d3.', null, null, null, null, null, null, 'ANSWER答案', '', '0', '2017-12-25 20:42:44', '72', '1');
INSERT INTO `topic` VALUES ('4282', '26', '2', 'iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT\r\n\r\n这条OUTPUT规则可以这么描述：   \r\n\r\n        1.这是一条从内部出去的数据。\r\n\r\n        2.数据包的来源端口是（sport）22，从本服务器的22端口发出数据。\r\n\r\n        3.允许以上数据行为。', 'dbbc4dd7-3ebb-4782-8835-0b345dff3e1b.', null, null, null, null, null, null, '正确', '.\r\n', '0', '2017-12-25 20:43:47', '28', '1');
INSERT INTO `topic` VALUES ('4283', '33', '4', '哪个类包含 clone 方法？是 Cloneable 还是 Object？', '3add1da9-3a7d-46bf-b4ea-1b4dcca7c5fb.', null, null, null, null, null, null, 'JAVA.LANG.CLONEABLE 是一个标示性接口，不包含任何方法，CLONE 方法在 OBJECT 类中定义。并且需要知道 CLONE() 方法是一个本地方法，这意味着它是由 C 或 C++ 或 其他本地语言实现的。', '', '0', '2017-12-25 20:44:00', '72', '1');
INSERT INTO `topic` VALUES ('4284', '3', '4', '通过迭代器fail-fast属性，你明白了什么？', '78fa4483-90e8-4a49-9c7f-196d35ba7bac.', null, null, null, null, null, null, '每次我们尝试获取下一个元素的时候，ITERATOR FAIL-FAST属性检查当前集合结构里的任何改动。如果发现任何改动，它抛出CONCURRENTMODIFICATIONEXCEPTION。COLLECTION中所有ITERATOR的实现都是按FAIL-FAST来设计的（CONCURRENTHASHMAP和COPYONWRITEARRAYLIST这类并发集合类除外）。', '', '0', '2017-12-25 20:44:02', '50', '1');
INSERT INTO `topic` VALUES ('4285', '33', '4', 'Java 中 ++ 操作符是线程安全的吗？', '02791b9d-9d30-4f64-88e7-275290a7a756.', null, null, null, null, null, null, '不是线程安全的操作。它涉及到多个指令，如读取变量值，增加，然后存储回内存，这个过程可能会出现多个线程交差。', '', '0', '2017-12-25 20:44:30', '72', '1');
INSERT INTO `topic` VALUES ('4286', '26', '2', '\r\n\r\n当不存在\r\n\r\nat.allow\r\n\r\n文件的时候，那么凡不在\r\n\r\nat.deny\r\n\r\n文件中列出的用户都\r\n\r\n可以使用\r\n\r\nat\r\n\r\n。\r\n', '71e54f48-e3d2-4def-8a7a-55ea4d244f46.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:44:35', '40', '1');
INSERT INTO `topic` VALUES ('4288', '26', '2', 'Linux\r\n\r\n支持可动态装载和卸载的模块。利用模块，可方便地在内核中添加新\r\n\r\n的组件或卸载不再需要的内核组件。\r\n', 'a19befde-4723-46c8-a174-5fe8eccb2426.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:44:50', '40', '1');
INSERT INTO `topic` VALUES ('4289', '26', '2', '\r\n\r\n只有\r\n\r\nroot\r\n\r\n具有降低任务\r\n\r\nnice\r\n\r\n值的能力。\r\n', 'f8133554-3202-4518-8017-52aa8ae2d4a3.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:45:02', '40', '1');
INSERT INTO `topic` VALUES ('4290', '26', '2', ' \r\n\r\nLinux\r\n\r\n系统使用\r\n\r\nnice\r\n\r\n值表示任务的优先级别，拥有负的\r\n\r\nnice\r\n\r\n值的任务优先\r\n\r\n级别较高。\r\n', '5413513c-b66f-418c-8ee5-a284840a3d23.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:45:17', '40', '1');
INSERT INTO `topic` VALUES ('4291', '4', '4', 'Mybatis是如何进行分页的？分页插件的原理是什么？', '93b4ba90-5703-4154-8f30-113f362619f8.', null, null, null, null, null, null, 'MYBATIS使用ROWBOUNDS对象进行分页，它是针对RESULTSET结果集执行的内存分页，而非物理分页，可以在SQL内直接书写带有物理分页的参数来完成物理分页功能，也可以使用分页插件来完成物理分页。\r\n\r\n分页插件的基本原理是使用MYBATIS提供的插件接口，实现自定义插件，在插件的拦截方法内拦截待执行的SQL，然后重写SQL，根据DIALECT方言，添加对应的物理分页语句和物理分页参数。', '', '0', '2017-12-25 20:45:18', '51', '1');
INSERT INTO `topic` VALUES ('4292', '3', '4', 'a = a + b 与 a += b 的区别', '4cb069e3-9df5-476b-abc1-74cf7d3c77ec.', null, null, null, null, null, null, '+= 隐式的将加操作的结果类型强制转换为持有结果的类型。如果两这个整型相加，如 BYTE、SHORT 或者 INT，首先会将它们提升到 INT 类型，然后在执行加法操作。如果加法操作的结果比 A 的最大值要大，则 A+B 会出现编译错误，但是 A += B 没问题，如下：\r\nBYTE A = 127;\r\nBYTE B = 127;\r\nB = A + B; // ERROR : CANNOT CONVERT FROM INT TO BYTE\r\nB += A; // OK\r\n（译者注：这个地方应该表述的有误，其实无论 A+B 的值为多少，编译器都会报错，因为 A+B 操作会将 A、B 提升为 INT 类型，所以将 INT 类型赋值给 BYTE 就会编译出错）', '', '0', '2017-12-25 20:45:20', '72', '1');
INSERT INTO `topic` VALUES ('4293', '26', '2', '如果是笔记本用户，一般来说制作\r\n\r\nlinux\r\n\r\n启动盘时，除了利用\r\n\r\nboot.img\r\n\r\n制\r\n\r\n作启动盘外，还需要额外制作一张驱动盘，这时需要利用红旗\r\n\r\nLinux \r\n\r\nServer2\r\n\r\n光盘上的\r\n\r\npcmcia.img\r\n\r\n文件。\r\n', '5c6d1e07-133c-4bd0-961f-17406af98dcd.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:45:29', '40', '1');
INSERT INTO `topic` VALUES ('4294', '4', '4', '简述Mybatis的插件运行原理，以及如何编写一个插件。', '01259af1-92a9-4c81-9b26-f5153bdc94ce.', null, null, null, null, null, null, 'MYBATIS仅可以编写针对PARAMETERHANDLER、RESULTSETHANDLER、STATEMENTHANDLER、EXECUTOR这4种接口的插件，MYBATIS使用JDK的动态代理，为需要拦截的接口生成代理对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体就是INVOCATIONHANDLER的INVOKE()方法，当然，只会拦截那些你指定需要拦截的方法。\r\n\r\n实现MYBATIS的INTERCEPTOR接口并复写INTERCEPT()方法，然后在给插件编写注解，指定要拦截哪一个接口的哪些方法即可，记住，别忘了在配置文件中配置你编写的插件。', '', '0', '2017-12-25 20:45:42', '51', '1');
INSERT INTO `topic` VALUES ('4295', '26', '2', '为了保证\r\n\r\nwindows\r\n\r\n用户和\r\n\r\nLinux\r\n\r\n主机间用户能够正常地进行映射，\r\n\r\n用户必需\r\n\r\n保证在这两个系统上拥有相同的帐号。\r\n', 'bc515bdb-cfa7-4dd2-90f7-584eca3a4701.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:45:44', '40', '1');
INSERT INTO `topic` VALUES ('4296', '26', '4', '静态包过滤和动态包过滤有什么不同？', 'f7e63bcc-6a19-4f2c-a4f0-524b40379055.', null, null, null, null, null, null, ' 静态包过滤在遇到利用动态端口的协议时会发生困难，如FTP，防火墙事先无法知道哪些端口需要打开，就需要将所有可能用到的端口打开，会给安全带来不必要的隐患。      而状态检测通过检查应用程序信息(如FTP的PORT和PASV命令)，来判断此端口是否需要临时打开，而当传输结束时，端口又马上恢复为关闭状态。', '', '0', '2017-12-25 20:45:52', '47', '1');
INSERT INTO `topic` VALUES ('4297', '26', '4', '常用的数据库有：', '3f5231d5-2394-446e-bd27-16a1394d525c.', null, null, null, null, null, null, 'SQL  SERVER、MYSQL、ACCESS、ORACLE、SYBASE', '', '0', '2017-12-25 20:46:15', '43', '1');
INSERT INTO `topic` VALUES ('4298', '26', '2', '运行\r\n\r\npasswd\r\n\r\n改变用户的口令，任何用户都需要输入原来的密码。\r\n', '3b18dd3b-5a82-4d8e-b4bb-ca1ca7918244.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:46:32', '40', '1');
INSERT INTO `topic` VALUES ('4299', '4', '4', 'Mybatis执行批量插入，能返回数据库主键列表吗？', 'c7292348-4cd0-4f00-ab40-0737078a91f1.', null, null, null, null, null, null, '能，JDBC都能，MYBATIS当然也能。', '', '0', '2017-12-25 20:46:33', '51', '1');
INSERT INTO `topic` VALUES ('4300', '18', '3', 'Linux 采用    （）\r\n    算法，淘汰最近没有访问的\r\n \r\n物理页，从而空出内存空间以调入必须的程序段或数据。', '61721d0f-faad-4676-b53e-13367c43017c.', null, null, null, null, null, null, 'LRU 算法（最近最少使用）', '', '0', '2017-12-25 20:46:41', '29', '1');
INSERT INTO `topic` VALUES ('4301', '26', '4', 'fail-fast与fail-safe有什么区别？', '144c8d80-a5cc-414d-bb0d-494bed5dde98.', null, null, null, null, null, null, 'ITERATOR的FAIL-FAST属性与当前的集合共同起作用，因此它不会受到集合中任何改动的影响。JAVA.UTIL包中的所有集合类都被设计为FAIL-FAST的，而JAVA.UTIL.CONCURRENT中的集合类都为FAIL-SAFE的。FAIL-FAST迭代器抛出CONCURRENTMODIFICATIONEXCEPTION，而FAIL-SAFE迭代器从不抛出CONCURRENTMODIFICATIONEXCEPTION。', '', '0', '2017-12-25 20:46:44', '50', '1');
INSERT INTO `topic` VALUES ('4302', '4', '4', 'Mybatis动态sql是做什么的？都有哪些动态sql？能简述一下动态sql的执行原理不？', '87dd50f8-0d42-41dc-8e9b-c1c42f3f6cac.', null, null, null, null, null, null, '第一种是使用<RESULTMAP>标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用SQL列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是NAME，小写，但是列名不区分大小写，MYBATIS会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NAME，MYBATIS一样可以正常工作。\r\n\r\n有了列名与属性名的映射关系后，MYBATIS通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。', '', '0', '2017-12-25 20:47:00', '51', '1');
INSERT INTO `topic` VALUES ('4303', '3', '4', '在迭代一个集合的时候，如何避免ConcurrentModificationException？', '09eb005a-316b-4461-afab-1a19c3ab273a.', null, null, null, null, null, null, '在遍历一个集合的时候，我们可以使用并发集合类来避免CONCURRENTMODIFICATIONEXCEPTION，比如使用COPYONWRITEARRAYLIST，而不是ARRAYLIST。', '', '0', '2017-12-25 20:47:32', '50', '1');
INSERT INTO `topic` VALUES ('4304', '26', '4', 'Linux防火墙(Iptables)重启系统生效的开启和关闭', '924f4676-2004-48b5-b22c-4ffc6dc0dde7.', null, null, null, null, null, null, '开启： CHKCONFIG IPTABLES ON  \r\n关闭： CHKCONFIG IPTABLES OFF ', '', '0', '2017-12-25 20:48:05', '28', '1');
INSERT INTO `topic` VALUES ('4305', '18', '1', 'GNome 桌面上的回收站，其实是什么？', '6b66e55d-e710-4d36-be35-3c37af3cbc85.', '首选项菜单中的键盘选项可设置文本区域内的光标闪烁/不闪烁 ', '管理菜单中的键盘选项可设置键盘的类型，如英联邦式。', '管理菜单中的键盘选项可设置键盘的型号，如罗技无影手。', '首选项菜单中的键盘选项可设置重复键的延时。', '', '', 'C', '', '0', '2017-12-25 20:48:05', '29', '1');
INSERT INTO `topic` VALUES ('4307', '26', '4', '解释VPN的基本概念。', 'cf0d8ce0-84d1-4344-a6c8-3fd99ebd13db.', null, null, null, null, null, null, 'PN是VIRTUAL PRIVATE NETWORK的缩写，是将物理分布在不同地点的网络通过公用骨干网，尤其是INTERNET连接而成的逻辑上的虚拟子网。      VIRTUAL是针对传统的企业“专用网络”而言的。VPN则是利用公共网络资源和设备建立一个逻辑上的专用通道，尽管没有自己的专用线路，但它却可以提供和专用网络同样的功能。      PRIVATE表示VPN是被特定企业或用户私有的，公共网络上只有经过授权的用户才可以使用。在该通道内传输的数据经过了加密和认证，保证了传输内容的完整性和机密性。', '', '0', '2017-12-25 20:48:38', '47', '1');
INSERT INTO `topic` VALUES ('4308', '26', '2', '在目录\r\n\r\n/etc/rc.d/rc5.d\r\n\r\n下，有很多以\r\n\r\nK\r\n\r\n和\r\n\r\nS\r\n\r\n开头的链接文件，这里的以\r\n\r\nS\r\n\r\n开头的文件表示\r\n\r\nstop(\r\n\r\n停止\r\n\r\n)\r\n\r\n意思。\r\n', '7d9b18d1-71be-46e6-b691-bc1ede32417e.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:48:45', '40', '1');
INSERT INTO `topic` VALUES ('4309', '26', '2', ' kill\r\n\r\n命令可以向一个正在运行的前台进程发送信号，终止进程的运行。\r\n', '837fab6d-6e0a-4b49-9f4c-06b1c75f8ef3.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:48:56', '40', '1');
INSERT INTO `topic` VALUES ('4310', '3', '4', '我们能在 Switch 中使用 String 吗？', 'd658e4a2-b82b-4b31-b1c3-cc0543d9f057.', null, null, null, null, null, null, 'JAVA 中的 STRING 不可变是因为 JAVA 的设计者认为字符串使用非常频繁，将字符串设置为不可变可以允许多个客户端之间共享相同的字符串。更详细的内容参见答案。', '', '0', '2017-12-25 20:48:59', '72', '1');
INSERT INTO `topic` VALUES ('4311', '3', '4', '为何Iterator接口没有具体的实现？', '9a72ac34-13e8-459e-afa3-54057052b5f9.', null, null, null, null, null, null, 'ITERATOR接口定义了遍历集合的方法，但它的实现则是集合实现类的责任。每个能够返回用于遍历的ITERATOR的集合类都有它自己的ITERATOR实现内部类。\r\n\r\n这就允许集合类去选择迭代器是FAIL-FAST还是FAIL-SAFE的。比如，ARRAYLIST迭代器是FAIL-FAST的，而COPYONWRITEARRAYLIST迭代器是FAIL-SAFE的。', '', '0', '2017-12-25 20:49:03', '50', '1');
INSERT INTO `topic` VALUES ('4312', '26', '2', '/tmp\r\n\r\n目录主要用于存储程序运行时生成的临时文件。\r\n', '0d629199-4d35-432b-9f21-29926c7365aa.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:49:07', '40', '1');
INSERT INTO `topic` VALUES ('4314', '26', '2', '\r\n\r\n当客户机连接一个\r\n\r\nshare\r\n\r\n安全级的服务器时，\r\n\r\n它在连接共享之前需要首先提\r\n\r\n供正确的帐号和密码以登录到该服务器。\r\n', 'c6cd7e11-2899-48ec-a0ed-5a829d293703.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:49:18', '40', '1');
INSERT INTO `topic` VALUES ('4315', '26', '2', '在当前目录下解压归档文件\r\n\r\nthis.tar.gz \r\n\r\n，我们可以使用命令：\r\n\r\n$tar \r\n\r\nxvzf \r\n\r\nthis.tar.gz\r\n\r\n。\r\n', 'a3286e3d-89df-457d-8416-53bcbc6fc8fd.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:49:27', '40', '1');
INSERT INTO `topic` VALUES ('4316', '33', '4', 'Java 中的构造器链是什么？(', '7520731f-4bda-4a2a-82c6-84e098844964.', null, null, null, null, null, null, '当你从一个构造器中调用另一个构造器，就是JAVA 中的构造器链。这种情况只在重载了类的构造器的时候才会出现。', '', '0', '2017-12-25 20:49:36', '72', '1');
INSERT INTO `topic` VALUES ('4317', '26', '4', 'UnsupportedOperationException是什么？', '3c08f99c-b56d-4d85-b82f-8504352f6cbc.', null, null, null, null, null, null, 'UNSUPPORTEDOPERATIONEXCEPTION是用于表明操作不支持的异常。在JDK类中已被大量运用，在集合框架JAVA.UTIL.COLLECTIONS.UNMODIFIABLECOLLECTION将会在所有ADD和REMOVE操作中抛出这个异常。', '', '0', '2017-12-25 20:49:43', '50', '1');
INSERT INTO `topic` VALUES ('4318', '4', '4', 'Mybatis能执行一对一、一对多的关联查询吗？都有哪些实现方式，以及它们之间的区别。', '0e9e4d3b-c155-4a2b-b52a-63a983da9828.', null, null, null, null, null, null, '能，MYBATIS不仅可以执行一对一、一对多的关联查询，还可以执行多对一，多对多的关联查询，多对一查询，其实就是一对一查询，只需要把SELECTONE()修改为SELECTLIST()即可；多对多查询，其实就是一对多查询，只需要把SELECTONE()修改为SELECTLIST()即可。\r\n\r\n关联对象查询，有两种实现方式，一种是单独发送一个SQL去查询关联对象，赋给主对象，然后返回主对象。另一种是使用嵌套查询，嵌套查询的含义为使用JOIN查询，一部分列是A对象的属性值，另外一部分列是关联对象B的属性值，好处是只发一个SQL查询，就可以把主对象和其关联对象查出来。\r\n\r\n那么问题来了，JOIN查询出来100条记录，如何确定主对象是5个，而不是100个？其去重复的原理是<RESULTMAP>标签内的<ID>子标签，指定了唯一确定一条记录的ID列，MYBATIS根据<ID>列值来完成100条记录的去重复功能，<ID>可以有多个，代表了联合主键的语意。\r\n\r\n同样主对象的关联对象，也是根据这个原理去重复的，尽管一般情况下，只有主对象会有重复记录，关联对象一般不会重复。\r\n\r\n举例：下面JOIN查询出来6条记录，一、二列是TEACHER对象列，第三列为STUDENT对象列，MYBATIS去重复处理后，结果为1个老师6个学生，而不是6个老师6个学生。\r\n\r\n       T_ID    T_NAME           S_ID\r\n\r\n|          1 | TEACHER      |      38 |\r\n|          1 | TEACHER      |      39 |\r\n|          1 | TEACHER      |      40 |\r\n|          1 | TEACHER      |      41 |\r\n|          1 | TEACHER      |      42 |\r\n|          1 | TEACHER      |      43 |', '', '0', '2017-12-25 20:49:45', '51', '1');
INSERT INTO `topic` VALUES ('4319', '33', '4', '64 位 JVM 中，int 的长度是多数？', '54002bf1-a516-4011-9f55-a4fef8639e10.', null, null, null, null, null, null, 'JAVA 中，INT 类型变量的长度是一个固定值，与平台无关，都是 32 位。意思就是说，在 32 位 和 64 位 的JAVA 虚拟机中，INT 类型的长度是相同的。', '', '0', '2017-12-25 20:49:55', '72', '1');
INSERT INTO `topic` VALUES ('4320', '18', '4', 'C/S,B/S的含义？', '9b96a6b1-acda-448b-96c4-5a90de0d3374.', null, null, null, null, null, null, 'C/S又称CLIENT/SERVER或客户/服务器模式。服务器通常采用高性能的PC、工作站或小型机，并采用大型数据库系统，如ORACLE、SYBASE、INFORMIX或 SQL SERVER。客户端需要安装专用的客户端软件。  B/S结构（BROWSER/SERVER，浏览器/服务器模式），是WEB兴起后的一种网络结构模式，WEB浏览器是客户端最主要的应用软件。这种模式统一了客户端，将系统功能实现的核心部分集中到服务器上，简化了系统的开发、维护和使用。客户机上只要安装一个浏览器，服务器安装SQL SERVER、ORACLE、MYSQL等数据库。浏览器通过WEB SERVER 同数据库进行数据交互。', '', '0', '2017-12-25 20:50:01', '43', '1');
INSERT INTO `topic` VALUES ('4322', '4', '4', 'Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？', '0aada601-81a4-4916-9d0e-1720cccccdfd.', null, null, null, null, null, null, 'MYBATIS仅支持ASSOCIATION关联对象和COLLECTION关联集合对象的延迟加载，ASSOCIATION指的就是一对一，COLLECTION指的就是一对多查询。在MYBATIS配置文件中，可以配置是否启用延迟加载LAZYLOADINGENABLED=TRUE|FALSE。\r\n\r\n它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，比如调用A.GETB().GETNAME()，拦截器INVOKE()方法发现A.GETB()是NULL值，那么就会单独发送事先保存好的查询关联B对象的SQL，把B查询上来，然后调用A.SETB(B)，于是A的对象B属性就有值了，接着完成A.GETB().GETNAME()方法的调用。这就是延迟加载的基本原理。\r\n\r\n当然了，不光是MYBATIS，几乎所有的包括HIBERNATE，支持延迟加载的原理都是一样的。', '', '0', '2017-12-25 20:50:17', '51', '1');
INSERT INTO `topic` VALUES ('4323', '4', '4', 'Mybatis的Xml映射文件中，不同的Xml映射文件，id是否可以重复？', 'f8176e29-d86d-4d34-b6e3-d1f4556ab843.', null, null, null, null, null, null, '不同的XML映射文件，如果配置了NAMESPACE，那么ID可以重复；如果没有配置NAMESPACE，那么ID不能重复；毕竟NAMESPACE不是必须的，只是最佳实践而已。\r\n\r\n原因就是NAMESPACE+ID是作为MAP<STRING, MAPPEDSTATEMENT>的KEY使用的，如果没有NAMESPACE，就剩下ID，那么，ID重复会导致数据互相覆盖。有了NAMESPACE，自然ID就可以重复，NAMESPACE不同，NAMESPACE+ID自然也就不同。', '', '0', '2017-12-25 20:50:46', '51', '1');
INSERT INTO `topic` VALUES ('4324', '3', '4', '在Java中，HashMap是如何工作的？', '5c6d0f8d-1360-40fb-a7b8-83651ebbd1d8.', null, null, null, null, null, null, 'HASHMAP在MAP.ENTRY静态内部类实现中存储KEY-VALUE对。HASHMAP使用哈希算法，在PUT和GET方法中，它使用HASHCODE()和EQUALS()方法。当我们通过传递KEY-VALUE对调用PUT方法的时候，HASHMAP使用KEY HASHCODE()和哈希算法来找出存储KEY-VALUE对的索引。ENTRY存储在LINKEDLIST中，所以如果存在ENTRY，它使用EQUALS()方法来检查传递的KEY是否已经存在，如果存在，它会覆盖VALUE，如果不存在，它会创建一个新的ENTRY然后保存。当我们通过传递KEY调用GET方法时，它再次使用HASHCODE()来找到数组中的索引，然后使用EQUALS()方法找出正确的ENTRY，然后返回它的值。下面的图片解释了详细内容。\r\n\r\n其它关于HASHMAP比较重要的问题是容量、负荷系数和阀值调整。HASHMAP默认的初始容量是32，负荷系数是0.75。阀值是为负荷系数乘以容量，无论何时我们尝试添加一个ENTRY，如果MAP的大小比阀值大的时候，HASHMAP会对MAP的内容进行重新哈希，且使用更大的容量。容量总是2的幂，所以如果你知道你需要存储大量的KEY-VALUE对，比如缓存从数据库里面拉取的数据，使用正确的容量和负荷系数对HASHMAP进行初始化是个不错的做法。', '', '0', '2017-12-25 20:51:25', '50', '1');
INSERT INTO `topic` VALUES ('4325', '3', '4', '我们能否使用任何类作为Map的key', '50a2d5c2-38d1-4cec-bdfb-8265ec3684dd.', null, null, null, null, null, null, '我们可以使用任何类作为MAP的KEY，然而在使用它们之前，需要考虑以下几点：\r\n\r\n（1）如果类重写了EQUALS()方法，它也应该重写HASHCODE()方法。\r\n\r\n（2）类的所有实例需要遵循与EQUALS()和HASHCODE()相关的规则。请参考之前提到的这些规则。\r\n\r\n（3）如果一个类没有使用EQUALS()，你不应该在HASHCODE()中使用它。\r\n\r\n（4）用户自定义KEY类的最佳实践是使之为不可变的，这样，HASHCODE()值可以被缓存起来，拥有更好的性能。不可变的类也可以确保HASHCODE()和EQUALS()在未来不会改变，这样就会解决与可变相关的问题了。\r\n\r\n比如，我有一个类MYKEY，在HASHMAP中使用它。\r\n\r\n//传递给MYKEY的NAME参数被用于EQUALS()和HASHCODE()中\r\nMYKEY KEY = NEW MYKEY(\'PANKAJ\'); //ASSUME HASHCODE=1234\r\nMYHASHMAP.PUT(KEY, \'VALUE\');\r\n// 以下的代码会改变KEY的HASHCODE()和EQUALS()值\r\nKEY.SETNAME(\'AMIT\'); //ASSUME NEW HASHCODE=7890\r\n//下面会返回NULL，因为HASHMAP会尝试查找存储同样索引的KEY，而KEY已被改变了，匹配失败，返回NULL\r\nMYHASHMAP.GET(NEW MYKEY(\'PANKAJ\'));\r\n\r\n那就是为何STRING和INTEGER被作为HASHMAP的KEY大量使用。', '', '0', '2017-12-25 20:53:11', '50', '1');
INSERT INTO `topic` VALUES ('4326', '33', '4', '32 位和 64 位的 JVM，int 类型变量的长度是多数？', '7a5558fa-03c6-4501-91f7-42c2347aa9eb.', null, null, null, null, null, null, '32 位和 64 位的 JVM 中，INT 类型变量的长度是相同的，都是 32 位或者 4 个字节。', '', '0', '2017-12-25 20:53:34', '72', '1');
INSERT INTO `topic` VALUES ('4327', '26', '4', '什么是网络蠕虫？它的传播途径是什么？', 'e63749c6-14a6-42f0-958e-c141a5a2b9c1.', null, null, null, null, null, null, '网络蠕虫是一种可以通过网络（永久连接网络或拨号网络）进行自身复制的病毒程序。一旦在系统中激活，蠕虫可以表现得象计算机病毒或细菌。可以向系统注入特洛伊木马程序，或者进行任何次数的破坏或毁灭行动。普通计算机病毒需要在计算机的硬件或文件系统中繁殖，而典型的蠕虫程序会在内存中维持一个活动副本。蠕虫是一个独立运行的程序，自身不改变其他的程序，但可以携带一个改变其他程序功能的病毒。', '', '0', '2017-12-25 20:53:35', '47', '1');
INSERT INTO `topic` VALUES ('4328', '26', '2', '我们用\r\n\r\nedquota\r\n\r\n修改用户或组的磁盘限额时，必须将用户或组的硬限额\r\n\r\n(hard)\r\n\r\n设置得小于软限额\r\n\r\n(soft)\r\n\r\n的数值。\r\n', '76397bfb-9e22-43dc-8ea2-ad7ed3b7bcfb.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 20:53:37', '40', '1');
INSERT INTO `topic` VALUES ('4329', '26', '4', '简述物联网？简述云计算？简述大数据？', '7ba641c3-8018-40b0-9f4e-59e0859d3a85.', null, null, null, null, null, null, '物联网即通过射频识别（RFID）(RFID+互联网）、红外感应器、全球定位系统、激光扫描器、气体感应器等信息传感设备，按约定的协议，把任何物品与互联网连接起来，进行信息交换和通讯，以实现智能化识别、定位、跟踪、监控和管理的一种网络。简而言之，物联网就是“物物相连的互联网”。云计算是一种按使用量付费的模式，这种模式提供可用的、便捷的、按需的网络访问， 进入可配置的计算资源共享池（资源包括网络，服务器，存储，应用软件，服务），这些资源能够被快速提供，只需投入很少的管理工作，或与服务供应商进行很少的交互。  大数据是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力来适应海量、高增长率和多样化的信息资产。一种规模大到在获取、存储、管理、分析方面大大超出了传统数据库软件工具能力范围的数据集合，具有海量的数据规模、快速的数据流转、多样的数据类型和价值密度低四大特征。', '', '0', '2017-12-25 20:53:39', '43', '1');
INSERT INTO `topic` VALUES ('4333', '26', '2', '/dev/null \r\n\r\n是空的虚拟设备，属于字符设备类型。\r\n', '727d1a52-5a9d-4a4f-b9c8-8ba15d5b0cc0.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:53:54', '40', '1');
INSERT INTO `topic` VALUES ('4334', '18', '1', 'Nautilus 中可设置的文件的属性不包括哪个内容？', '03faed8b-f55b-4a9d-b75b-659ae47bb97b.', '文件管理器  ', '我的电脑', '控制中心', '屏幕保护程序', '', '', 'C', '', '0', '2017-12-25 20:54:09', '29', '1');
INSERT INTO `topic` VALUES ('4337', '4', '4', 'Map接口提供了哪些不同的集合视图？', 'dc21467b-fbde-4443-b2ce-f84ceb92c7ab.', null, null, null, null, null, null, 'MAP接口提供三个集合视图：SET KEYSET()：返回MAP中包含的所有KEY的一个SET视图。\r\nCOLLECTION VALUES()：返回一个MAP中包含的所有VALUE的一个COLLECTION视图。\r\nSET<MAP.ENTRY<K,V>> ENTRYSET()：返回一个MAP钟包含的所有映射的一个集合视图。', '', '0', '2017-12-25 20:54:17', '50', '1');
INSERT INTO `topic` VALUES ('4338', '26', '4', '在开启了Linux防火墙(Iptables)时，做如下设置，开启25和110端口，\r\n修改/etc/sysconfig/iptables 文件，添加以下内容：', '1fb44d18-be8d-4885-a671-a3654b0f6968.', null, null, null, null, null, null, '-A RH-FIREWALL-1-INPUT -M STATE --STATE NEW -P TCP -M TCP --DPORT 25 --SYN -J ACCEPT  \r\n \r\n-A RH-FIREWALL-1-INPUT -M STATE --STATE NEW -P TCP -M TCP --DPORT 110 --SYN -J ACCEPT ', '', '0', '2017-12-25 20:54:26', '28', '1');
INSERT INTO `topic` VALUES ('4339', '3', '4', '已知表达式int m[]={0,1,2,3,4,5,6};下面哪个表达式的值与数组元素个数相等？', '5e06889f-946f-4f50-bfcf-25893a55ca3d.', null, null, null, null, null, null, 'M.LENGTH', '', '0', '2017-12-25 20:54:28', '53', '1');
INSERT INTO `topic` VALUES ('4340', '3', '4', 'WeakHashMap 是怎么工作的？', '9a88a6a1-757f-4164-a325-bd1e9c751a27.', null, null, null, null, null, null, '虽然 WEAKREFERENCE 与 SOFTREFERENCE 都有利于提高 GC 和 内存的效率，但是 WEAKHASHMAP 的工作与正常的 HASHMAP 类似，但是使用弱引用作为 KEY，意思就是当 KEY 对象没有任何引用时，KEY/VALUE 将会被回收。', '', '0', '2017-12-25 20:54:37', '72', '1');
INSERT INTO `topic` VALUES ('4341', '3', '4', '在Java  Applet程序用户自定义的Applet子类中，一般需要覆盖父类的()方法来完成一些画图操作。', '00964112-81f0-4d77-a175-492767ebcb26.', null, null, null, null, null, null, 'PAINT( )', '', '0', '2017-12-25 20:54:53', '53', '1');
INSERT INTO `topic` VALUES ('4342', '3', '4', '如下哪个字符串是Java中的标识符？()。', '83a47900-c9ba-4df3-8ef9-591bbd3e9cb5.', null, null, null, null, null, null, 'FIELDNAME', '', '0', '2017-12-25 20:55:06', '53', '1');
INSERT INTO `topic` VALUES ('4343', '26', '4', '试述RAID 0、RAID 1、RAID 3、RAID 5方案。', '582652a5-2f3d-47e3-b367-b813e4263fb4.', null, null, null, null, null, null, '1）RAID0：无冗余、无校验的磁盘阵列。RAID0至少使用两个磁盘驱动器，并将数据分成从512字节到数兆节的若干块（数据条带），这些数据块被交替写到磁盘中。RAID0不适用于对可靠性要求高的关键任务环境，但却非常适合于对性能要求较高的视频或图像编辑。  （2）RAID1：镜像磁盘阵列。每一个磁盘驱动器都有一个镜像磁盘驱动器，镜像磁盘驱动器随时保持与原磁盘驱动器的内容一致。RAID1具有较高的安全性，但只有一半的磁盘空间被用来存储数据。为了实时保护镜像磁盘数据的一致性，RAID1磁盘控制器的负载相当大，在此性能上没有提高。RAID1主要用于在对数据安全性要求很高，而且要求能够快速恢复损坏的数据的场合。  （3）RAID3：带奇偶校验码的并行传送。RAID3使用一个专门的磁盘存放所有的校验数据，而在剩余的磁盘中创建带区集分散数据的读写操作。RAID3适合用于数据密集型环境或单一用户环境，尤其有益于要访问较长的连续记录，例如数据库和WEB服务器等。  （4）RAID5：无独立校验盘的奇偶校验磁盘阵列。RAID5把校验块分散到所有的数据盘中。RAID5使用了一种特殊的算法，可以计算出任何一个带区校验块的存放位置，这样就可以确保任何对校验块进行的读写操作都会在所有的RAID磁盘中进行均衡，从而消除了产生瓶颈的可能。RAID5能提供较完美的性能，因而也是被广泛应用的一种磁盘阵列方案。它适合于I/O密集、高读/写比率的应用程序，如事务处理等。为了具有RAID5级的冗余度，我们至少需要三个磁盘组成的磁盘阵列。RAID5可以通过磁盘阵列控制器硬件实现，也可以通过某些网络操作系统软件实现。 ', '', '0', '2017-12-25 20:55:27', '47', '1');
INSERT INTO `topic` VALUES ('4344', '3', '4', 'Java中main()函数的值是什么类型?', '8fe8f111-579a-4fe9-b9de-d297494feb25.', null, null, null, null, null, null, 'VOID', '', '0', '2017-12-25 20:55:54', '53', '1');
INSERT INTO `topic` VALUES ('4345', '26', '4', '简述Web安全目标及技术？', '90722e4f-59cf-4845-9ac2-6b7a35a34af1.', null, null, null, null, null, null, 'WEB安全目标是保护WEB服务器及其数据的安全、保护WEB服务器和用户之间传递信息的安全、保护终端用户计算机及其他人连入INTERNET的设备的安全。WEB安全技术主要包括WEB服务器安全技术、WEB应用服务安全技术和WEB浏览器安全技术。 ', '', '0', '2017-12-25 20:56:07', '47', '1');
INSERT INTO `topic` VALUES ('4346', '18', '4', '数据如何各层之间传输？', 'd7dd459d-abe7-4548-8a6b-8d8ba72118e2.', null, null, null, null, null, null, '物理层，数据链路层，网络层属于OSI模型的低三层，负责创建网络通信连接的链路，传输层，会话层，表示层和应用层是OSI模型的高四层，具体负责端到端的数据通信。 每层完成一定的功能，每层都直接为其上层提供服务，并且所有层次都互相支持，而网络通信则可以自上而下（在发送端）或者自下而上（在接收端）双向进行。  当然，并不是所有通信都是要经过OSI的全部七层，如物理接口之间的转接，只需要物理层中进行即可；而路由器与路由器之间的连接则只需网络层以下的三层。', '', '0', '2017-12-25 20:56:10', '43', '1');
INSERT INTO `topic` VALUES ('4347', '26', '4', '数据备份的种类有哪些？常用的方法有哪些？', '21144535-74a9-48c3-bd7d-e36d50c6a3c5.', null, null, null, null, null, null, '数据备份按照备份时所备份数据的特点可以分为三种：完全备份、增量备份和系统备份。根据数据备份所使用的存储介质种类可以将数据备份方法分成如下若干种：软盘备份、磁带备份、可移动存储备份、可移动硬盘备份、本机多硬盘备份和网络备份。 ', '', '0', '2017-12-25 20:56:23', '47', '1');
INSERT INTO `topic` VALUES ('4348', '3', '4', 'JVM 选项 -XX:+UseCompressedOops 有什么作用？为什么要使用？', '423001c4-c0e1-42ca-8fd7-fb6577023278.', null, null, null, null, null, null, '当你将你的应用从 32 位的 JVM 迁移到 64 位的 JVM 时，由于对象的指针从 32 位增加到了 64 位，因此堆内存会突然增加，差不多要翻倍。这也会对 CPU 缓存（容量比内存小很多）的数据产生不利的影响。因为，迁移到 64 位的 JVM 主要动机在于可以指定最大堆大小，通过压缩 OOP 可以节省一定的内存。通过 -XX:+USECOMPRESSEDOOPS 选项，JVM 会使用 32 位的 OOP，而不是 64 位的 OOP。', '', '0', '2017-12-25 20:56:24', '72', '1');
INSERT INTO `topic` VALUES ('4349', '4', '4', 'Mybatis中如何执行批处理？', '4a17fb33-62b5-422d-ac53-5c19b6d74184.', null, null, null, null, null, null, '使用BATCHEXECUTOR完成批处理。', '', '0', '2017-12-25 20:56:27', '51', '1');
INSERT INTO `topic` VALUES ('4350', '3', '4', '如果一个Java程序中有多个类，其中有一个public类，编译之后能生成()个类文件', 'a3313502-1f28-4f1f-a4c8-b1eefc7ad9a7.', null, null, null, null, null, null, '一个', '', '0', '2017-12-25 20:56:38', '53', '1');
INSERT INTO `topic` VALUES ('4351', '3', '4', '32 位 JVM 和 64 位 JVM 的最大堆内存分别是多数？', 'b7fd1cca-2406-476a-b54c-ed8791eeb8b4.', null, null, null, null, null, null, '理论上说上 32 位的 JVM 堆内存可以到达 2^32，即 4GB，但实际上会比这个小很多。不同操作系统之间不同，如 WINDOWS 系统大约 1.5 GB，SOLARIS 大约 3GB。64 位 JVM允许指定最大的堆内存，理论上可以达到 2^64，这是一个非常大的数字，实际上你可以指定堆内存大小到 100GB。甚至有的 JVM，如 AZUL，堆内存到 1000G 都是可能的。', '', '0', '2017-12-25 20:56:39', '72', '1');
INSERT INTO `topic` VALUES ('4352', '4', '4', 'Mybatis都有哪些Executor执行器？它们之间的区别是什么？', 'bcf8fb32-1822-46c3-b949-67b3fb5ba006.', null, null, null, null, null, null, 'MYBATIS有三种基本的EXECUTOR执行器，SIMPLEEXECUTOR、REUSEEXECUTOR、BATCHEXECUTOR。\r\n\r\nSIMPLEEXECUTOR：每执行一次UPDATE或SELECT，就开启一个STATEMENT对象，用完立刻关闭STATEMENT对象。\r\n\r\nREUSEEXECUTOR：执行UPDATE或SELECT，以SQL作为KEY查找STATEMENT对象，存在就使用，不存在就创建，用完后，不关闭STATEMENT对象，而是放置于MAP<STRING, STATEMENT>内，供下一次使用。简言之，就是重复使用STATEMENT对象。\r\n\r\nBATCHEXECUTOR：执行UPDATE（没有SELECT，JDBC批处理不支持SELECT），将所有SQL都添加到批处理中（ADDBATCH()），等待统一执行（EXECUTEBATCH()），它缓存了多个STATEMENT对象，每个STATEMENT对象都是ADDBATCH()完毕后，等待逐一执行EXECUTEBATCH()批处理。与JDBC批处理相同。\r\n\r\n作用范围：EXECUTOR的这些特点，都严格限制在SQLSESSION生命周期范围内。', '', '0', '2017-12-25 20:56:48', '51', '1');
INSERT INTO `topic` VALUES ('4353', '33', '4', 'JRE、JDK、JVM 及 JIT 之间有什么不同？', '8f0fa89e-91ad-4269-8232-04630caba1d3.', null, null, null, null, null, null, 'JRE 代表 JAVA 运行时（JAVA RUN-TIME），是运行 JAVA 引用所必须的。JDK 代表 JAVA 开发工具（JAVA DEVELOPMENT KIT），是 JAVA 程序的开发工具，如 JAVA 编译器，它也包含 JRE。JVM 代表 JAVA 虚拟机（JAVA VIRTUAL MACHINE），它的责任是运行 JAVA 应用。JIT 代表即时编译（JUST IN TIME COMPILATION），当代码执行的次数超过一定的阈值时，会将 JAVA 字节码转换为本地代码，如，主要的热点代码会被准换为本地代码，这样有利大幅度提高 JAVA 应用的性能。', '', '0', '2017-12-25 20:56:57', '72', '1');
INSERT INTO `topic` VALUES ('4354', '4', '4', 'Mybatis中如何指定使用哪一种Executor执行器？', '1b8886ea-4f55-491d-8207-ecd1c439fb3a.', null, null, null, null, null, null, '在MYBATIS配置文件中，可以指定默认的EXECUTORTYPE执行器类型，也可以手动给DEFAULTSQLSESSIONFACTORY的创建SQLSESSION的方法传递EXECUTORTYPE类型参数。', '', '0', '2017-12-25 20:56:58', '51', '1');
INSERT INTO `topic` VALUES ('4355', '33', '4', '解释 Java 堆空间及 GC？', 'afec1fcd-0b62-458f-b4aa-a9b15d36401f.', null, null, null, null, null, null, '当通过 JAVA 命令启动 JAVA 进程的时候，会为它分配内存。内存的一部分用于创建堆空间，当程序中创建对象的时候，就从对空间中分配内存。GC 是 JVM 内部的一个进程，回收无效对象的内存用于将来的分配。', '', '0', '2017-12-25 20:57:15', '72', '1');
INSERT INTO `topic` VALUES ('4356', '18', '4', '什么是 MBR？如何恢复MBR？', 'c796d49e-2bfd-4a03-a497-1b7b6ec874c2.', null, null, null, null, null, null, 'MBR为硬盘引导扇区,可以98启动盘启动计算机并\r\n输入FDISK /MBR可恢复', '', '0', '2017-12-25 20:57:20', '43', '1');
INSERT INTO `topic` VALUES ('4357', '26', '2', '调整开机装置的顺序不一定要重新开机并进入BIOS系统调整', '7d7e7241-2a6c-4b6a-9b39-bd46cf62b9ac.', null, null, null, null, null, null, '错误', '调整开机装置的顺序必须要重新开机并进入BIOS系统调整', '0', '2017-12-25 20:57:22', '28', '1');
INSERT INTO `topic` VALUES ('4358', '3', '4', '你能保证 GC 执行吗？', '009f83ac-c5a9-41b3-b7af-1775934718e2.', null, null, null, null, null, null, '不能，虽然你可以调用 SYSTEM.GC() 或者 RUNTIME.GC()，但是没有办法保证 GC 的执行。', '', '0', '2017-12-25 20:57:33', '72', '1');
INSERT INTO `topic` VALUES ('4359', '33', '4', '怎么获取 Java 程序使用的内存？堆使用的百分比？', 'd714ed17-9b00-4af8-be13-05d400370d05.', null, null, null, null, null, null, '可以通过 JAVA.LANG.RUNTIME 类中与内存相关方法来获取剩余的内存，总内存及最大堆内存。通过这些方法你也可以获取到堆使用的百分比及堆内存的剩余空间。RUNTIME.FREEMEMORY() 方法返回剩余空间的字节数，RUNTIME.TOTALMEMORY() 方法总内存的字节数，RUNTIME.MAXMEMORY() 返回最大内存的字节数。', '', '0', '2017-12-25 20:57:48', '72', '1');
INSERT INTO `topic` VALUES ('4360', '26', '2', '联机帮助系统有man及info两个常见的命令；', '109c7ce6-c70a-41e3-a168-0b593e7517ad.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 20:57:56', '28', '1');
INSERT INTO `topic` VALUES ('4362', '4', '4', 'Mybatis是否可以映射Enum枚举类？', 'ac0b29bf-9d1d-4dd2-bfea-a8d383af808f.', null, null, null, null, null, null, 'MYBATIS可以映射枚举类，不单可以映射枚举类，MYBATIS可以映射任何对象到表的一列上。映射方式为自定义一个TYPEHANDLER，实现TYPEHANDLER的SETPARAMETER()和GETRESULT()接口方法。TYPEHANDLER有两个作用，一是完成从JAVATYPE至JDBCTYPE的转换，二是完成JDBCTYPE至JAVATYPE的转换，体现为SETPARAMETER()和GETRESULT()两个方法，分别代表设置SQL问号占位符参数和获取列查询结果。', '', '0', '2017-12-25 20:58:17', '51', '1');
INSERT INTO `topic` VALUES ('4363', '26', '4', '对目录来说，权限的效能为：', '9c532827-6c20-40f6-b93a-6f2e732f6d67.', null, null, null, null, null, null, 'R (READ CONTENTS IN DIRECTORY)\r\nW (MODIFY CONTENTS OF DIRECTORY)\r\nX (ACCESS DIRECTORY)\r\n', '', '0', '2017-12-25 20:59:09', '28', '1');
INSERT INTO `topic` VALUES ('4364', '26', '4', 'Map接口中返回map中包含的所有key的一个Set视图的原理', '077b6e42-dc3b-4d25-9ba6-ebf5348a3410.', null, null, null, null, null, null, '集合是受MAP支持的，MAP的变化会在集合中反映出来，反之亦然。当一个迭代器正在遍历一个集合时，若MAP被修改了（除迭代器自身的移除操作以外），迭代器的结果会变为未定义。集合支持通过ITERATOR的REMOVE、SET.REMOVE、REMOVEALL、RETAINALL和CLEAR操作进行元素移除，从MAP中移除对应的映射。它不支持ADD和ADDALL操作。', '', '0', '2017-12-25 20:59:33', '50', '1');
INSERT INTO `topic` VALUES ('4365', '26', '4', '.cat /etc/smb.conf 文件时 如何将 # (井号注释行)和 ; (分号注释行)过滤掉', '078da5b5-46c9-4b0c-a96a-89d69e8434a0.', null, null, null, null, null, null, 'MAN CAT 自行查看相关命令参数', '', '0', '2017-12-25 20:59:43', '43', '1');
INSERT INTO `topic` VALUES ('4367', '26', '4', '什么是入侵检测系统？ ', '5a5fc40e-1ca0-4b5c-a972-46476b53a073.', null, null, null, null, null, null, '入侵检测系统（简称“IDS”）是一种对网络传输进行即时监视，在发现可疑传输时发出警报或者采取主动反应措施的网络安全设备。它与其他网络安全设备的不同之处便在于，IDS是一种积极主动的安全防护技术。 IDS最早出现在1980年4月。 1980年代中期，IDS逐渐发展成为入侵检测专家系统（IDES）。 ', '', '0', '2017-12-25 21:00:17', '47', '1');
INSERT INTO `topic` VALUES ('4369', '3', '4', '定义一个接口必须使用的关键字是（） ', '22b6ab5c-ce29-4ace-b56b-070e6309cb3a.', null, null, null, null, null, null, 'INTERFACE', '', '0', '2017-12-25 21:00:37', '53', '1');
INSERT INTO `topic` VALUES ('4370', '26', '2', '进程可以处于僵死状态，而在当前进程表中仍有记录。', '52cfcee3-f7ce-427d-8ca4-c8bd2cb0fc43.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:00:38', '40', '1');
INSERT INTO `topic` VALUES ('4372', '3', '4', 'Map接口提供的Collection values()的原理是什么', 'aabc3535-9ed4-440e-8a56-863528d49c4a.', null, null, null, null, null, null, '返回一个MAP中包含的所有VALUE的一个COLLECTION视图。这个COLLECTION受MAP支持的，MAP的变化会在COLLECTION中反映出来，反之亦然。当一个迭代器正在遍历一个COLLECTION时，若MAP被修改了（除迭代器自身的移除操作以外），迭代器的结果会变为未定义。集合支持通过ITERATOR的REMOVE、SET.REMOVE、REMOVEALL、RETAINALL和CLEAR操作进行元素移除，从MAP中移除对应的映射。它不支持ADD和ADDALL操作。', '', '0', '2017-12-25 21:00:57', '50', '1');
INSERT INTO `topic` VALUES ('4373', '26', '4', '请说明DES算法的基本过程？ 答：DES加密算法特点：分组比较短、密钥太短、密码生命周期短、运算速度较慢', 'a6f8cc8d-1953-4ef7-b6df-32078da37adf.', null, null, null, null, null, null, 'DES工作的基本原理是，其入口参数有三个:KEY、DATA、MODE。 KEY为加密解密使用的密钥，DATA为加密解密的数据，MODE为其工作模式。当模式为加密模式时，明文按照64位进行分组，形成明文组，KEY用于对数据加密，当模式为解密模式时，KEY用于对数据解密。实际运用中，密钥只用到了64位中的56位，这样才具有高的安全性。 ', '', '0', '2017-12-25 21:01:37', '47', '1');
INSERT INTO `topic` VALUES ('4374', '4', '4', 'Map接口提供的Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()原理是什么', '562f28db-ea4e-4941-80de-cc78d650dfd4.', null, null, null, null, null, null, '返回一个MAP钟包含的所有映射的一个集合视图。这个集合受MAP支持的，MAP的变化会在COLLECTION中反映出来，反之亦然。当一个迭代器正在遍历一个集合时，若MAP被修改了（除迭代器自身的移除操作，以及对迭代器返回的ENTRY进行SETVALUE外），迭代器的结果会变为未定义。集合支持通过ITERATOR的REMOVE、SET.REMOVE、REMOVEALL、RETAINALL和CLEAR操作进行元素移除，从MAP中移除对应的映射。它不支持ADD和ADDALL操作。', '', '0', '2017-12-25 21:01:44', '50', '1');
INSERT INTO `topic` VALUES ('4375', '18', '2', '•	cat -n 与 nl 均可显示行号，但默认的情况下，空白行会不会编号并不相同', '0fd91985-d9b7-4168-846e-729783be2e70.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:02:00', '28', '1');
INSERT INTO `topic` VALUES ('4376', '18', '4', '-e 参数是卸载指定rpm包，如上提示为什么不能卸载？如何才能卸载？', '47998eb8-1304-4dfb-917b-a4fd8ba3b598.', null, null, null, null, null, null, 'REDHAT-LSB-1.3-3.1.EL3.CENTOS.0 与 MDADM-1.5.0-9 这二个包依赖SENDMAIL-8.12.11-4.RHEL3.1这个软件包。卸载时可以加 --NODEPS选', '', '0', '2017-12-25 21:02:11', '43', '1');
INSERT INTO `topic` VALUES ('4377', '4', '4', 'Mybatis映射文件中，如果A标签通过include引用了B标签的内容，请问，B标签能否定义在A标签的后面，还是说必须定义在A标签的前面？', '1236c1c6-6526-401f-9629-10016a0cfb4b.', null, null, null, null, null, null, '虽然MYBATIS解析XML映射文件是按照顺序解析的，但是，被引用的B标签依然可以定义在任何地方，MYBATIS都可以正确识别。\r\n\r\n原理是，MYBATIS解析A标签，发现A标签引用了B标签，但是B标签尚未解析到，尚不存在，此时，MYBATIS会将A标签标记为未解析状态，然后继续解析余下的标签，包含B标签，待所有标签解析完毕，MYBATIS会重新解析那些被标记为未解析的标签，此时再解析A标签时，B标签已经存在，A标签也就可以正常解析完成了。', '', '0', '2017-12-25 21:02:26', '51', '1');
INSERT INTO `topic` VALUES ('4378', '26', '2', '目录具有SGID的特殊权限时，代表使用者在这个目录底下新建的文件之群组都会与该目录的群组名称相同。', 'ddb4e1be-3acd-413b-a430-360432cf797c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:02:48', '28', '1');
INSERT INTO `topic` VALUES ('4379', '24', '4', '.如何在命令行查看一台linux机器的CPU、内存、SWAP分区信息（接管一台机器，你应该首先查阅他的配置）', 'c36a1025-0bb7-4e69-86ae-c714fe77b75f.', null, null, null, null, null, null, '在控制台命令行下输TOP命令 DMESG |GREP PROCESSOR查看CPU', '', '0', '2017-12-25 21:03:09', '43', '1');
INSERT INTO `topic` VALUES ('4380', '26', '2', '为了应用smbclient 读取远程机power 上的pub 共享目录，共享目录的正确写法是//power:share。', 'aa60573c-d7e3-49db-bba7-005b12e63100.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:03:26', '40', '1');
INSERT INTO `topic` VALUES ('4381', '18', '4', '什么是压缩比', '60522d6b-4454-43b8-b40b-7ec4a3e41317.', null, null, null, null, null, null, '压缩前与压缩后的文件所占用的磁碟容量比值', '', '0', '2017-12-25 21:03:28', '28', '1');
INSERT INTO `topic` VALUES ('4382', '24', '4', '.如何修改linux主机名（不重启的情况下）指出都要修改哪些文件即可，写出各文件的绝对路径。', '4c89aceb-64cb-4ffc-9f19-636eaf2b0a8d.', null, null, null, null, null, null, '在控制台命令行下输入 HOSTNAME WWW.TXWM.COM或修改/ETC/SYSCONFIG/NETWORK文件HOSTNAME=WWW.TXWM.COM', '', '0', '2017-12-25 21:03:57', '43', '1');
INSERT INTO `topic` VALUES ('4383', '26', '2', 'rawrite制作引导软盘，仅仅把数据写了进去没有进行校验，是否能够成功启动安装是个未知数', '21b0bce0-39c2-4c40-aeae-71d1e99bdda7.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:04:19', '40', '1');
INSERT INTO `topic` VALUES ('4384', '26', '2', 'dump 命令不可备份文件系统', '46242cfb-bf40-4da9-839a-2ba5964c6d25.', null, null, null, null, null, null, '错误', 'dump 命令可备份文件系统或单一目录', '0', '2017-12-25 21:04:25', '28', '1');
INSERT INTO `topic` VALUES ('4385', '26', '2', '对于Linux 系统中的用户而言，个人的crontab 文件的统一格式为：&lt;*#*br *#*&gt;#minutehourmdaymonthwdcommand', 'e427e144-df2d-4b88-ac02-e51a9c6422de.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:04:33', '40', '1');
INSERT INTO `topic` VALUES ('4386', '18', '4', 'SAMBA 服务器四种共享方式的区别：（根据需求选择应用模式，后两种你答不上来，前两种也应该能答出来吧，只要你配过smb.conf文件）', '4138ef95-6589-47fc-9d4c-f4378242f939.', null, null, null, null, null, null, 'USER:进行访问之前需要输入有效的用户名及口令\r\n\r\nSHARE:不需要有效的用户名及口令即可访问\r\n\r\nSERVER:本质与USER模式一样，但由其它SAMBA服务器验证\r\n\r\nDOMAIN：指定该SAMBA服务器是一个域控制器', '', '0', '2017-12-25 21:04:33', '43', '1');
INSERT INTO `topic` VALUES ('4387', '26', '2', '在使用sever 安全级下，Samba 使用远程SMB 服务器（如Windows NT）进行身份验证。', '8c03d400-8061-445c-add4-b0fb851c0dd9.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:04:43', '40', '1');
INSERT INTO `topic` VALUES ('4388', '26', '2', 'Linux系统中所有的文件都被连接到一个总的目录树中。', '7c872787-5499-48ca-8f52-578c1c4cfb2e.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:04:52', '40', '1');
INSERT INTO `topic` VALUES ('4389', '26', '2', '对于Swap 交换系统分区文件系统，为了让该文件系统投入工作，我们应该使用mount –swap 命令。', '7da11ab2-9da8-4192-9496-9c64bc0ca255.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:05:01', '40', '1');
INSERT INTO `topic` VALUES ('4390', '18', '2', '要创建光盘烧录数据时，可透过 mkisofs 命令来建置；', 'c8cbaa20-4b0f-4809-a07a-c20085b8cf7c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:05:08', '28', '1');
INSERT INTO `topic` VALUES ('4391', '18', '4', 'init 0 init1 init 3 init 5 init 6 这几个启动级别都代表什么意思（？）', '96f3017e-9d61-48cf-9c01-baddfd71141c.', null, null, null, null, null, null, '# 缺省的运行级，RHS用到的级别如下：\r\n\r\n　　# 0 - 停机（千万不要把INITDEFAULT设置为0 ）\r\n\r\n　　# 1 - 单用户模式\r\n\r\n　　# 2 - 多用户，但是没有NFS\r\n\r\n　　# 3 - 完全多用户模式\r\n\r\n　　# 4 - 没有用到\r\n\r\n　　# 5 - X11\r\n\r\n　　# 6 - 重新启动', '', '0', '2017-12-25 21:05:08', '43', '1');
INSERT INTO `topic` VALUES ('4392', '18', '4', '如何更改默认的运行级别？', '59fa854b-885f-43b1-bbee-0bc667474ba6.', null, null, null, null, null, null, '运行级别可以由超级用户通过 TELINIT 命令来转换，此命令可以将转换信号传递给INIT，告诉它切换到哪个运行级别。也可以通过修改/ETC/INITTAB文件来进行缺省运行级别的修改。', '', '0', '2017-12-25 21:05:12', '29', '1');
INSERT INTO `topic` VALUES ('4393', '24', '4', '如何查看系统分区的容量使用情况？如何查看 /var/log 目录的使用容量？', 'f8f11522-1735-4a17-81a0-29c744795792.', null, null, null, null, null, null, 'DF可查看分区容量使用情况;DU /VAR/LOG可查看容量。', '', '0', '2017-12-25 21:05:28', '43', '1');
INSERT INTO `topic` VALUES ('4394', '3', '3', '根据程序的构成和运行环境的不同，Java源程序分为两类：___程序和__程序。 ', '18c1321a-2bc7-434d-9d7b-2a79df8b2fef.', null, null, null, null, null, null, 'APPLICATION，APPLET', '', '0', '2017-12-25 21:05:28', '53', '1');
INSERT INTO `topic` VALUES ('4395', '26', '2', '可透过 mkisofs 来写入 CD 或 DVD 烧录机', 'a0b5ad69-2570-42b2-8a17-3da5e6052c22.', null, null, null, null, null, null, '错误', '可透过 cdrecord 来写入 CD 或 DVD 烧录机', '0', '2017-12-25 21:05:41', '28', '1');
INSERT INTO `topic` VALUES ('4396', '18', '2', '•	dd 可备份完整的 partition 或 disk ，因为 dd 可读取磁碟的 sector 表面数据', '0ed0515c-6f2e-49d4-b7ec-93a1f504a287.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:08:08', '28', '1');
INSERT INTO `topic` VALUES ('4397', '18', '2', '•	Linux 底下的配置文件多为文本文件，故使用 vim 即可进行设定编辑；', 'e851fb57-8412-453a-8291-5f644d5b4d46.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:08:19', '28', '1');
INSERT INTO `topic` VALUES ('4398', '3', '4', '在Java的基本数据类型中，char型采用Unicode编码方案，每个Unicode码占用__字节内存空间', '280ab249-d1e3-4113-bafa-8b8da564bb47.', null, null, null, null, null, null, '2', '', '0', '2017-12-25 21:08:29', '53', '1');
INSERT INTO `topic` VALUES ('4399', '3', '3', '___抽象_方法是一种仅有方法头，没有具体方法体和操作实现的方法，该方法必须在抽象类或接口之中定义。____方法是不能被当前类的子类重新定义的方法。', 'bb232bad-8ea6-4df6-bc5b-9111019af393.', null, null, null, null, null, null, '最终', '', '0', '2017-12-25 21:08:47', '53', '1');
INSERT INTO `topic` VALUES ('4400', '26', '2', 'fsck对文件系统的检查最先是从文件系统的块链表开始的', '3d8fa53f-10bb-47c9-92a5-8989693e3040.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:08:49', '40', '1');
INSERT INTO `topic` VALUES ('4401', '26', '2', '改变用户的初使设置文件/etc/default/useradd中，EXPIRE 一行内容，加入用户账号被禁止的时间，只有当使用口令影像shadow 时，才能起作用。', '1aa55191-0099-4e03-973c-6039fae9a7c3.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:09:01', '40', '1');
INSERT INTO `topic` VALUES ('4402', '26', '2', '如果在文章内有对齐的区块，可以使用 [ctrl]-v 进行复制/贴上/删除的行为', 'dfd20c84-5804-4a0c-971b-22bd513aa166.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:09:02', '28', '1');
INSERT INTO `topic` VALUES ('4403', '26', '2', '磁盘定额的hard 限制只有在设置了缓冲期限时才会运行。', '8739548b-cb2f-4cba-9572-9da388fbba06.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:09:12', '40', '1');
INSERT INTO `topic` VALUES ('4404', '26', '2', 'linux 系统给每个进程分配唯一的进程ID ，用户在进程存在期间用进程ID 标识一个进程。', '8419d0f8-558c-488f-85e8-b92d2545bcb3.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:09:21', '40', '1');
INSERT INTO `topic` VALUES ('4405', '3', '3', '创建一个名为 MyPackage 的包的语句是\r\n   ，', 'aa8a0b6c-69c4-4f54-84a5-5d9400e56b02.', null, null, null, null, null, null, 'PACKAGE   MYPACKAGE', '', '0', '2017-12-25 21:09:26', '53', '1');
INSERT INTO `topic` VALUES ('4406', '26', '2', '目录树结构与文件系统是二个不同的概念，文件系统是磁盘或分区上文件的逻辑存放方法，而目录树结构是操作系统中管理文件的方式。', '511fa817-25c5-45ff-88d8-8bd9eaa994f1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:09:32', '40', '1');
INSERT INTO `topic` VALUES ('4407', '26', '2', 'NFS网络文件系统可以跨越网关，从而在不同的子网域内实现远程文件的输出共享。', 'a91aea6b-2f94-4378-97a5-28675d3040b1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:09:41', '40', '1');
INSERT INTO `topic` VALUES ('4408', '18', '4', '如何安全关闭系统？', '10c42563-545f-4543-8ab5-f89586960c9e.', null, null, null, null, null, null, '图形界面：系统关机；文本界面：有SHUTDOWN、HALT、REBOOT、INIT', '', '0', '2017-12-25 21:09:42', '29', '1');
INSERT INTO `topic` VALUES ('4409', '26', '2', '如果我们需要在Windows 或DOS 环境下制作linux 的启动盘，这时应该利用红旗Linux Server光盘上的pcmcia.img 文件。', 'd9327a99-5641-4a62-8a50-c669c50d62f2.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:09:51', '40', '1');
INSERT INTO `topic` VALUES ('4410', '26', '2', '. Linux 系统通过对硬件的限制，使用户进程不能直接访问任何物理部件。', '40fe3f7d-9160-48f9-a091-0faf1f033f40.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:10:01', '40', '1');
INSERT INTO `topic` VALUES ('4411', '26', '2', 'RAID是一种由多块廉价磁盘构成的冗余阵列，使用RAID 技术可以充分发挥出多块硬盘的优势，实现远远超出任何一块单独硬盘的速度和吞吐量', '63fd4b2a-398c-4101-9164-73ac8598e01a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:10:12', '40', '1');
INSERT INTO `topic` VALUES ('4412', '4', '4', '如何通过HibernateDaoSupport将Spring和Hibernate结合起来？', 'ada8e73e-21f6-4dee-a84e-442b2847eecd.', null, null, null, null, null, null, '用SPRING的 SESSIONFACTORY 调用 LOCALSESSIONFACTORY。集成过程分三步：\r\n\r\n配置THE HIBERNATE SESSIONFACTORY。\r\n继承HIBERNATEDAOSUPPORT实现一个DAO。\r\n在AOP支持的事务中装配。', '', '0', '2017-12-25 21:10:34', '59', '1');
INSERT INTO `topic` VALUES ('4413', '26', '4', '分散式密钥分配方案 ', '69ae0dd4-c553-4583-830b-26bc70962ef7.', null, null, null, null, null, null, '使用密钥分配中心进行密钥的分配要求密钥分配中心是可信任的并且应该保护它免于被破坏。如果密钥分配中心被第三方破坏，那么所有依靠该密钥分配中心分配会话密钥进行通信的所有通信方将不能进行正常的安全通信。如果密钥分配中心被第三方控制，那么所有依靠该密钥分配中心分配会话密钥进行进信的所有通信方之间的通信信息将被第三方窃听到', '', '0', '2017-12-25 21:11:26', '47', '1');
INSERT INTO `topic` VALUES ('4414', '4', '4', '你更倾向用那种事务管理类型？', '35cfc0e8-7de6-43b2-a6ac-8839054c00cf.', null, null, null, null, null, null, '大多数SPRING框架的用户选择声明式事务管理，因为它对应用代码的影响最小，因此更符合一个无侵入的轻量级容器的思想。声明式事务管理要优于编程式事务管理，虽然比编程式事务管理（这种方式允许你通过代码控制事务）少了一点灵活性。', '', '0', '2017-12-25 21:11:40', '59', '1');
INSERT INTO `topic` VALUES ('4415', '4', '4', ' 你是怎么理解AOP', 'bba15a6b-1795-4afe-8107-bb1ab5b167ba.', null, null, null, null, null, null, '面向切面的编程，或AOP， 是一种编程技术，允许程序模块化横向切割关注点，或横切典型的责任划分，如日志和事务管理。', '', '0', '2017-12-25 21:12:46', '59', '1');
INSERT INTO `topic` VALUES ('4416', '3', '3', 'Java中布尔类型的常量有两种，它们是（）和（）。', 'db19fc48-2704-449f-91f9-bccbe5335f50.', null, null, null, null, null, null, 'TRUE,FALSE\r\n', '', '0', '2017-12-25 21:13:07', '53', '1');
INSERT INTO `topic` VALUES ('4417', '4', '4', ' 什么是织入。什么是织入应用的不同点？', 'c06f473e-b23a-49ed-b356-e547b5f6cd39.', null, null, null, null, null, null, '织入是将切面和到其他应用类型或对象连接或创建一个被通知对象的过程。\r\n\r\n织入可以在编译时，加载时，或运行时完成。', '', '0', '2017-12-25 21:13:14', '59', '1');
INSERT INTO `topic` VALUES ('4418', '3', '2', 'Java的字符类型采用的是ASCII编码。', '278d3021-f4c4-4d6b-a1f9-3df9c39f42e4.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:14:09', '53', '1');
INSERT INTO `topic` VALUES ('4419', '26', '2', 'Linux内核是压缩后安装的，所以在内核加载入内存中后的第一步任务是自行解压。', 'd8ed158d-7ead-4dd4-bd3a-35e79137d401.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:14:11', '40', '1');
INSERT INTO `topic` VALUES ('4421', '3', '2', 'class A{...}等价于class A extends Object{...}', '423faae0-90a7-4d3e-935e-ca8814d33bc9.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:14:22', '53', '1');
INSERT INTO `topic` VALUES ('4422', '3', '2', '抽象方法必须在抽象类中，所以抽象类中的方法都必须是抽象方法。', '4911e6f0-0553-42aa-ba17-40cd9b8c6088.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:14:36', '53', '1');
INSERT INTO `topic` VALUES ('4423', '26', '2', '红旗Linux 全部支持使用ATAPI 协议的光驱', '3e1fe937-ba48-4d8d-a9b7-a0b2ee2731ef.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:14:40', '40', '1');
INSERT INTO `topic` VALUES ('4424', '4', '4', ' 什么是Spring MVC框架的控制器？', '7bea7512-1302-4b38-94bb-d9cf12e072a1.', null, null, null, null, null, null, '控制器提供一个访问应用程序的行为，此行为通常通过服务接口实现。控制器解析用户输入并将其转换为一个由视图呈现给用户的模型。SPRING用一个非常抽象的方式实现了一个控制层，允许用户创建多种用途的控制器。', '', '0', '2017-12-25 21:14:47', '59', '1');
INSERT INTO `topic` VALUES ('4425', '26', '2', '在系统日志文件/var/log/wtmp中保存了所有的用户登录、退出信息，以及系统的启动、停机记录', '5ab2d81d-49f0-4408-a6a8-4868548734d6.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:14:54', '40', '1');
INSERT INTO `topic` VALUES ('4426', '26', '2', '系统合法的 shell 均写在 /etc/shells 文件中；', '5a96e1f2-efab-4eb9-9c97-140d8701a719.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:14:58', '28', '1');
INSERT INTO `topic` VALUES ('4427', '3', '2', 'Java中数组的元素可以是简单数据类型的量，也可以是某一类的对象。', 'd036af71-abb9-4c18-b0cb-e65ed4be6b02.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:16:05', '53', '1');
INSERT INTO `topic` VALUES ('4428', '3', '4', '解释内存中的栈(stack)、堆(heap)和方法区(method area)的用法', 'f36c4037-0e70-45bf-a675-73cbf4a17590.', null, null, null, null, null, null, '通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用JVM中的栈空间；而通过NEW关键字和构造器创建的对象则放在堆空间，堆是垃圾收集器管理的主要区域，由于现在的垃圾收集器都采用分代收集算法，所以堆空间还可以细分为新生代和老生代，再具体一点可以分为EDEN、SURVIVOR（又可分为FROM SURVIVOR和TO SURVIVOR）、TENURED；方法区和堆都是各个线程共享的内存区域，用于存储已经被JVM加载的类信息、常量、静态变量、JIT编译器编译后的代码等数据；程序中的字面量（LITERAL）如直接书写的100、\"HELLO\"和常量都是放在常量池中，常量池是方法区的一部分，。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，栈和堆的大小都可以通过JVM的启动参数来进行调整，栈空间用光了会引发STACKOVERFLOWERROR，而堆和常量池空间不足则会引发OUTOFMEMORYERROR。', '', '0', '2017-12-25 21:16:15', '50', '1');
INSERT INTO `topic` VALUES ('4429', '3', '2', '一个Java类可以有多个父类。', '5c979c47-4609-47f2-a046-5af7d83b4d31.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:16:19', '53', '1');
INSERT INTO `topic` VALUES ('4430', '26', '2', '利用光盘启动，或者制作软盘启动盘都可以完成红旗Linux 系统的初始引导', 'e1ee0903-046d-4853-9c89-b878063774bd.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:16:49', '40', '1');
INSERT INTO `topic` VALUES ('4431', '3', '4', '什么是B/S架构？什么是C/S架构', 'a71a8de4-81c2-4a25-9461-9197ab6bbefe.', null, null, null, null, null, null, '\r\n    B/S(BROWSER/SERVER)，浏览器/服务器程序\r\n    C/S(CLIENT/SERVER)，客户端/服务端，桌面应用程序\r\n', '', '0', '2017-12-25 21:16:53', '62', '1');
INSERT INTO `topic` VALUES ('4432', '3', '4', '你所知道网络协议有那些？', '500e7e19-ee50-4371-b593-b24299432f21.', null, null, null, null, null, null, 'HTTP：超文本传输协议\r\nFTP：文件传输协议\r\nSMPT：简单邮件协议\r\nTELNET：远程终端协议\r\nPOP3：邮件读取协议', '', '0', '2017-12-25 21:18:01', '62', '1');
INSERT INTO `topic` VALUES ('4433', '3', '2', '最终类不能派生子类，最终方法不能被重载。', '521e58ba-9532-4cd3-a72c-2e7ebcfc47f5.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:19:03', '53', '1');
INSERT INTO `topic` VALUES ('4434', '3', '2', '设String对象s=”Hello ”，运行语句System.out.println(s.concat(“World!”));后String对象s的内容为”Hello world!”，所以语句输出为：Hello world!。', '340f6c92-ba94-426e-b2ed-663531756f5c.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:19:38', '53', '1');
INSERT INTO `topic` VALUES ('4435', '26', '2', '马守彬(237614586) 12:14:18\r\nhttp://140.143.182.63:8080/mst/\r\n', '893a22d4-f4d8-4fe6-8ab6-7819a58d47d1.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:20:37', '40', '1');
INSERT INTO `topic` VALUES ('4436', '3', '2', 'Java的源代码中定义几个类，编译结果就生成几个以.class为后缀的字节码文件。', 'aec907ab-ea0c-4991-8211-fb6ff734c808.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:20:44', '53', '1');
INSERT INTO `topic` VALUES ('4437', '3', '4', 'Java都有那些开发平台？', 'd770e622-73fb-4049-b9a4-65d531bbd105.', null, null, null, null, null, null, 'JAVA SE：主要用在客户端开发\r\nJAVA EE：主要用在WEB应用程序开发\r\nJAVA ME：主要用在嵌入式应用程序开发', '', '0', '2017-12-25 21:20:59', '62', '1');
INSERT INTO `topic` VALUES ('4439', '26', '2', '硬盘分区方案内置于硬件和BIOS 中，所以对硬盘重新分区后，相应的我们还需要在启动时，按键，进入Bios 设置选单，修改硬盘参数。', '7e6cfa7f-3f5c-4f28-a720-bc1c472ebeda.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:21:07', '40', '1');
INSERT INTO `topic` VALUES ('4440', '26', '4', '.Linux命令行下如何解压扩展名zip文件', '078d38a2-eb60-4a6f-8a27-0f22ec83c7cd.', null, null, null, null, null, null, 'TAR ZXVF NAME.ZI', '', '0', '2017-12-25 21:21:10', '43', '1');
INSERT INTO `topic` VALUES ('4441', '26', '2', '在linux 系统中，进程可以选择的nice 值的范围是0到20，在Linux 缺省的情况下，进程的nice 值是10', 'b7e6c26b-57da-4dc2-a312-8e9037331dbe.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:21:28', '40', '1');
INSERT INTO `topic` VALUES ('4442', '26', '2', '硬盘上数据的保存是在磁道上进行的', '0f3a4533-5031-4a86-8183-ad59faa3573c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:21:38', '40', '1');
INSERT INTO `topic` VALUES ('4443', '26', '2', 'Linux的软件包是独立的，可以单独安装任何软件包。', 'dd35e317-a511-4bc9-be32-0759625c2338.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:21:48', '40', '1');
INSERT INTO `topic` VALUES ('4444', '26', '4', '请说明数字签名的主要流程。 数字签名通过如下的流程进行', 'ae4d0c6a-6902-44ac-a792-6ace7c41d100.', null, null, null, null, null, null, '(1) 采用散列算法对原始报文进行运算，得到一个固定长度的数字串，称为报文摘要(MESSAGE DIGEST)，不同的报文所得到的报文摘要各异，但对相同的报文它的报文摘要却是惟一的。在数学上保证，只要改动报文中任何一位，重新计算出的报文摘要值就会与原先的值不相符，这样就保证了报文的不可更改性。 \r\n\r\n(2) 发送方用目己的私有密钥对摘要进行加密来形成数字签名。 (3) 这个数字签名将作为报文的附件和报文一起发送给接收方。 \r\n\r\n(4) 接收方首先对接收到的原始报文用同样的算法计算出新的报文摘要，再用发送方的公开密钥对报文附件的数字签名进行解密，比较两个报文摘要，如果值相同，接收方就能确认该数字签名是发送方的，否则就认为收到的报文是伪造的或者中途被篡改。 \r\n\r\n\r\n\r\n14、解释身份认证的基本概念。 \r\n\r\n身份认证是指用户必须提供他是谁的证明，这种证实客户的真实身份与其所声称的身份是否相符的过程是为了限制非法用户访问网络资源，它是其他安全机制的基础。 \r\n\r\n身份认证是安全系统中的第一道关卡，识别身份后，由访问监视器根据用户的身份和授权数据库决定是否能够访问某个资源。一旦身份认证系统被攻破，系统的所有安全措施将形同虚设，黑客攻击的目标往往就是身份认证系统。 \r\n\r\n15. 使用口令进行身份认证的优缺点？ 优点在于黑客即使得到了口令文件，通过散列值想要计算出原始口令在计算上也是不可能的，这就相对增加了安全性。缺点：严重的安全问题（单因素的认证），安全性仅依赖于口令，而且用户往往选择容易记忆、容易被猜测的口令（安全系统最薄弱的突破口），口令文件也可被进行离线的字典式攻击。 \r\n\r\n16. 利用智能卡进行的双因素的认证方式的原理是什么？ \r\n\r\n智能卡具有硬件加密功能，有较高的安全性。每个用户持有一张智能卡，智能卡存储用户个性化的秘密信息，同时在验证服务器中也存放该秘密信息。进行认证时，用户输入PIN（个人身份识别码），智能卡认证PIN，成功后，即可读出智能卡中的秘密信息，进而利用该秘密信息与主机之间进行认证。 \r\n\r\n双因素的认证方式（PIN+智能卡），即使PIN或智能卡被窃取，用户仍不会被冒充。智能卡提供硬件保护措施和加密算法，可以利用这些功能加强安全性能。\r\n', '', '0', '2017-12-25 21:22:23', '47', '1');
INSERT INTO `topic` VALUES ('4445', '26', '4', 'Java是否需要开发人员回收内存垃圾吗？', '7726f782-a27a-47b5-a7c9-533ce7845217.', null, null, null, null, null, null, '大多情况下是不需要的。JAVA提供了一个系统级的线程来跟踪内存分配，不再使用的内存区将会自动回收', '', '0', '2017-12-25 21:22:27', '62', '1');
INSERT INTO `topic` VALUES ('4446', '26', '2', '一个进程既可以在前台也可以在后台运行，一个挂起的进程可以在它挂起的地方继续运行。', '246994ce-c6b5-4cea-92dc-3b9373753993.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:22:43', '40', '1');
INSERT INTO `topic` VALUES ('4447', '26', '4', '局域网内出现另一台DHCP服务器与你做的DHCP冲突，你会采取什么技术手段将其捕获？', '107f3c72-ca9c-4c12-92f3-c32cf1279a4d.', null, null, null, null, null, null, '首先，在一台从非法DHCP上获取IP地址的电脑上使用IPCONFIG /ALL命令获取非法DHCP服务器地址，然后PING 非法DHCP服务器地址，然后用ARP -A命令查询非法DHCP服务器MAC地址，然后根据你的MAC地址列表来查找吧。如果事先没有做MAC地址列表，那么就登陆交换机，用SH MAC ADDRESS命令查找交换机上的MAC-交换机端口对应表来查找', '', '0', '2017-12-25 21:22:44', '43', '1');
INSERT INTO `topic` VALUES ('4448', '26', '4', '公司使用网络接入线为一条3M光纤，随着业务的扩大，人员的增多出现网络拥挤状态，为解决此问题，采取两种方案：一，将现有带宽增至6M，二，再申请一条3M带宽。如果此事由你决策 你会选择哪一种方案 并写出原因。', 'e93ac4ec-ec0a-4c30-b0e6-cf224e1d08dd.', null, null, null, null, null, null, '从公司的角度来看。应该带宽增至6M增，这样可以减少再申请一条3M带宽的报装费，新增加的设备费用，技术维护费用\r\n\r\n从网吧的角度来看。可以再申请一条3M带宽（网通），假说原来的为电信。这样可以做带宽冗佘，当一条光纤出现故障时还可以继续营业，可以满足上网的人对不同网络（网通/电信）需要，从而使用整个网络更优化稳定。虽然初始的费用高了，但从长远的角度来说，还是有利于网吧营运！', '', '0', '2017-12-25 21:23:08', '43', '1');
INSERT INTO `topic` VALUES ('4449', '32', '4', '计算每个人的总成绩并排名(要求显示字段：姓名，总成绩)', '0287c128-56d0-450c-befc-3dc7c6924a45.png', null, null, null, null, null, null, 'SELECT NAME,SUM(SCORE) AS ALLSCORE FROM STUSCORE GROUP BY NAME ORDER BY ALLSCORE', '', '0', '2017-12-25 21:24:26', '50', '1');
INSERT INTO `topic` VALUES ('4451', '26', '2', 'mkinitrd命令在SCSI 系统中虽然十分重要，但对IDE 系统而言却并不是很重要。', '4157eed6-40f1-40e3-bb24-df5e9e5c5139.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:25:55', '40', '1');
INSERT INTO `topic` VALUES ('4452', '3', '4', 'Java的数据结构有那些？', 'abc1522b-6a51-408c-931b-1d84eb2410c5.', null, null, null, null, null, null, '线性表（ARRAYLIST）\r\n链表（LINKEDLIST）\r\n栈（STACK）\r\n队列（QUEUE）\r\n图（MAP）\r\n树（TREE', '', '0', '2017-12-25 21:26:24', '62', '1');
INSERT INTO `topic` VALUES ('4455', '26', '2', '在进行系统内核配置时, 假若当前系统使用可刻写的CD-ROM ，需要打开回送设备loopback 选项', '26aa6440-1398-4acb-aad0-bbd54f9b8900.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:27:14', '40', '1');
INSERT INTO `topic` VALUES ('4456', '3', '4', 'java中的包装类都是那些？', '06e66542-f5c5-4f8c-8cad-ef4b4a409c31.', null, null, null, null, null, null, 'BYTE：BYTE\r\nSHORT：SHORT\r\nINT：INTEGER\r\nLONG：LONG\r\nFLOAT：FLOAT\r\nDOUBLE：DOUBLE\r\nCHAR：CHARACTER\r\nBOOLEAN：BOOLEAN', '', '0', '2017-12-25 21:28:18', '62', '1');
INSERT INTO `topic` VALUES ('4457', '26', '2', '在linux 系统下，X Window 主要是指系统底层的标准图形工具，而应用程序所依赖的基本图形操作由程序自己维护', 'ac945e3f-dd6a-4f1b-b330-74570cce9248.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:28:29', '40', '1');
INSERT INTO `topic` VALUES ('4458', '26', '2', 'set 可以观察目前 bash 环境下的所有变量；', '7ea37874-89c7-43f1-a14e-688678911de1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:28:45', '28', '1');
INSERT INTO `topic` VALUES ('4460', '26', '2', '对于任何一个非启动分区来说，它们均有一个启动扇区。', 'b5d629b5-3278-4765-9553-3d84c4bc3457.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:29:19', '40', '1');
INSERT INTO `topic` VALUES ('4461', '3', '4', '那针对浮点型数据运算出现的误差的问题，你怎么解决？', '0fe6f1b4-67af-4908-9d44-73c59e6b9992.', null, null, null, null, null, null, '使用BIGDECIMAL类进行浮点型数据的运算', '', '0', '2017-12-25 21:29:20', '62', '1');
INSERT INTO `topic` VALUES ('4462', '32', '4', '列出各门课程成绩最好的学生(要求显示字段: 学号，姓名,科目，成绩)', '3551e5f2-9107-4b9f-892c-9c054e101d7d.png', null, null, null, null, null, null, 'SELECT  T1.STUID,T1.NAME,T1.SUBJECT,T2.MAXSCORE FROM STUSCORE T1,(SELECT SUBJECT,MAX(SCORE) AS MAXSCORE FROM STUSCORE GROUP BY SUBJECT) T2WHERE T1.SUBJECT=T2.SUBJECT AND T1.SCORE=T2.MAXSCORE', '', '0', '2017-12-25 21:29:45', '50', '1');
INSERT INTO `topic` VALUES ('4463', '3', '4', '++i与i++的区别', '8c755b74-872a-46e6-92a0-0b5a6eec3236.', null, null, null, null, null, null, '++I：先赋值，后计算\r\nI++：先计算，后赋值', '', '0', '2017-12-25 21:30:12', '62', '1');
INSERT INTO `topic` VALUES ('4464', '3', '4', '程序的结构有那些？', 'e1321dbd-07e2-4e4a-9e44-206526048383.', null, null, null, null, null, null, '顺序结构\r\n选择结构\r\n循环结构', '', '0', '2017-12-25 21:30:41', '62', '1');
INSERT INTO `topic` VALUES ('4466', '32', '4', '哈希值的使用不同，HashTable直接使用对象的hashCode，代码是这样的：', '666082d7-4f23-4e63-848b-61ad72395c9c.', null, null, null, null, null, null, 'INT HASH = KEY.HASHCODE();\r\nINT INDEX = (HASH & 0X7FFFFFFF) % TAB.LENGTH;', '', '0', '2017-12-25 21:31:26', '47', '1');
INSERT INTO `topic` VALUES ('4467', '32', '4', '统计如下：学号     姓名     语文     数学     英语     总分     平均分', '7f682309-0f0e-4a8d-af21-2d8e7fa4f44c.png', null, null, null, null, null, null, 'SELECT STUID AS 学号,NAME AS 姓名,SUM(CASE WHEN SUBJECT=’语文’ THEN SCORE ELSE 0 END) AS 语文,SUM(CASE WHEN SUBJECT=’数学’ THEN SCORE ELSE 0 END) AS 数学,SUM(CASE WHEN SUBJECT=’英语’ THEN SCORE ELSE 0 END) AS 英语,SUM(SCORE) AS 总分,(SUM(SCORE)/COUNT(*)) AS 平均分FROM STUSCOREGROUP BY STUID,NAME ORDER BY 总分DESC', '', '0', '2017-12-25 21:31:42', '50', '1');
INSERT INTO `topic` VALUES ('4468', '26', '2', '$? 亦为变量，是前一个命令运行完毕后的回传值。在 Linux 回传值为 1 代表运行成功；', '6dfe50df-56e1-47d5-bd54-2d914b39cd91.', null, null, null, null, null, null, '错误', '$? 亦为变量，是前一个命令运行完毕后的回传值。在 Linux 回传值为 0 代表运行成功；', '0', '2017-12-25 21:31:46', '28', '1');
INSERT INTO `topic` VALUES ('4469', '26', '4', 'Java中各种数据默认值', 'b1738cd7-ee47-4556-92ed-0f6a764306c1.', null, null, null, null, null, null, 'BYTE,SHORT,INT,LONG默认是都是0\r\nBOOLEAN默认值是FALSE\r\nCHAR类型的默认值是’’\r\nFLOAT与DOUBLE类型的默认是0.0\r\n对象类型的默认值是NULL', '', '0', '2017-12-25 21:31:55', '62', '1');
INSERT INTO `topic` VALUES ('4470', '32', '4', '列出各门课程的平均成绩（要求显示字段：课程，平均成绩）', 'c1325d0b-3558-4b7d-b7b2-5024c6ba137c.png', null, null, null, null, null, null, 'SELECT SUBJECT,AVG(SCORE) AS AVGSCORE FROM STUSCOREGROUP BY SUBJECT', '', '0', '2017-12-25 21:32:13', '50', '1');
INSERT INTO `topic` VALUES ('4471', '26', '2', '只有系统超级用户才能设置crontab 文件，安排定时执行任务，这些任务一般是与系统管理相关的。', '89cdac3d-2993-476a-9cea-b92d8519b1e7.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:32:18', '40', '1');
INSERT INTO `topic` VALUES ('4472', '18', '2', '只要工具程序支持正规表示法，那么该工具程序就可以用来作为正规表示法的字串处理之用；', '687f43d4-eadf-413d-bdd6-c33bf148ba38.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:32:25', '28', '1');
INSERT INTO `topic` VALUES ('4473', '3', '4', 'Java常用包有那些？', '58f4b88c-4611-46b0-8be3-c5aa9d18be0d.', null, null, null, null, null, null, 'JAVA.LANG\r\nJAVA.IO\r\nJAVA.SQL\r\nJAVA.UTIL\r\nJAVA.AWT\r\nJAVA.NET\r\nJAVA.MATH', '', '0', '2017-12-25 21:32:37', '62', '1');
INSERT INTO `topic` VALUES ('4474', '32', '4', '列出数学成绩的排名（要求显示字段：学号，姓名，成绩，排名）', '67a825b6-a383-4519-9756-7bd785856366.png', null, null, null, null, null, null, 'DECLARE @TMP TABLE(PM INT,NAME VARCHAR(50),SCORE INT,STUID INT)\r\nINSERT INTO @TMP SELECT NULL,NAME,SCORE,STUID FROM STUSCORE WHERE SUBJECT=’数学’ ORDER BY SCORE DESC\r\nDECLARE @ID INT\r\nSET @ID=0;\r\nUPDATE @TMP SET @ID=@ID+1,PM=@ID\r\nSELECT * FROM @TMP\r\n\r\nORACLE:\r\nSELECT  DENSE_RANK () OVER(ORDER BY SCORE DESC) AS ROW,NAME,SUBJECT,SCORE,STUID FROM STUSCORE WHERE SUBJECT=’数学’ORDER BY SCORE DESC\r\nMS SQL(最佳选择)\r\nSELECT (SELECT COUNT(*) FROM STUSCORE T1 WHERE SUBJECT =’数学’ AND T1.SCORE>T2.SCORE)+1 AS ROW ,STUID,NAME,SCORE FROM STUSCORE T2 WHERE SUBJECT =’数学’ ORDER BY SCORE DESC', '', '0', '2017-12-25 21:32:38', '50', '1');
INSERT INTO `topic` VALUES ('4475', '26', '2', '我们可以直接安装红旗Linux 到Ｗindows 系统下，一般来说这样做，不需要进行重新分区', '0a0a1857-421b-42b3-8587-d7028ea54e5c.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:32:42', '40', '1');
INSERT INTO `topic` VALUES ('4476', '3', '4', 'Java最顶级的父类是哪个？', '7f1dc6fe-52d5-4680-8da5-8565320bc2e1.', null, null, null, null, null, null, 'OBJECT', '', '0', '2017-12-25 21:34:11', '62', '1');
INSERT INTO `topic` VALUES ('4477', '32', '4', '求出李四的数学成绩的排名', 'daa49049-bfeb-465a-bf3a-2747d1d200f6.png', null, null, null, null, null, null, 'SELECT T3.*  FROM(SELECT TOP 2 T2.*  FROM (SELECT TOP 3 NAME,SUBJECT,SCORE,STUID FROM STUSCORE WHERE SUBJECT=’数学’ORDER BY SCORE DECLARE @TMP TABLE(PM INT,NAME VARCHAR(50),SCORE INT,STUID INT)INSERT INTO @TMP SELECT NULL,NAME,SCORE,STUID FROM STUSCORE WHERE SUBJECT=’数学’ ORDER BY SCORE DESCDECLARE @ID INTSET @ID=0;UPDATE @TMP SET @ID=@ID+1,PM=@IDSELECT * FROM @TMP WHERE NAME=’李四’', '', '0', '2017-12-25 21:34:31', '50', '1');
INSERT INTO `topic` VALUES ('4478', '26', '2', '脚本/etc/rc.d/rc.local，在运行级别为单用户方式时，不被执行。', '8dd3c0c0-f854-4c95-8d6f-2378fa9cc4ac.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:34:39', '40', '1');
INSERT INTO `topic` VALUES ('4479', '3', '4', 'Object类常用方法有那些？', 'c8e9d3f4-1315-4323-b290-d0721856498c.', null, null, null, null, null, null, 'EQUALS\r\nHASHCODE\r\nTOSTRING\r\nWAIT\r\nNOTIFY\r\nCLONE\r\nGETCLASS', '', '0', '2017-12-25 21:34:46', '62', '1');
INSERT INTO `topic` VALUES ('4480', '33', '4', '视图的作用，视图可以更改么？', '2571bbde-b4db-4c38-8dff-d544149486db.', null, null, null, null, null, null, '视图是虚拟的表，与包含数据的表不一样，视图只包含使用时动态检索数据的查询；不包含任何列或数据。使用视图可以简化复杂的SQL操作，隐藏具体的细节，保护数据；视图创建后，可以使用与表相同的方式利用它们。\r\n视图不能被索引，也不能有关联的触发器或默认值，如果视图本身内有ORDER BY 则对视图再次ORDER BY将被覆盖。\r\n创建视图：CREATE VIEW XXX AS XXXXXXXXXXXXXX;\r\n对于某些视图比如未使用联结子查询分组聚集函数DISTINCT UNION等，是可以对其更新的，对视图的更新将对基表进行更新；但是视图主要用于简化检索，保护数据，并不用于更新，而且大部分视图都不可以更新。', '', '0', '2017-12-25 21:34:50', '47', '1');
INSERT INTO `topic` VALUES ('4481', '26', '2', '如果我们需要卸载已经安装成功的Linux ，我们可以选择安装方式中的卸载方式，或直接在Windows 下使用format 命令格式化Linux 分区。', '2f84a965-b585-4a29-81a6-5a5ad3fca888.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:34:58', '40', '1');
INSERT INTO `topic` VALUES ('4482', '32', '4', '统计如下：课程     不及格（0-59）个     良（60-80）个     优（81-100）个', '2df99322-4b53-4471-82c4-c2a2f4adeec7.png', null, null, null, null, null, null, 'SELECT SUBJECT, (SELECT COUNT(*) FROM STUSCORE WHERE SCORE<60 AND SUBJECT=T1.SUBJECT) AS 不及格,(SELECT COUNT(*) FROM STUSCORE WHERE SCORE BETWEEN 60 AND 80 AND SUBJECT=T1.SUBJECT) AS 良,(SELECT COUNT(*) FROM STUSCORE WHERE SCORE >80 AND SUBJECT=T1.SUBJECT) AS 优FROM STUSCORE T1 GROUP BY SUBJECT', '', '0', '2017-12-25 21:35:04', '50', '1');
INSERT INTO `topic` VALUES ('4483', '3', '4', 'java中有没有指针？', '07412cc6-c152-4188-92ea-cb7e4ff68a11.', null, null, null, null, null, null, '有指针，但是隐藏了，开发人员无法直接操作指针，由JVM来操作指针', '', '0', '2017-12-25 21:35:10', '62', '1');
INSERT INTO `topic` VALUES ('4484', '26', '2', '如果希望由主板BIOS 安排PNP 设备资源，则在进入BIOS 配置窗口后，我们需要设置选项no pnp os', 'c0627027-36f6-49a6-928f-668c46141cde.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:35:31', '40', '1');
INSERT INTO `topic` VALUES ('4485', '32', '4', '统计如下：数学:张三(50分),李四(90分),王五(90分),赵六(76分)', '93856544-10a5-46cd-a75a-4fae4e32cf40.png', null, null, null, null, null, null, 'DECLARE @S VARCHAR(1000)SET @S=”SELECT @S =@S+’,’+NAME+\'(‘+CONVERT(VARCHAR(10),SCORE)+’分)’ FROM STUSCORE WHERE SUBJECT=’数学’ SET @S=STUFF(@S,1,1,”)PRINT ‘数学:’+@S', '', '0', '2017-12-25 21:35:41', '50', '1');
INSERT INTO `topic` VALUES ('4486', '26', '2', '一条ATA 通道可以支持最多两台设备，分别作为主盘和副盘使用，并且同一时间内只能对每条通道上的一台设备进行访问。', 'eb3f25fe-e0a8-4788-8231-9d9d0ca28d77.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:35:43', '40', '1');
INSERT INTO `topic` VALUES ('4487', '3', '4', 'java中是值传递引用传递？', '025cefd7-399e-4e08-ba74-538b74a50b9d.', null, null, null, null, null, null, '理论上说，JAVA都是引用传递，对于基本数据类型，传递是值的副本，而不是值本身。对于对象类型，传递是对象的引用，当在一个方法操作操作参数的时候，其实操作的是引用所指向的对象。', '', '0', '2017-12-25 21:35:47', '62', '1');
INSERT INTO `topic` VALUES ('4488', '26', '2', '一个中心控制点，使得sys log非常好用和易配置，因此当今很多程 序都使用syslog 来发送它们的记录信息。', 'a829e0f6-33c4-42bd-9ae8-d789c7c937d8.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:35:54', '40', '1');
INSERT INTO `topic` VALUES ('4489', '26', '2', '对tar 和cpio 这些备份工具来说，必须借助于其他工具，才能实施备份级别', '029bf2a8-1195-40d8-bf09-491059ec54bc.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:36:07', '40', '1');
INSERT INTO `topic` VALUES ('4490', '3', '4', '实例化数组后，能不能改变数组长度呢？', '46d36e8b-f516-4a97-93b8-9c7660096bfe.', null, null, null, null, null, null, '不能，数组一旦实例化，它的长度就是固定的', '', '0', '2017-12-25 21:36:07', '62', '1');
INSERT INTO `topic` VALUES ('4491', '26', '2', '我们可以通过设置条目hosts valid 来控制可以访问samba 共享服务的合法主机名。', '4bdf1e63-5fe6-4a3c-8143-5910c6076f5b.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:36:18', '40', '1');
INSERT INTO `topic` VALUES ('4492', '32', '4', '计算科科及格的人的平均成绩', 'e54845b0-7d5e-4fae-b135-5c5e4042414c.png', null, null, null, null, null, null, '计算科科及格的人的平均成绩', '', '0', '2017-12-25 21:36:23', '50', '1');
INSERT INTO `topic` VALUES ('4493', '26', '2', '如果使用者在一个以上的文件系统上建立文件，那么必须分别在每一文件系统上分别设置quota ', '1eef1f03-8195-44d7-918f-3622ee41c193.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:36:27', '40', '1');
INSERT INTO `topic` VALUES ('4494', '26', '4', 'SQL语句优化', 'f933a871-b9d1-4536-b4fb-8a56400fc365.', null, null, null, null, null, null, '1）应尽量避免在 WHERE 子句中使用!=或<>操作符，否则将引擎放弃使用索引而进行全表扫描。\r\n2）应尽量避免在 WHERE 子句中对字段进行 NULL 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：\r\nSELECT ID FROM T WHERE NUM IS NULL\r\n可以在NUM上设置默认值0，确保表中NUM列没有NULL值，然后这样查询：\r\nSELECT ID FROM T WHERE NUM=0\r\n3）很多时候用 EXISTS 代替 IN 是一个好的选择\r\n4）用WHERE子句替换HAVING 子句 因为HAVING 只会在检索出所有记录之后才对结果集进行过滤', '', '0', '2017-12-25 21:36:27', '47', '1');
INSERT INTO `topic` VALUES ('4495', '3', '4', '假设数组内有5个元素，如果对数组进行反序，该如何做？', '1ff92e28-460a-4bf2-a851-853fde1ea2af.', null, null, null, null, null, null, '创建一个新数组，从后到前循环遍历每个元素，将取出的元素依次顺序放入新数组中', '', '0', '2017-12-25 21:36:33', '62', '1');
INSERT INTO `topic` VALUES ('4496', '26', '4', '数据库结构优化', '8e6bea5b-7f4a-4565-b658-3133c452d1eb.', null, null, null, null, null, null, '1）范式优化： 比如消除冗余（节省空间。。） 2）反范式优化：比如适当加冗余等（减少JOIN） 3）拆分表： 分区将数据在物理上分隔开，不同分区的数据可以制定保存在处于不同磁盘上的数据文件里。这样，当对这个表进行查询时，只需要在表分区中进行扫描，而不必进行全表扫描，明显缩短了查询时间，另外处于不同磁盘的分区也将对这个表的数据传输分散在不同的磁盘I/O，一个精心设置的分区可以将数据传输对磁盘I/O竞争均匀地分散开。对数据量大的时时表可采取此方法。可按月自动建表分区。\r\n4）拆分其实又分垂直拆分和水平拆分： 案例： 简单购物系统暂设涉及如下表： 1.产品表（数据量10W，稳定） 2.订单表（数据量200W，且有增长趋势） 3.用户表 （数据量100W，且有增长趋势） 以MYSQL为例讲述下水平拆分和垂直拆分，MYSQL能容忍的数量级在百万静态数据可以到千万 垂直拆分： 解决问题：表与表之间的IO竞争 不解决问题：单表中数据量增长出现的压力 方案： 把产品表和用户表放到一个SERVER上 订单表单独放到一个SERVER上 水平拆分： 解决问题：单表中数据量增长出现的压力 不解决问题：表与表之间的IO争夺\r\n方案： 用户表通过性别拆分为男用户表和女用户表 订单表通过已完成和完成中拆分为已完成订单和未完成订单 产品表 未完成订单放一个SERVER上 已完成订单表盒男用户表放一个SERVER上 女用户表放一个SERVER上(女的爱购物 哈哈)', '', '0', '2017-12-25 21:36:42', '47', '1');
INSERT INTO `topic` VALUES ('4497', '26', '4', '存储过程与触发器的区别', '16f9d01f-75ff-4ee5-a214-c06d69b34216.', null, null, null, null, null, null, '触发器与存储过程非常相似，触发器也是SQL语句集，两者唯一的区别是触发器不能用EXECUTE语句调用，而是在用户执行TRANSACT-SQL语句时自动触发（激活）执行。触发器是在一个修改了指定表中的数据时执行的存储过程。通常通过创建触发器来强制实现不同表中的逻辑相关数据的引用完整性和一致性。由于用户不能绕过触发器，所以可以用它来强制实施复杂的业务规则，以确保数据的完整性。触发器不同于存储过程，触发器主要是通过事件执行触发而被执行的，而存储过程可以通过存储过程名称名字而直接调用。当对某一表进行诸如UPDATE、INSERT、DELETE这些操作时，SQLSERVER就会自动执行触发器所定义的SQL语句，从而确保对数据的处理必须符合这些SQL语句所定义的规则。', '', '0', '2017-12-25 21:36:57', '47', '1');
INSERT INTO `topic` VALUES ('4498', '26', '2', '一个多协议支持的X 终端上的用户，可以在与大型主机和另外一个Linux 系统进行会话的同时，还可以通过拨号方式再与其他系统进行连接和会话。', '21c7256b-2ed7-4308-9c79-4f636ab814f9.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:36:57', '40', '1');
INSERT INTO `topic` VALUES ('4499', '3', '4', '形参与实参', '32e3771d-e951-4666-89a3-2e1a3dc538d8.', null, null, null, null, null, null, '形参：全称为“形式参数”，是在定义方法名和方法体的时候使用的参数，用于接收调用该方法时传入的实际值；实参：全称为“实际参数”，是在调用方法时传递给该方法的实际值。', '', '0', '2017-12-25 21:36:57', '62', '1');
INSERT INTO `topic` VALUES ('4500', '26', '2', '我们可以通过进程日志获得关于一个确定的进程正在干什么之类的线索。', 'b2409400-a477-4f2d-a260-65762c7dd941.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:37:09', '40', '1');
INSERT INTO `topic` VALUES ('4502', '26', '2', '为了启动一个放在后台运行的任务，我们需要使用该项任务的进程号，如PID=143，我们可以使用fg %123将该项任务转为前台。', '1c640f2a-4653-4867-8dfc-b4ddfb154302.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:37:49', '40', '1');
INSERT INTO `topic` VALUES ('4503', '26', '2', '在使用NIS 的情况下，大量的机器为了便于管理，可以被分组到不同的NIS 域中，每一个NIS 域均可设置自己的主从服务器', '54cf2086-c34d-4fae-a5db-a1f38aeed17b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:38:01', '40', '1');
INSERT INTO `topic` VALUES ('4504', '26', '4', 'MySQL的复制原理以及流程', 'c36f2ca7-d0fa-4c90-ad26-a2e61733894f.', null, null, null, null, null, null, '基本原理流程，3个线程以及之间的关联；', '', '0', '2017-12-25 21:38:22', '47', '1');
INSERT INTO `topic` VALUES ('4505', '33', '4', 'MySQL中myisam与innodb的区别，至少5点', '811fdcf1-0451-4520-9a95-9f99cafad774.', null, null, null, null, null, null, '(1)、问5点不同；\r\n(2)、INNODB引擎的4大特性\r\n(3)、2者SELECTCOUNT(*)哪个更快，为什么', '', '0', '2017-12-25 21:38:45', '47', '1');
INSERT INTO `topic` VALUES ('4506', '33', '4', 'MySQL中varchar与char的区别以及varchar(50)中的50代表的涵义', '3a4e2267-8b8d-4c3e-be62-ffe2d61bd391.', null, null, null, null, null, null, '(1)、VARCHAR与CHAR的区别\r\n(2)、VARCHAR(50)中50的涵义\r\n(3)、INT（20）中20的涵义\r\n(4)、MYSQL为什么这么设计\r\n', '', '0', '2017-12-25 21:38:57', '47', '1');
INSERT INTO `topic` VALUES ('4507', '33', '4', '问了innodb的事务与日志的实现方式', '86f15643-143e-4d90-8fae-95a0dd29edab.', null, null, null, null, null, null, '(1)、有多少种日志；\r\n(2)、事物的4种隔离级别\r\n(3)、事务是如何通过日志来实现的，说得越深入越好。', '', '0', '2017-12-25 21:39:11', '47', '1');
INSERT INTO `topic` VALUES ('4508', '3', '4', '内部类与静态内部类的区别？', '5c4f0279-b5ad-4e77-8788-2e750c376ea8.', null, null, null, null, null, null, '静态内部类相对与外部类是独立存在的，在静态内部类中无法直接访问外部类中变量、方法。如果要访问的话，必须要NEW一个外部类的对象，使用NEW出来的对象来访问。但是可以直接访问静态的变量、调用静态的方法；', '', '0', '2017-12-25 21:39:19', '62', '1');
INSERT INTO `topic` VALUES ('4509', '33', '4', '问了MySQL binlog的几种日志录入格式以及区别', '6194e088-2774-4afd-a209-ac991599c73d.', null, null, null, null, null, null, '(1)、BINLOG的日志格式的种类和分别\r\n(2)、适用场景；\r\n(3)、结合第一个问题，每一种日志格式在复制中的优劣。\r\n', '', '0', '2017-12-25 21:39:33', '47', '1');
INSERT INTO `topic` VALUES ('4510', '26', '2', '软盘引导的字符安装方式，不支持硬盘安装红旗Linux 系统', 'c469a5a5-7af2-48c3-8886-2083e673a297.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:40:20', '40', '1');
INSERT INTO `topic` VALUES ('4511', '26', '2', '在配置/etc/nsswitch.conf文件时，我们发现在hosts 行选项的次序是files nis dns ，这表明在查找主机名时，将首先在/etc/hosts文件查找，然后通过N I S 在映射hosts.byname 中查找，最后通过DNS 服务器来查找', 'fc6cb8b7-929e-48ac-84a8-9177fcc7355c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:40:51', '40', '1');
INSERT INTO `topic` VALUES ('4512', '26', '2', '处于实验状态或开发状态下的内核，一般来说，版本号被标记为偶数号码以方便区分', 'c8d3c145-9bb9-4eea-a4a2-77c08fb3469a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:41:02', '40', '1');
INSERT INTO `topic` VALUES ('4513', '26', '4', 'sql优化\r\n', '3679c77b-f822-4dee-b1b9-4e90335f11a1.', null, null, null, null, null, null, '(1)、EXPLAIN出来的各种ITEM的意义；\r\n(2)、PROFILE的意义以及使用场景；', '', '0', '2017-12-25 21:41:19', '47', '1');
INSERT INTO `topic` VALUES ('4514', '26', '4', '构造方法能不能重写？能不能重载？', '563162df-6549-4c30-ac95-5e79b366f5aa.', null, null, null, null, null, null, '可以重写，也可以重载', '', '0', '2017-12-25 21:41:26', '62', '1');
INSERT INTO `topic` VALUES ('4517', '3', '4', '使用封装的一些好处', '03da6366-1dbe-4aae-91c5-2e40a61b2559.', null, null, null, null, null, null, '通过隐藏对象的属性来保护对象内部的状态。\r\n提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展。\r\n禁止对象之间的不良交互提高模块化。', '', '0', '2017-12-25 21:43:17', '64', '1');
INSERT INTO `topic` VALUES ('4518', '26', '2', '“安装”会导致指定位置的数据全部丢失，升级方式也是如此。', '77fcbeb3-a73a-4cb4-914f-29abdeb1be1a.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:43:45', '40', '1');
INSERT INTO `topic` VALUES ('4519', '26', '2', '设备驱动程序一般保存在/dev目录下，与其它的设备文件保存在同一个目录。', '38aeae76-4c40-4967-a425-1efa58296e6a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:43:55', '40', '1');
INSERT INTO `topic` VALUES ('4520', '26', '2', '对笔记本电脑进行引导启动软盘映像是boot.img ', '331c62ce-5ad1-4e06-81b9-3c5affa49e67.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:44:03', '40', '1');
INSERT INTO `topic` VALUES ('4521', '3', '4', '抽象定义', 'f8c86eb1-89ee-4d4f-b413-4265a5980f1c.', null, null, null, null, null, null, '抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。JAVA支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。', '', '0', '2017-12-25 21:44:05', '64', '1');
INSERT INTO `topic` VALUES ('4522', '33', '4', '表中有大字段X(例如：text类型)，且字段X不会经常更新，以读为为主，请问\r\n(1)、您是选择拆成子表，还是继续放一起；\r\n(2)、写出您这样选择的理由。', '755de005-5b9e-440c-a570-8804de40d616.', null, null, null, null, null, null, 'MYSQL中INNODB引擎的行锁是通过加在什么上完成(或称实现)的？为什么是这样子的？\r\n答：INNODB是基于索引来完成行锁\r\n例: SELECT * FROM TAB_WITH_INDEX WHERE ID = 1 FOR UPDATE;\r\nFOR UPDATE 可以根据条件来完成行锁锁定,并且 ID 是有索引键的列,\r\n如果 ID 不是索引键那么INNODB将完成表锁,,并发将无从谈起\r\n', '', '0', '2017-12-25 21:44:29', '47', '1');
INSERT INTO `topic` VALUES ('4523', '3', '4', 'Java语言支持的8中基本数据类型是', '9991a76c-aa2b-4a6c-b5a3-509342519e7f.', null, null, null, null, null, null, 'BYTE\r\nSHORT\r\nINT\r\nLONG\r\nFLOAT\r\nDOUBLE\r\nBOOLEAN\r\nCHAR', '', '0', '2017-12-25 21:45:19', '64', '1');
INSERT INTO `topic` VALUES ('4524', '3', '4', 'Java中，什么是构造函数？', '8afdd044-fa52-41ed-9411-cad5a8ed715d.', null, null, null, null, null, null, '当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，JAVA编译器会为这个类创建一个默认的构造函数。', '', '0', '2017-12-25 21:46:12', '64', '1');
INSERT INTO `topic` VALUES ('4525', '26', '2', '在安装过程中，如果没有设置好Ｘ Ｗindow 系统，那么我们只能重新安装才能在安装结束后使用Ｘ窗口环境。', 'cf40692e-8e6e-4074-8288-4d02f3b5a844.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:46:12', '40', '1');
INSERT INTO `topic` VALUES ('4526', '33', '4', '垃圾回收的优点和原理。并考虑2种回收机制', '15571407-501c-4e5b-bca4-1829d8657624.', null, null, null, null, null, null, '垃圾回收的优点和原理。并考虑2种回收机制', '', '0', '2017-12-25 21:46:21', '50', '1');
INSERT INTO `topic` VALUES ('4527', '26', '4', '对字符串操作的函数', '0a8df0da-61f3-4822-a31d-53abf248b85e.', null, null, null, null, null, null, 'ASCII() –函数返回字符表达式最左端字符的ASCII 码值\r\nCHR() –函数用于将ASCII 码转换为字符\r\n–如果没有输入0 ~ 255 之间的ASCII 码值CHR 函数会返回一个NULL 值\r\n–应该是必须给CHR()赋数字值\r\nCONCAT(STR,STR)连接两个字符串\r\nLOWER() –函数把字符串全部转换为小写\r\nUPPER() –函数把字符串全部转换为大写\r\nLTRIM() –函数把字符串头部的空格去掉\r\nRTRIM() –函数把字符串尾部的空格去掉\r\nTRIM() –同时去掉所有两端的空格\r\n实际上LTRIM(),RTRIM(),TRIM()是将指定的字符从字符串中裁减掉\r\n其中LTRIM(),RTRIM()的格式为XXXX(被截字符串，要截掉的字符串)，但是TRIM()的格式为TRIM(要截掉的一个字符 FROM 被截的字符串)\r\nSUBSTR() –函数返回部分字符串\r\nINSTR(STRING,SUBSTRING) –函数返回字符串中某个指定的子串出现的开始位置，如果不存在则返回0\r\nREPLACE(原来的字符串，要被替换掉的字符串，要替换成的字符串)\r\nSOUNDEX() –函数返回一个四位字符码\r\n–SOUNDEX函数可用来查找声音相似的字符串但SOUNDEX函数对数字和汉字均只返回NULL 值 \r\n', '', '0', '2017-12-25 21:46:36', '47', '1');
INSERT INTO `topic` VALUES ('4528', '26', '2', 'SCSI是工作站和服务器硬盘所采用的标准接口，在配置网络服务器时优先考虑SCSI 接口磁盘。', '85b872ca-e88e-4dd7-be1a-4e6f87e903a2.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:46:59', '40', '1');
INSERT INTO `topic` VALUES ('4529', '26', '4', 'oracle中查询系统时间', '7fff36cd-c517-4b78-aef8-5b25f33665bb.', null, null, null, null, null, null, 'SELECT SYSDATE FROM DUAL', '', '0', '2017-12-25 21:47:08', '47', '1');
INSERT INTO `topic` VALUES ('4530', '18', '4', '触发器的作用，什么时候用触发器,创建触发器的步骤，触发器里是否可以有commit, 为什么?', '768a720a-ad24-4f3b-9970-86c3ffefcd73.', null, null, null, null, null, null, '触发器的作用，什么时候用触发器,创建触发器的步骤，触发器里是否可以有COMMIT, 为什么?\r\n答案：触发器是可以由事件来启动运行的，存在于数据库服务器中的一个过程。\r\n他的作用：可以实现一般的约束无法完成的复杂约束，从而实现更为复杂的完整性要求。\r\n使用触发器并不存在严格的限定，只要用户想在无人工参与的情况下完成一般的定义约束不可以完成的约束，来保证数据库完整性，那么就可以使用触发器。\r\n由于触发器主要是用来保证数据库的完整性的，所以要创建一个触发器，首先要明确该触发器应该属于那一种（DML，INSTEAD OF，SYSTEM）因为他们各有个的用途；其次就是要确定触发器被触发以后所设计到的数据。\r\n出发器中不可以使用COMMIT', '', '0', '2017-12-25 21:47:52', '47', '1');
INSERT INTO `topic` VALUES ('4531', '26', '4', '数字函数', '514aa1b1-5b81-4bcd-b853-6d72287ecb82.', null, null, null, null, null, null, 'ABS()绝对值EXP(VALUE)E的VALUE次幂CEIL()大于等于该值的最小整数FLOOR()小于等于该值的最大整数TRUNC(VALUE,PRECISION)保留PRECISION个小数截取VALUEROUND(VALUE,PRECISION)保留PRECISION个小数对VALUE进行四舍五入 SIGN()根据值为正负零返回1，-1，0MOD()取模操作POWER(VALUE,EXPONENT)VALUE的EXPONENT次幂SQRT()求平方根', '', '0', '2017-12-25 21:48:07', '47', '1');
INSERT INTO `topic` VALUES ('4534', '26', '4', '关系数据库系统与文件数据库系统的区别在那里?关系数据库系统一般适用那些方面?', '2f771f35-d089-414f-8d7e-662d86311118.', null, null, null, null, null, null, '关系数据库系统文件系统的区别在于：\r\n首先，关系性数据库的整体数据是结构化的，采用关系数据模型来描述，这是它与文件系统的根本区别。（数据模型包括：数据结构，数据操作以及完整性约束条件）\r\n其次，关系数据库系统的共享性高，冗余低可以面向整个系统，而文件系统则具有应用范围的局限性，不易扩展。\r\n第三，关系数据库系统采用两级映射机制保证了数据的高独立性，从而使得程序的编写和数据都存在很高的独立性。这方面是文件系统无法达到的，它只能针对于某一个具体的应用。（两级映射：保证逻辑独立性的外模式/模式映射和保证物理独立性的内模式/模式映射。外模式：用户模式，是数据库用户的局部数据的逻辑结构特征的描述。模式：数据库全体数据的逻辑结构特征的描述。内模式：也就是数据最终的物理存储结构的描述。）\r\n第四，就是关系性数据库系统由统一的DBMS进行管理，从而为数据提供了如安全性保护，并发控制，完整性检查和数据库恢复服务。\r\n', '', '0', '2017-12-25 21:48:55', '47', '1');
INSERT INTO `topic` VALUES ('4535', '18', '2', ' 在安装过程中设置分区是，我们可以设置使用Raid磁盘阵列方式', '3e6d4b60-7fa0-44ae-9ffa-91e5f7cd17ca.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:49:01', '29', '1');
INSERT INTO `topic` VALUES ('4536', '33', '4', '如何给weblogic指定大小的内存? ', '8c8beb71-76cb-4b28-85d0-71123106317f.', null, null, null, null, null, null, '在启动WEBLOGIC的脚本中（位于所在DOMIAN对应服务器目录下的STARTSERVERNAME），增加SET MEM_ARGS=-XMS32M -XMX200M，可以调整最小内存为32M，最大200M ', '', '0', '2017-12-25 21:49:11', '50', '1');
INSERT INTO `topic` VALUES ('4537', '18', '4', '触发器的概念,存储过程的概念.', '874ceffd-3c40-4876-b386-851ec1bb5bb8.', null, null, null, null, null, null, '触发器： 是存储在数据库中的过程，当表被修改（增、删、改）时它隐式地被激发。\r\n存储过程：是数据库语言SQL的集合，同样也存储在数据库中，但是他是由其他应用程序来启动运行或者也可以直接运行。', '', '0', '2017-12-25 21:49:24', '47', '1');
INSERT INTO `topic` VALUES ('4538', '18', '2', '在Linux系统中，字符设备依靠自己实现IO缓冲，而块设备通常以512或1024字节节(甚至更大)的块进行通信，是通过系统内核实现IO缓冲', 'dc674b5b-f16c-4d35-b02c-686c8f476388.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:49:26', '29', '1');
INSERT INTO `topic` VALUES ('4539', '26', '4', '基本SQL语句有哪些.', 'dcdcc011-3c2c-4f2a-94fd-8b6be14f5260.', null, null, null, null, null, null, 'SELECT、INSERT、UPDATE、DELETE、CREATE、DROP、TRUNCATE', '', '0', '2017-12-25 21:49:35', '47', '1');
INSERT INTO `topic` VALUES ('4540', '26', '2', '如果有红旗Linux 的安装光盘，那么引导安装程序的过程首先要设置当前计算机BIOS 的启动顺序，把CD-ROM 作为第一个启动搜索选项 ', 'a8f1bf21-9ec8-4672-a9ca-0ba68b71c711.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:50:02', '40', '1');
INSERT INTO `topic` VALUES ('4541', '18', '2', '当前系统中的第二个软驱设备(B，在linux下一般表示为/dev/fd2', 'b6756092-8f9d-48eb-b436-41c715d1dd91.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:51:08', '29', '1');
INSERT INTO `topic` VALUES ('4542', '18', '2', 'root用户(UID=0)总是被NFS服务器认为是未知的，除非它们被包含在root选项中。默认时，NFS总是把不安全的请求当作匿名请求接受', 'ac1ecef1-c743-4958-900c-c3b1f2cbf5e9.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:51:37', '29', '1');
INSERT INTO `topic` VALUES ('4543', '26', '2', '当决定把一台计算机配置为一个NIS 从服务器时，需要首先把它配置为一个NIS 客户机，并验证它是否可以通过ypcat 命令访问服务器的映射 。', 'dfc0a842-0e23-41cb-aa50-ac3421a84d33.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:51:54', '40', '1');
INSERT INTO `topic` VALUES ('4544', '18', '2', '为了安全，对于NFS文件系统只能在启动系统后，由管理员手工安装。', 'b3e0b3ec-8b82-4ba5-bf43-45918a4b0451.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:52:08', '29', '1');
INSERT INTO `topic` VALUES ('4545', '3', '4', 'Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有', '8aac4b0a-39a8-4c5a-b1c9-0f97b2196429.', null, null, null, null, null, null, 'COLLECTION：代表一组对象，每一个对象都是它的子元素。\r\nSET：不包含重复元素的COLLECTION。\r\nLIST：有顺序的COLLECTION，并且可以包含重复元素。\r\nMAP：可以把键(KEY)映射到值(VALUE)的对象，键不能重复。', '', '0', '2017-12-25 21:52:13', '64', '1');
INSERT INTO `topic` VALUES ('4546', '18', '2', '在linux系统下，我们可以将文件系统视为一个统一的目录树结构', 'aac67915-9e6b-4bae-b4db-61088c2a08ec.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:52:28', '29', '1');
INSERT INTO `topic` VALUES ('4547', '33', '4', '实际编写和调试存储过程或触发器.', '7462cc5d-1913-441d-afb9-5d12e8942355.', null, null, null, null, null, null, '不知道', '', '0', '2017-12-25 21:52:31', '47', '1');
INSERT INTO `topic` VALUES ('4548', '26', '2', '系统中的每个设备都有一个主设备号，子设备号，同时拥有一个单独的设备驱动程序，主设备号用来确定使用什么驱动程序，子设备号是 设备代码，而驱动程序则是用于和设备通信的实际代码', '1147ca4c-b150-48a1-b4f4-f313a510e753.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:52:40', '40', '1');
INSERT INTO `topic` VALUES ('4550', '26', '2', '系统日志记录守护进程syslogd 的配置文件 syslog.conf的配置，可以分为两个部分，第一部分用于区分消息的类型，第二部分用于设置消 息发送的目的地。', '59f0dc67-ba88-4612-8fed-b3976ca7ed0c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:54:25', '40', '1');
INSERT INTO `topic` VALUES ('4551', '26', '2', '对于已经通过NFS 输出的目录，我们可以进一步进入它的子目录，并通过NFS 将子目录输出', '92da3786-dcb8-4bf4-8b98-0ad96976898b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:54:34', '40', '1');
INSERT INTO `topic` VALUES ('4552', '4', '1', '下面哪个不是Form的元素? (   )', 'b5988301-6f9e-4c35-8f26-779d602ec45b.', 'Input', 'textarea', 'select', 'table', '', '', 'D', '', '0', '2017-12-25 21:54:35', '50', '1');
INSERT INTO `topic` VALUES ('4553', '26', '4', 'view 的概念 ? 何时应用?', '744df962-4b8d-49f3-a052-bb41013dec42.', null, null, null, null, null, null, ' VIEW 是对表级数据的多角度的透视,适用于对查询安全性、灵活性有一定要求的环境', '', '0', '2017-12-25 21:54:40', '47', '1');
INSERT INTO `topic` VALUES ('4554', '26', '2', '在使用fsck 检查文件系统时，最好先卸载待检查的文件系统，保证它当前没有被使用', '0edb78b8-f31b-4646-9200-4670147b8f96.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:55:52', '40', '1');
INSERT INTO `topic` VALUES ('4555', '5', '1', 'HTML页面中，下面哪个表示空格(    )', '06acf71c-8c41-4464-848c-bf3a7eca8a9c.', '&amp;', '&nbsp;', '&copy;', '&lt;', '', '', 'B', '', '0', '2017-12-25 21:55:57', '50', '1');
INSERT INTO `topic` VALUES ('4556', '26', '2', 'NIS客户机使用ypbind 进程探测本域中可用的NIS 服务器。', '2149341f-ac99-47e4-8994-1b47968e3fed.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:57:33', '40', '1');
INSERT INTO `topic` VALUES ('4557', '5', '1', '&lt;td align=”XXX”&gt;中的align属性是什么含义? (   )', 'd9e46df9-0293-49e2-88ca-d8ca222b6102.', '加粗   ', '斜体    ', '对齐方式', '边框样式', '', '', 'C', '', '0', '2017-12-25 21:57:42', '50', '1');
INSERT INTO `topic` VALUES ('4558', '26', '2', '安装Linux 到逻辑分区是一种比较简便的方式，但是它只能工作在逻辑分区空间足够Linux 系统使用的情况下。', '0e418759-30fa-4481-8570-4e26d6784517.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:57:46', '40', '1');
INSERT INTO `topic` VALUES ('4559', '26', '2', '我们用术语“柱面”，指示所有磁盘面的同一个磁道贯通所形成的假想的几何柱面，中心轴是硬盘的旋转轴', '8f3031de-787a-4723-a954-0f770caf66a4.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:57:58', '40', '1');
INSERT INTO `topic` VALUES ('4560', '3', '4', 'Java中垃圾回收有什么目的？', 'a658175a-cb15-412b-8e05-515eece08a0a.', null, null, null, null, null, null, '垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。', '', '0', '2017-12-25 21:58:07', '64', '1');
INSERT INTO `topic` VALUES ('4561', '26', '2', '为了建立用户的磁盘限额，我们只需要在该用户的工作目录下建立quota.user 和quota.group 文件就可以了。', 'cd8c42f2-3b60-4a5b-9b7e-2421d90db670.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:58:08', '40', '1');
INSERT INTO `topic` VALUES ('4562', '26', '2', '为了能让其它用户使用cd 命令进入该目录，目录需要设置其它用户的读权限', 'c7d30568-d95a-437b-87dc-2ce094bf53b6.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:58:22', '40', '1');
INSERT INTO `topic` VALUES ('4563', '26', '4', 'EXCEPTION_INIT产生例外', '647171c4-3655-4fe2-95ef-b73d2fc38fe5.', null, null, null, null, null, null, '首先要DECLARE 声明一个例外名；然后将例外名和错误代码绑定PRAGMA EXCEPTION_INIT(错误名,错误代码)；最后在EXCEPTION 处WHEN 错误名THEN', '', '0', '2017-12-25 21:58:25', '47', '1');
INSERT INTO `topic` VALUES ('4565', '18', '4', '判断下列论述是否正确。 (1) 一个事务中的某条SQL命令提交时，其它SQL命令可以不提交。 (2) 在一个关系表中，主键可唯一标识一行记录。 (3) 一个关系表中的外键必定是另一表中的主键。 (4) 回滚可以在事务失败时，回到操作事务前的数据状态。', '272df67f-c15b-424c-97b7-1af1518e7b6d.', null, null, null, null, null, null, '(1)错误 (2)正确 (3)正确 (4)正确', '', '0', '2017-12-25 21:58:42', '47', '1');
INSERT INTO `topic` VALUES ('4566', '26', '2', '. 如果有多个SCSI 硬盘，/boot启动目录必须放在标识为0的SCSI 硬盘上，其它SCSI 标识均不行。', '95cef505-31d1-43c7-8429-c037a1f3ada8.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:58:57', '40', '1');
INSERT INTO `topic` VALUES ('4570', '26', '2', '除root 用户外，其它用户只能用kill 命令终止自己的创建的进程', '358171e4-f808-432e-9f71-56710d7483fe.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:59:26', '40', '1');
INSERT INTO `topic` VALUES ('4571', '26', '4', '以下哪些手段可保证数据库中数据的完整性和一致性： (1)自定义数据类型 (2)触发器 (3)主键和外键 (4)事务', '0ac89c96-fb6f-4ad6-a393-f0f22a78ece7.', null, null, null, null, null, null, ' (1)(2)(3)(4) （为什么有1）', '', '0', '2017-12-25 21:59:27', '47', '1');
INSERT INTO `topic` VALUES ('4572', '26', '2', '如果用户拥有目录的写许可，则该用户可以创建、删除或修改目录中的任何文件或子目录，甚至于属于其它用户的文件和子目录。', '2ae81e5e-0b55-4ebf-9eb2-501703539abc.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 21:59:46', '40', '1');
INSERT INTO `topic` VALUES ('4573', '3', '4', 'JVM的永久代中会发生垃圾回收么？', '9080ec3d-ff46-42ce-97c4-b24392f96be5.', null, null, null, null, null, null, '垃圾回收不会发生在永久代', '如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)。如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的。这就是为什么正确的永久代大小对避免Full GC是非常重要的原因。', '0', '2017-12-25 21:59:47', '69', '1');
INSERT INTO `topic` VALUES ('4574', '26', '4', '使用存储过程访问数据库比直接用SQL语句访问有哪些优点?', '37c5077b-0a83-4dd6-b13c-dadc63bb05de.', null, null, null, null, null, null, '存储过程是预编译过的，执行时勿须编译，执行速度更快；存储过程封装了一批SQL语句，便于维护数据的完整性与一致性；可以实现代码的复用。', '', '0', '2017-12-25 21:59:50', '47', '1');
INSERT INTO `topic` VALUES ('4575', '26', '2', '一个好的用户口令应当至少有3个字符长，并不要使用个人信息。', 'bf7a8d92-257d-46b3-b7e8-35d4f6e79b30.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 21:59:57', '40', '1');
INSERT INTO `topic` VALUES ('4576', '26', '2', 'Linux 系统上的终端口对任何人都是可写的，从而使用户可以用write 命令互相发送信息。', '8a2be69d-2e5c-469f-a687-31de2f96f9b2.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:00:09', '40', '1');
INSERT INTO `topic` VALUES ('4577', '26', '4', '对于精通的数据库系统描述其体系结构,主要包括存储机制、回滚机制、运行机制等.', '206bbaaf-cc04-41d6-9a32-646b9ffe8e30.', null, null, null, null, null, null, '对ORACLE 系统而言,描述SGA的结构; 后台PMON,CKPT、LGWR,SMON等进程的功能;表空间的分配策略; 回滚段的结构', '', '0', '2017-12-25 22:00:15', '47', '1');
INSERT INTO `topic` VALUES ('4578', '5', '1', '单选按钮是下列哪一个? (       )', '1dbb7aff-f147-4520-86b1-8843d9a2fee8.', '<input name=”sex” type=”text” value=”0” />', '<input name=”sex” type=”checkbox” value=”0” />', '<input name=”sex” type=”option” value=”0” />', '<input name=”sex” type=”radio” value=”0” />', '', '', 'D', '', '0', '2017-12-25 22:00:15', '50', '1');
INSERT INTO `topic` VALUES ('4579', '26', '4', '串行(serial)收集器和吞吐量(throughput)收集器的区别是什么？', 'faac7c01-3df5-46dc-a19b-763f5346fb62.', null, null, null, null, null, null, '吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序。而串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了。', '', '0', '2017-12-25 22:00:25', '69', '1');
INSERT INTO `topic` VALUES ('4580', '26', '4', '对于精通的数据库系统描述其数据一致性的保证机制,包括lock,事务一致性等.', 'bbd65a4e-b3ba-47fb-b069-dbcf4daae98f.', null, null, null, null, null, null, '在并发环境下,采用多种机制保持其数据的一致性,如ORACLE系统提供的事务级的一致性、行级锁、表级锁等等.\r\n', '', '0', '2017-12-25 22:00:39', '47', '1');
INSERT INTO `topic` VALUES ('4581', '5', '1', '下边哪个不是JSP内置对象? (   )', 'f4ad183c-6edf-4616-a8c4-eb6d33e2a1a3.', 'Session    ', 'request    ', 'cook    ', 'out', '', '', 'C', '', '0', '2017-12-25 22:00:45', '50', '1');
INSERT INTO `topic` VALUES ('4582', '18', '2', '一般来说，具有偶数号的内核(例如0 、2 、4 ，等等) 被认为是稳定的内核。', '1dfc5f71-ee07-419c-a5d7-fcc25314de17.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:00:48', '40', '1');
INSERT INTO `topic` VALUES ('4583', '26', '2', '在应用samba 服务时，我们可以设置valid users 控制可以访问共享服务的合法用户。', '766b9441-bfe2-4343-ab43-ef5f6d5c92c5.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:01:08', '40', '1');
INSERT INTO `topic` VALUES ('4584', '26', '2', 'SMB 协议是基于TCP/IP实现的，它是windows 下网络文件和打印共享基础。 ', 'f9e3ed54-1689-4c65-b71e-960de64cf827.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:01:23', '40', '1');
INSERT INTO `topic` VALUES ('4585', '5', '1', '下边哪个是JSP指令标记(  )', '3e77c6ef-afa0-4606-bde7-a844e3b9e043.', '<%……%>', '<%!……%>', '<%@……%>', '<%=……%>', '', '', 'C', '', '0', '2017-12-25 22:01:23', '50', '1');
INSERT INTO `topic` VALUES ('4586', '3', '4', 'Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?', '0dc4f3d5-985c-42cc-b50c-ad769f7e2f35.', null, null, null, null, null, null, 'JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收。', '', '0', '2017-12-25 22:01:25', '69', '1');
INSERT INTO `topic` VALUES ('4587', '26', '2', '我们可以使用fg 命令将僵化进程调入前台工作。', 'e800433e-8826-451e-9c7f-5bce903ace4b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:01:38', '40', '1');
INSERT INTO `topic` VALUES ('4588', '3', '4', '如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？', '88c81a26-af46-48a3-9a9d-bcc8196ba5a8.', null, null, null, null, null, null, '不会', '在下一个垃圾回收周期中，这个对象将是可被回收的。', '0', '2017-12-25 22:01:51', '69', '1');
INSERT INTO `topic` VALUES ('4589', '26', '2', '由于系统需要保证/etc/smbpasswd和/etc/passwd同步，所以在密码字段上它们需要保持相同的格式', 'c977bee1-5920-42d6-aae0-b7bf46d5c432.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:01:52', '40', '1');
INSERT INTO `topic` VALUES ('4591', '26', '2', '网络设备不一定是物理设备，象loopback 这样的设备就是纯软件设备', '20c93b83-7b55-4ce8-be13-23fe214b9480.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:02:01', '40', '1');
INSERT INTO `topic` VALUES ('4592', '5', '1', '当在JSP文件中要使用到ArrayList对象时，应在JSP文件中加入以下哪个语句？( )', '591c4323-96bd-4c21-8b1f-2fa1e9ea5497.', '<jsp:include file=”java.util.*” />', '<jsp:include page=”java.util.*” />', '<%@ page import=”java.util.*” />', '<%@ page include=”java.util.*” />', '', '', 'C', '', '0', '2017-12-25 22:02:06', '50', '1');
INSERT INTO `topic` VALUES ('4593', '5', '1', '关于JavaBean的说法，哪个是正确的？(  )', '793dbb84-b40e-4944-8683-491d5b7f574d.', 'JavaBean的具体类可以不是public的', 'JavaBean可以只提供一个带参数的构造器', 'JavaBean可以象Html标记一样不关闭', 'JavaBean可以保存状态', '', '', 'D', '', '0', '2017-12-25 22:02:45', '50', '1');
INSERT INTO `topic` VALUES ('4594', '33', '4', '讲讲类的实例化顺序，比如父类静态数据，构造函数，字段，子类静态数据，构造函数，字段，当 new 的时候， 他们的执行顺序。', 'de034491-9fb8-4b61-9f14-6bdd3bd02e6a.', null, null, null, null, null, null, '此题考察的是类加载器实例化时进行的操作步骤（加载–>连接->初始化）。 \r\n父类静态代变量、 \r\n父类静态代码块、 \r\n子类静态变量、 \r\n子类静态代码块、 \r\n父类非静态变量（父类实例成员变量）、 \r\n父类构造函数、 \r\n子类非静态变量（子类实例成员变量）、 \r\n子类构造函数。 ', '', '0', '2017-12-25 22:03:28', '70', '1');
INSERT INTO `topic` VALUES ('4595', '33', '4', '用过哪些 Map 类，都有什么区别，HashMap 是线程安全的吗,并发下使用的 Map 是什么，他们内部原理分别是什么，比如存储方式， hashcode，扩容， 默认容量等。', 'eb5e0743-efa0-4d02-8021-bb981d6d2f30.', null, null, null, null, null, null, 'ASHMAP是线程不安全的，HASHMAP是数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，采用哈希表来存储的， ', '', '0', '2017-12-25 22:03:55', '70', '1');
INSERT INTO `topic` VALUES ('4596', '4', '1', 'JavaBean的生命周期中，哪个是用来跟踪用户会话的(        )', '33f57c30-a581-47c0-b02c-0f6dbeeb7cff.', 'session', 'request', 'page', 'application', '', '', 'A', '', '0', '2017-12-25 22:03:56', '50', '1');
INSERT INTO `topic` VALUES ('4597', '26', '2', '为表述算术表达式2*（3+5），在bash 环境下我们应当将其写为： $expr 2*(3+5) ', 'cc2a7bd9-3f5c-4225-803d-d13b6549dc90.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:04:00', '40', '1');
INSERT INTO `topic` VALUES ('4598', '26', '2', '在使用硬链接时，我们可以使硬链接跨越不同的文件系统与另一个目录链接', 'ed3d2fe5-7d19-468d-9948-b0c943cc7253.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:04:17', '40', '1');
INSERT INTO `topic` VALUES ('4599', '33', '4', '有没有有顺序的 Map 实现类， 如果有， 他们是怎么保证有序的。', '1aca0752-8e0c-435e-ad6a-8c466a508e4a.', null, null, null, null, null, null, 'TREEMAP和LINKEDHASHMAP是有序的（TREEMAP默认升序，LINKEDHASHMAP则记录了插入顺序）。 ', '', '0', '2017-12-25 22:04:17', '70', '1');
INSERT INTO `topic` VALUES ('4600', '4', '1', '要在session对象中保存属性，可以使用以下哪个语句(      )', 'be7f8469-b678-42b9-89ad-38cf379b1ef2.', 'session.getAttribute(“key”,”value”)', 'session.setAttribute(“key”,”value”)', 'session.setAttribute(“key”)', ' session.getAttribute(“key”)', '', '', 'B', '', '0', '2017-12-25 22:04:27', '50', '1');
INSERT INTO `topic` VALUES ('4601', '26', '4', '你在项目现场，用户要求你向正在运行的表中添加一个字段，你该怎么做?', '6f1f6573-489d-4821-a6a9-6339cc9582a0.', null, null, null, null, null, null, '第一种方法：关闭数据库，然后使用受限模式打开，由SYS/SYSDBA来进行\r\n第二种方法：不关闭数据库，将数据库置于静默状态在SYS/SYSDBA模式下用ALTER SYSTEM QUISCE RESTRICTED，这种状态下只有SYS/SYSDBA才可以对数据库进行操作，修改完毕之后再退出静默状态ALTER SYSTEM UNQUISCE\r\n在这里复习到了数据库的两种特殊状态：静默状态(QUISCE)和挂起状态\r\n静默状态就是只有特殊权限的SYS/SYSDBA才可以对数据库进行操作，使用ALTER SYSTEM QUISCE RESTRICTED以后系统将等候活动着的会话主动结束，同时阻止建立新的会话，系统挂起所有的SQL语句，等恢复以后再重新激活会话执行挂起的SQL。\r\n挂起状态就是系统将数据库所有对物理文件（数据文件，控制文件，日志文件）的I/O操作都暂停，但是并不禁止非DBA用户对数据库进行操作。这种状态主要用于进行数据库备份。', '', '0', '2017-12-25 22:04:59', '47', '1');
INSERT INTO `topic` VALUES ('4602', '33', '4', '抽象类和接口的区别，类可以继承多个类么，接口可以继承多个接口么,类可以实现多个接口么.', '85744a3a-e78a-44c1-a049-633e9f53be30.', null, null, null, null, null, null, '1、抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，接口变量必须指向实现所有接口方法的类对象。 \r\n2、抽象类要被子类继承，接口要被类实现。 \r\n3、接口只能做方法申明，抽象类中可以做方法申明，也可以做方法实现 \r\n4、接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。 \r\n5、抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。 \r\n6、抽象方法只能申明，不能实现。ABSTRACT VOID ABC();不能写成ABSTRACT VOID ABC(){}。 \r\n7、抽象类里可以没有抽象方法 \r\n8、如果一个类里有抽象方法，那么这个类只能是抽象类 \r\n9、抽象方法要被实现，所以不能是静态的，也不能是私有的。 \r\n10、接口可继承接口，并可多继承接口，但类只能单根继承。', '', '0', '2017-12-25 22:05:08', '70', '1');
INSERT INTO `topic` VALUES ('4603', '18', '4', 'Oracle中回滚的概念?回滚段有什么作用。', 'f52f1b3f-d120-4625-819f-ad8c94d449fa.', null, null, null, null, null, null, '回滚就是在事务提交之前将数据库数据恢复到事务修改之前数据库数据状态。\r\n回滚段就是为回滚提供依据，记录的是事务操作数据库之前的数据或者对应于以前操作的操作，这个内容要根据以前的操作而定。比如说以前事务操作如果是UPDATE那么回滚段则存储UPDATE以前的数据，如果事务是DELETE操作那么存储的则是与之相对应的INSERT操作语句，相反如果事务操作是INSERT那么记录相应的则是DELETE操作了。', '', '0', '2017-12-25 22:05:17', '47', '1');
INSERT INTO `topic` VALUES ('4604', '26', '2', 'df命令显示各种文件和目录所使用的硬盘空间数，并且可以显示系统中最多或者最少的硬盘空间的位置。', 'e7812e83-df09-4f67-8fbe-87e4d687c87d.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:05:24', '40', '1');
INSERT INTO `topic` VALUES ('4605', '26', '4', '继承和聚合的区别在哪。', 'a4b489b8-3d08-4aac-81b2-0784a54476f4.', null, null, null, null, null, null, '继承指的是一个类（称为子类、子接口）继承另外的一个类（称为父类、父接口）的功能，并可以增加它自己的新功能的能力，继承是类与类或者接口与接口之间最常见的关系；在JAVA中此类关系通过关键字EXTENDS明确标识，在设计时一般没有争议性； \r\n聚合是关联关系的一种特例，他体现的是整体与部分、拥有的关系，即HAS-A的关系，此时整体与部分之间是可分离的，他们可以具有各自的生命周期，部分可以属于多个整体对象，也可以为多个整体对象共享；比如计算机与CPU、公司与员工的关系等；表现在代码层面，和关联关系是一致的，只能从语义级别来区分； ', '', '0', '2017-12-25 22:05:39', '70', '1');
INSERT INTO `topic` VALUES ('4606', '26', '2', '为了安装红旗Linux ，在分区时，我们至少需要分出二个区，用来安装根(/)文件系统和交换(/swap)文件系统。', '0222df75-e5da-4136-be53-c52bc5300ef3.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:05:40', '40', '1');
INSERT INTO `topic` VALUES ('4607', '4', '4', 'Java集合框架是什么？说出一些集合框架的优点？', '4fa5ffbc-c19b-43b0-98d2-c448b7d51ab2.', null, null, null, null, null, null, '（1）使用核心集合类降低开发成本，而非实现我们自己的集合类。\r\n\r\n（2）随着使用经过严格测试的集合框架类，代码质量会得到提高。\r\n\r\n（3）通过使用JDK附带的集合类，可以降低代码维护成本。\r\n\r\n（4）复用性和可操作性。', '', '0', '2017-12-25 22:05:42', '69', '1');
INSERT INTO `topic` VALUES ('4608', '26', '4', 'oracle中有哪些类型的文件?', '95c099ca-91f9-4efa-9b78-6f1d2a6e4316.', null, null, null, null, null, null, '数据文件，控制文件，日志文件和数据字典', '', '0', '2017-12-25 22:05:50', '47', '1');
INSERT INTO `topic` VALUES ('4609', '26', '4', '讲讲你理解的 nio和 bio 的区别是啥，谈谈 reactor 模型。', 'bb258caf-3251-458f-ae0c-b90e7afd82fc.', null, null, null, null, null, null, 'IO是面向流的，NIO是面向缓冲区的 ', '', '0', '2017-12-25 22:06:11', '70', '1');
INSERT INTO `topic` VALUES ('4610', '4', '4', '为何Collection不从Cloneable和Serializable接口继承？', '4678e885-27a8-49db-be9f-cc3abfb8bc9a.', null, null, null, null, null, null, 'COLLECTION接口指定一组对象，对象即为它的元素。如何维护这些元素由COLLECTION的具体实现决定。例如，一些如LIST的COLLECTION实现允许重复的元素，而其它的如SET就不允许。很多COLLECTION实现有一个公有的CLONE方法。然而，把它放到集合的所有实现中也是没有意义的。这是因为COLLECTION是一个抽象表现。重要的是实现。', '', '0', '2017-12-25 22:06:45', '69', '1');
INSERT INTO `topic` VALUES ('4611', '18', '4', '介绍一下oracle的体系结构?', '5c4a10ba-5ceb-4476-ac54-534f3e975f16.', null, null, null, null, null, null, '逻辑体系结构：块，区，段，表空间\r\n物理体系结构：表空间，三大文件\r\n软件体系结构：SGA,后台进程', '', '0', '2017-12-25 22:06:45', '47', '1');
INSERT INTO `topic` VALUES ('4612', '26', '2', '在安装过程中的安装软件包步骤时，为了解决软件包的相关性问题，我们最好能选上安装支持的软件包选项', 'bfc2a3f4-b23a-4d1f-86ee-a48e5f811d06.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:06:52', '40', '1');
INSERT INTO `topic` VALUES ('4613', '26', '4', '谈谈对oracle的row_ id是否理解?请简述?', '09d31c03-6a18-46d2-a1e3-a80610583a1c.', null, null, null, null, null, null, 'ORACLE的ROW_ID是一个伪列，其个是为18个字节可将这18个字节用6363来划分，分别表示段编号，数据文件编号，数据块编号和记录编号。\r\nROW_ID表示的是一个记录的物理存储地址。', '', '0', '2017-12-25 22:06:55', '47', '1');
INSERT INTO `topic` VALUES ('4614', '26', '2', '动态主机配置协议(Dynamic Host Configuration Protocol ，D H C P )是一种以集中方式为T C P / I P 分配I P 地址和其他相关参数的方法，它与通常的每台主机记录自己静态信息的方法不同。D H C P 服务器应该是一台可操作的、持续连接到网络上的计算机，当客户机需要其服务时，它必须可用，但是当它任务过于繁忙时，我们可以设置辅助DHCP 服务器，以达到任务的平衡处理。', '0b88a4ec-3bb4-4b2f-8b4e-fe4581eaeaa2.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:07:11', '40', '1');
INSERT INTO `topic` VALUES ('4615', '26', '4', 'oracle中如何删除用户?', 'd2c72c51-7238-4c67-b08e-913a1586c015.', null, null, null, null, null, null, 'ORACLE中使用DROP USER来删除用户，如果使用DROP USER CASCADE那么用户的对象也同时被删除掉。为了达到删除用户的效果而又不影响对用户下的对象的使用可以使用ALTER USER USERNAME ACCOUNT LOCK将用户锁定。', '', '0', '2017-12-25 22:07:27', '47', '1');
INSERT INTO `topic` VALUES ('4616', '26', '2', '在设置NIS 客户机时，需要配置/etc/sysconfig/network文件来确定诸如主机名、口令文件以及组文件的信息的NIS 服务名称', '94743222-eaff-4067-848d-e609827911fb.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:07:35', '40', '1');
INSERT INTO `topic` VALUES ('4617', '18', '4', '客户端对服务器端的oralce操作的流程是什么?', '0c9e0a4a-6292-4ca4-bb42-73bd7bde4d5e.', null, null, null, null, null, null, '专用模式下：用户通过应用程序进程试图去得到一个与ORACLE数据库服务器的连接客户端通过网络传递连接请求，ORACLE服务器则使用监听进程监听用户请求，并且来验证用户身份，通过验证则为用户分配一专用服务进程用户提交SQL语句专用服务进程则首先在SGA区的共享池中检查是否有与该SQL语句相似的已经被解析执行并且缓存的SQL语句，如果有则采用它的解析结果和执行计划执行SQL语句，如果没有则对SQL语句进行语法解析生成执行计划通过解析则执行操作获取数据将执行结果返回给客户。\r\n共享模式下：与专用模式不同在于当监听程序验证用户的合法性以后并不为它分配一个专用的服务进程，而是将该请求与响应的调度进程相联系起来，并将起放入到一个请求队列中，最终由响应的DNNN来从调度队列中获取一个请求并为之分配一个空闲的服务进程，接下来有服务进程对该请求进行服务操作和专用方式下相同，处理完成之后由服务进程先将结果放入一个返回队列最后再由调度进程（DNNN）将返回队列中的结果返回给对应的用户。', '', '0', '2017-12-25 22:07:40', '47', '1');
INSERT INTO `topic` VALUES ('4618', '4', '4', '为何没有像Iterator.add()这样的方法，向集合中添加元素？', 'b63be0bc-c4e0-44b5-b7b1-72a93376751f.', null, null, null, null, null, null, '语义不明，已知的是，ITERATOR的协议不能确保迭代的次序。然而要注意，LISTITERATOR没有提供一个ADD操作，它要确保迭代的顺序。', '', '0', '2017-12-25 22:07:41', '69', '1');
INSERT INTO `topic` VALUES ('4619', '26', '2', '安装Linux 需要一块连续的硬盘空间。', 'c7c49f37-4905-4782-b2b0-e1819547d428.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:07:45', '40', '1');
INSERT INTO `topic` VALUES ('4620', '18', '4', 'exits和in在ORALCE数据库中那个执行效率更高?', 'dedffde6-4daa-4a3a-ad8a-0072e9c8524c.', null, null, null, null, null, null, 'EXITS执行效率比IN高。因为：', '', '0', '2017-12-25 22:07:51', '47', '1');
INSERT INTO `topic` VALUES ('4621', '26', '2', '我们可以订阅新闻组、加入新闻列表获得最新的Linux 资料。', '8bc2b052-6ffa-4869-b277-91008e0c56b2.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:07:54', '40', '1');
INSERT INTO `topic` VALUES ('4622', '26', '2', '如果命令在前台运行，那么用户在此进程结束前不能继续使用当前的shell ', 'aea00895-dcd5-434f-94a9-b69ddb94e322.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:08:02', '40', '1');
INSERT INTO `topic` VALUES ('4623', '18', '4', '如何判断游标已经到最后一行?', '950e0edd-9d92-4271-83dd-a34d1a8b6a75.', null, null, null, null, null, null, 'CURSOR_NAME%NOTFOUND', '', '0', '2017-12-25 22:08:05', '47', '1');
INSERT INTO `topic` VALUES ('4624', '26', '2', '如果设置了map to guest=bad user 则当用户提供了一个正确的用户名而密码不正确的情况下，用户将被映射成guest 用户登录', 'abd2710d-648e-49c1-b0d8-035e60b56ec0.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:08:12', '40', '1');
INSERT INTO `topic` VALUES ('4625', '18', '4', '聚簇索引和普通索引在不同的SQL语句中哪个效率更高??（笔试题，原题回忆不起来，主题就是聚簇索引和普通索引的区别）', '2de74535-251c-47cc-a0dd-d6eddd283781.', null, null, null, null, null, null, '概念类：\r\n聚合函数? SESSION的定义和用法? ORACLE的存储过程 ? 什么是构造函数? ', '', '0', '2017-12-25 22:08:15', '47', '1');
INSERT INTO `topic` VALUES ('4626', '18', '4', '简述ORACLE中SGA的组成部分。', 'be1bad1f-2360-40ff-ac2b-cb911bfc338e.', null, null, null, null, null, null, '系统全局区包括：共享池、重做日志缓存区、数据高速缓存区，大池，JAVA池。', '', '0', '2017-12-25 22:08:31', '47', '1');
INSERT INTO `topic` VALUES ('4627', '18', '1', '在solaris下如何查看磁盘的空间使用率 ', '064c8c84-71f9-4a47-96db-242cbbfdc057.', 'dir', 'ls -al ', 'df -k ', 'sar ', '', '', 'C', '', '0', '2017-12-25 22:09:05', '43', '1');
INSERT INTO `topic` VALUES ('4628', '24', '3', '用来比较两个文件的大小是：________', '9302b495-df45-4d9b-9df8-29c035f034fc.', null, null, null, null, null, null, 'CMP', '', '0', '2017-12-25 22:09:36', '46', '1');
INSERT INTO `topic` VALUES ('4629', '32', '4', '如何实现数据库分页功能？', '7f4bd16a-b375-4643-befe-132f06656743.', null, null, null, null, null, null, '分页:”SELECT * FROM USER LIMIT “+(PAGENO-1)*PAGESIZE+”,”+PAGESIZE;', '', '0', '2017-12-25 22:09:38', '64', '1');
INSERT INTO `topic` VALUES ('4630', '4', '4', 'ArrayList和Vector有何异同点？', 'bfe74493-2aed-40d4-91af-d3cb96874996.', null, null, null, null, null, null, '（1）VECTOR是同步的，而ARRAYLIST不是。然而，如果你寻求在迭代的时候对列表进行改变，你应该使用COPYONWRITEARRAYLIST。\r\n\r\n（2）ARRAYLIST比VECTOR快，它因为有同步，不会过载。\r\n\r\n（3）ARRAYLIST更加通用，因为我们可以使用COLLECTIONS工具类轻易地获取同步列表和只读列表。', '', '0', '2017-12-25 22:09:48', '69', '1');
INSERT INTO `topic` VALUES ('4631', '26', '2', '进程的n i c e 值越低，它占用的C P U 周期越多', '1cc3ebf9-7403-436a-b94c-45543d9ca8b6.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:09:58', '40', '1');
INSERT INTO `topic` VALUES ('4633', '26', '4', '简述ORACLE的启动和关闭各有多少步骤?', '69777b55-d2b7-460f-9766-a4e8031dca76.', null, null, null, null, null, null, '启动：启动实例、装载数据库数据、打开数据库。\r\n关闭：关闭数据库、卸载数据库数据、关闭实例。', '', '0', '2017-12-25 22:10:09', '47', '1');
INSERT INTO `topic` VALUES ('4634', '26', '2', '在smb.conf 文件中指定了browseable =no，将会拒绝在合法用户对共享服务的访问，而只允许在本地机上进行加载', 'cc065d6c-efba-4887-9f4f-2a28360c7e3d.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:10:13', '40', '1');
INSERT INTO `topic` VALUES ('4635', '32', '4', 'SQL语句复杂的关联表查询，累计求和。', 'a037c3a7-453e-408c-b9e6-f88aa344c918.', null, null, null, null, null, null, '求和:SELECT * FROM USER1 UNION SELECT * FROM USER2;', '', '0', '2017-12-25 22:10:20', '64', '1');
INSERT INTO `topic` VALUES ('4636', '26', '2', '/boot目录用来存放Linux 启动时所需要的一些数据和文件，如果该目录被破坏，系统将不能够启动，缺省情况下该目录应能由普通用户读写', '2bf8a992-6f77-4c27-98cf-328e81c102f6.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:10:25', '40', '1');
INSERT INTO `topic` VALUES ('4637', '26', '2', 'Linux系统习惯上将许多设备驱动程序存储在/dev目录中。', '895d0995-ea14-4efd-a814-b18091449691.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:10:43', '40', '1');
INSERT INTO `topic` VALUES ('4638', '26', '4', '在不使用框架情况下，如何连接数据库？', '2b2d212c-bbbf-416f-85e6-0d22db740c3d.', null, null, null, null, null, null, '手动连接数据库:CONNECTION CN=NULL;PREPAREDSTATEMENT PST=NULL;RESULT RS=NULL;TRY{CLASS.FORNAME(DRIVERCLASSNAME);CN=DRIVERMANAGER.GETCONNECTION(URL,USERNAME,PASSWORD);PST=CN.PREPARESTATEMENT(“SQL”);PST.SETSTRING(1,STUDENTNAME);RESULT RS=PST.EXECUTEQUERY();WHILE(RS.NEXT()){SYSTEM.OUT.PRINTLN();}CATCH(EXCEPTION E){E.PRINTSTACKTRACE();}FINALLY{IF(RS!=NULL){RS.CLOSE();}IF(PST!=NULL){PST.CLOSE()}IF(CN!=NULL){CN.CLOSE();}}}', '', '0', '2017-12-25 22:10:48', '64', '1');
INSERT INTO `topic` VALUES ('4639', '26', '2', '如果某个用户过长时间占用某个系统资源，系统管理员必须有相应的措施剥夺他的使用权，否则将会影响其他用户的使用，甚至导致系统 的崩溃。', 'cdc732db-6840-48ef-948e-a886606981d7.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:10:56', '40', '1');
INSERT INTO `topic` VALUES ('4640', '18', '1', '以下哪个不属于iis自带的服', 'ca45bb87-cb34-4c93-b756-6b0e4a74a1da.', 'telnet服务', 'web服务', 'ftp服务', 'smtp服务 ', '', '', 'A', '', '0', '2017-12-25 22:11:02', '43', '1');
INSERT INTO `topic` VALUES ('4641', '26', '4', '在Oracle表空间的分类和作用，如排序时数据将放在什么表空间?', '7de29816-7ffa-41ff-9ea6-5610313426af.', null, null, null, null, null, null, '作用是为了突破存储容量的限制，是一个逻辑概念。排序数据放在临时表空间', '', '0', '2017-12-25 22:11:05', '47', '1');
INSERT INTO `topic` VALUES ('4642', '4', '4', 'Array和ArrayList有何区别？什么时候更适合用Array？', '750aea1c-8dc8-4147-84b9-cb08265c1cb9.', null, null, null, null, null, null, 'ARRAY可以容纳基本类型和对象，而ARRAYLIST只能容纳对象。\r\n\r\nARRAY是指定大小的，而ARRAYLIST大小是固定的。\r\n\r\nARRAY没有提供ARRAYLIST那么多功能，比如ADDALL、REMOVEALL和ITERATOR等。尽管ARRAYLIST明显是更好的选择，但也有些时候ARRAY比较好用。\r\n\r\n（1）如果列表的大小已经指定，大部分情况下是存储和遍历它们。\r\n\r\n（2）对于遍历基本数据类型，尽管COLLECTIONS使用自动装箱来减轻编码任务，在指定大小的基本类型的列表上工作也会变得很慢。\r\n\r\n（3）如果你要使用多维数组，使用[][]比LIST<LIST<>>更容易。', '', '0', '2017-12-25 22:11:09', '69', '1');
INSERT INTO `topic` VALUES ('4643', '26', '4', '数据库连接完之后，需要关闭的两个接口是什么？', '286277a4-e663-49fd-baa9-5c3ebc408747.', null, null, null, null, null, null, 'RESULT PREPARESTATEMENT 结果集和SQL传输', '', '0', '2017-12-25 22:11:10', '64', '1');
INSERT INTO `topic` VALUES ('4644', '26', '4', '关闭数据库过程中最容易抛出的异常是什么？', '66dd32e3-4063-4ecc-a0f5-b719d3b8aeeb.', null, null, null, null, null, null, 'EXCEPTION', '', '0', '2017-12-25 22:11:27', '64', '1');
INSERT INTO `topic` VALUES ('4645', '26', '4', '执行COMMIT命令时，数据库将会发生什么改变，ROLLBACK呢?', '144da865-97a0-408a-a7c1-d3143717218e.', null, null, null, null, null, null, 'COMMIT 提交时首先是与事务对应的重做日志信息将被写入到数据库物理文件中的重做日志文件中，至于是否会真正将事务操作的内容反映到数据文件还好看DBWR是否启动了。在完成数据库的插入，删除和修改操作时，只有当事务提交到数据库才算完成，有提交前只有操作数据库的本人才能看到，别人只有在最后提交完成才可以看到。\r\nROLLBACK回滚当前尚未提交的事务，使数据库恢复到事务操作前的状态。', '', '0', '2017-12-25 22:11:29', '47', '1');
INSERT INTO `topic` VALUES ('4646', '26', '1', '以下哪个平台属于sun公司特有的服务器平台', '0ec3eb38-5db7-4547-b404-fb69d531a004.', 'intel  ', 'sparc', 'power', 'ios ', '', '', 'B', '', '0', '2017-12-25 22:11:41', '43', '1');
INSERT INTO `topic` VALUES ('4647', '26', '4', '用命令创建用户，并为用户授权。', 'ae0402d5-d44b-4a83-b256-9254a8d491d9.', null, null, null, null, null, null, 'CREATE USER USER_NAME\r\nIDENTIFIED BY PASSWORD /\r\nIDENTIFIED EXTERNALLY/\r\nIDENTIFIED BLOBALLY AS ‘CN=USER’\r\nDEFAULT TABLESPACE TABLESPACE_NAME\r\nTEMPORARY TABLESPACE TABLESPACE_NAME;\r\nGRANT ROLE/PRIVILEGE TO USER_NAME;', '', '0', '2017-12-25 22:11:50', '47', '1');
INSERT INTO `topic` VALUES ('4648', '26', '2', '匿名管道又可以被称为FIFO ，它在使用之前就已经存在，可由用户可打开或关闭。', 'f42b7111-6af0-40c5-b545-fa3b379b69f6.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:11:52', '40', '1');
INSERT INTO `topic` VALUES ('4649', '4', '4', '.哪些集合类提供对元素的随机访问？', 'bc3daca9-c72d-4b86-a009-26691925bf09.', null, null, null, null, null, null, 'ARRAYLIST、HASHMAP、TREEMAP和HASHTABLE类提供对元素的随机访问。', '', '0', '2017-12-25 22:11:55', '69', '1');
INSERT INTO `topic` VALUES ('4650', '26', '2', '比较重要的系统配置资料，一般来说大部分位于/var/log目录下。', '0887939f-e37a-4f37-848a-51cd321e74ee.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 22:12:01', '40', '1');
INSERT INTO `topic` VALUES ('4651', '26', '2', 'tar和cpio 这些备份工具是通过直接读取文件系统来进行备份，这样可在不影响文件时间戳的情况下，备份文件。', '25401847-7974-49db-be00-cdd62c2d2469.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:12:11', '40', '1');
INSERT INTO `topic` VALUES ('4652', '4', '4', 'EnumSet是什么？', '293d6b99-f6d0-49aa-b9be-d8a12fda309e.', null, null, null, null, null, null, 'JAVA.UTIL.ENUMSET是使用枚举类型的集合实现。当集合创建时，枚举集合中的所有元素必须来自单个指定的枚举类型，可以是显示的或隐示的。ENUMSET是不同步的，不允许值为NULL的元素。它也提供了一些有用的方法，比如COPYOF(COLLECTION C)、OF(E FIRST,E…REST)和COMPLEMENTOF(ENUMSET S)。', '', '0', '2017-12-25 22:12:17', '69', '1');
INSERT INTO `topic` VALUES ('4653', '26', '2', '红旗Linux Server2.0支持无为职守的自动安装方式kickstart 。', 'f1ab9407-8c4c-498c-b3a4-98dc6fff0667.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:12:20', '40', '1');
INSERT INTO `topic` VALUES ('4654', '18', '1', '使用以下哪个命令可以从solaris的ftp服务器上载数据', 'dfa9541c-1117-4323-b32f-34240e715a27.', 'get  ', 'send  ', 'put', 'write ', '', '', 'C', '', '0', '2017-12-25 22:12:26', '43', '1');
INSERT INTO `topic` VALUES ('4655', '4', '4', '并发集合类是什么？', '373cbbb3-b8fd-410d-a193-2f8d1167271c.', null, null, null, null, null, null, 'JAVA1.5并发包（JAVA.UTIL.CONCURRENT）包含线程安全集合类，允许在迭代时修改集合。迭代器被设计为FAIL-FAST的，会抛出CONCURRENTMODIFICATIONEXCEPTION。一部分类为：COPYONWRITEARRAYLIST、 CONCURRENTHASHMAP、COPYONWRITEARRAYSET。', '', '0', '2017-12-25 22:12:38', '69', '1');
INSERT INTO `topic` VALUES ('4656', '32', '4', 'MySQL什么是左链接、右链接和内链接？', '28afa268-cfef-455e-b427-7a91ae684417.', null, null, null, null, null, null, '内连接就是左表和右表相同的数据.\r\n外连接分为：左外连接、右外连接、全外连接\r\n左外连接就是以左表为准，去匹配右表，左表有多少条数据，结果就是多少条数据\r\n右外连接就是与左外连接反之，以右表为准，去匹配左表，右表有多少条数据，结果就是多少条数据。\r\n全外连接数据条数不一定，相当与是左外连接 和右外连接 的综合。', '', '0', '2017-12-25 22:12:56', '64', '1');
INSERT INTO `topic` VALUES ('4657', '4', '4', 'BlockingQueue是什么？', '5c10903b-4f48-4a59-a53c-ab5d106f6601.', null, null, null, null, null, null, 'JAVA.UTIL.CONCURRENT.BLOCKINGQUEUE是一个队列，在进行检索或移除一个元素的时候，它会等待队列变为非空；当在添加一个元素时，它会等待队列中的可用空间。BLOCKINGQUEUE接口是JAVA集合框架的一部分，主要用于实现生产者-消费者模式。我们不需要担心等待生产者有可用的空间，或消费者有可用的对象，因为它都在BLOCKINGQUEUE的实现类中被处理了。JAVA提供了集中BLOCKINGQUEUE的实现，比如ARRAYBLOCKINGQUEUE、LINKEDBLOCKINGQUEUE、PRIORITYBLOCKINGQUEUE,、SYNCHRONOUSQUEUE等。', '', '0', '2017-12-25 22:13:04', '69', '1');
INSERT INTO `topic` VALUES ('4658', '26', '1', '在UNIX中修改用户密码的正确命令是', 'a3ab712b-4ae0-4ee9-8c98-efecec402690.', 'password   ', 'passwd', 'pass', 'pw ', '', '', 'B', '', '0', '2017-12-25 22:13:13', '43', '1');
INSERT INTO `topic` VALUES ('4659', '33', '4', 'final 的用途', '75b7601e-6924-4041-95d5-0b9ec1f396b0.', null, null, null, null, null, null, '类、变量、方法 ', '', '0', '2017-12-25 22:13:13', '70', '1');
INSERT INTO `topic` VALUES ('4660', '4', '4', '队列和栈是什么，列出它们的区别？', 'a126cefb-87ae-4f2f-9fb7-bd67cfaa9140.', null, null, null, null, null, null, '栈和队列两者都被用来预存储数据。JAVA.UTIL.QUEUE是一个接口，它的实现类在JAVA并发包中。队列允许先进先出（FIFO）检索元素，但并非总是这样。DEQUE接口允许从两端检索元素。\r\n\r\n栈与队列很相似，但它允许对元素进行后进先出（LIFO）进行检索。\r\n\r\nSTACK是一个扩展自VECTOR的类，而QUEUE是一个接口。', '', '0', '2017-12-25 22:13:17', '69', '1');
INSERT INTO `topic` VALUES ('4661', '18', '4', 'ORACLE数据库都有哪些类型的文件?', '1dd246c4-2c2e-415b-a2f1-846098c83d4f.', null, null, null, null, null, null, '数据文件，控制文件，日志文件，参数文件', '', '0', '2017-12-25 22:13:23', '47', '1');
INSERT INTO `topic` VALUES ('4662', '26', '4', '用命令创建表空间、用户，并为用户授权、收回权限。', '4bbcbefd-ffdf-4357-aea3-54c6d3e8759c.', null, null, null, null, null, null, 'CREATE TABLESPACE TABLLESPACENAME\r\nDATAFILE ‘F:\\ORCL\\USER001.DBF SIZE 20M\r\nDEFAULT STORAGE(\r\nINITIAL 512K\r\nNEXT 512K\r\nMINEXTENTS 2\r\nPCTINCREASE 50%\r\nMAXEXITNTS 2048)\r\nMINIMUM EXTENT 512K\r\nLOGGING\r\nONLINE\r\nPERMANENT\r\nEXTENT MANAGEMENT DICTIONARY;\r\n回收权限： REVOKE PRIVILEGE FROM USER；\r\nCREATE TABLESPACE TABLESPACE_NAME\r\nDATAFILE ‘’\r\nDEFAULT STORAGE(\r\nINITIAL XXXKB\r\nNEXT YYKB\r\nMINEXTENTS 2\r\nPCTINCREASE NNNN\r\nMAXEXTENTS MMM)\r\nLOGGING\r\nONLINE\r\nEXTENT MANAGEMENT DICTIONARY/LOCAL[AUTOALLOCATE/UNIFORM SIZE XXXMB];\r\nCREATE USER USER_NAME\r\nIDENTIFIED BY PASSWORE/\r\nIDENTIFIED EXTERNALLY/\r\nIDENTIFIED GLOBALLY AS ‘CN=USER’\r\nDEFAULT TABLESPACE TABLESPACE_NAME\r\nTEMPORARY TABLESPACE TABLESPACE_NAME\r\n[ACCOUNT LOCK /UNLOCK]\r\nGRANT CONNECT TO USER_NAME;\r\nGRANT CREATE TABLE TO SUER_NAME;\r\nGRANT UPDATE ON TABLE_NAME TO USER_NAME;\r\nREVOKE CREATE TABLE FROM USER_NAME;\r\nREVOKE UPDATE ON TABLE_NAME FROM USER_NAME;', '', '0', '2017-12-25 22:13:39', '47', '1');
INSERT INTO `topic` VALUES ('4663', '33', '4', '写出三种单例模式实现。', 'e89ee6cb-8f29-4487-b4d7-2b0f3a3f0740.', null, null, null, null, null, null, '懒汉式单例，饿汉式单例，双重检查等 ', '', '0', '2017-12-25 22:13:41', '70', '1');
INSERT INTO `topic` VALUES ('4665', '26', '4', 'Oracle连接符是什么？', 'c9c15c4c-ccb6-43be-a710-fa472b8f836b.', null, null, null, null, null, null, '连接符为”||”或CONCAT();', '', '0', '2017-12-25 22:14:04', '64', '1');
INSERT INTO `topic` VALUES ('4666', '18', '1', '在UNIX中“ls”命令在系统中那个目录：', 'e5fd9ebd-d957-4480-8657-e89b0aed0968.', '/usr/sbin', '/usr/local/bin', '/usr/bin ', '/usr/lib', '', '', 'C', '', '0', '2017-12-25 22:14:13', '43', '1');
INSERT INTO `topic` VALUES ('4668', '32', '4', 'Oracle索引的优缺点', 'f4f09813-9f2b-4356-89e6-d005661429c1.', null, null, null, null, null, null, '优点:方便查询,在数据量大时排序更宜查询;缺点:查询时需要进行重新排序，减少了效率', '', '0', '2017-12-25 22:14:51', '64', '1');
INSERT INTO `topic` VALUES ('4669', '33', '4', '请结合 OO 设计理念，谈谈访问修饰符 public、private、protected、default 在应用设计中的作用。', 'e25c7e0d-8d61-4b28-b55f-552c43f3215b.', null, null, null, null, null, null, '访问修饰符，主要标示修饰块的作用域，方便隔离防护', '', '0', '2017-12-25 22:15:06', '70', '1');
INSERT INTO `topic` VALUES ('4670', '3', '4', '如何在父类中为子类自动完成所有的 hashcode 和 equals 实现？这么做有何优劣', '94dc15cf-96e7-4a5e-ade9-9bda8b85233e.', null, null, null, null, null, null, '同时复写HASHCODE和EQUALS方法，优势可以添加自定义逻辑，且不必调用超类的实现。', '', '0', '2017-12-25 22:15:11', '69', '1');
INSERT INTO `topic` VALUES ('4671', '26', '4', '这样的 a.hashcode() 有什么用，与 a.equals(b)有什么关系。', 'ccc8eac3-8c19-4f7c-879b-40ede98668fd.', null, null, null, null, null, null, 'HASHCODE \r\nHASHCODE（）方法提供了对象的HASHCODE值，是一个NATIVE方法，返回的默认值与SYSTEM.IDENTITYHASHCODE(OBJ)一致。\r\n\r\n通常这个值是对象头部的一部分二进制位组成的数字，具有一定的标识对象的意义存在，但绝不定于地址。\r\n\r\n作用是：用一个数字来标识对象。比如在HASHMAP、HASHSET等类似的集合类中，如果用某个对象本身作为KEY，即要基于这个对象实现HASH的写入和查找，那么对象本身如何实现这个呢？就是基于HASHCODE这样一个数字来完成的，只有数字才能完成计算和对比操作。\r\n\r\nHASHCODE是否唯一 \r\nHASHCODE只能说是标识对象，在HASH算法中可以将对象相对离散开，这样就可以在查找数据的时候根据这个KEY快速缩小数据的范围，但HASHCODE不一定是唯一的，所以HASH算法中定位到具体的链表后，需要循环链表，然后通过EQUALS方法来对比KEY是否是一样的。\r\n\r\nEQUALS与HASHCODE的关系 \r\nEQUALS相等两个对象，则HASHCODE一定要相等。但是HASHCODE相等的两个对象不一定EQUALS相等。', '', '0', '2017-12-25 22:15:44', '70', '1');
INSERT INTO `topic` VALUES ('4672', '4', '4', '与Java集合框架相关的有哪些最好的实践？', '04f1a12e-b220-47cb-a9d8-09658515aed5.', null, null, null, null, null, null, '（1）根据需要选择正确的集合类型。比如，如果指定了大小，我们会选用ARRAY而非ARRAYLIST。如果我们想根据插入顺序遍历一个MAP，我们需要使用TREEMAP。如果我们不想重复，我们应该使用SET。\r\n\r\n（2）一些集合类允许指定初始容量，所以如果我们能够估计到存储元素的数量，我们可以使用它，就避免了重新哈希或大小调整。\r\n\r\n（3）基于接口编程，而非基于实现编程，它允许我们后来轻易地改变实现。\r\n\r\n（4）总是使用类型安全的泛型，避免在运行时出现CLASSCASTEXCEPTION。\r\n\r\n（5）使用JDK提供的不可变类作为MAP的KEY，可以避免自己实现HASHCODE()和EQUALS()。\r\n\r\n（6）尽可能使用COLLECTIONS工具类，或者获取只读、同步或空的集合，而非编写自己的实现。它将会提供代码重用性，它有着更好的稳定性和可维护性。', '', '0', '2017-12-25 22:15:47', '69', '1');
INSERT INTO `topic` VALUES ('4674', '18', '4', '如何在Oracle中查询某个用户下所有已建的表?', '13ae71c4-dd02-40be-8dea-8ebf947ad9a2.', null, null, null, null, null, null, 'SELECT * FROM CAT;', '', '0', '2017-12-25 22:16:02', '47', '1');
INSERT INTO `topic` VALUES ('4675', '26', '4', '执行TRUNCATE命令后，存储空间是否还存在，是否可被其他的表占用?', '4697f58f-d541-442d-84a7-9faae523fd95.', null, null, null, null, null, null, '执行TRUNCATE之后，为表分配的区空间将被回收HWM将回退，如果在使用TRUNCATE的时候没有指定REUSE STORAGE那么执行操作后仅仅留下由MINEXTENTS所指定的区否则表的所有空间将被回收用于再分配。', '', '0', '2017-12-25 22:16:13', '47', '1');
INSERT INTO `topic` VALUES ('4676', '3', '4', 'Char里面可以存放汉字吗？', 'b45f1032-7e66-4194-854b-3ac53d5350d8.', null, null, null, null, null, null, 'CHAR型变量就是用来存储UNICODE编码字符的,UNICODE编码字符集中包含了汉字,所以可以存储汉字,如果某个特殊的汉字没有包含在UNICODE编码字符集中,那么CHAR型变量就不能存储,UNICODE占用两个字节,所以CHAR型的变量也是占用两个字节.', '', '0', '2017-12-25 22:16:14', '64', '1');
INSERT INTO `topic` VALUES ('4677', '33', '4', '有没有可能 2 个不相等的对象有相同的 hashcode。', '9cbb08ca-fd6f-47d4-ad27-cf57f480e355.', null, null, null, null, null, null, '有', '', '0', '2017-12-25 22:16:24', '70', '1');
INSERT INTO `topic` VALUES ('4678', '26', '1', '下列关于计算机病毒的四条叙述中，有错误的一条是', '8dfff68a-065c-4f3c-8b7c-6eda5eff6f20.', '计算机病毒是一个标记或一个命令', '计算机病毒是人为制造的一种程序；', '计算机病毒是一种通过磁盘、网络等媒介传播、扩散，并能传染其它程序的程序', '计算机病毒是能够实现自身复制，并借助一定的媒体存的具有潜伏性、传染性和破坏性的程序', '', '', 'D', '', '0', '2017-12-25 22:16:31', '43', '1');
INSERT INTO `topic` VALUES ('4679', '26', '4', '何在Oracle中查看当前用户，通常有哪些方式?', 'de29d1cc-da86-4331-8e84-2d6e2e457bfb.', null, null, null, null, null, null, 'SHOW USER;/SELECT USERNAME FROM USER_USERS;', '', '0', '2017-12-25 22:16:38', '47', '1');
INSERT INTO `topic` VALUES ('4680', '3', '4', '数据的加密模式？', 'bd9c6787-e47f-4e00-b663-1c686f87ff7b.', null, null, null, null, null, null, '对称式和非对称式', '', '0', '2017-12-25 22:16:48', '64', '1');
INSERT INTO `topic` VALUES ('4681', '18', '4', '出在Oracle中，创建表空间的语法结构，以及所含参数说明。', '81c9f2fc-66e9-4b7f-8b8e-62c5efabe55e.', null, null, null, null, null, null, 'CREATE TABLESPACE TABLESPACENAME\r\nDATAFILE ‘’\r\nLOGGING/NOLOGGING\r\nDEFAULT STORAGE(INITIAL KB\r\nNEXT KB\r\nMINEXTENTS X\r\nMAXEXTENTS Y\r\nPCTINCREASE Z\r\n)\r\nONLINE/NOT ONLINE\r\nEXTENT MANAGEMENT DICTIONARY/LOCAL[AUTOALLOCATE/UNIFORM SIZE KB];', '', '0', '2017-12-25 22:16:54', '47', '1');
INSERT INTO `topic` VALUES ('4682', '33', '4', '什么情况下会发生栈内存溢出。', 'bdda7336-ed46-4665-812d-a841e58f3bb3.', null, null, null, null, null, null, '如果线程请求的栈深度大于虚拟机所允许的深度，将抛出STACKOVERFLOWERROR异常。 如果虚拟机在动态扩展栈时无法申请到足够的内存空间，则抛出OUTOFMEMORYERROR异常。 ', '', '0', '2017-12-25 22:17:34', '70', '1');
INSERT INTO `topic` VALUES ('4683', '26', '2', ' \r\n\r\nlinux\r\n\r\n是实时操作系统\r\n', 'e0ac5366-e328-4d44-979b-87b9e5ddb428.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 22:18:05', '40', '1');
INSERT INTO `topic` VALUES ('4684', '26', '4', '加密模式的顺序', '40a032a2-4e05-44a2-89ee-642b44117554.', null, null, null, null, null, null, '传输加密,数据存储加密,数据完整型的鉴别,密钥管理;', '', '0', '2017-12-25 22:18:14', '64', '1');
INSERT INTO `topic` VALUES ('4685', '33', '4', 'JVM 的内存结构，Eden 和 Survivor 比例。', 'b74dbd62-accd-4c28-89a3-867ee80be568.', null, null, null, null, null, null, 'EDEN 和 SURVIOR 是按8比1分配的 ', '', '0', '2017-12-25 22:18:43', '70', '1');
INSERT INTO `topic` VALUES ('4687', '33', '4', 'jvm 中一次完整的 GC 流程是怎样的，对象如何晋升到老年代，说说你知道的几种主要的jvm 参数。', '5a6f7834-1559-40cd-bf25-b78ffcabb9af.', null, null, null, null, null, null, '对象诞生即新生代->EDEN，在进行MINOR GC过程中，如果依旧存活，移动到FROM，变成SURVIVOR，进行标记代数，如此检查一定次数后，晋升为老年代， ', '', '0', '2017-12-25 22:19:20', '70', '1');
INSERT INTO `topic` VALUES ('4690', '26', '4', 'hassmap和hasstable的区别？', 'c88813a3-398a-4231-8553-2530dbb1825c.', null, null, null, null, null, null, '历史原因:HASHTABLE是基于陈旧的DICTIONARY类的，HASHMAP是JAVA 1.2引进的MAP接口的一个实现;', '', '0', '2017-12-25 22:19:37', '64', '1');
INSERT INTO `topic` VALUES ('4691', '33', '4', '现在有T1、T2、T3三个线程，你怎样保证T2在T1执行完后执行，T3在T2执行完后执行？', '4e059f47-fc31-45cd-802d-089ded732d4a.', null, null, null, null, null, null, '这个线程问题通常会在第一轮或电话面试阶段被问到，目的是检测你对”JOIN”方法是否熟悉。这个多线程问题比较简单，可以用JOIN方法实现。', '', '0', '2017-12-25 22:19:39', '69', '1');
INSERT INTO `topic` VALUES ('4692', '18', '4', '如何判断游标是否到了末尾?\r\n', '88151589-899a-417b-a3f7-2a9a29d8ea38.', null, null, null, null, null, null, 'CURSOR_NAME%NOTFOUND', '', '0', '2017-12-25 22:20:12', '47', '1');
INSERT INTO `topic` VALUES ('4696', '26', '4', '在Oracle中，如何查看当前用户下的所有表空间?', '5e3411d4-e5f4-4cd2-b9fe-317496f61c8a.', null, null, null, null, null, null, 'SELECT TABLESPACE_NAME FROM USER_TABLESPACES;', '', '0', '2017-12-25 22:21:05', '47', '1');
INSERT INTO `topic` VALUES ('4697', '33', '4', '在Java中Lock接口比synchronized块的优势是什么？你需要实现一个高效的缓存，它允许多个用户读，但只允许一个用户写，以此来保持它的完整性，你会怎样去实现它？', 'f38bef87-9532-4d6d-be09-3678f180eb2d.', null, null, null, null, null, null, 'LOCK接口在多线程和并发编程中最大的优势是它们为读和写分别提供了锁，它能满足你写像CONCURRENTHASHMAP这样的高性能数据结构和有条件的阻塞。JAVA线程面试的问题越来越会根据面试者的回答来提问。我强烈建议在你去参加多线程的面试之前认真读一下LOCKS，因为当前其大量用于构建电子交易终统的客户端缓存和交易连接空间。', '', '0', '2017-12-25 22:21:12', '69', '1');
INSERT INTO `topic` VALUES ('4698', '3', '4', 'list、map和set什时候用？', '1fc8cac6-ec48-4367-95c6-11584b7245d8.', null, null, null, null, null, null, 'LIST列表是顺序存放对象的，可以有相同的对象，通过索引存取；一般在能直接使用数组的时候，就有使用列表', '', '0', '2017-12-25 22:21:17', '64', '1');
INSERT INTO `topic` VALUES ('4699', '33', '4', '在java中wait和sleep方法的不同？', 'c434cb6e-68a8-4e95-969c-4e735725dad5.', null, null, null, null, null, null, '通常会在电话面试中经常被问到的JAVA线程面试问题。最大的不同是在等待时WAIT会释放锁，而SLEEP一直持有锁。WAIT通常被用于线程间交互，SLEEP通常被用于暂停执行。', '', '0', '2017-12-25 22:21:29', '69', '1');
INSERT INTO `topic` VALUES ('4700', '26', '1', '下列服务器的叙述，不正确的是 ', '26a6255a-dcf4-483b-b6b0-fa95df038519.', '网络服务器是微机局域网的核心部件 ', '网络服务器最主要的任务是对网络活动进行监督及控制 ；', '网络服务器在运行网络*作系统中，最大限度响应用户的要求并及时响应并处理', '网络服务器的效率直接影响整个网络的效率', '', '', 'B', '', '0', '2017-12-25 22:21:29', '43', '1');
INSERT INTO `topic` VALUES ('4702', '3', '4', 'list、map和set彼此间的区别和联系？', 'e83a2824-53d7-405a-af3c-a766641b04f3.', null, null, null, null, null, null, '三者的区别和联系:三者都是接口,LIST与SET具有相似性，它们都是单列元素的集合,LIST,SET是继承自COLLECTION,而MAP不是,LIST里可以有重复元素,有先后顺手,SET里面不允许有重复的元素,而且无序,MAP 保存KEY-VALUE值，VALUE可多值。', '', '0', '2017-12-25 22:22:03', '64', '1');
INSERT INTO `topic` VALUES ('4703', '3', '4', ' java常见的数据类型是什么和对应的包装类是什么？', '1ed1fb78-86df-46cf-be47-93e9b9ca3224.', null, null, null, null, null, null, '(1)INT, DOUBLE, FLOAT, LONG, SHORT, BOOLEAN, BYTE, CHAR\r\n(2)INTEGER.DOUBLE,FLOAT,LONG,SHORT,BOOLEAN,BYTE,CHARACHER.', '', '0', '2017-12-25 22:22:32', '64', '1');
INSERT INTO `topic` VALUES ('4704', '26', '4', '用Java实现阻塞队列。', '3a208534-adb3-4454-ab89-78d8ed46dd77.', null, null, null, null, null, null, '这是一个相对艰难的多线程面试问题，它能达到很多的目的。第一，它可以检测侯选者是否能实际的用JAVA线程写程序；第二，可以检测侯选者对并发场景的理解，并且你可以根据这个问很多问题。如果他用WAIT()和NOTIFY()方法来实现阻塞队列，你可以要求他用最新的JAVA 5中的并发类来再写一次。', '', '0', '2017-12-25 22:22:35', '69', '1');
INSERT INTO `topic` VALUES ('4705', '26', '4', '在Oracle中，你所创建的表空间信息放在哪里?', '32a7164d-7a3f-46bf-ad2b-9b086fad106a.', null, null, null, null, null, null, '存放在数据字典中，数据字典内容对应于系统表空间SYSTEM表空间。', '', '0', '2017-12-25 22:22:38', '47', '1');
INSERT INTO `topic` VALUES ('4706', '3', '4', 'java的隐式类型？', 'fc1830ed-6b03-4730-a9b6-d936bde9903b.', null, null, null, null, null, null, 'JAVA的隐式类型是INT,BYTE,SHORT,CHAR都可以隐含转换为INT', '', '0', '2017-12-25 22:22:56', '64', '1');
INSERT INTO `topic` VALUES ('4707', '33', '4', '用Java写代码来解决生产者——消费者问题。', '4ff70c08-f1d7-40a4-98d7-f3dcad2cafa4.', null, null, null, null, null, null, '与上面的问题很类似，但这个问题更经典，有些时候面试都会问下面的问题。在JAVA中怎么解决生产者——消费者问题，当然有很多解决方法，我已经分享了一种用阻塞队列实现的方法。有些时候他们甚至会问怎么实现哲学家进餐问题。', '', '0', '2017-12-25 22:23:01', '69', '1');
INSERT INTO `topic` VALUES ('4708', '18', '4', 'ORACLE中的控制文件什么时候读取?', 'a246a11c-7aeb-4d61-a1b7-63dac4ae00e4.', null, null, null, null, null, null, 'ORACLE服务器启动时，先启动实例然后再读取数据库的各个文件当然也包括控制文件。也就是说在数据库服务器启动的第二步时读取。', '', '0', '2017-12-25 22:23:10', '47', '1');
INSERT INTO `topic` VALUES ('4709', '33', '4', '用Java编程一个会导致死锁的程序，你将怎么解决？', '3eb4b452-16cb-4030-8190-2c06327eff6d.', null, null, null, null, null, null, '这是我最喜欢的JAVA线程面试问题，因为即使死锁问题在写多线程并发程序时非常普遍，但是很多侯选者并不能写DEADLOCK FREE CODE（无死锁代码？），他们很挣扎。只要告诉他们，你有N个资源和N个线程，并且你需要所有的资源来完成一个操作。为了简单这里的N可以替换为2，越大的数据会使问题看起来更复杂。通过避免JAVA中的死锁来得到关于死锁的更多信息。', '', '0', '2017-12-25 22:23:20', '69', '1');
INSERT INTO `topic` VALUES ('4710', '26', '4', '请说说清除系统日志的重要性？', '5b18e0f0-6779-4e7b-9e81-20206fedc0a9.', null, null, null, null, null, null, '由于系统在运行时，为了确保安全，随时要到多个日志文件中读取信息，并和当前情况进行对比，这样大大增加了系统的资源消耗。而且，一旦日志中有多个错误的记录，情况就更加严重，整个管理系统的运行速度变得非常慢，导致无法进行正常工作，硬盘灯经常狂闪不止，打开任务管理器中的系统性能监测，会发现CPU占用率居高不下。', '', '0', '2017-12-25 22:23:36', '43', '1');
INSERT INTO `topic` VALUES ('4711', '18', '4', 'Oracle的表格信息存储在哪个地方?', '02b318f4-766f-4fa1-a6af-5d43034fdc9c.', null, null, null, null, null, null, 'SYSTEM表空间的数据字典文件中。', '', '0', '2017-12-25 22:24:13', '47', '1');
INSERT INTO `topic` VALUES ('4712', '3', '4', 'object类型中有哪些方法？', 'e510b7ef-5915-4599-9a3e-877b745ff319.', null, null, null, null, null, null, 'EQUALS()、HASHCODE()、WAIT()、TOSTRING(),FINALIZE(),NOTIFY(),NOTIFYALL(),WAIT(),', '', '0', '2017-12-25 22:24:28', '64', '1');
INSERT INTO `topic` VALUES ('4713', '18', '4', '如何根据字典创建一个表空间，并说明参数?', '0f20e1f4-eb02-4056-8ad6-d8ba2c1c715e.', null, null, null, null, null, null, '不', '', '0', '2017-12-25 22:24:33', '47', '1');
INSERT INTO `topic` VALUES ('4714', '26', '1', '假设你是TestKing网络的管理员。你将一台Windows2000 Server计算机配置成网络中的DNS服务器,并且创建了正向查找和反向查找的标准主区.但是使用nslookup工具时,发现不能从IP地址解析主机名,当使用Tracert.exe工具时,收到如下出错信息:“不能解析目标系统的名称”这时你应该怎么办?', '0facb721-f34a-46ca-b7d1-8e0eaa695551.', '配置DNS使其成向外部DNS发送请求。', '安装WINS服务器,配置DHCP以把WINS服务器的IP地址发布到所有的DHCP客户机上。', '在反向查找区域中,创建PTR记录。', '复制systemroot\\system32复制systemroot\\system32\\dns\\cache\\samples\\cache.dns到 systemroot\\system32\\dns\\cache\\cache.dns ', '', '', 'C', '', '0', '2017-12-25 22:24:58', '43', '1');
INSERT INTO `topic` VALUES ('4715', '18', '4', '谈谈你对角色的理解，常用的角色有哪些?', 'a5b8ac11-12be-4a55-bb06-17c7da3f4b47.', null, null, null, null, null, null, '角色就是一组权限的数据库实体，它不属于任何模式或用户但是可以被授予任何用户。常用的角色有CONNECT，DBA，RESOURCE，SELECT_CATALOG_ROLE（查询所有表视图权），DELETE_CATALOG_ROLE（删除权限）等。\r\n角色的创建和授权：和创建用户为用户授权差不多。CREATE ROLE ROLE_NAME IDENTIFIED …\r\nGRANT 权限TO ROLE_NAME。', '', '0', '2017-12-25 22:25:10', '47', '1');
INSERT INTO `topic` VALUES ('4716', '26', '4', 'int和string是如何转化的？', '2df914a8-0017-4b55-a839-a4e005ae3b66.', null, null, null, null, null, null, 'INT I = INTEGER.PARSEINT([STRING]);I = INTEGER.PARSEINT([STRING],[INT RADIX]);或者INT I = INTEGER.VALUEOF(MY_STR).INTVALUE();INT转STRINGSTRING S = STRING.VALUEOF(I);STRING S = INTEGER.TOSTRING(I);STRING S = \"\" + I;', '', '0', '2017-12-25 22:25:14', '64', '1');
INSERT INTO `topic` VALUES ('4717', '26', '4', '你知道哪几种垃圾收集器，各自的优缺点，重点讲下 cms，包括原理，流程，优缺点', '894d15f3-640d-40d0-90de-aba733146968.', null, null, null, null, null, null, 'SERIAL、PARNEW、PARALLELSCAVENGE、SERIALOLD、PARALLELOLD、CMS、G1 ', '', '0', '2017-12-25 22:25:25', '70', '1');
INSERT INTO `topic` VALUES ('4718', '26', '4', '简述Oracle的归档与不归档工作模式，分别说明。', '35fa5251-81a0-4201-918f-d49ff5e3a5f2.', null, null, null, null, null, null, 'ORACLE归档模式是指在创建数据库时指定了ARCHIVELOG参数，这种模式下，当重做日志文件写满的时候会将该重做日志文件的内容保存到指定的位置（由初始化文件中的参数ARCHIVE_LOG_DEST_N来决定）。并不是数据库在归档模式下工作的时候就可以自动完成归档操作，在归档模式下可以有两种归档方式：自动归档（在初始化文件中的参数ARCHIVE_LOG_START被设置为TRUE）和手动归档。如果归档模式下没有启动自动归档的话，而且又没有实行手动归档那么当LGWR进程将重做日志信息写入已经写满的重做日志文件时数据库将会被挂起直到进行了归档。可见归档是对重做日志文件信息的一种保护措施。\r\nORACLE非归档模式下当重做日志文件写满以后若是有LGWR进行重做日志信息的写入操作时，以前保存在重做日志文件中的重做日志信息就会被覆盖掉。', '', '0', '2017-12-25 22:25:38', '47', '1');
INSERT INTO `topic` VALUES ('4719', '18', '4', 'Oracle索引分为哪几类，说出唯一索引和位图索引的概念。', '0342db2c-1ef1-4701-9adf-d66ab15810e5.', null, null, null, null, null, null, 'ORACLE索引有B树索引，位图索引，函数索引，簇索引等。\r\n唯一索引也是B树索引的一种，它要求被索引的字段值不可以重复。在创建的时候使用B树算法创建。\r\n位图索引并不是采用象唯一索引那样存储（索引字段值，记录ROWID）来创建索引段的，而是为每一个唯一的字段值创建一个位图，位图中使用位元来对应一个记录的ROWID。位元到ROWID是通过映射的到的。', '', '0', '2017-12-25 22:25:51', '47', '1');
INSERT INTO `topic` VALUES ('4721', '18', '4', 'ORACLE的基本数据类型有哪些?', '54ec220b-3daa-4073-8063-9ff4669d47dd.', null, null, null, null, null, null, 'CHAR()存储定长字符，定义的时候可以不为他指定长度但是如若往里插入值则会出错；VARCHAR2()存储变长字符定义的时候必须指定长度，DATE存储时间日期；NUMBER()数字类型，包括整型，浮点型等；CLOB()大容量字符串；BLOB()大二进制对象', '', '0', '2017-12-25 22:26:02', '47', '1');
INSERT INTO `topic` VALUES ('4722', '33', '4', '当出现了内存溢出，你怎么排错。', '86250dcb-f892-4223-9beb-8336ba808e73.', null, null, null, null, null, null, '首先分析是什么类型的内存溢出，对应的调整参数或者优化代码。 ', '', '0', '2017-12-25 22:26:09', '70', '1');
INSERT INTO `topic` VALUES ('4723', '33', '4', 'JVM 内存模型的相关知识了解多少，比如重排序，内存屏障，happen-before，主内存，工作内存等。', '05aa2e03-149e-4a97-b5fd-b27e0eb480e0.', null, null, null, null, null, null, '内存屏障：为了保障执行顺序和可见性的一条CPU指令 \r\n重排序：为了提高性能，编译器和处理器会对执行进行重拍 \r\nHAPPEN-BEFORE：操作间执行的顺序关系。有些操作先发生。 \r\n主内存：共享变量存储的区域即是主内存 \r\n工作内存：每个线程COPY的本地内存，存储了该线程以读/写共享变量的副本 ', '', '0', '2017-12-25 22:27:12', '70', '1');
INSERT INTO `topic` VALUES ('4724', '3', '4', 'string、stringbuffer和stringbuilder的区别？', '4ceaeccd-8c96-42ba-8c52-253fe1658aaa.', null, null, null, null, null, null, 'JAVA平台提供了两个类：STRING和STRINGBUFFER，它们可以储存和操作字符串，即包含多个字符的字符数据。这个STRING类提供了数值不可改变的字符串。而这个STRINGBUFFER类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用STRINGBUFFER。典型地，你可以使用STRINGBUFFERS来动态构造字符数据。另外，STRING实现了EQUALS方法;而STRINGBUFFER没有实现EQUALS方法，所以，NEW STRINGBUFFER(“ABC”).EQUALS(NEW STRINGBUFFER(“ABC”)的结果为FALSE。', '', '0', '2017-12-25 22:27:43', '64', '1');
INSERT INTO `topic` VALUES ('4726', '18', '4', 'SQL中，执行四舍五入的是哪个函数?', '404f70e7-96f9-42c8-b9e2-cce1d3949c79.', null, null, null, null, null, null, 'ROUND（VALUE，保留的小数位数）与只对应的还有一个特别相似的函数TRUNC（VALUE，保留的小数位数）它的作用是根据要保留的小数位数来截取原数。', '', '0', '2017-12-25 22:28:08', '47', '1');
INSERT INTO `topic` VALUES ('4727', '3', '4', 'hashmap为什么查询的比较快？', 'd7a56dc1-4137-4c83-a3eb-59fe043a9d37.', null, null, null, null, null, null, 'HASHMAP是HASHTABLE的轻量级实现（非同步非线程安全的实现），他们都完成了MAP接口，主要区别在于HASHMAP允许空（NULL）键值（KEY）,由于非线程安全，在只有一个线程访问的情况下，效率要高于HASHTABLE。', '', '0', '2017-12-25 22:28:30', '64', '1');
INSERT INTO `topic` VALUES ('4728', '18', '4', 'oracle数据库表存放到磁盘什么地方?数据文件', '5160de92-d12d-4ff3-8f14-a59f3516f508.', null, null, null, null, null, null, 'ORACLE数据库的表存放在物理文件中的数据文件中。', '', '0', '2017-12-25 22:28:31', '47', '1');
INSERT INTO `topic` VALUES ('4729', '18', '4', '当执行insert语句并提交后，这些提交的数据存储到什么地方??', '0bb36cfa-d188-4366-b9c2-9fc7f0d9b96e.', null, null, null, null, null, null, '存储到了数据库的数据文件中。', '', '0', '2017-12-25 22:28:44', '47', '1');
INSERT INTO `topic` VALUES ('4730', '18', '4', '请描述下http连接的特点？', '66deeba2-a9f2-482e-be10-7cb84b35e432.', null, null, null, null, null, null, 'HTTP：超文本传输协议(HYPERTEXT TRANSFER PROTOCOL),是你平时电脑上网，手机上网，的常用协议之一，当然，HTTP是建立在TCP协议之上的一种应用。\r\n\r\n当然最显著的特点是，客户端每次发送的请求，都需要服务器响应，请求结束后，会主动释放连接。从建立连接到关闭连接的过程，成为”一次连接”。', '', '0', '2017-12-25 22:29:49', '43', '1');
INSERT INTO `topic` VALUES ('4731', '26', '4', 'ORACLE自己提供的函数，想知道具体位置，如何操作?', 'f912b4c9-7890-4e36-8b94-c931b12c8bc4.', null, null, null, null, null, null, '这个问马哥吧 \r\n万能的老马', '', '0', '2017-12-25 22:29:59', '47', '1');
INSERT INTO `topic` VALUES ('4732', '33', '4', 'Jsp页面便利集合？', '34cc6cba-7ef5-4545-ac3c-57f1c6de5a79.', null, null, null, null, null, null, '(1)LIST<STRING> NAMES = NEW LINKEDLIST<STRING>();\r\n(2)SET<STRING> SET = NEW TREESET<STRING>();\r\n(3)MAP<STRING, STRING> MAP = NEW HASHMAP<STRING, STRING>();', '', '0', '2017-12-25 22:30:01', '64', '1');
INSERT INTO `topic` VALUES ('4733', '33', '4', '简单说说你了解的类加载器。', '0ac5eba5-797c-4564-8614-e066658fd35f.', null, null, null, null, null, null, '类加载器的分类（BOOTSTRAP,EXT,APP,CURSTOM），类加载的流程(LOAD-LINK-INIT) ', '    ', '0', '2017-12-25 22:30:27', '70', '1');
INSERT INTO `topic` VALUES ('4734', '26', '4', 'TCP和UDP的区别?', 'fa6dca80-3ea3-4ad1-be9f-d2f9b67b4b31.', null, null, null, null, null, null, 'TCP是确认包的到达，所以不丢失包(数据)，顺序也是好的。\r\nUDP不会确认包的到达，所以可能会丢失数据包，当然顺序也有可能会乱。\r\n除了这些以外：\r\n1. TCP是面向连接(三次握手)的，所以稳定、可靠，那相对就慢了\r\n比如平时的：文件传输，右键，HTTP等用的都是TCP协议\r\n2. UDP是面向无连接的，所以不稳定，但是相对快，实时性高\r\n比如平时：做什么现场直播，视频通话啥的\r\n\r\n当然，大家平时用的QQ就是UDP协议(有没有消息错乱的时候)\r\nMSN用的TCP，所以你感觉很卡，很慢', '', '0', '2017-12-25 22:30:46', '43', '1');
INSERT INTO `topic` VALUES ('4735', '26', '4', '数据库的几种物理文件?', '7d8af97b-84ea-4a3a-98cb-2aa4527182e4.', null, null, null, null, null, null, '）数据文件 2）控制文件 3）日志文件', '', '0', '2017-12-25 22:30:48', '47', '1');
INSERT INTO `topic` VALUES ('4736', '18', '4', '控制文件都含有哪些信息?', 'b0444d75-7375-4388-b9ef-fcb2935dd2c6.', null, null, null, null, null, null, '控制文件存放有实例信息（实例名称创建时间等），数据文件和日志文件信息，还有系统运行时记录的系统变更码(SCN)，检查点信息和归档的当前状态信息等。数据库在加载数据库的时候首先要读取控制文件获得和数据库有关的物理结构信息之后才能够正确加载数据文件和日志文件并打开数据库。', '', '0', '2017-12-25 22:31:28', '47', '1');
INSERT INTO `topic` VALUES ('4737', '3', '4', 'get和load的区别？', 'b9490cfb-8b74-4678-9452-ee69cdda7754.', null, null, null, null, null, null, 'GET与LOAD的区别:总之对于GET和LOAD的根本区别，一句话，HIBERNATE对于LOAD方法认为该数据在数据库中一定存在，可以放心的使用代理来延迟加载，如果在使用过程中发现了问题，只能抛异常；而对于GET方法，HIBERNATE一定要获取到真实的数据，否则返回NULL;', '', '0', '2017-12-25 22:31:33', '64', '1');
INSERT INTO `topic` VALUES ('4738', '18', '4', 'Decode函数的用法?', '8fe44754-1927-4432-a4ae-8441ff2168ee.', null, null, null, null, null, null, 'DECODE的语法：DECODE(VALUE,IF1,THEN1,IF2,THEN2,IF3,THEN3,…,ELSE)，表示如果VALUE等于IF1时，DECODE函数的结果返回THEN1,…,如果不等于任何一个IF值，则返回ELSE。初看一下，DECODE 只能做等于测试，但刚才也看到了，我们通过一些函数或计算替代VALUE，是可以使DECODE函数具备大于、小于或等于功能。', '', '0', '2017-12-25 22:32:18', '47', '1');
INSERT INTO `topic` VALUES ('4739', '4', '4', 'java的九大内置对象', '5b05fbec-246b-4f19-9cb2-731b0cb44f8f.', null, null, null, null, null, null, 'REQUEST 用户端请求，一次请求.此请求会包含来自GET/POST请求的参数\r\n    RESPONSE 网页传回用户端的回应\r\n    PAGECONTEXT 网页的属性是在这里管理\r\nSESSION 与请求有关的会话期 \r\nAPPLICATION SERVLET 正在执行的内容\r\nOUT 用来传送回应的输出 \r\nCONFIG SERVLET的构架部件\r\nPAGE JSP网页本身 \r\nEXCEPTION 针对错误网页，未捕捉的例外', '', '0', '2017-12-25 22:32:25', '64', '1');
INSERT INTO `topic` VALUES ('4740', '18', '4', '如何用decode进行大于小于的比较?', '223c7247-5055-4c2d-bbe3-2d6023eb47b1.', null, null, null, null, null, null, '利用SIGN()函数和DECODE和在一起用\r\nSELECT DECODE(SIGN(变量1-变量2),-1,变量1,变量2) FROM DUAL;\r\n\r\nDECODE(条件,值1,翻译值1,值2,翻译值2,…值N,翻译值N,缺省值)\r\n该函数的含义如下：\r\nIF 条件=值1 THEN\r\nRETURN(翻译值1)\r\nELSIF 条件=值2 THEN\r\nRETURN(翻译值2)\r\n……\r\nELSIF 条件=值N THEN\r\nRETURN(翻译值N)\r\n\r\nELSE\r\nRETURN(缺省值)\r\nEND IF', '', '0', '2017-12-25 22:32:35', '47', '1');
INSERT INTO `topic` VALUES ('4741', '26', '1', 'DNS是用来解析下列各项中的哪一项（ ）', '5b573ce9-dc43-4844-863b-7f7536eadf25.', 'IP地址和MAC地址', '用户名和IP地址 ', 'TCP名字和地址', '主机名和传输层地址', '', '', 'D', '', '0', '2017-12-25 22:32:35', '43', '1');
INSERT INTO `topic` VALUES ('4742', '18', '4', 'CASE语句的用法?', '0ab3fec5-a175-4f11-bfab-40f020ee32f8.', null, null, null, null, null, null, 'SELECT LAST_NAME, JOB_ID, SALARY\r\nCASE JOB_ID\r\nWHEN ‘IT_PROG’ THEN 1.10*SALARY\r\nWHEN ‘ST_CLERK’ THEN 1.15*SALARY\r\nWHEN ‘SA_REP’ THEN 1.20*SALARY\r\nELSE SALARY END “REVISED_SALARY”\r\nFROM EMPLOYEES ', '', '0', '2017-12-25 22:32:54', '47', '1');
INSERT INTO `topic` VALUES ('4743', '4', '4', 'java四大作用域', '14f14417-2220-4492-99d8-f506855895c2.', null, null, null, null, null, null, 'PAGE对象表示当前一个JSP页面，可以理解为一个对象本身,是代表与一个页面相关的对象和属性;一个页面由一个编译好的 JAVA SERVLET 类表示,\r\nREQUEST是代表与 WEB 客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个 WEB 组件（由于 FORWARD 指令和 INCLUDE 动作的关系）;用户端请求\r\nSESSION是代表与用于某个 WEB 客户机的一个用户体验相关的对象和属性。一个 WEB 会话可以也经常会跨越多个客户机请求 与请求有关的会话期 \r\nAPPLICATION是代表与整个 WEB 应用程序相关的对象和属性。这实质上是跨越整个 WEB 应用程序，包括多个页面、请求和会话的一个全局作用域 正在执行的内容', '', '0', '2017-12-25 22:32:59', '64', '1');
INSERT INTO `topic` VALUES ('4744', '18', '1', 'TELNET是进程端口号一般是（ ', '51f2b089-d826-4780-aaf6-558b97387fed.', '80', '25', '23', '21', '', '', 'C', '', '0', '2017-12-25 22:33:11', '43', '1');
INSERT INTO `topic` VALUES ('4745', '18', '4', 'truncate和delete的区别?', '02b3087e-a76c-4d74-9049-58d7875b3d20.', null, null, null, null, null, null, '1、TRUNCATE在各种表上无论是大的还是小的都非常快。如果有ROLLBACK命令DELETE将被撤销，而TRUNCATE则不会被撤销。\r\n2、TRUNCATE是一个DDL语言而DELETE是DML语句，向其他所有的DDL语言一样，他将被隐式提交，不能对TRUNCATE使用ROLLBACK命令。\r\n3、TRUNCATE将重新设置高水平线和所有的索引。在对整个表和索引进行完全浏览时，经过TRUNCATE操作后的表比DELETE操作后的表要快得多。\r\n4、TRUNCATE不能触发触发器，DELETE会触发触发器。\r\n5、不能授予任何人清空他人的表的权限。\r\n6、当表被清空后表和表的索引讲重新设置成初始大小，而DELETE则不能。\r\n7、不能清空父表。', '', '0', '2017-12-25 22:33:11', '47', '1');
INSERT INTO `topic` VALUES ('4746', '6', '4', 'js里面的button方法，提交的时候，如何将数据传递到数据库？', 'e5346574-b83b-46af-a440-219c150b27e8.', null, null, null, null, null, null, '单击BUTTON的时候，先执行客户端的JAVASCRIPT代码，将JAVASCRIPT里面的值赋值到FORM表单里，然后通过表单提交的方式将数据提交到后台，交给JAVA方法处理,然后调用业务层和数据库交互;', '', '0', '2017-12-25 22:33:23', '64', '1');
INSERT INTO `topic` VALUES ('4747', '18', '4', '表空间如何扩展?并用语句写出?', '5b4d4d8a-5862-4f31-b3a6-5977a80afa04.', null, null, null, null, null, null, '两种扩展方式：\r\nA)增加数据文件\r\nALTER TABLESPACE TABLESPACE_NAME ADD DATAFILE ‘’ XXMB\r\nB)扩展数据文件大小\r\nALTER DATABASE DATAFILE ‘’ RESIZE NEWMB', '', '0', '2017-12-25 22:33:25', '47', '1');
INSERT INTO `topic` VALUES ('4748', '18', '4', '表空间区管理方式?哪种方式现在是推荐使用的?', 'b5a541bf-ac23-419f-be96-0d0c3c5e33bd.', null, null, null, null, null, null, 'A)字典管理方式\r\nEXTENT MANAGEMENT DICTIONARY;默认方式\r\nB)本地管理方式\r\nEXTENT MANAGEMENT LOCAL[AUTOALLOCATE/UNIFORM XXMB];\r\n', '', '0', '2017-12-25 22:33:43', '47', '1');
INSERT INTO `topic` VALUES ('4749', '6', '4', ' Ajax与jquery区别？', 'b65dc33c-beb5-47fb-8856-cd35baefec9f.', null, null, null, null, null, null, 'AJAX是一门技术，它提供了异步更新的机制，使用客户端与服务器间交换数据而非整个页面文档，实现页面的局部更新。JQUERY是一个框架，它对JS(JS是一门前端语言。)进行了封装，使其更方便使用。JQUERY使得JS与AJAX的使用更方便\r\nJSP负责客户端显示\r\nSERVLET负责控制，转向等', '', '0', '2017-12-25 22:33:48', '64', '1');
INSERT INTO `topic` VALUES ('4750', '18', '1', '（ ）拓扑使用细缆。', 'eafb256e-aac7-486d-b325-7a76b9749625.', '10BASE2　　 ', '10BASE5　　 ', '10BASE-T', '100BASE-FX ', '', '', 'A', '', '0', '2017-12-25 22:33:54', '43', '1');
INSERT INTO `topic` VALUES ('4751', '26', '4', 'Linux中主要有哪几种内核锁？', '06feff4c-5bb3-4449-b8aa-6e84de0e4c22.', null, null, null, null, null, null, 'LINUX的同步机制从2.0到2.6以来不断发展完善。从最初的原子操作，到后来的信号量，从大内核锁到今天的自旋锁。这些同步机制的发展伴随LINUX从单处理器到对称多处理器的过渡；\r\n伴随着从非抢占内核到抢占内核的过度。LINUX的锁机制越来越有效，也越来越复杂。\r\nLINUX的内核锁主要是自旋锁和信号量。\r\n自旋锁最多只能被一个可执行线程持有，如果一个执行线程试图请求一个已被争用（已经被持有）的自旋锁，那么这个线程就会一直进行忙循环——旋转——等待锁重新可用。要是锁未被争用，请求它的执行线程便能立刻得到它并且继续进行。自旋锁可以在任何时刻防止多于一个的执行线程同时进入临界区。\r\nLINUX中的信号量是一种睡眠锁。如果有一个任务试图获得一个已被持有的信号量时，信号量会将其推入等待队列，然后让其睡眠。这时处理器获得自由去执行其它代码。当持有信号量的进程将信号量释放后，在等待队列中的一个任务将被唤醒，从而便可以获得这个信号量。\r\n信号量的睡眠特性，使得信号量适用于锁会被长时间持有的情况；只能在进程上下文中使用，因为中断上下文中是不能被调度的；另外当代码持有信号量时，不可以再持有自旋锁。\r\nLINUX 内核中的同步机制：原子操作、信号量、读写信号量和自旋锁的API，另外一些同步机制，包括大内核锁、读写锁、大读者锁、RCU (READ-COPY UPDATE，顾名思义就是读-拷贝修改)，和顺序锁', '', '0', '2017-12-25 22:33:55', '29', '1');
INSERT INTO `topic` VALUES ('4752', '18', '4', '用什么函数获得日期?和日期中的月，日，年', '095a3634-d275-4c4a-8003-d9a13e18cdfb.', null, null, null, null, null, null, 'TO_CHAR(SYSDATE,’YEAR’):TOW THSOUND SIX TO_CHAR(SYSDATE,’YYYY’) :2006\r\nTO_CHAR(SYSDATE,’MONTH’):8月TO_CHAR(SYSDATE,’MM’):08\r\nTO_CHAR(SYSDATE,’DAY’):星期4 TO_CHAR(SYSDATE,’DD’):22', '', '0', '2017-12-25 22:33:58', '47', '1');
INSERT INTO `topic` VALUES ('4753', '6', '4', 'servelet生命周期？', '20961cba-8eb7-492c-ae71-9b856aa207d8.', null, null, null, null, null, null, 'SERVLET 生命周期：SERVLET 加载--->实例化--->服务--->销毁;', '', '0', '2017-12-25 22:34:29', '64', '1');
INSERT INTO `topic` VALUES ('4754', '26', '1', '路由功能一般在（ ）实现', 'f8277de8-e979-43f7-8eb2-5bb1c73449d5.', '物理层', '据链路层', '网络层', '传输层', '', '', 'C', '', '0', '2017-12-25 22:34:30', '43', '1');
INSERT INTO `topic` VALUES ('4755', '18', '4', '分区表的应用?', '4de464b3-be66-4fe5-83f2-375dc1edff1b.', null, null, null, null, null, null, 'A)一个分区表有一个或多个分区，每个分区通过使用范围分区、散列分区、或组合分区分区的行\r\nB)分区表中的每一个分区为一个段，可各自位于不同的表空间中\r\nC)对于同时能够使用几个进程进行查询或操作的大型表分区非常有用', '', '0', '2017-12-25 22:34:45', '47', '1');
INSERT INTO `topic` VALUES ('4756', '18', '4', 'Linux中的用户模式和内核模式是什么含意？', '66851401-e017-4ca4-b216-c4d72c2856f2.', null, null, null, null, null, null, 'MS-DOS等操作系统在单一的CPU模式下运行，但是一些类UNIX的操作系统则使用了双模式，可以有效地实现时间共享。在LINUX机器上，CPU要么处于受信任的内核模式，要么处于受限制的用户模式。除了内核本身处于内核模式以外，所有的用户进程都运行在用户模式之中。\r\n内核模式的代码可以无限制地访问所有处理器指令集以及全部内存和I/O空间。如果用户模式的进程要享有此特权，它必须通过系统调用向设备驱动程序或其他内核模式的代码发出请求。另外，用户模式的代码允许发生缺页，而内核模式的代码则不允许。\r\n在2.4和更早的内核中，仅仅用户模式的进程可以被上下文切换出局，由其他进程抢占。除非发生以下两种情况，否则内核模式代码可以一直独占CPU：\r\n(1) 它自愿放弃CPU；\r\n(2) 发生中断或异常。\r\n2.6内核引入了内核抢占，大多数内核模式的代码也可以被抢占。', '', '0', '2017-12-25 22:34:56', '29', '1');
INSERT INTO `topic` VALUES ('4757', '18', '1', '管理计算机通信的规则称为：（ ）', '6c4a276d-a1d0-4d91-aa63-5e93b96b3753.', '协议', '介质　　 ', '服务', '网络操作系统', '', '', 'A', '', '0', '2017-12-25 22:35:20', '43', '1');
INSERT INTO `topic` VALUES ('4758', '6', '4', 'Jquery的常用标签', 'f97e77af-ffa1-4b04-9b92-9e35fb951256.', null, null, null, null, null, null, 'JQUERY常用标签 \r\n(DOCUMENT)//选择整个文档对象;\r\n(DOCUMENT)//选择整个文档对象;\r\n(\'#MYID\') //选择ID为MYID的网页元素; \r\n(\r\n′\r\nDIV.MYCLAS\r\nS\r\n′\r\n)//选择CLASS为MYCLASS的DIV元素;\r\n(′DIV.MYCLASS′)//选择CLASS为MYCLASS的DIV元素;\r\n(\'INPUT[NAME=FIRST]\') // 选择NAME属性等于FIRST的INPUT元素;', '', '0', '2017-12-25 22:35:21', '64', '1');
INSERT INTO `topic` VALUES ('4760', '18', '4', '谈谈索引的用法及原理?', '55447f7d-cd6b-400b-b13f-356d2f05870f.', null, null, null, null, null, null, '索引是若干数据行的关键字的列表，查询数据时，通过索引中的关键字可以快速定位到要访问的记录所在的数据块，从而大大减少读取数据块的I/O次数，因此可以显著提高性能。', '', '0', '2017-12-25 22:35:56', '47', '1');
INSERT INTO `topic` VALUES ('4762', '26', '1', '域名 http://www.pdsu.edu.cn/ 由 4 个子域组成，其中哪个表示主机名 。（ ） ', '437d0596-bf69-4172-b350-32ca505affc3.', 'www　　 ', 'pdsu　　 ', 'edu　　 ', 'cn ', '', '', 'D', '', '0', '2017-12-25 22:35:56', '43', '1');
INSERT INTO `topic` VALUES ('4763', '18', '4', '存储过程的应用，如何既有输入又有输出?', '8179aa3b-bbad-4c99-8715-c58186ca4d0c.', null, null, null, null, null, null, 'CREATE PROCEDURE PRO_NAME\r\n(XXXX IN/OUT TYPE;\r\nYYYY IN/OUT/INOUT TYPE;\r\n) IS/AS\r\nZZZZ TYPE;\r\nBEGIN\r\nSQLPRO;\r\nEXCEPTION\r\nEXCEPTIONXXXXX;\r\nCOMMIT;\r\nEND;', '', '0', '2017-12-25 22:36:09', '47', '1');
INSERT INTO `topic` VALUES ('4764', '18', '4', '常发生的异常有哪些?', '305c90d2-4bcf-4e1c-9ecf-316e4b0c93c2.', null, null, null, null, null, null, 'CURSOR_ALREADY_OPEN — ORA-06511 SQLCODE = -6511 游标已经打开\r\nDUP_VAL_ON_INDEX — ORA-00001 SQLCODE = -1 违反唯一性约束\r\nINVALID_CURSOR — ORA-01001 SQLCODE = -1001 非法游标操作\r\nINVALID_NUMBER — ORA-01722 SQLCODE = -1722 字符向数字转换失败\r\nLOGIN_DENIED — ORA-01017 SQLCODE = -1017\r\nNO_DATA_FOUND — ORA-01403 SQLCODE = +100 没有找到数据\r\nNOT_LOGGED_ON — ORA-01012 SQLCODE = -1012 没有连接到数据库\r\nPROGRAM_ERROR — ORA-06501 SQLCODE = -6501 内部错误\r\nSTORAGE_ERROR — ORA-06500 SQLCODE = -6500\r\nTIMEOUT_ON_RESOURCE — ORA-00051 SQLCODE = -51\r\nTOO_MANY_ROWS — ORA-01422 SQLCODE = -1422 返回多行\r\nTRANSACTION_BACKED_OUT — ORA-00061 SQLCODE = -61\r\nVALUE_ERROR — ORA-06502 SQLCODE = -6502 数值转换错误\r\nACCESS_INTO_NULL试图为NULL对象的属性赋值\r\nZERO_DIVIDE — ORA-01476 SQLCODE = -1476 被零除\r\nOTHERS — 其它任何错误的处理 ', '', '0', '2017-12-25 22:36:22', '47', '1');
INSERT INTO `topic` VALUES ('4765', '4', '4', '三大框架使用的版本？', 'f958b224-e041-407a-906d-7e8e62595d04.', null, null, null, null, null, null, '三大框架的版本:STRUTS 2; SPRING 3; HIBERNATE 3.3;', '', '0', '2017-12-25 22:36:24', '64', '1');
INSERT INTO `topic` VALUES ('4766', '18', '4', '怎样申请大块内核内存？', 'edff6953-c89f-4a1a-b51d-9fb9e89e2d02.', null, null, null, null, null, null, '在LINUX内核环境下，申请大块内存的成功率随着系统运行时间的增加而减少，虽然可以通过VMALLOC系列调用申请物理不连续但虚拟地址连续的内存，但毕竟其使用效率不高且在32位系统上VMALLOC的内存地址空间有限。所以，一般的建议是在系统启动阶段申请大块内存，但是其成功的概率也只是比较高而已，而不是100%。如果程序真的比较在意这个申请的成功与否，只能退用“启动内存”（BOOT MEMORY）。下面就是申请并导出启动内存的一段示例代码：\r\nVOID* X_BOOTMEM = NULL;\r\nEXPORT_SYMBOL(X_BOOTMEM);\r\nUNSIGNED LONG X_BOOTMEM_SIZE = 0;\r\nEXPORT_SYMBOL(X_BOOTMEM_SIZE);\r\nSTATIC INT __INIT X_BOOTMEM_SETUP(CHAR *STR)\r\n{\r\nX_BOOTMEM_SIZE = MEMPARSE(STR, &STR);\r\nX_BOOTMEM = ALLOC_BOOTMEM(X_BOOTMEM_SIZE);\r\nPRINTK(“RESERVED %LU BYTES FROM %P FOR X\\N”, X_BOOTMEM_SIZE, X_BOOTMEM);\r\nRETURN 1;\r\n}\r\n__SETUP(“X-BOOTMEM=”, X_BOOTMEM_SETUP);\r\n可见其应用还是比较简单的，不过利弊总是共生的，它不可避免也有其自身的限制：\r\n内存申请代码只能连接进内核，不能在模块中使用。\r\n被申请的内存不会被页分配器和SLAB分配器所使用和统计，也就是说它处于系统的可见内存之外，即使在将来的某个地方你释放了它。\r\n一般用户只会申请一大块内存，如果需要在其上实现复杂的内存管理则需要自己实现。\r\n在不允许内存分配失败的场合，通过启动内存预留内存空间将是我们唯一的选择。', '', '0', '2017-12-25 22:36:25', '29', '1');
INSERT INTO `topic` VALUES ('4767', '18', '4', '如何使用异常?', '9611dd46-df81-4b86-ac12-1acd1f52e0bb.', null, null, null, null, null, null, '在ORACLE中有三种类型的异常。预定义的异常 非预定义的异常 用户定义的异常 第二种非预定义的异常是与特定的ORACLE错误关联。并且用PRAGM EXCEPTION_INIT(EXCEPTION_NAME,ERROR_NUMBER)关联一起的。但是到底有什么用啊? 例如：DECLARE DUP_PRIMARY_KEY EXCEPTION; PRAGMA EXCEPTION_INIT(DUP_PRIMARY_KEY,-1); BEGIN INSERT INTO ITEMFILE VALUES(‘I201′,’WASHER’,\'SPARES’,100,50,250,12,30); EXCEPTION WHEN DUP_PRIMARY_KEY THEN DBMS_OUTPUT.PUT_LINE(‘重复项编号-主键冲突’); END\r\n第一种的使用方法：EXCEPTION\r\nWHEN 异常名称 THEN\r\n异常处理代码;\r\n第三种的用法：IF 条件 THEN\r\nRAISE_APPLICATION_ERROR(-20000“““`-20999,提示信息)；\r\nEND IF;\r\n', '', '0', '2017-12-25 22:36:38', '47', '1');
INSERT INTO `topic` VALUES ('4768', '4', '4', '三大框架各核心组件及作用', '22d22342-135b-42d1-ba61-da6e4671c3ef.', null, null, null, null, null, null, '组件及作用:JAVA三大框架主要用来做WEB应用; STRUTS主要负责表示层的显示;SPRING利用它的IOC和AOP来处理控制业务（负责对数据库的操作）;HIBERNATE主要是数据持久化到数据库;', '', '0', '2017-12-25 22:36:50', '64', '1');
INSERT INTO `topic` VALUES ('4769', '18', '4', '优化的策略一般包括:', 'b8d94937-e000-4d58-b074-e7535d634e8f.', null, null, null, null, null, null, '•内存优化\r\n•操作系统优化\r\n•数据存储的优化\r\n•网络优化等方法\r\n具体到不同的数据库涉及到要调整不同的数据库配置文件、不同的操作系统参数、网络参数等等, 不同的数据库不同.', '', '0', '2017-12-25 22:36:53', '47', '1');
INSERT INTO `topic` VALUES ('4770', '18', '4', '用户进程间通信主要哪几种方式？', '29afbf42-2917-4a4e-b760-0ba885ce518a.', null, null, null, null, null, null, '（1）管道（PIPE）：管道可用于具有亲缘关系进程间的通信，允许一个进程和另一个与它有共同祖先的进程之间进行通信。\r\n（2）命名管道（NAMED PIPE）：命名管道克服了管道没有名字的限制，因此，除具有管道所具有的功能外，它还允许无亲缘关系进程间的通信。命名管道在文件系统中有对应的文件名。命名管道通过命令MKFIFO或系统调用MKFIFO来创建。\r\n（3）信号（SIGNAL）：信号是比较复杂的通信方式，用于通知接受进程有某种事件发生，除了用于进程间通信外，进程还可以发送信号给进程本身；LINUX除了支持UNIX早期信号语义函数SIGAL外，还支持语义符合POSIX.1标准的信号函数SIGACTION（实际上，该函数是基于BSD的，BSD为了实现可靠信号机制，又能够统一对外接口，用SIGACTION函数重新实现了SIGNAL函数）。\r\n（4）消息（MESSAGE）队列：消息队列是消息的链接表，包括POSIX消息队列SYSTEM V消息队列。有足够权限的进程可以向队列中添加消息，被赋予读权限的进程则可以读走队列中的消息。消息队列克服了信号承载信息量少，管道只能承载无格式字节流以及缓冲区大小受限等缺\r\n（5）共享内存：使得多个进程可以访问同一块内存空间，是最快的可用IPC形式。是针对其他通信机制运行效率较低而设计的。往往与其它通信机制，如信号量结合使用，来达到进程间的同步及互斥。\r\n（6）信号量（SEMAPHORE）：主要作为进程间以及同一进程不同线程之间的同步手段。\r\n（7）套接字（SOCKET）：更为一般的进程间通信机制，可用于不同机器之间的进程间通信。起初是由UNIX系统的BSD分支开发出来的，但现在一般可以移植到其它类UNIX系统上：LINUX和SYSTEM V的变种都支持套接字。', '', '0', '2017-12-25 22:37:03', '29', '1');
INSERT INTO `topic` VALUES ('4771', '26', '1', '通信子网不包括（ ）', '092c8376-ead6-44a4-9718-ad5a105594c9.', '物理层', '网络层', '传输层', '数据链路层', '', '', 'C', '', '0', '2017-12-25 22:37:09', '43', '1');
INSERT INTO `topic` VALUES ('4772', '26', '1', 'IP 地址 192.1.1.2 属于 ，其默认的子网掩码为 ()', '9e8d3ed6-2803-4262-9f48-37626336922f.', 'B 类， 255.255.0.0　', 'A 类， 255.0.0.0 ', ' C 类， 255.255.0.0', ' C 类， 255.255.255.0', '', '', 'B', '', '0', '2017-12-25 22:38:37', '43', '1');
INSERT INTO `topic` VALUES ('4773', '18', '4', ' Oracle跟SQL Server 2005的区别？ ', '6bd265a3-da94-4a87-afdd-f33327808509.', null, null, null, null, null, null, '1). 最大的区别在于平台，ORACLE可以运行在不同的平台上，SQL SERVER只能运行在WINDOWS平台上，由于WINDOWS平台的稳定性和安全性影响了SQL SERVER的稳定性和安全性 \r\n2). ORACLE使用的脚本语言为PL-SQL，而SQL SERVER使用的脚本为T-SQL \r\n微观上： 从数据类型,数据库的结构等等回答', '', '0', '2017-12-25 22:38:42', '47', '1');
INSERT INTO `topic` VALUES ('4775', '18', '4', ' 如何使用Oracle的游标？ ', '9536f193-12b4-4bd7-aa92-80c8d78570f1.', null, null, null, null, null, null, '1).  ORACLE中的游标分为显示游标和隐式游标 \r\n2).  显示游标是用CURSOR...IS命令定义的游标，它可以对查询语句(SELECT)返回的多条记录进行处理；隐式游标是在执行插入 (INSERT)、删除(DELETE)、修改(UPDATE)和返回单条记录的查询(SELECT)语句时由PL/SQL自动定义的。 \r\n3). 显式游标的操作：打开游标、操作游标、关闭游标；PL/SQL隐式地打开SQL游标，并在它内部处理SQL语句，然后关闭它', '', '0', '2017-12-25 22:39:09', '47', '1');
INSERT INTO `topic` VALUES ('4776', '26', '1', ' IP 协议提供的是 类型。（ ） ', '5ad48e10-36b3-4beb-b37a-7e5286fb2afb.', '面向连接的数据报服务', '无连接的数据报服务 ', '面向连接的虚电路服务', '无连接的虚电路服务', '', '', 'D', '', '0', '2017-12-25 22:39:14', '43', '1');
INSERT INTO `topic` VALUES ('4778', '18', '4', ' Oracle中function和procedure的区别？ ', '16a7084a-29ca-449b-bbc0-9f4d7e1bcf4f.', null, null, null, null, null, null, '1). 可以理解函数是存储过程的一种 \r\n2). 函数可以没有参数,但是一定需要一个返回值，存储过程可以没有参数,不需要返回值 \r\n3). 函数RETURN返回值没有返回参数模式，存储过程通过OUT参数返回值, 如果需要返回多个参数则建议使用存储过程 \r\n4). 在SQL数据操纵语句中只能调用函数而不能调用存储过程', '', '0', '2017-12-25 22:39:25', '47', '1');
INSERT INTO `topic` VALUES ('4779', '18', '4', ' Oracle的导入导出有几种方式，有何区别？', 'b96bf06b-c243-4f68-ab8d-0cd16645ba78.', null, null, null, null, null, null, '1). 使用ORACLE工具 EXP/IMP \r\n2). 使用PLSQL相关工具 \r\n方法1. 导入/导出的是二进制的数据， 2.PLSQL导入/导出的是SQL语句的文本文件 ', '', '0', '2017-12-25 22:39:51', '47', '1');
INSERT INTO `topic` VALUES ('4780', '26', '4', 'Oracle中有哪几种文件？ ', '7c385db0-73e9-4ae5-b2fb-762d8ade4cb6.', null, null, null, null, null, null, '数据文件（一般后缀为.DBF或者.ORA），日志文件(后缀名.LOG)，控制文件（后缀名为.CTL）', '', '0', '2017-12-25 22:40:08', '47', '1');
INSERT INTO `topic` VALUES ('4781', '26', '1', ' Internet 采用了目前在分布式网络中最流行的模式，大大增强了网络信息服务的灵活性。（ ）', '29ec533b-ff24-45aa-8582-5e67c0152736.', '主机 / 终端', '客户 / 服务器', '仿真终端', '拨号 PPP', '', '', 'B', '', '0', '2017-12-25 22:40:24', '43', '1');
INSERT INTO `topic` VALUES ('4782', '26', '1', '负责电子邮件传输的应用层协议是（ ） ', '6eb99907-4af9-4d5e-9ac7-35f5bb7351c2.', 'SMTP', 'PPP　　 ', 'IP　　 ', 'FTP', '', '', 'A', '', '0', '2017-12-25 22:40:57', '43', '1');
INSERT INTO `topic` VALUES ('4784', '26', '1', '在下列给出的协议中， 不是 TCP/IP 的应用层协议。', '882e650a-e7e4-4633-93fe-305b543272ad.', 'HTTP　　 ', 'FTP', 'TCP', 'POP3 ', '', '', 'C', '', '0', '2017-12-25 22:41:47', '43', '1');
INSERT INTO `topic` VALUES ('4785', '18', '4', 'Oracle中字符串用什么符号链接？', '925aaa2d-89ac-4f8c-b53c-fc1e4d84c776.', null, null, null, null, null, null, 'ORACLE中使用 || 这个符号连接字符串 如 ‘ABC’ || ‘D’ ', '', '0', '2017-12-25 22:42:04', '47', '1');
INSERT INTO `topic` VALUES ('4786', '18', '4', 'Oracle分区是怎样优化数据库的? ', 'd2509df1-82d6-4abb-ac93-c120e835fa54.', null, null, null, null, null, null, 'ORACLE的分区可以分为：列表分区、范围分区、散列分区、复合分区。 \r\n1).  增强可用性：如果表的一个分区由于系统故障而不能使用，表的其余好的分区仍可以使用； \r\n2).  减少关闭时间：如果系统故障只影响表的一部份分区，那么只有这部份分区需要修复，可能比整个大表修复花的时间更少； \r\n3).  维护轻松：如果需要得建表，独产管理每个公区比管理单个大表要轻松得多； \r\n4).  均衡I/O：可以把表的不同分区分配到不同的磁盘来平衡I/O改善性能； \r\n5).  改善性能：对大表的查询、增加、修改等操作可以分解到表的不同分区来并行执行，可使运行速度更快 \r\n6).  分区对用户透明，最终用户感觉不到分区的存在。', '', '0', '2017-12-25 22:42:19', '47', '1');
INSERT INTO `topic` VALUES ('4787', '26', '4', 'Oracle是怎样分页的？', 'd28c415f-afac-4f50-b86e-b292c748326f.', null, null, null, null, null, null, 'ORACLE中使用ROWNUM来进行分页, 这个是效率最好的分页方法，HIBERNATE也是使用ROWNUM来进行ORALCE分页的 \r\nSELECT * FROM \r\n  ( SELECT ROWNUM R,A FROM TABNAME WHERE ROWNUM <= 20 ) \r\nWHERE R > 10 ', '', '0', '2017-12-25 22:42:36', '47', '1');
INSERT INTO `topic` VALUES ('4788', '26', '1', '传输介质是通信网络中发送方和接收方之间的 ( ) 通路。　　 ', 'e37f3203-246e-43b6-a638-21d06440c338.', '物理　', '逻辑　　 ', '虚拟　　 ', '数字', '', '', 'A', '', '0', '2017-12-25 22:42:40', '43', '1');
INSERT INTO `topic` VALUES ('4789', '3', '4', '用自己的话简要阐述struts2的执行流程。', 'a06fe70b-7e5a-4a2a-9490-5c24124e28ed.', null, null, null, null, null, null, 'STRUTS 2框架本身大致可以分为3个部分：核心控制器FILTERDISPATCHER、业务控制器ACTION和用户实现的企业业务逻辑组件。核心控制器FILTERDISPATCHER是STRUTS 2框架的基础，包含了框架内部的控制流程和处理机制。业务控制器ACTION和业务逻辑组件是需要用户来自己实现的。用户在开发ACTION和业务逻辑组件的同时，还需要编写相关的配置文件，供核心控制器FILTERDISPATCHER来使用。', '', '0', '2017-12-25 22:43:28', '69', '1');
INSERT INTO `topic` VALUES ('4790', '26', '1', '传送速率单位“ b/s ”代表（ ）', 'eea7ad25-157d-481c-9194-1c49a2f266ff.', 'bytes per secon', 'bits per second', 'baud per second', 'billion per second ', '', '', 'B', '', '0', '2017-12-25 22:43:36', '43', '1');
INSERT INTO `topic` VALUES ('4792', '18', '4', 'Oralce怎样存储文件，能够存储哪些文件？', 'f12de883-cbfa-40da-bd1f-d3f548f4488a.', null, null, null, null, null, null, 'ORACLE 能存储 CLOB、NCLOB、 BLOB、 BFILE \r\nCLOB  可变长度的字符型数据，也就是其他数据库中提到的文本型数据类型 \r\nNCLOB 可变字符类型的数据，不过其存储的是UNICODE字符集的字符数据 \r\nBLOB  可变长度的二进制数据 \r\nBFILE  数据库外面存储的可变二进制数据 ', '', '0', '2017-12-25 22:44:16', '47', '1');
INSERT INTO `topic` VALUES ('4793', '18', '4', 'Oracle中使用了索引的列，对该列进行where条件查询、分组、排序、使用聚集函数，哪些用到了索引？ ', '386dff1a-7f9b-425d-b705-60975679680b.', null, null, null, null, null, null, '均会使用索引， 值得注意的是复合索引（如在列A和列B上建立的索引）可能会有不同情况 ', '', '0', '2017-12-25 22:44:32', '47', '1');
INSERT INTO `topic` VALUES ('4794', '4', '4', 'hibernat和mybaitis的优势', '52073ff6-fc9a-4fca-b16e-d005e163fff3.', null, null, null, null, null, null, 'MYBAITIS 的优势:·  HIBERNATE的DAO层开发比MYBATIS简单，MYBATIS需要维护SQL和结果映射；·  HIBERNATE对对象的维护和缓存要比MYBATIS好，对增删改查的对象的维护要方便；·  HIBERNATE数据库移植性很好，MYBATIS的数据库移植性不好，不同的数据库需要写不同SQL。·  HIBERNATE有更好的二级缓存机制，可以使用第三方缓存。MYBATIS本身提供的缓存机制不佳。', '', '0', '2017-12-25 22:45:21', '64', '1');
INSERT INTO `topic` VALUES ('4795', '18', '4', '数据库怎样实现每隔30分钟备份一次？ ', '2554a38f-608b-4e1f-8b4f-728b4dbfbfa8.', null, null, null, null, null, null, '通过操作系统的定时任务调用脚本导出数据库', '', '0', '2017-12-25 22:45:27', '47', '1');
INSERT INTO `topic` VALUES ('4796', '18', '4', 'Oracle中where条件查询和排序的性能比较？ ', 'a8528b99-4748-43e6-b364-1ac7a13b17cc.', null, null, null, null, null, null, 'ORDER BY使用索引的条件极为严格，只有满足如下情况才可以使用索引， \r\n1). ORDER BY中的列必须包含相同的索引并且索引顺序和排序顺序一致 \r\n2). 不能有NULL值的列 \r\n所以排序的性能往往并不高，所以建议尽量避免ORDER BY', '', '0', '2017-12-25 22:45:42', '47', '1');
INSERT INTO `topic` VALUES ('4798', '3', '4', 'load()和get()的区别', '2bc66090-c04e-4b2e-9bba-9941dc18b4e3.', null, null, null, null, null, null, 'HIBERNATE对于LOAD方法认为该数据在数据库中一定存在，可以放心的使用代理来延迟加载，LOAD默认支持延迟加载，在用到对象中的其他属性数 据时才查询数据库，但是万一数据库中不存在该记录，只能抛异常OBJECTNOTFOUNDECCEPTION；所说的LOAD方法抛异常是指在使用该对 象的数据时，数据库中不存在该数据时抛异常，而不是在创建这个对象时。由于SESSION中的缓存对于HIBERNATE来说是个相当廉价的资源，所以在 LOAD时会先查一下SESSION缓存看看该ID对应的对象是否存在，不存在则创建代理（LOAD时候之查询一级缓存，不存在则创建代理）。GET() 现在一级缓存找，没有就去二级缓存找，没有就去数据库找，没有就返回NULL ；而对于GET方法，HIBERNATE一定要获取到真实的数据，否则返回NULL。\r\n ', '', '0', '2017-12-25 22:46:03', '69', '1');
INSERT INTO `topic` VALUES ('4799', '26', '4', '解释什么是死锁，如何解决Oracle中的死锁？ ', '34cd30b7-b3a3-4aaf-8bfd-c078d0f157a5.', null, null, null, null, null, null, '简言之就是存在加了锁而没有解锁，可能是使用锁没有提交或者回滚事务，如果是表级锁则不能操作表，客户端处于等在状态，如果是行级锁则不能操作锁定行 \r\n解决办法： \r\n1). 查找出被锁的表 \r\nSELECT B.OWNER,B.OBJECT_NAME,A.SESSION_ID,A.LOCKED_MODE \r\nFROM V$LOCKED_OBJECT A,DBA_OBJECTS B \r\nWHERE B.OBJECT_ID = A.OBJECT_ID; \r\n     \r\nSELECT B.USERNAME,B.SID,B.SERIAL#,LOGON_TIME \r\nFROM V$LOCKED_OBJECT A,V$SESSION B \r\nWHERE A.SESSION_ID = B.SID ORDER BY B.LOGON_TIME; \r\n2). 杀进程中的会话 \r\nALTER SYSTEM KILL SESSION \"SID,SERIAL#\"; ', '', '0', '2017-12-25 22:46:59', '47', '1');
INSERT INTO `topic` VALUES ('4800', '18', '4', ' 简述oracle中 dml、ddl、dcl的使用 ', '9ff5ef95-01f8-4125-8563-d1b6b407f665.', null, null, null, null, null, null, 'DML 数据操纵语言，如SELECT、UPDATE、DELETE，INSERT \r\nDDL 数据定义语言，如CREATE TABLE 、DROP TABLE 等等 \r\nDCL 数据控制语言， 如 COMMIT、 ROLLBACK、GRANT、 INVOKE等 ', '', '0', '2017-12-25 22:47:09', '47', '1');
INSERT INTO `topic` VALUES ('4801', '18', '4', '说说oracle中的经常使用到得函数 ', '427af4a8-cc7a-4105-a69c-211331ae11cf.', null, null, null, null, null, null, 'LENGTH 长度、 LOWER 小写、UPPER 大写， TO_DATE 转化日期， TO_CHAR转化字符 \r\nLTRIM 去左边空格、 RTRIM去右边空格，SUBSTR取字串，ADD_MONTH增加或者减掉月份、TO_NUMBER转变为数字 ', '', '0', '2017-12-25 22:47:19', '47', '1');
INSERT INTO `topic` VALUES ('4802', '18', '4', ' 怎样创建一个视图,视图的好处, 视图可以控制权限吗? ', 'ba7e7b54-0fba-4d53-bce0-4b4b29e91822.', null, null, null, null, null, null, 'CREATE VIEW 视图名 AS SELECT 列名 [别名]  …  FROM 表 [UNIO [ALL] SELECT … ] ] \r\n好处： \r\n1. 可以简单的将视图理解为SQL查询语句，视图最大的好处是不占系统空间 \r\n2. 一些安全性很高的系统，不会公布系统的表结构，可能会使用视图将一些敏感信息过虑或者重命名后公布结构 \r\n3. 简化查询 \r\n可以控制权限的，在使用的时候需要将视图的使用权限GRANT给用户 ', '', '0', '2017-12-25 22:48:12', '47', '1');
INSERT INTO `topic` VALUES ('4803', '26', '4', '分别写出ftp、vpn、dns、sql、firewall、web常用的软件', '8bddb141-181b-46d0-803a-3ad68bb67f7c.', null, null, null, null, null, null, 'FTP：VSFTP\r\nVPN：OPENVPN、IPSEC、L2TP、SSL VPN。\r\nDNS：\r\nSQL：NOSQL、MYSQL\r\nFIREWALL：\r\nWEB：APACHE、NGINX、TOMCAT、SQUID', '', '0', '2017-12-25 22:48:26', '4', '1');
INSERT INTO `topic` VALUES ('4804', '26', '4', '写出至少四种Linux发行版本', '7dfaeb15-5306-416d-9159-285f2a288a68.', null, null, null, null, null, null, 'REDHAT、CENTOS、SUSE、UBUNTU、DEBIAN、GENTOO、SLACKWARE、FEDORA、ARCH LINUX\r\nSUSE是基于SLACKWARE的二次发行版\r\nUBUNTU是基于DEBIAN的二次发行版\r\nFEDORA属于红帽系列\r\nARCH LINUX是轻量级的，是独立的发行版，没有基于其他版本', '', '0', '2017-12-25 22:49:05', '4', '1');
INSERT INTO `topic` VALUES ('4805', '18', '4', 'oracle创建表的几种方式;应该注意些什么 ', 'e9e2e7ab-5d61-4138-b584-42f5593abd0c.', null, null, null, null, null, null, '不知道这个题目是不是记错了，感觉很怪 \r\n1. 使用图形工具创建表 \r\n2. 使用数据DDL语句创建表 \r\n3. 可以在PLSQL代码中动态创建表 \r\n应该注意： 是否有创建表的权限， 使用什么表空间等 ', '', '0', '2017-12-25 22:49:55', '47', '1');
INSERT INTO `topic` VALUES ('4807', '18', '4', '怎样将一个旧数据库数据移到一个新的数据库 ', '7ee2f54f-b0b0-4df5-9687-19cce658d4c8.', null, null, null, null, null, null, '1. IMP/EXP将数据库中的数据导入到新的库中 \r\n2. 如果是存储迁移直接将存储设备挂到新机器上 ', '', '0', '2017-12-25 22:50:07', '47', '1');
INSERT INTO `topic` VALUES ('4808', '18', '4', '主键有几种; ', '0b98639d-4c7d-44c4-adea-05638d540eba.', null, null, null, null, null, null, '字符型，整数型、复合型 ', '', '0', '2017-12-25 22:50:21', '47', '1');
INSERT INTO `topic` VALUES ('4809', '18', '4', 'rowid, rownum的定义 ', '36b997ef-1295-4a0a-b13a-bc95c534df91.', null, null, null, null, null, null, '1. ROWID和ROWNUM都是虚列 \r\n2. ROWID是物理地址，用于定位ORACLE中具体数据的物理存储位置 \r\n3. ROWNUM则是SQL的输出结果排序，从下面的例子可以看出其中的区别。 ', '', '0', '2017-12-25 22:50:58', '47', '1');
INSERT INTO `topic` VALUES ('4810', '3', '4', 'Java中有几种数据类型', 'e285b6be-83d7-4a5c-b9c4-386ddcda2866.', null, null, null, null, null, null, '整形：BYTE,SHORT,INT,LONG\r\n浮点型：FLOAT,DOUBLE\r\n字符型：CHAR\r\n布尔型：BOOLEAN\r\n', '', '0', '2017-12-25 22:51:07', '64', '1');
INSERT INTO `topic` VALUES ('4811', '18', '4', 'oracle中存储过程，游标和函数的区别 ', '8405a2e3-bf09-485e-bbbd-811029c87f0b.', null, null, null, null, null, null, '游标类似指针，游标可以执行多个不相关的操作.如果希望当产生了结果集后,对结果集中的数据进行多 种不相关的数据操作 \r\n函数可以理解函数是存储过程的一种； 函数可以没有参数,但是一定需要一个返回值，存储过程可以没有参数,不需要返回值；两者都可以通过OUT参数返回值, 如果需要返回多个参数则建议使用存储过程；在SQL数据操纵语句中只能调用函数而不能调用存储过程 ', '', '0', '2017-12-25 22:51:28', '47', '1');
INSERT INTO `topic` VALUES ('4812', '18', '4', ' 使用oracle 伪列删除表中重复记录： ', 'f79186e0-3df6-455c-9e6b-df6d09c7986e.', null, null, null, null, null, null, 'DELETE  TABLE T  WHERE T.ROWID!=(SELECT  MAX(T1.ROWID)  FROM  TABLE1 T1 WHERE  T1.NAME=T.NAME)', '', '0', '2017-12-25 22:51:40', '47', '1');
INSERT INTO `topic` VALUES ('4813', '18', '4', 'OracleDBA面试题之一解释冷备份和热备份的不同点以及各自的优点', 'b847fa52-326c-4b29-ae4e-87e4a8ee9ff6.', null, null, null, null, null, null, '1.ORACLEDBA面试题之一解释冷备份和热备份的不同点以及各自的优点 解答：热备份针对归档模式的数据库，在数据库仍旧处于工作状态时进行备份。而冷备份指在数据库关闭后，进行备份，适用于所有模式的数据库。热备份的优点在于当备份时，数据库仍旧可以被使用并且可以将数据库恢复到任意一个时间点。 冷备份的优点在于它的备份和恢复操作相当简单，并且由于冷备份的数据库可以工作在非归档模式下,数据库性能会比归档模式稍好。（因为不必将ARCHIVELOG写入硬盘）', '', '0', '2017-12-25 22:52:42', '47', '1');
INSERT INTO `topic` VALUES ('4815', '18', '4', '调用schedule()进行进程切换的方式有几种？', 'c62693b4-a7ab-414f-9248-70551364ac1c.', null, null, null, null, null, null, '1.系统调用 DO_FORK();\r\n2.定时中断 DO_TIMER();\r\n3.唤醒进程 WAKE_UP_PROCESS\r\n4.改变进程的调度策略 SETSCHEDULER();\r\n5.系统调用礼让 SYS_SCHED_YIELD();', '', '0', '2017-12-25 22:53:34', '29', '1');
INSERT INTO `topic` VALUES ('4816', '3', '4', 'Java中操作字符串使用哪个类？', '308f3a64-12d2-4ec6-827a-d31bfeb1108b.', null, null, null, null, null, null, 'STRING，STRINGBUFFER，STRINGBUILDER', '', '0', '2017-12-25 22:53:57', '62', '1');
INSERT INTO `topic` VALUES ('4817', '18', '4', '解释$ORACLE_HOME和$ORACLE_BASE的区别？', '91656c66-15ad-420e-bfba-f94b3b441114.', null, null, null, null, null, null, '解答：ORACLE_BASE是ORACLE的根目录，ORACLE_HOME是ORACLE产品的目录', '', '0', '2017-12-25 22:54:20', '47', '1');
INSERT INTO `topic` VALUES ('4818', '18', '4', '如何判断数据库的时区？', '16d324cf-dc8c-4ca0-80df-4084c9db7f78.', null, null, null, null, null, null, '解答：SELECTDBTIMEZONEFROMDUAL;', '', '0', '2017-12-25 22:54:39', '47', '1');
INSERT INTO `topic` VALUES ('4819', '3', '4', 'StringBuffer，Stringbuilder有什么区别？', 'f7a2f48c-f4ab-40cc-9342-90a97d15ed77.', null, null, null, null, null, null, 'STRINGBUFFER与STRINGBUILDER都继承了ABSTRACTSTRINGBULDER类，而ABTRACTSTRINGBUILDER又实现了CHARSEQUENCE接口，两个类都是用来进行字符串操作的。\r\nSTRINGBUFFER是线程安全的，STRINGBUILDER是非线程安全的。所以STRINGBUILDER比STRINGBUFFER效率更高，STRINGBUFFER的方法大多都加了SYNCHRONIZED关键字', '', '0', '2017-12-25 22:54:54', '62', '1');
INSERT INTO `topic` VALUES ('4820', '18', '4', '解释GLOBAL_NAMES设为TRUE的用途', 'd3509fae-7224-48c6-adf6-185389fddc3f.', null, null, null, null, null, null, '解答：GLOBAL_NAMES指明联接数据库的方式。如果这个参数设置为TRUE,在建立数据库链接时就必须用相同的名字连结远程数据库', '', '0', '2017-12-25 22:54:55', '47', '1');
INSERT INTO `topic` VALUES ('4821', '18', '4', 'OracleDBA面试题：如何加密PL/SQL程序？', '5e5593bb-552c-4a51-bd68-e7a68ddb8ae7.', null, null, null, null, null, null, '解答：WRAP', '', '0', '2017-12-25 22:55:12', '47', '1');
INSERT INTO `topic` VALUES ('4822', '3', '4', 'String str=”aaa”,与String str=new String(“aaa”)一样吗？', '3e7d11f7-7775-44f1-b9e4-d9ce58ac0b75.', null, null, null, null, null, null, '不一样的。因为内存分配的方式不一样。\r\n第一种，创建的”AAA”是常量，JVM都将其分配在常量池中。\r\n第二种创建的是一个对象，JVM将其值分配在堆内存中。', '', '0', '2017-12-25 22:55:21', '62', '1');
INSERT INTO `topic` VALUES ('4823', '26', '4', '解释FUNCTION,PROCEDURE和PACKAGE区别', '84178774-b5c7-4496-bec3-93bf0b814170.', null, null, null, null, null, null, '解答：FUNCTION和PROCEDURE是PL/SQL代码的集合，通常为了完成一个任务。PROCEDURE不需要返回任何值而FUNCTION将返回一个值在另一方面，PACKAGE是为了完成一个商业功能的一组FUNCTION和PROCEUDRE的集合', '', '0', '2017-12-25 22:55:41', '47', '1');
INSERT INTO `topic` VALUES ('4824', '24', '4', ' Linux调度程序是根据进程的动态优先级还是静态优先级来调度进程的？', '63dfc529-3cbd-4ce7-904b-b881967c240a.', null, null, null, null, null, null, 'LIUNX调度程序是根据根据进程的动态优先级来调度进程的，但是动态优先级又是根据静态优先级根据算法计算出来的，两者是两个相关联的值。因为高优先级的进程总是比低优先级的进程先被调度，为防止多个高优先级的进程占用CPU资源，导致其他进程不能占有CPU，所以引用动态优先级概念', '', '0', '2017-12-25 22:55:43', '29', '1');
INSERT INTO `topic` VALUES ('4825', '18', '4', '解释TABLEFunction的用途', '12c20ee9-80b5-4f51-be1d-dcae84f922f3.', null, null, null, null, null, null, '解答：TABLEFUNCTION是通过PL/SQL逻辑返回一组纪录，用于普通的表/视图。他们也用于PIPELINE和ETL过程', '', '0', '2017-12-25 22:55:59', '47', '1');
INSERT INTO `topic` VALUES ('4826', '3', '4', '将下java中的math类有那些常用方法？', '523e6c0b-de91-4e05-aa55-aaa628f6e82e.', null, null, null, null, null, null, 'POW()：幂运算\r\nSQRT()：平方根\r\nROUND()：四舍五入\r\nABS()：求绝对值\r\nRANDOM()：生成一个0-1的随机数，包括0不包括1', '', '0', '2017-12-25 22:56:01', '62', '1');
INSERT INTO `topic` VALUES ('4827', '18', '4', '举出3种可以收集threeadvisorystatistics', '537aaf31-8ce1-4e09-9922-7afe21c3ca9c.', null, null, null, null, null, null, '解答：BUFFERCACHEADVICE,SEGMENTLEVELSTATISTICS,TIMED STATISTICS', '', '0', '2017-12-25 22:56:17', '47', '1');
INSERT INTO `topic` VALUES ('4828', '26', '4', 'String类的常用方法有那些？', '20208328-d95c-4f1b-b39a-64bf683c9753.', null, null, null, null, null, null, 'CHARAT：返回指定索引处的字符\r\nINDEXOF()：返回指定字符的索引\r\nREPLACE()：字符串替换\r\nTRIM()：去除字符串两端空白\r\nSPLIT()：分割字符串，返回一个分割后的字符串数组\r\nGETBYTES()：返回字符串的BYTE类型数组\r\nLENGTH()：返回字符串长度\r\nTOLOWERCASE()：将字符串转成小写字母\r\nTOUPPERCASE()：将字符串转成大写字符\r\nSUBSTRING()：截取字符串\r\nFORMAT()：格式化字符串\r\nEQUALS()：字符串比较', '', '0', '2017-12-25 22:56:37', '62', '1');
INSERT INTO `topic` VALUES ('4829', '18', '4', 'Audittrace存放在哪个oracle目录结构中？', '2fc3febd-d866-4ea5-8908-ef84732931d2.', null, null, null, null, null, null, '解答：UNIX$ORACLE_HOME/RDBMS/AUDITWINDOWSTHEEVENTVIEWER\r\n下载文档到电脑，方便使用\r\n\r\n 2下载券  5.0分(高于99%的文档)\r\n\r\n下载\r\n还剩5页未读，继续阅读\r\n 好的工作首先需要一份好的简历\r\n立即定制简历\r\n', '', '0', '2017-12-25 22:56:45', '47', '1');
INSERT INTO `topic` VALUES ('4830', '3', '4', '判断两个对象是否相同，能使用equlas比较吗？', '63778118-2233-41bf-bc91-bc9cdee189c3.', null, null, null, null, null, null, '不能。EQULAS大多用来做字符串比较，要判断基本数据类型或者对象类型，需要使用==', '', '0', '2017-12-25 22:57:11', '62', '1');
INSERT INTO `topic` VALUES ('4831', '3', '4', '谈谈hibernate的延迟加载和openSessionInView', '7d7c81c7-f7cb-4055-9915-5311598c8ff9.', null, null, null, null, null, null, '延迟加载要在SESSION范围内，用到的时候再加载；OPENSESSIONINVIEW是在WEB层写了一个\r\nFILTER来打开和关闭SESSION，这样就表示在一次REQUEST过程中SESSION一直开着，保证了延迟\r\n加载在SESSION中的这个前提。', '', '0', '2017-12-25 22:57:12', '69', '1');
INSERT INTO `topic` VALUES ('4832', '26', '4', '下列哪个命令不能退出\r\nvi\r\n编辑器：\r\n:x,:q,:q!,:bye ', '81b0b66a-f6a9-46e1-b847-77e1a8ae4eca.', null, null, null, null, null, null, '最后一个\r\n,\r\n即：\r\nBYE  \r\n:X(\r\n写入文件并退出。\r\n仅当文件被修改时才写入，\r\n并更新文件修改时间，\r\n否则不会更新文件修\r\n改时间。\r\n)  \r\n:Q(\r\n普通退出，如果有写入操作，则提示）\r\n  \r\n:Q!(\r\n强制退出，如果有写入操作，则不会保存）', '', '0', '2017-12-25 22:57:43', '4', '1');
INSERT INTO `topic` VALUES ('4834', '3', '4', 'spring的事务有几种方式？谈谈spring事务的隔离级别和传播行为。\r\n声明事务和编程事务', '8da27944-2c78-49b9-820c-8c6fc16bde84.', null, null, null, null, null, null, '隔离级别：\r\n- DEFAULT使用数据库默认的隔离级别\r\n- READ_UNCOMMITTED会出现脏读，不可重复读和幻影读问题\r\n- READ_COMMITTED会出现重复读和幻影读\r\n- REPEATABLE_READ会出现幻影读\r\n- SERIALIZABLE最安全，但是代价最大，性能影响极其严重', '', '0', '2017-12-25 22:59:53', '69', '1');
INSERT INTO `topic` VALUES ('4835', '3', '4', '如何将字符串反转？', '843223c9-f7cd-467b-b7e9-95ac5e77db30.', null, null, null, null, null, null, 'STRINGBUILDER或者STRINGBUFFER的REVERSE方法', '', '0', '2017-12-25 22:59:56', '62', '1');
INSERT INTO `topic` VALUES ('4836', '18', '4', 'SQL语言包括数据定义、数据操纵(Data Manipulation),数据控制(Data Control)', 'c48c1ed0-192a-4351-af39-4d1072e1e711.', null, null, null, null, null, null, '数据定义：CREATE TABLE,ALTER TABLE,DROP TABLE, CRAETE/DROP INDEX等\r\n数据操纵：SELECT ,INSERT,UPDATE,DELETE,\r\n数据控制：GRANT,REVOKE', '', '0', '2017-12-25 23:00:09', '47', '1');
INSERT INTO `topic` VALUES ('4837', '3', '4', '面向对象的语言有那些特征？', '30298515-d2c0-463a-93f7-e0bdf5421ec4.', null, null, null, null, null, null, '封装、继承、多态', '', '0', '2017-12-25 23:00:19', '62', '1');
INSERT INTO `topic` VALUES ('4838', '18', '4', 'SQL常用命令：', '3b2c6c3f-712f-4a39-afe6-0cf75f856e92.', null, null, null, null, null, null, 'CREATE TABLE STUDENT(\r\nID NUMBER PRIMARY KEY,\r\nNAME VARCHAR2(50) NOT NULL);//建表\r\nCREATE VIEW VIEW_NAME AS\r\nSELECT * FROM TABLE_NAME;//建视图\r\nCREATE UNIQUE INDEX INDEX_NAME ON TABLENAME(COL_NAME);//建索引\r\nINSERT INTO TABLENAME {COLUMN1,COLUMN2,…} VALUES(EXP1,EXP2,…);//插入\r\nINSERT INTO VIEWNAME {COLUMN1,COLUMN2,…} VALUES(EXP1,EXP2,…);//插入视图实际影响表\r\nUPDATE TABLENAME SET NAME=’ZANG 3’ CONDITION;//更新数据\r\nDELETE FROM TABLENAME WHERE CONDITION;//删除\r\nGRANT (SELECT,DELETE,…) ON (对象) TO USER_NAME [WITH GRANT OPTION];//授权\r\nREVOKE (权限表) ON(对象) FROM USER_NAME [WITH REVOKE OPTION] //撤权\r\n列出工作人员及其领导的名字：\r\nSELECT E.NAME, S.NAME FROM EMPLOYEE E S\r\nWHERE E.SUPERNAME=S.NAME', '', '0', '2017-12-25 23:00:23', '47', '1');
INSERT INTO `topic` VALUES ('4839', '26', '4', 'Java applet有哪些限制条件？', '5afddaf1-c845-493c-a990-df2d8c13e45d.', null, null, null, null, null, null, 'APPLET不能够载入类库或者定义本地方法，APPLET不能在宿主机上读写文件，APPLET不能读取特定的系统属性，APPLET不能发起网络连接，除非是跟宿主机，APPLET不能够开启宿主机上其他任何的程序', '主要是由于安全的原因', '0', '2017-12-25 23:00:30', '61', '1');
INSERT INTO `topic` VALUES ('4840', '26', '4', '视图：', '3e9c821d-9fcc-40b5-8b6d-894eed55d21d.', null, null, null, null, null, null, '. 完整性约束：实体完整性、参照完整性、用户定义完整性', '', '0', '2017-12-25 23:00:41', '47', '1');
INSERT INTO `topic` VALUES ('4841', '3', '4', 'Java中的继承是单继承还是多继承', 'b451df2b-36da-43c8-9edb-66ea71f4343f.', null, null, null, null, null, null, 'JAVA中既有单继承，又有多继承。对于JAVA类来说只能有一个父类，对于接口来说可以同时继承多个接口', '', '0', '2017-12-25 23:00:43', '62', '1');
INSERT INTO `topic` VALUES ('4842', '18', '4', '第三范式：', 'ac29e0d4-a154-4304-aa0f-5d2e159fa70b.', null, null, null, null, null, null, '1NF:每个属性是不可分的。 2NF:若关系R是１NF,且每个非主属性都完全函数依赖于R的键。例SLC(SID#, COURCEID#, SNAME,GRADE),则不是2NF; 3NF:若R是2NF，且它的任何非键属性都不传递依赖于任何候选键。', '', '0', '2017-12-25 23:00:57', '47', '1');
INSERT INTO `topic` VALUES ('4843', '26', '4', '什么是不受信任的applet？', 'c815d4bd-58c5-4f51-a80a-43cc35a93349.', null, null, null, null, null, null, '不受信任的APPLET是不能访问或是执行本地系统文件的JAVA APPLET', '默认情况下，所有下载的applet都是不受信任的。', '0', '2017-12-25 23:01:11', '61', '1');
INSERT INTO `topic` VALUES ('4844', '18', '4', '事务：是一系列的数据库操作，是数据库应用的基本逻辑单位。事务性质：原子性', '2bcaa792-7684-4f1f-a100-c7429c911ba1.', null, null, null, null, null, null, ' 原子性。即不可分割性，事务要么全部被执行，要么就全部不被执行。\r\n? 一致性或可串性。事务的执行使得数据库从一种正确状态转换成另一种正确状态\r\n? 隔离性。在事务正确提交之前，不允许把该事务对数据的任何改变提供给任何其他事务，\r\n? 持久性。事务正确提交后，其结果将永久保存在数据库中，即使在事务提交后有了其他故障，事务的处理结果也会得到保存。', '', '0', '2017-12-25 23:01:16', '47', '1');
INSERT INTO `topic` VALUES ('4845', '26', '2', 'RedHat LINUX安装时自动创建了根用户', 'c2d9ad09-55a3-438c-94b3-060524e64dac.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:01:16', '40', '1');
INSERT INTO `topic` VALUES ('4846', '26', '2', '在安装RedHat Linux时要以图形化模式安装，直接按Enter', '16141594-33df-4912-b1f5-24bcb8dd1c81.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:01:28', '40', '1');
INSERT INTO `topic` VALUES ('4848', '18', '3', '理解模型________________________________________________________________________________', 'cfb0c21a-ebd2-49be-975f-2084bd0ea986.', null, null, null, null, null, null, '必须理解OSI、TCP/IP、CISCO和纵深防御网络模型', '', '0', '2017-12-25 23:02:29', '6', '1');
INSERT INTO `topic` VALUES ('4849', '24', '4', '查询一个包是否被安装', 'fccb6228-5daf-4dfc-b69a-b1884cd53dfc.', null, null, null, null, null, null, 'RPM -Q < RPM PACKAGE NAME> ', '', '0', '2017-12-25 23:05:21', '46', '1');
INSERT INTO `topic` VALUES ('4850', '26', '4', '有一\r\nweb\r\n服务器，\r\n某天某用户投诉上某个网站速度很慢，\r\n如果你是服务器的管理员，\r\n请问\r\n \r\n你如何查找原因。假设服务器有任意操作系统和软件。', '062d6160-d128-47dd-8f3b-6505a1c151b2.', null, null, null, null, null, null, '1\r\n、首先检测服务器状态，排除硬件故障和系统故障排除机器故障\r\n  \r\n  \r\n  \r\n2\r\n、检查底层网络状态（包括互联情况，\r\nPING\r\n包延迟、流量情况）排除网络故障和网卡\r\n等设备故障。\r\n \r\n  \r\n  \r\n3\r\n、\r\n检查\r\nWEB\r\n服务器软件运行情况\r\n（并发连接、\r\n服务软件配置情况、\r\n数据库连接情况等）\r\n排除应用服务故障。', '', '0', '2017-12-25 23:05:32', '4', '1');
INSERT INTO `topic` VALUES ('4851', '26', '4', '哪些Swing的方法是线程安全的？', '7d851cd7-140e-4655-89a4-4deaa3958eb5.', null, null, null, null, null, null, '只有3个线程安全的方法： REPAINT(), REVALIDATE(), AND INVALIDATE()。', '', '0', '2017-12-25 23:05:48', '61', '1');
INSERT INTO `topic` VALUES ('4852', '18', '4', '锁：共享锁、互斥锁', '31fb6a48-b7db-49c1-9e4f-f44715b82197.', null, null, null, null, null, null, '两段锁协议：阶段１：加锁阶段 阶段２：解锁阶段', '', '0', '2017-12-25 23:06:00', '47', '1');
INSERT INTO `topic` VALUES ('4853', '33', '4', '说出三种支持重绘(painting)的组件。', 'db3c2b6b-9ede-4ecf-9968-cce2e7fabf03.', null, null, null, null, null, null, 'CANVAS, FRAME, PANEL,和APPLET支持重绘。', '', '0', '2017-12-25 23:06:16', '61', '1');
INSERT INTO `topic` VALUES ('4854', '26', '4', '32\r\n位操作系统和\r\n64\r\n位操作系统的区别，并说明它们的优点和缺点。', '88426b52-b6ef-493c-ab8c-814543bdd5f9.', null, null, null, null, null, null, '\r\n优点：\r\n可以进行更大范围的整数运算；可以支持更大的内存。\r\n如支持更多的可寻址空间\r\n大于\r\n4GB\r\n。支持更大的虚拟内存\r\n16TB\r\n，支持更多的页面文件\r\n  \r\n512TB\r\n，支持更多的系统缓存\r\n1TB\r\n。支持更高的颜色质量（\r\n2\r\n的\r\n64\r\n次方）\r\n  \r\n缺点：缺点是向下兼容性差、支持硬件驱动较少。支持应用程序较少。需要硬件支持。', '', '0', '2017-12-25 23:06:17', '4', '1');
INSERT INTO `topic` VALUES ('4855', '18', '4', '死锁及处理：事务循环等待数据锁，则会死锁。', '2300a40d-0c9d-4e50-8f1d-e89462aca661.', null, null, null, null, null, null, '死锁处理：预防死锁协议，死锁恢复机制', '', '0', '2017-12-25 23:06:39', '47', '1');
INSERT INTO `topic` VALUES ('4856', '24', '4', '得到被安装的包的信息？', '42e40665-6ad0-4582-9dc5-0799f148deff.', null, null, null, null, null, null, 'RPM -QI < RPM PACKAGE NAME> ', '', '0', '2017-12-25 23:06:46', '46', '1');
INSERT INTO `topic` VALUES ('4857', '18', '4', '存储过程：存储过程就是编译好了的一些sql语句。', '67b400d6-d914-4124-959e-0cdca4601b7a.', null, null, null, null, null, null, '1.存储过程因为SQL语句已经预编绎过了，因此运行的速度比较快。\r\n2. 可保证数据的安全性和完整性。通过存储过程可以使没有权限的用户在控制之下间接地存取数据库，从而保证数据的安全。通过存储过程可以使相关的动作在一起发生，从而可以维护数据库的完整性。\r\n3.可以降低网络的通信量。存储过程主要是在服务器上运行，减少对客户机的压力。\r\n4：存储过程可以接受参数、输出参数、返回单个或多个结果集以及返回值。可以向程序返回错误原因\r\n5：存储过程可以包含程序流、逻辑以及对数据库的查询。同时可以实体封装和隐藏了数据逻辑。  ', '', '0', '2017-12-25 23:07:25', '47', '1');
INSERT INTO `topic` VALUES ('4858', '18', '3', '理解第二层相关问题：包括了冲突域___________________________以及生成树的相关主题', 'a67559f5-078a-4a57-9055-8662f91683c8.', null, null, null, null, null, null, '广播域、交换与集线、端口安全', '', '0', '2017-12-25 23:07:30', '6', '1');
INSERT INTO `topic` VALUES ('4859', '18', '4', '触发器： 当满足触发器条件，则系统自动执行触发器的触发体。', 'c9c23e6a-d81e-4774-943a-6338d06f17b0.', null, null, null, null, null, null, '触发器： 当满足触发器条件，则系统自动执行触发器的触发体。', '', '0', '2017-12-25 23:07:37', '47', '1');
INSERT INTO `topic` VALUES ('4860', '18', '3', '理解第三层相关问题：包含了IP路由协议_____________________________外部路由协议，如BGP、子网络、超网络_____________________________________', '2ea90184-cd11-45a2-a2d0-07de70c8a231.', null, null, null, null, null, null, '内部路由协议、如RIPV1/V2 和OSPF；网络地址转换（NAT）和IPV6', '', '0', '2017-12-25 23:08:13', '6', '1');
INSERT INTO `topic` VALUES ('4861', '18', '4', '如何稳定(固定)执行计划', 'fb0f6084-98cb-44cc-9dac-02e7f73b4eeb.', null, null, null, null, null, null, '可以在SQL语句中指定执行计划。使用HINTS;\r\nQUERY_REWRITE_ENABLED = TRUE\r\nSTAR_TRANSFORMATION_ENABLED = TRUE\r\nOPTIMIZER_FEATURES_ENABLE = 9.2.0\r\n创建并使用STORED OUTLINE', '', '0', '2017-12-25 23:08:54', '47', '1');
INSERT INTO `topic` VALUES ('4862', '18', '4', '和排序相关的内存在8i和9i分别怎样调整，临时表空间的作用是什么', '5253de59-494b-4588-a68f-a18fc3793d4b.', null, null, null, null, null, null, '和排序相关的内存在8I和9I分别怎样调整，临时表空间的作用是什么', '', '0', '2017-12-25 23:09:18', '47', '1');
INSERT INTO `topic` VALUES ('4863', '18', '4', ' Pctused and pctfree 表示什么含义有什么作用', '4e505486-8315-43c4-9dbe-cdcbf069ad89.', null, null, null, null, null, null, 'PCTUSED与PCTFREE控制数据块是否出现在FREELIST中,   PCTFREE控制数据块中保留用于UPDATE的空间,当数据块中的FREE SPACE小于PCTFREE设置的空间时,该数据块从FREELIST中去掉,当块由于DML操作FREE SPACE大于PCT_USED设置的空间时,该数据库块将被添加在FREELIST链表中。', '', '0', '2017-12-25 23:09:41', '47', '1');
INSERT INTO `topic` VALUES ('4864', '4', '4', '解释下Serialization和Deserialization。', '262a0f8d-4d1c-499a-b1cd-8a28b1a28a95.', null, null, null, null, null, null, 'JAVA提供了一种叫做对象序列化的机制，他把对象表示成一连串的字节，里面包含了对象的数据，对象的类型信息，对象内部的数据的类型信息等等。因此，序列化可以看成是为了把对象存储在磁盘上或者是从磁盘上读出来并重建对象而把对象扁平化的一种方式。反序列化是把对象从扁平状态转化成活动对象的相反的步骤。', '', '0', '2017-12-25 23:10:01', '61', '1');
INSERT INTO `topic` VALUES ('4865', '24', '4', '列出所有被安装的rpm package ', '009f6cff-278c-41a3-9d55-4f1aa4035194.', null, null, null, null, null, null, 'RPM -QA ', '', '0', '2017-12-25 23:10:20', '46', '1');
INSERT INTO `topic` VALUES ('4866', '18', '4', '简单描述tablespace / segment / extent / block之间的关系', 'b667758c-9f61-4adc-b212-6dbf84934ecc.', null, null, null, null, null, null, 'TABLESPACE: 一个数据库划分为一个或多个逻辑单位，该逻辑单位成为表空间;每一个表空间可能包含一个或多个 SEGMENT;', '', '0', '2017-12-25 23:10:22', '47', '1');
INSERT INTO `topic` VALUES ('4867', '18', '4', '描述tablespace和datafile之间的关系', 'cee1b4e6-95e8-4a5b-8180-f6b826cb85fc.', null, null, null, null, null, null, '一个表空间可包含一个或多个数据文件。表空间利用增加或扩展数据文件扩大表空间，表空间的大小为组成该表空间的数据文件大小的和。一个DATAFILE只能属于一个表空间;\r\n一个TABLESPACE可以有一个或多个DATAFILE,每个DATAFILE只能在一个TABLESPACE内, TABLE中的数据,通过HASH算法分布在TABLESPACE中的各个DATAFILE中,TABLESPACE是逻辑上的概念,DATAFILE则在物理上储存了数据库的种种对象。', '', '0', '2017-12-25 23:10:36', '47', '1');
INSERT INTO `topic` VALUES ('4868', '26', '4', '什么是OSI模型？', 'bcdb6e93-7e1a-4b6f-87be-343e8db96672.', null, null, null, null, null, null, '这个问题涉及的范围很广，很难用简短的语言来回答，回答需要涉及七层和各层的相关协议，答案中非常重要的是封装概念的讨论……物理层：“比特流”、数据链路层“数据帧”、网络层“数据报”等等', '', '0', '2017-12-25 23:10:37', '6', '1');
INSERT INTO `topic` VALUES ('4869', '24', '4', '列出一个未被安装进系统的RPM包文件中包含有哪些文件？ ', 'fef13158-a71c-4fe3-83e3-37f7b734a33f.', null, null, null, null, null, null, 'RPM -QILP < RPM PACKAGE NAME>', '', '0', '2017-12-25 23:10:47', '46', '1');
INSERT INTO `topic` VALUES ('4870', '18', '4', '本地管理表空间和字典管理表空间的特点，ASSM有什么特点', '8889c834-31d6-44e8-b680-c25c50b4d2f2.', null, null, null, null, null, null, '本地管理表空间：（9I默认）空闲块列表存储在表空间的数据文件头。\r\n特点：减少数据字典表的竞争，当分配和收缩空间时会产生回滚，不需要合并。\r\n字典管理表空间：（8I默认）空闲块列表存储在数据库中的字典表里.\r\n特点：片由数据字典管理，可能造成字典表的争用。存储在表空间的每一个段都会有不同的存储字句，需要合并相邻的块;\r\n本地管理表空间（LOCALLY MANAGED TABLESPACE简称LMT）\r\n8I以后出现的一种新的表空间的管理模式，通过位图来管理表空间的空间使用。字典管理表空间（DICTIONARY-MANAGED TABLESPACE简称DMT）\r\n8I以前包括以后都还可以使用的一种表空间管理模式，通过数据字典管理表空间的空间使用。动段空间管理（ASSM），它首次出现在ORACLE920里有了ASSM，链接列表FREELIST被位图所取代，它是一个二进制的数组，\r\n能够迅速有效地管理存储扩展和剩余区块（FREE BLOCK），因此能够改善分段存储本质，ASSM表空间上创建的段还有另外一个称呼叫BITMAP MANAGED SEGMENTS（BMB 段）。', '', '0', '2017-12-25 23:11:16', '47', '1');
INSERT INTO `topic` VALUES ('4871', '18', '4', '日志的作用是什么', '2bc2506b-a48d-4ef9-8a4b-077ed550fd5c.', null, null, null, null, null, null, '日志文件（LOG FILE）记录所有对数据库数据的修改，主要是保护数据库以防止故障,以及恢复数据时使用。其特点如下：\r\n   A)每一个数据库至少包含两个日志文件组。每个日志文件组至少包含两个日志文件成员。\r\n   B)日志文件组以循环方式进行写操作。\r\n   C)每一个日志文件成员对应一个物理文件。\r\n记录数据库事务,最大限度地保证数据的一致性与安全性 \r\n重做日志文件：含对数据库所做的更改记录，这样万一出现故障可以启用数据恢复,一个数据库至少需要两个重做日志文件\r\n归档日志文件：是重做日志文件的脱机副本，这些副本可能对于从介质失败中进行恢复很必要', '', '0', '2017-12-25 23:11:50', '47', '1');
INSERT INTO `topic` VALUES ('4872', '18', '4', '进程调度的核心数据结构是哪个？', '706cb103-1894-41aa-9c42-361283a941db.', null, null, null, null, null, null, 'STRUCT RUNQUEUE', '', '0', '2017-12-25 23:11:59', '29', '1');
INSERT INTO `topic` VALUES ('4873', '18', '4', 'SGA主要有那些部分，主要作用是什么', '52eff75d-82e1-41e2-a669-860538ede219.', null, null, null, null, null, null, '系统全局区（SGA）:是ORACLE为实例分配的一组共享缓冲存储区，用于存放数据库数据和控制信息，以实现对数据库数据的管理和操作。\r\nSGA主要包括:\r\nA)共享池(SHARED POOL) ：用来存储最近执行的SQL语句和最近使用的数据字典的数据。\r\nB)数据缓冲区 (DATABASE BUFFER CACHE)：用来存储最近从数据文件中读写过的数据。\r\nC)重作日志缓冲区（REDO LOG BUFFER）：用来记录服务或后台进程对数据库的操作。\r\n另外在SGA中还有两个可选的内存结构：\r\nD)JAVA POOL:   用来存储JAVA代码。\r\nE)LARGE POOL: 用来存储不与SQL直接相关的大型内存结构。备份、恢复使用。\r\nGA：DB_CACHE/SHARED_POOL/LARGE_POOL/JAVA_POOL\r\nDB_CACHE: 数据库缓存（BLOCK BUFFER）对于ORACLE数据库的运转和性能起着非常关键的作用，它占据ORACLE数据库SGA（系统共享内存区）的主要部分。ORACLE数据库通过使用LRU算法，将最近访问的数据块存放到缓存中，从而优化对磁盘数据的访问.\r\nSHARED_POOL: 共享池的大小对于ORACLE 性能来说都是很重要的。共享池中保存数据字典高速缓冲和完全解析或编译的的PL/SQL 块和SQL 语句及控制结构\r\nLARGE_POOL: 使用MTS配置时，因为要在SGA中分配UGA来保持用户的会话，就是用LARGE_POOL来保持这个会话内存使用RMAN做备份的时候，要使用LARGE_POOL这个内存结构来做磁盘I/O缓存器\r\nJAVA_POOL: 为JAVA PROCEDURE预备的内存区域,如果没有使用JAVA PROC,JAVA_POOL不是必须的', '', '0', '2017-12-25 23:12:10', '47', '1');
INSERT INTO `topic` VALUES ('4874', '18', '4', '如何加载、卸载一个模块？', '0aff35c8-6a9a-49c2-83f0-ff28e248d7d1.', null, null, null, null, null, null, 'INSMOD加载，RMMOD卸载', '', '0', '2017-12-25 23:12:38', '29', '1');
INSERT INTO `topic` VALUES ('4875', '18', '4', '模块和应用程序分别运行在什么空间？', 'fbb1e333-fcc9-4039-9768-3905dbbd28b4.', null, null, null, null, null, null, '模块运行在内核空间，应用程序运行在用户空间', '', '0', '2017-12-25 23:13:12', '29', '1');
INSERT INTO `topic` VALUES ('4876', '18', '4', 'Oracle系统进程主要有哪些，作用是什么', '4b47a92e-e852-457c-8746-ddb0256383c3.', null, null, null, null, null, null, '数据写进程(DBWR)：负责将更改的数据从数据库缓冲区高速缓存写入数据文件\r\n日志写进程(LGWR)：将重做日志缓冲区中的更改写入在线重做日志文件\r\n系统监控   (SMON): 检查数据库的一致性如有必要还会在数据库打开时启动数据库的恢复\r\n进程监控   (PMON): 负责在一个ORACLE 进程失败时清理资源\r\n检查点进程(CKPT)：负责在每当缓冲区高速缓存中的更改永久地记录在数据库中时,更新控制文件和数据文件中的数据库状态信息。\r\n归档进程   (ARCH)：在每次日志切换时把已满的日志组进行备份或归档\r\n恢复进程   (RECO): 保证分布式事务的一致性,在分布式事务中,要么同时COMMIT,要么同时ROLLBACK;\r\n作业调度器(CJQ ):   负责将调度与执行系统中已定义好的JOB,完成一些预定义的工作.', '', '0', '2017-12-25 23:13:29', '47', '1');
INSERT INTO `topic` VALUES ('4877', '18', '4', 'Cisco的标准框架是什么？', '5a64cdeb-1295-44d9-a169-63b6ead2655d.', null, null, null, null, null, null, '核心层、分布层（汇聚层）、接入层，每一层的概念需要了解', '', '0', '2017-12-25 23:13:51', '6', '1');
INSERT INTO `topic` VALUES ('4878', '18', '4', ' Linux中的浮点运算由应用程序实现还是内核实现？', '3ccd53b4-bf9f-4f1d-806e-0d8da3022816.', null, null, null, null, null, null, '应用程序实现，LINUX中的浮点运算是利用数学库函数实现的，库函数能够被应用程序链接后调用，不能被内核链接调用。这些运算是在应用程序中运行的，然后再把结果反馈给系统。LINUX内核如果一定要进行浮点运算，需要在建立内核时选上MATH-EMU,使用软件模拟计算浮点运算，据说这样做的代价有两个：用户在安装驱动时需要重建内核，可能会影响到其他的应用程序，使得这些应用程序在做浮点运算的时候也使用MATH-EMU，大大的降低了效率。', '', '0', '2017-12-25 23:14:00', '29', '1');
INSERT INTO `topic` VALUES ('4879', '18', '4', '备份如何分类', 'bab9965f-1158-48b6-bcad-1e50b5ce8a7d.', null, null, null, null, null, null, '逻辑备份：EXP/IMP 指定表的逻辑备份\r\n物理备份：\r\n热备份:ALTER TABLESPACE BEGIN/END BACKUP;\r\n冷备份:脱机备份(DATABASE SHUTDOWN)\r\nRMAN备份\r\nFULL BACKUP/INCREMENTAL BACKUP(累积/差异)\r\n物理备份\r\n物理备份是最主要的备份方式。用于保证数据库在最小的数据库丢失或没有数据丢失的情况下得到恢复。\r\n冷物理\r\n冷物理备份提供了最简单和最直接的方法保护数据库因物理损坏丢失。建议在以下几种情况中使用。\r\n对一个已经存在大最数据量的数据库，在晚间数据库可以关闭，此时应用冷物理备份。\r\n对需对数据库服务器进行升级，（如更换硬盘），此时需要备份数据库信息，并在新的硬盘中恢复这些数据信息，建议采用冷物理备份。\r\n热物理\r\n主要是指备份过程在数据库打开并且用户可以使用的情况下进行。需要执行热物理备份的情况有：\r\n由于数据库性质要求不间断工作，因而此时只能采用热物理备份。\r\n由于备份的要求的时间过长，而数据库只能短时间关闭时。\r\n逻辑备份 (EXP/IMP)\r\n逻辑备份用于实现数据库对象的恢复。但不是基于时间点可完全恢复的备份策略。只能作为联机备份和脱机备份的一种补充。\r\n完全逻辑备份\r\n完全逻辑备份是将整个数据库导出到一个数据库的格式文件中，该文件可以在不同的数据库版本、操作系统和硬件平台之间进行移植。\r\n指定表的逻辑备份\r\n通过备份工具，可以将指定的数据库表备份出来，这可以避免完全逻辑备份所带来的时间和财力上的浪费。', '', '0', '2017-12-25 23:14:10', '47', '1');
INSERT INTO `topic` VALUES ('4880', '18', '4', '归档是什么含义', '9eea5f81-fd41-4364-9883-87664425e979.', null, null, null, null, null, null, '关于归档日志：ORACLE要将填满的在线日志文件组归档时,则要建立归档日志（ARCHIVED REDO LOG）。其对数据库备份和恢复有下列用处：\r\n数据库后备以及在线和归档日志文件，在操作系统和磁盘故障中可保证全部提交的事物可被恢复。\r\n在数据库打开和正常系统使用下，如果归档日志是永久保存，在线后备可以进行和使用。\r\n数据库可运行在两种不同方式下：NOARCHIVELOG方式或ARCHIVELOG 方式\r\n数据库在NOARCHIVELOG方式下使用时，不能进行在线日志的归档,\r\n数据库在ARCHIVELOG方式下运行，可实施在线日志的归档\r\n归档是归档当前的联机REDO日志文件。\r\nSVRMGR> ALTER SYSTEM ARCHIVE LOG CURRENT;\r\n数据库只有运行在ARCHIVELOG模式下，并且能够进行自动归档，才可以进行联机备份。有了联机备份才有可能进行完全恢复。\r\n3 如果一个表在2004-08-04 10:30:00 被DROP，在有完善的归档和备份的情况下，如何恢复\r\n9I 新增的FLASH BACK 应该可以;\r\nLOGMINER应该可以找出DML。\r\n有完善的归档和备份，先归档当前数据，然后可以先恢复到删除的时间点之前，把DROP 的表导出来，然后再恢复到最后归档时间；\r\n手工拷贝回所有备份的数据文件\r\nSQL〉STARTUP MOUNT;\r\nSQL〉ALTER DATABASE RECOVER AUTOMATIC UNTIL TIME \'2004-08-04:10:30:00\';\r\nSQL〉ALTER DATABASE OPEN RESETLOGS;', '', '0', '2017-12-25 23:14:31', '47', '1');
INSERT INTO `topic` VALUES ('4881', '18', '4', 'rman是什么，有何特点', '6466c39e-eccc-441a-a1f5-07f2dfaa6322.', null, null, null, null, null, null, 'RMAN(RECOVERY MANAGER)是DBA的一个重要工具，用于备份、还原和恢复ORACLE数据库, RMAN 可以用来备份和恢复数据库文件、归档日志、控制文件、系统参数文件,也可以用来执行完全或不完全的数据库恢复。\r\nRMAN有三种不同的用户接口：COMMAND LINE方式、GUI 方式（集成在OEM 中的备份管理器）、API 方式（用于集成到第三方的备份软件中）。\r\n具有如下特点：\r\n1）功能类似物理备份，但比物理备份强大N倍；\r\n2）可以压缩空块；\r\n3）可以在块水平上实现增量；\r\n4）可以把备份的输出打包成备份集，也可以按固定大小分割备份集；\r\n5）备份与恢复的过程可以自动管理；\r\n6）可以使用脚本（存在RECOVERY CATALOG 中）\r\n7）可以做坏块监测', '', '0', '2017-12-25 23:14:54', '47', '1');
INSERT INTO `topic` VALUES ('4882', '18', '4', '模块程序能否使用可链接的库函数？', 'cc8236bb-a2d1-4e32-831e-e77aef18db83.', null, null, null, null, null, null, '模块程序运行在内核空间，不能链接库函数。', '', '0', '2017-12-25 23:14:56', '29', '1');
INSERT INTO `topic` VALUES ('4883', '33', '4', '你用过的CVS请说出名称？', '413fd1c3-f334-4f7a-93f0-d516f208c55d.', null, null, null, null, null, null, 'VISUAL SOURCE SAFE,CONCURRENT VERSION SYSTEM,SVN,TORTOISESVN', 'Visual Source Safe(简称VSS)\r\nConcurrent Version (简称CVS)', '0', '2017-12-25 23:14:59', '61', '1');
INSERT INTO `topic` VALUES ('4884', '18', '4', 'TLB中缓存的是什么内容？', '1419cf25-ef4c-44d6-9baa-8b2bba504c28.', null, null, null, null, null, null, 'TLB，页表缓存，当线性地址被第一次转换成物理地址的时候，将线性地址和物理地址的对应放到TLB中，用于下次访问这个线性地址时，加快转换速度', '', '0', '2017-12-25 23:15:12', '29', '1');
INSERT INTO `topic` VALUES ('4885', '18', '4', ' standby的特点', 'fbfce590-0499-44bd-afee-3964a0155155.', null, null, null, null, null, null, '备用数据库（STANDBY DATABASE）：ORACLE推出的一种高可用性(HIGH AVAILABLE)数据库方案，在主节点与备用节点间通过日志同步来保证数据的同步，备用节点作为主节点的备份，可以实现快速切换与灾难性恢复,从920开始，还开始支持物理与逻辑备用服务器。\r\n9I中的三种数据保护模式分别是：\r\n1)、MAXIMIZE PROTECTION ：最大数据保护与无数据分歧，LGWR将同时传送到备用节点，在主节点事务确认之前，备用节点也必须完全收到日志数据。如果网络不好，引起LGWR不能传送数据，将引起严重的性能问题，导致主节点DOWN机。\r\n2)、MAXIMIZE AVAILABILITY ：无数据丢失模式，允许数据分歧，允许异步传送。\r\n正常情况下运行在最大保护模式，在主节点与备用节点的网络断开或连接不正常时，自动切换到最大性能模式，主节点的操作还是可以继续的。在网络不好的情况下有较大的性能影响。\r\n3)、MAXIMIZE PERFORMANCE：这种模式应当可以说是从8I继承过来的备用服务器模式，异步传送，无数据同步检查，可能丢失数据，但是能获得主节点的最大性能。9I在配置DATA GUARD的时候默认就是MAXIMIZE PERFORMANCE', '', '0', '2017-12-25 23:15:27', '47', '1');
INSERT INTO `topic` VALUES ('4886', '18', '4', ' Linux中有哪几种设备？', '48b14af4-ab45-4819-823b-9dea7f9a3f1d.', null, null, null, null, null, null, '字符设备和块设备。网卡是例外，他不直接与设备文件对应，MKNOD系统调用用来创建设备文件。', '', '0', '2017-12-25 23:15:48', '29', '1');
INSERT INTO `topic` VALUES ('4887', '18', '4', '对于一个存在系统性能的系统，说出你的诊断处理思路', 'afca7f48-696b-4676-88ee-12d28b74f0ff.', null, null, null, null, null, null, 'Ü          做STATSPACK收集系统相关信息   了解系统大致情况/确定是否存在参数设置不合适的地方/查看TOP 5 EVENT/查看TOP SQL等\r\nÜ          查V$SYSTEM_EVENT/V$SESSION_EVENT/V$SESSION_WAIT 从V$SYSTEM_EVENT开始,确定需要什么资源(DB FILE SEQUENTIAL READ)等，深入研究V$SESSION_EVENT,确定等待事件涉及的会话，从V$SESSION_WAIT确定详细的资源争用情况(P1-P3的值:FILE_ID/BLOCK_ID/BLOCKS等)\r\nÜ          通过V$SQL/V$SQLTEXT/V$SQLAREA表确定DISK_READS、(BUFFER_GETS/EXECUTIONS)值较大的SQL', '', '0', '2017-12-25 23:15:56', '47', '1');
INSERT INTO `topic` VALUES ('4888', '32', '4', '在一个千万级的数据库查询中，如何提高查询效率？', '39a6bfc6-00bd-48aa-9497-18372c9e8b21.', null, null, null, null, null, null, '建立索引', '', '0', '2017-12-25 23:16:02', '61', '1');
INSERT INTO `topic` VALUES ('4889', '18', '4', '列举几种诊断IO、CPU、性能状况的方法', '98ca2228-5748-41a7-8b55-3acb9b4ffeeb.', null, null, null, null, null, null, 'TOP   UPTIME   VMSTAT   IOSTAT   STATSPACK   SQL_TRACE/TKPROF\r\n查V$SYSTEM_EVENT/V$SESSION_EVENT/V$SESSION_WAIT\r\n查V$SQLAREA(DISK_READS或BUFFER_GETS/EXECUTIONS较大的SQL)\r\n或者第三方的监视工具，TOAD就不错。', '', '0', '2017-12-25 23:16:18', '47', '1');
INSERT INTO `topic` VALUES ('4890', '26', '4', '怎样才算是一个合格的运维工程师', '3662443e-92e4-4fc6-90d8-98d56a55707e.', null, null, null, null, null, null, '1、保证服务达到要求的线上标准，如99.9%；保证线上稳定，这是运维工程师的基本责职所在。\r\n 2、不断的提升应用的可靠性与健壮性、性能优化、安全提升；这方面非常考验主动性和创新思维。', '', '0', '2017-12-25 23:16:23', '4', '1');
INSERT INTO `topic` VALUES ('4891', '26', '3', '双绞线两种制作标准的线序：  EIA/TIA 568A： 绿白\r\n 、  绿\r\n  、  橙白\r\n  、   \r\n蓝、  蓝白\r\n  、橙\r\n   、  棕白\r\n  、   \r\n棕    EIA/TIA 568B：橙白\r\n 、  橙白\r\n  \r\n、绿白、  \r\n蓝、  蓝白\r\n  、绿\r\n  、棕白\r\n  、   \r\n棕 ', 'f426387f-3042-435c-973a-329c59e5c003.', null, null, null, null, null, null, '双绞线两种制作标准的线序：  EIA/TIA 568A： 绿白\r\n 、  绿\r\n  、  橙白\r\n  、   \r\n蓝、  蓝白\r\n  、橙\r\n   、  棕白\r\n  、   \r\n棕    EIA/TIA 568B：橙白\r\n 、  橙白\r\n  \r\n、绿白、  \r\n蓝、  蓝白\r\n  、绿\r\n  、棕白\r\n  、   \r\n棕 ', '', '0', '2017-12-25 23:17:19', '45', '1');
INSERT INTO `topic` VALUES ('4892', '18', '4', ' 如果系统现在需要在一个很大的表上创建一个索引，你会考虑那些因素，如何做以尽量减小对应用的影响', 'd96fb5d1-3081-4b4b-a003-f6d10cc6853b.', null, null, null, null, null, null, '可以先表分析一下，然后测试创建索引前后对应用的性能影响；\r\n需要考虑的是该索引列不经常更新，不是有很多重复值的情况时, 在大表中使用索引特别有效. 创建的索引可以跟数据表分不同表空间存储。\r\n在系统比较空闲时NOLOGGING选项（如果有DATAGUARD则不可以使用NOLOGGING）\r\n大的SORT_ARED_SIZE或PGA_AGGREGATE_TARGET较大', '', '0', '2017-12-25 23:17:21', '47', '1');
INSERT INTO `topic` VALUES ('4894', '18', '4', '设备驱动程序包括哪些功能函数？', '8331f21d-7401-462b-98ad-325d746edaae.', null, null, null, null, null, null, 'OPEN(),READ(),WRITE(),LLSEEK(),REALSE();', '', '0', '2017-12-25 23:17:32', '29', '1');
INSERT INTO `topic` VALUES ('4895', '26', '2', 'Linux的特点之一是它是一种开放、免费的操作系统。', '5ee68694-d5d6-432d-b199-61c1e115e606.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:18:32', '40', '1');
INSERT INTO `topic` VALUES ('4896', '18', '4', '如何唯一标识一个设备？', '39ac1249-e29b-4796-8a10-98aca3d6ad31.', null, null, null, null, null, null, 'LINUX使用一个设备编号来唯一的标示一个设备，设备编号分为：主设备号和次设备号，一般主设备号标示设备对应的驱动程序，次设备号对应设备文件指向的设备，在内核中使用DEV_T来表示设备编号，一般它是32位长度，其中12位用于表示主设备号，20位用于表示次设备号，利用MKDEV（INT MAJOR，INT MINOR）；用于生成一个DEV_T类型的对象。', '', '0', '2017-12-25 23:19:31', '29', '1');
INSERT INTO `topic` VALUES ('4897', '26', '2', ' LINUX中的超级用户为root,登陆时不需要口令', '6aaa5376-ec85-404b-9b9e-0ac6728bacfe.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 23:19:35', '40', '1');
INSERT INTO `topic` VALUES ('4899', '26', '3', '连接方法有两种：  正线（双绞线两边都按照EIAT/TIA 568B 标准连接）  反线（一边是按照EIAT/TIA 568A 标准连接，另一边按照EIT/TIA 568B 标准连接）', '757d665c-5173-4756-bbe7-11844b5eadaf.', null, null, null, null, null, null, '连接方法有两种：  正线（双绞线两边都按照EIAT/TIA 568B 标准连接）  反线（一边是按照EIAT/TIA 568A 标准连接，另一边按照EIT/TIA 568B 标准连接）', '', '0', '2017-12-25 23:19:38', '45', '1');
INSERT INTO `topic` VALUES ('4900', '18', '4', ' 你最擅长的是oracle哪部分?', '0e1cc6b9-e47c-44b9-875f-16e68458796a.', null, null, null, null, null, null, 'PL/SQL及SQL优化', '', '0', '2017-12-25 23:19:47', '47', '1');
INSERT INTO `topic` VALUES ('4901', '18', '4', '为什么说网络是基于层的？', 'db9d8dae-3493-44d6-b30c-8f542b2b2110.', null, null, null, null, null, null, '所有的网络模型都是基于层的，这是为什么呢？本质上ISO推出层的概念是为了说明网络的逻辑功能。每一层都是独立的，提供了各自特殊的服务，因此有着各自的数据结构（报头/报尾）。在每一层都会对相应的报头和报尾进行处理，数据内容被压入堆栈。另外，考虑不同的厂商环境，提供相对独立的平台也是很有必要的。\r\n', '', '0', '2017-12-25 23:19:49', '6', '1');
INSERT INTO `topic` VALUES ('4902', '3', '4', 'Hibernate中的update()和saveOrUpdate()的区别.', 'd8957f85-c26d-42c2-835d-cd13efb1780e.', null, null, null, null, null, null, '如果对象已经在本SESSION中持久化了，不做任何事\r\n如果另一个与本SESSION关联的对象拥有相同的持久化标识(IDENTIFIER)，抛出一个异常\r\n如果对象没有持久化标识(IDENTIFIER)属性，对其调用SAVE()\r\n如果对象的持久标识(IDENTIFIER)表明其是一个新实例化的对象，对其调用SAVE()\r\n如果对象是附带版本信息的（通过<VERSION>或 <TIMESTAMP>）并且版本属性的值表明其是一个新实例化的对象，SAVE()它。否则UPDATE() 这个对象', '', '0', '2017-12-25 23:19:59', '69', '1');
INSERT INTO `topic` VALUES ('4903', '26', '4', ' 喜欢oracle吗？喜欢上论坛吗？或者偏好oracle的哪一部分？', '7920d537-f718-4b6b-ae32-4fa6bb2f0895.', null, null, null, null, null, null, '喜欢。PL/SQL比较得心应手。', '', '0', '2017-12-25 23:20:01', '47', '1');
INSERT INTO `topic` VALUES ('4905', '18', '4', '生成树协议的原理是什么，它有什么用途，有哪些类型？', '70f13d6a-12c4-4643-b27c-9cecc94a9214.', null, null, null, null, null, null, '生成树协议应用于第二层，它的用途是消除网络环路，通过选择性的开通和堵塞端口控制网络传输来实现这一个目标', '', '0', '2017-12-25 23:20:06', '6', '1');
INSERT INTO `topic` VALUES ('4906', '26', '2', ' 确定当前目录使用的命令为：pwd。', '033d36a9-0a4d-409f-8516-f6350f7b387a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 23:20:21', '40', '1');
INSERT INTO `topic` VALUES ('4907', '3', '4', 'Spring对多种ORM框架提供了很好的支持，简单描述在Spring中使用Hibernate的方法，并结合事务管理。', 'bfdef08f-85d0-48a0-a47a-aaa9e48f44f7.', null, null, null, null, null, null, 'GETHIBERANTETEMPLATE里面提供了SAVE，UPDATE，DELETE，FIND等方法。\r\n简单说一个：如果配置了声明式事务，当执行GETHIBERNATETEMPLATE的各种方法的时候，事务会\r\n自动被加载\r\n如果没有配置事务，那么以上操作不会真正的被同步到数据库，除非配置了HIBERNATE的\r\nAUTOCOMMIT=TRUE', '', '0', '2017-12-25 23:20:34', '69', '1');
INSERT INTO `topic` VALUES ('4908', '26', '2', ' RedHat默认的 Linux 文件系统是ext3', '4bb1e4a8-c0cd-4087-9a04-69a4423e762b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:20:36', '40', '1');
INSERT INTO `topic` VALUES ('4909', '26', '4', '你知道多少常用的端口数？', '1c317f14-344c-4b48-99f8-f547e68638ff.', null, null, null, null, null, null, 'FTP端口21 SSH服务端口22\r\nTENET端口23\r\n查看端口的方法是：\r\nC:\\WINDOWS\\SYSTEM32\\DRIVERS\\ETC\\SERVIES', '', '0', '2017-12-25 23:21:01', '6', '1');
INSERT INTO `topic` VALUES ('4910', '18', '4', '交换机的端口安全是如何实现的？\r\n', '24558d70-e1a2-4589-8d3f-e2f034223b2a.', null, null, null, null, null, null, '端口安全在现如今的企业专网中使用越来越广泛，而且由此造成的问题也越来越多。端口安全是交换机的一种特性，是指交换机在给定的端口上可以存储MAC地址，只有源于该地址的通信才被交换机允许。如果具有不同的MAC地址的设备是试图连接，交换机就会禁用端口并提示网络管理员。尽管有人提出端口安全限制了移动办公，但是它却提供了绝佳的控制网络接入的安全机制。', '', '0', '2017-12-25 23:21:31', '6', '1');
INSERT INTO `topic` VALUES ('4911', '18', '4', '当用户进程出错，哪个后台进程负责清理它', '9fb68761-89f3-4332-8ac4-fd2b1687d450.', null, null, null, null, null, null, '解答： PMON', '', '0', '2017-12-25 23:22:05', '47', '1');
INSERT INTO `topic` VALUES ('4912', '26', '4', '28. 解释materialized views的作用', '62b2315d-8b8e-49bf-9a23-a97ff6cdb140.', null, null, null, null, null, null, '解答：MATERIALIZED VIEWS 用于减少那些汇总，集合和分组的信息的集合数量。它们通常适合于数据仓库和DSS系统。', '', '0', '2017-12-25 23:22:29', '47', '1');
INSERT INTO `topic` VALUES ('4913', '18', '4', '哪个后台进程刷新materialized views?', 'bbe66cab-bf10-42ae-9eff-ff7db1a79b80.', null, null, null, null, null, null, '解答：THE JOB QUEUE PROCESSES.', '', '0', '2017-12-25 23:22:59', '47', '1');
INSERT INTO `topic` VALUES ('4914', '18', '4', '如何判断哪个session正在连结以及它们等待的资源?', '298274c3-35ae-471c-9f60-abaf165586e8.', null, null, null, null, null, null, '解答：V$SESSION / V$SESSION_WAIT', '', '0', '2017-12-25 23:23:28', '47', '1');
INSERT INTO `topic` VALUES ('4915', '26', '4', 'windows群集（cluster）和网络负载均衡（NLB）各自的特点及用处是什么？ ', '62af899d-8702-49cf-b33e-ad28838c0d46.', null, null, null, null, null, null, ' 使用11NS \r\n可以对加入到负载均衡的机器设置权重。系统自动根据权重比例来分析访问比例，对于流量比较大的网站，\r\n可以通过负载均衡功能把流量分配到几台不同的服务器 上，以提高网站的运行速度', '', '0', '2017-12-25 23:23:43', '45', '1');
INSERT INTO `topic` VALUES ('4916', '18', '4', '描述什么是 redo logs', '9566c229-4937-466d-92cc-83726072f957.', null, null, null, null, null, null, '解答：REDO LOGS 是用于存放数据库数据改动状况的物理和逻辑结构。可以用来修复数据库.', '', '0', '2017-12-25 23:23:43', '47', '1');
INSERT INTO `topic` VALUES ('4917', '18', '2', '网络安全应具有以下四个方面的特征\r\n\r\n:\r\n\r\n保密性\r\n\r\n,\r\n\r\n完整性\r\n\r\n,\r\n\r\n可用性\r\n\r\n,\r\n\r\n可查性。', '7fae5d59-de79-4f78-a583-87706f9e225d.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 23:24:02', '6', '1');
INSERT INTO `topic` VALUES ('4918', '18', '4', ' 如何进行强制LOG SWITCH?', '8165a8a0-28b5-4ccb-8922-8a6b17a712e9.', null, null, null, null, null, null, '解答：ALTER SYSTEM SWITCH LOGFILE', '', '0', '2017-12-25 23:24:34', '47', '1');
INSERT INTO `topic` VALUES ('4920', '26', '4', 'ping\r\n命令用于测试网络的连通性', '131e74f7-d647-47f7-9e4f-2ca273c9328a.', null, null, null, null, null, null, '\r\nPING\r\n命令通过\r\n \r\nICMP \r\n协议来实现。\r\n ', '', '0', '2017-12-25 23:24:44', '4', '1');
INSERT INTO `topic` VALUES ('4921', '18', '4', '举出两个判断DDL改动的方法?', '5dc2801d-8b5b-4fc7-97f8-f592d2d514c5.', null, null, null, null, null, null, '解答：你可以使用 LOGMINER 或 STREAMS', '', '0', '2017-12-25 23:24:54', '47', '1');
INSERT INTO `topic` VALUES ('4922', '33', '4', 'J2ee的部署目录下有哪些文件夹，写下这些文件夹的相应作用？', '62cbaf4c-eff8-4ca3-81b0-325c41c4fe8d.', null, null, null, null, null, null, '一般来说作为一个符合规范的WEB程序，会包括以下文件夹和文件，/WEB-INF/(主要是放置一些配置文件与不希望外部程序访问的隐私文件，)在WEB-INF文件夹下有一个WEB.XML文件，这是对当前应用程序的相关设置，资源寻找等等，/WEB-INF/文件下有个CLASSES子文件夹，该文件夹是应用程序的跟路径（等于是CLSSPATH的路径），/WEB-INF/下还有个LIB文件夹，主要放置需要引入的JAR包，应用程序导入的包先从这里开始寻找，其次到容器的全局路径下$TOMCAT_HOME/COMMON/LIB下寻找', '', '0', '2017-12-25 23:24:54', '61', '1');
INSERT INTO `topic` VALUES ('4923', '18', '4', 'Coalescing做了什么?', 'd895ed48-817e-4fc4-8c73-3e4d5990b81b.', null, null, null, null, null, null, '解答：COALESCING针对于字典管理的TABLESPACE进行碎片整理，将临近的小EXTENTS合并成单个的大EXTENT.', '', '0', '2017-12-25 23:25:06', '47', '1');
INSERT INTO `topic` VALUES ('4924', '18', '4', ' TEMPORARY tablespace和PERMANENT tablespace 的区别是?', 'e55cb1b8-7a18-42bf-a501-e5f5ce2f88f4.', null, null, null, null, null, null, '解答：A TEMPORARY TABLESPACE 用于临时对象例如排序结构而 PERMANENT TABLESPACES用来存储那些\'真实\'的对象(例如表，回滚段等)', '', '0', '2017-12-25 23:25:20', '47', '1');
INSERT INTO `topic` VALUES ('4925', '18', '4', '创建数据库时自动建立的tablespace名称?', '31e5f18f-0971-40c5-bd19-e839aa74dced.', null, null, null, null, null, null, '解答：SYSTEM TABLESPACE.', '', '0', '2017-12-25 23:25:35', '47', '1');
INSERT INTO `topic` VALUES ('4926', '18', '4', '创建用户时，需要赋予新用户什么权限才能使它联上数据库。', '883aad43-91f3-4255-bfb2-ca1eb34977fd.', null, null, null, null, null, null, '解答：CONNECT', '', '0', '2017-12-25 23:25:49', '47', '1');
INSERT INTO `topic` VALUES ('4927', '26', '4', '如何在tablespace里增加数据文件?', 'e8c61247-8bef-4def-893d-41dbae2ebfa3.', null, null, null, null, null, null, '解答：ALTER TABLESPACE ADD DATAFILE SIZE', '', '0', '2017-12-25 23:26:02', '47', '1');
INSERT INTO `topic` VALUES ('4928', '18', '4', '如何变动数据文件的大小?', '4f369e34-f99b-4c88-b652-7de5802ad34b.', null, null, null, null, null, null, '解答：ALTER DATABASE DATAFILE RESIZE ;', '', '0', '2017-12-25 23:26:14', '47', '1');
INSERT INTO `topic` VALUES ('4929', '18', '4', '哪个VIEW用来检查数据文件的大小?', '5ff82f55-6a84-472b-a2d2-90c3b4c96823.', null, null, null, null, null, null, '解答： DBA_DATA_FILES', '', '0', '2017-12-25 23:26:29', '47', '1');
INSERT INTO `topic` VALUES ('4930', '18', '4', ' 哪个VIEW用来判断tablespace的剩余空间', '6ed7a80e-a391-4580-9e77-19ce49d741a2.', null, null, null, null, null, null, '解答：DBA_FREE_SPACE', '', '0', '2017-12-25 23:26:44', '47', '1');
INSERT INTO `topic` VALUES ('4931', '18', '4', '如何判断谁往表里增加了一条纪录?', '4d25f8b0-1cf1-4bae-b62e-9e2abbbc8c7d.', null, null, null, null, null, null, '解答：AUDITING', '', '0', '2017-12-25 23:26:55', '47', '1');
INSERT INTO `topic` VALUES ('4932', '18', '4', '如何重构索引?', '16f074a0-8c80-4fa8-b474-20cf6789a2d1.', null, null, null, null, null, null, '解答： ALTER INDEX REBUILD;', '', '0', '2017-12-25 23:27:06', '47', '1');
INSERT INTO `topic` VALUES ('4933', '18', '4', '解释什么是Partitioning(分区)以及它的优点。', '5139c067-442c-4055-9e5e-ea4bf13ca7d1.', null, null, null, null, null, null, '解答：PARTITION将大表和索引分割成更小，易于管理的分区', '', '0', '2017-12-25 23:27:20', '47', '1');
INSERT INTO `topic` VALUES ('4934', '18', '4', '你刚刚编译了一个PL/SQL Package但是有错误报道，如何显示出错信息?', '303e5695-9a96-4078-bb6c-d4934ad7fe19.', null, null, null, null, null, null, '解答：SHOW ERRORS', '', '0', '2017-12-25 23:28:04', '47', '1');
INSERT INTO `topic` VALUES ('4935', '26', '4', '如何搜集表的各种状态数据?', '4962d0fc-b11b-4368-b0d1-66f9aaadc66d.', null, null, null, null, null, null, '解答： ANALYZE', '', '0', '2017-12-25 23:28:16', '47', '1');
INSERT INTO `topic` VALUES ('4936', '26', '4', ' 什么是在程序中返回代码？123456', 'fcd9a8c3-e851-47c6-9b7d-6fca142dcbee.', null, null, null, null, null, null, '返回代码是SHELL的特性。返回代码显示了程序的状态，一个成功的程序执行后返回‘0’，&&可以用来决定那个应用程序先执行。', '', '0', '2017-12-25 23:28:16', '4', '1');
INSERT INTO `topic` VALUES ('4937', '26', '3', '强制杀死httpd进程使用的命令是(      )', 'aed86e47-3965-43da-83ca-334c680a098c.', null, null, null, null, null, null, 'PS -EF|GREP SYSLOGD   KILLALL -9 HTTPD', '', '0', '2017-12-25 23:28:38', '46', '1');
INSERT INTO `topic` VALUES ('4938', '18', '4', ' 如何启动SESSION级别的TRACE', 'ddcce038-cd57-4532-96d3-d1cfd2f37421.', null, null, null, null, null, null, '解答: DBMS_SESSION.SET_SQL_TRACE', '', '0', '2017-12-25 23:28:45', '47', '1');
INSERT INTO `topic` VALUES ('4939', '18', '4', ' IMPORT和SQL*LOADER 这2个工具的不同点', '7ec66828-df8c-47df-b6e4-95445cb685f0.', null, null, null, null, null, null, '解答：这两个ORACLE工具都是用来将数据导入数据库的。\r\n　　区别是：IMPORT工具只能处理由另一个ORACLE工具EXPORT生成\r\n　　的数据。而SQL*LOADER可以导入不同的ASCII格式的数据源', '', '0', '2017-12-25 23:29:04', '47', '1');
INSERT INTO `topic` VALUES ('4940', '18', '4', '用于网络连接的2个文件?', '90630746-a811-48a4-90cf-a315d0f13fd9.', null, null, null, null, null, null, '答： TNSNAMES.ORA AND SQLNET.ORA\r\n数据库面试题目（一）', '', '0', '2017-12-25 23:29:22', '47', '1');
INSERT INTO `topic` VALUES ('4941', '32', '4', '2个表，A表有三个字段，id，name，age、B表有三个字段xinjinshang(纳税上限),xinjinxia(纳税下限),gongzijibie(工资级别),用SQL语句查询A表里的ID为1的员工的工资级别', '15efca31-70c4-4e60-a831-9d2690a715b9.', null, null, null, null, null, null, 'SELECT IDENTITY(INT,1,1),XINJINSHANG,XINJINXIA,GONGZIJIBIE INTO B1 FROM B SELECT GONGZIJIBIE FROM B1 WHERE ID =(SELECT ID FROM A WHERE ID ==1)', '', '0', '2017-12-25 23:29:28', '61', '1');
INSERT INTO `topic` VALUES ('4942', '18', '2', '现代密码体制把算法和密钥分开\r\n\r\n,\r\n\r\n只需要保证密钥的保密性就行了\r\n\r\n,\r\n\r\n算法是可以公开的。\r\n\r\n \r\n\r\n', '1e1b2a52-f0d4-4af1-9f33-f59d75a03a4d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:29:40', '6', '1');
INSERT INTO `topic` VALUES ('4945', '18', '4', '如何跟踪某个session的SQL', '3ce5f7be-2cb4-4f13-b4d2-23dea82b9248.', null, null, null, null, null, null, '利用TRACE 跟踪\r\n   ALTER SESSION SET SQLTRACE ON;\r\n   COLUMN SQL FORMAT A200;\r\n   SELECT    MACHINE, SQL_TEXT SQL\r\n       FROM V$SQLTEXT A, V$SESSION B\r\n      WHERE ADDRESS = SQL_ADDRESS\r\n        AND MACHINE = \'&A\'\r\n   ORDER BY HASH_VALUE, PIECE;\r\nEXEC DBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION(SID,SERIAL#,&AMP;SQL_TRACE);\r\nSELECT SID,SERIAL# FROM V$SESSION WHERE SID = (SELECT SID FROM V$MYSTAT WHERE ROWNUM = 1);\r\nEXEC DBMS_SYSTEM.SET_EV(&AMP;SID,&AMP;SERIAL#,&AMP;EVENT_10046,&AMP;LEVEL_12,\'\');\r\n6.       SQL调整最关注的是什么\r\n', '', '0', '2017-12-25 23:30:52', '47', '1');
INSERT INTO `topic` VALUES ('4946', '26', '4', '服务器需要监控哪些项目？凭借这些项目如何判断服务器的瓶颈？', '4e90c4d8-245d-4667-ba3c-40f0653088cd.', null, null, null, null, null, null, '一般监控服务器的CPU，内存，磁盘空间，接口流量，IIS访问数、流量等。。\r\n。数据库连接数 ', '', '0', '2017-12-25 23:30:59', '40', '1');
INSERT INTO `topic` VALUES ('4947', '18', '2', '拒绝服务攻击属于被动攻击的一种。\r\n\r\n  ', '74803edd-505f-4f2b-9abb-54859b16ecc2.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 23:32:06', '6', '1');
INSERT INTO `topic` VALUES ('4948', '18', '2', 'DES \r\n\r\n算法中对明文的处理过程分\r\n\r\n \r\n\r\n3 \r\n\r\n个阶段\r\n\r\n: \r\n\r\n首先是一个初始置换\r\n\r\n \r\n\r\nIP\r\n\r\n, \r\n\r\n用于重排明文', 'e5db5b5c-70a3-448b-b96f-5e1062db6723.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 23:33:25', '6', '1');
INSERT INTO `topic` VALUES ('4949', '26', '4', '已知 10.105.239.197的用户名为administrator，密码cosft#08#&ATS02， 请问如何访问默认共享？', '5475530e-03c8-4ea9-9ce0-0e1be8028842.', null, null, null, null, null, null, ' 在CMD中NET USE \\\\10.105.239.197\\IPC$ COSFT#08#&ATS02 /USER:ADMINISTRATOR   ', '', '0', '2017-12-25 23:33:29', '40', '1');
INSERT INTO `topic` VALUES ('4950', '26', '4', 'Linux关闭防火墙命令？', '1d59d59e-7caf-4ea8-96e6-543c714b559e.', null, null, null, null, null, null, ' CHKCONFIG IPTABLES OFF', '', '0', '2017-12-25 23:33:48', '4', '1');
INSERT INTO `topic` VALUES ('4951', '18', '4', ' 何为动态游标?何为静态游标?', '71d4c752-17af-4c11-b7f7-7f1c6ac9be4e.', null, null, null, null, null, null, '动态游标与静态游标相对,反映结果集中所做的所有更改,\r\n\r\n静态游标的结果集在游标打开时,建立在TEMPDB中,总按照游标打开时的原样显示', '', '0', '2017-12-25 23:34:20', '47', '1');
INSERT INTO `topic` VALUES ('4952', '18', '2', '公开密钥密码体制比对称密钥密码体制更为安全。', '0688895b-cd27-4dac-a9dc-889e01fa41a8.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 23:34:23', '6', '1');
INSERT INTO `topic` VALUES ('4954', '26', '4', 'cat主要有三大功能：', 'f9ebe617-62f2-44d7-a4c8-e861ffd0f65f.', null, null, null, null, null, null, '一次显示整个文件：CAT FILENAME\r\n从键盘创建一个文件：CAT > FILENAME只能创建新文件，不能编辑已有文件。\r\n将几个文件合并为一个文件：CAT FILE1 FILE2 > FILE', '', '0', '2017-12-25 23:35:27', '4', '1');
INSERT INTO `topic` VALUES ('4955', '6', '4', '谈谈Ajax和使用的框架', 'a3d7c41d-ae2b-40c1-8345-d053adb76e24.', null, null, null, null, null, null, 'AJAX是异步JAVASCRIOT和XML,有机地利用了一系列相关的技术,AJAX的核心是以JAVASCRIPT,CSS,DOM,XML 运用XMLHTTPREQUEST对象进行客户端与服务器间的数据传输。实现局部刷新功能和将状态保存在客户端,从而常用资源可以有效的被缓存和利用,可以由客户端处理一些服务器端处理的功能。', '如果要防止缓存可以在ajax发送请求前加上代码：\r\nxmlHTTP.setRequestHeader(\"If-Modified-Since\",\"0\");或者url后面加个随机时间,Ajax基本函数封装在一个js里面,只要根据实际覆盖回调的业务方法就可以了', '0', '2017-12-25 23:35:39', '61', '1');
INSERT INTO `topic` VALUES ('4956', '18', '4', ' 什么是存储过程?为什么存储过程要比单纯的Sql 语句执行起来要快?', '36d493a4-cf6b-4fcc-89ae-a30e2b4618e0.', null, null, null, null, null, null, '存储过程:是一组预先编译好的T-SQL代码\r\n\r\n在创建存储过程时经过了语法和性能优化,执行不必重复的步骤,使用存储过程可提高运行效率', '', '0', '2017-12-25 23:35:48', '47', '1');
INSERT INTO `topic` VALUES ('4957', '18', '4', '什么是Inserted 表 ?什么是Deleted 表?', '64ccf044-3929-41fa-9fe9-28534359d9c2.', null, null, null, null, null, null, 'INSERTED表用于存储INSERTED和UPDATE语句影响的副本\r\n\r\nDELETED 表用于存储DELECT 和 UPDATE语句影响的行的副本', '', '0', '2017-12-25 23:36:01', '47', '1');
INSERT INTO `topic` VALUES ('4958', '26', '3', 'vmstat是Virtual Meomory Statistics（）的缩写, 是实时系统监控工具。', '5b22b80f-ed89-47d3-a4ac-48b02b479abe.', null, null, null, null, null, null, '虚拟内存统计', '', '0', '2017-12-25 23:36:02', '46', '1');
INSERT INTO `topic` VALUES ('4959', '18', '4', '.列举几种表连接方式', 'acb64e99-f782-40c6-b320-c51b869864a7.', null, null, null, null, null, null, 'ANSWER：等连接（内连接）、非等连接、自连接、外连接（左、右、全）\r\n\r\nOR HASH JOIN/MERGE JOIN/NEST LOOP(CLUSTER JOIN)/INDEX JOIN ？？\r\n\r\nORACLE 8I，9I 表连接方法。', '', '0', '2017-12-25 23:37:06', '47', '1');
INSERT INTO `topic` VALUES ('4960', '26', '4', ' Ls 命令执行什么功能？ 可以带哪些参数，有什么区别？', '4437098c-0985-450b-8c59-12834948d953.', null, null, null, null, null, null, 'LS 执行的功能： 列出指定目录中的目录，以及文件\r\n\r\n哪些参数以及区别： A 所有文件\r\nL 详细信息，包括大小字节数，可读可写\r\n', '', '0', '2017-12-25 23:37:16', '4', '1');
INSERT INTO `topic` VALUES ('4961', '26', '3', '在使用vmstat进行系统性能分析时，输出的信息共有6类，分别是(           )。', 'a919eef2-6da4-430f-8740-7eea63aabae0.', null, null, null, null, null, null, 'PROCS 、 MEMORY 、 SWAP  、 IO 、  SYSTEM 、  CPU ', '', '0', '2017-12-25 23:37:26', '46', '1');
INSERT INTO `topic` VALUES ('4962', '18', '2', 'Diffie-Hellman \r\n\r\n算法的安全性在于离散对数计算的困难性\r\n\r\n,\r\n\r\n可以实现密钥交换。', 'b766dfd6-4060-4022-b492-acad2a12b8b1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:37:36', '6', '1');
INSERT INTO `topic` VALUES ('4963', '18', '2', 'PGP\r\n\r\n中允话用户拥有多个公钥／私钥对。', 'd12307d7-e73f-416c-8bd1-9d5e504e3075.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:37:52', '6', '1');
INSERT INTO `topic` VALUES ('4964', '26', '4', '利用 ps 怎么显示所有的进程? 怎么利用 ps 查看指定进程的信息？\r\n', '19c28c77-01d2-449a-b85b-127258a16a2a.', null, null, null, null, null, null, 'PS -EF (SYSTEM V 输出) PS -AUX BSD 格式输出\r\nPS -EF | GREP PID\r\n', '', '0', '2017-12-25 23:39:02', '4', '1');
INSERT INTO `topic` VALUES ('4965', '26', '4', '哪个命令专门用来查看后台任务? ', 'fea4cdd2-573c-473c-b6cb-bafe929e5ddb.', null, null, null, null, null, null, 'JOB -L', '', '0', '2017-12-25 23:39:47', '4', '1');
INSERT INTO `topic` VALUES ('4966', '26', '4', '把后台任务调到前台执行使用什么命令?把停下的后台任务在后台执行起来用什么命令?', '45d30987-c76d-46db-a136-61a866dcc23c.', null, null, null, null, null, null, 'FG\r\n\r\n例如：#JOBS\r\n\r\n[1]+ RUNNING /ROOT/BIN/RSYNC.SH &\r\n\r\n#FG 1 BG 类似', '', '0', '2017-12-25 23:40:09', '4', '1');
INSERT INTO `topic` VALUES ('4967', '26', '4', '终止进程用什么命令? 带什么参数?', 'a78d648d-bf93-48bd-82af-8fa5e4b87975.', null, null, null, null, null, null, 'KILL -9 PID', '', '0', '2017-12-25 23:40:31', '4', '1');
INSERT INTO `topic` VALUES ('4968', '18', '2', '端到端的加密设备可以把数据包中的网络地址信息一起加密\r\n\r\n, \r\n\r\n从而抵御了流量分析\r\n\r\n类型的攻击。', 'c09cc710-bd3f-4b19-bb84-68a051f07133.', null, null, null, null, null, null, '错误', '', '0', '2017-12-25 23:40:44', '6', '1');
INSERT INTO `topic` VALUES ('4969', '26', '3', '使用su可以方便的进行用户切换，如果想通过su切换用户后，使用新用户的shell环境变量，最简单的方法是（）。', 'd2dba215-60c4-471a-8d6c-9925d5c48bbc.', null, null, null, null, null, null, 'SU – 用户名', '', '0', '2017-12-25 23:40:44', '46', '1');
INSERT INTO `topic` VALUES ('4970', '18', '4', ' 如何跟踪某个session的SQL\r\n利用TRACE 跟踪', '829773f0-6346-461e-9592-9928b5f6cc44.', null, null, null, null, null, null, 'ALTER SESSION SET SQLTRACE ON;\r\n\r\nCOLUMN SQL FORMAT A200;\r\n\r\nSELECT MACHINE, SQL_TEXT SQL\r\n\r\nFROM V$SQLTEXT A, V$SESSION B\r\n\r\nWHERE ADDRESS = SQL_ADDRESS\r\n\r\nAND MACHINE = ‘&A’\r\n\r\nORDER BY HASH_VALUE, PIECE;\r\n\r\nEXECDBMS_SYSTEM.SET_SQL_TRACE_IN_SESSION(SID,SERIAL#,&SQL_TRACE);\r\n\r\nSELECT SID,SERIAL# FROM V$SESSION WHERE SID = (SELECT SIDFROM V$MYSTAT WHERE ROWNUM = 1);\r\n\r\nEXEC DBMS_SYSTEM.SET_EV(&SID,&SERIAL#,&EVENT_10046,&LEVEL_12,”);', '', '0', '2017-12-25 23:40:48', '47', '1');
INSERT INTO `topic` VALUES ('4971', '26', '4', '怎么查看系统支持的所有信号？', 'b8c99c6c-3c50-4c41-8ac1-097a0f8abdf1.', null, null, null, null, null, null, 'KILL -L', '', '0', '2017-12-25 23:40:50', '4', '1');
INSERT INTO `topic` VALUES ('4972', '18', '2', 'SSL\r\n\r\n使用对称加密提供保密性，使用消息认证码提供消息完整性。\r\n\r\n', 'ef51910a-d46d-4017-8550-473aab53e90d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:41:01', '6', '1');
INSERT INTO `topic` VALUES ('4973', '18', '4', 'SQL调整最关注的是什么\r\n检查系统的I/O问题', '39b13fae-81bd-46c6-8953-b7f08c7e914f.', null, null, null, null, null, null, 'SAR－D能检查整个系统的IOSTAT（IO STATISTICS）\r\n\r\n查看该SQL的RESPONSE TIME(DB BLOCKGETS/CONSISTENT GETS/PHYSICAL READS/SORTS (DISK))', '', '0', '2017-12-25 23:41:02', '47', '1');
INSERT INTO `topic` VALUES ('4974', '26', '4', '搜索文件用什么命令? 格式是怎么样的?', '3de3dbad-062a-451e-824a-4134e4ea2edd.', null, null, null, null, null, null, 'FIND DIR -NAME \"STRING*\"', '', '0', '2017-12-25 23:41:33', '4', '1');
INSERT INTO `topic` VALUES ('4975', '26', '4', '.查看当前谁在使用该主机用什么命令? 查找自己所在的终端信息用什么命令?\r\n', 'ca1a96b3-ed24-4af0-ad17-bf103b6f8edd.', null, null, null, null, null, null, 'W 用户名称;用户的机器名称或 TTY 号;远程主机地址;用户登录系统的时间;空闲时间（作用不大）;附加到 TTY（终端）的进程所用的时间（JCPU 时间）;当前进程所用时间（PCPU时间）;用户当前正在使用的命令.\r\nWHO 用户名、TTY 号、时间日期、主机地址\r\n\r\nWHOAMI,ID -UN 命令用于显示登入的用户名\r\n\r\nLAST 命令可用于显示特定用户登录系统的历史记录(LAST JASON):用户名称;TTY 设备号;历史登录时间日期;登出时间日期;总工作时间.\r\n查找自己所在终端信息：WHO AM I\r\n', '', '0', '2017-12-25 23:42:00', '4', '1');
INSERT INTO `topic` VALUES ('4976', '26', '4', '使用什么命令查看用过的命令列表?', '13e25822-26ca-4308-8611-e97bd50ef318.', null, null, null, null, null, null, 'HISTORY', '', '0', '2017-12-25 23:42:22', '4', '1');
INSERT INTO `topic` VALUES ('4977', '26', '3', '如果想设置benet用户口令的失效期限为2009年11月11日，操作命令是：（）', 'fcc09baa-070c-459b-a461-5122a4ac17bc.', null, null, null, null, null, null, 'CHAGE -E 2009-11-11 BENET', '', '0', '2017-12-25 23:42:33', '46', '1');
INSERT INTO `topic` VALUES ('4978', '26', '4', '使用什么命令查看磁盘使用空间？ 空闲空间呢?', 'cf8105aa-2f50-4317-acef-e208dca536ae.', null, null, null, null, null, null, 'DF -HL', '', '0', '2017-12-25 23:43:05', '4', '1');
INSERT INTO `topic` VALUES ('4979', '26', '4', '使用什么命令查看网络是否连通', '50c21c48-c689-4ff3-9f07-ff90aa5c1e6c.', null, null, null, null, null, null, 'NETSTAT', '', '0', '2017-12-25 23:43:35', '4', '1');
INSERT INTO `topic` VALUES ('4980', '18', '2', '包过滤防火墙不检查上层数据，因此，对于那些利用特定应用漏洞的攻击，防火墙\r\n\r\n无法防范。', 'fc3f342e-bff3-48c2-8c20-0580fcb6354b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-25 23:43:39', '6', '1');
INSERT INTO `topic` VALUES ('4981', '26', '4', '使用什么命令查看 ip 地址及接口信息？', '2eb122f6-f480-4c21-823d-b17a1a2a550a.', null, null, null, null, null, null, 'IFCONFIG', '', '0', '2017-12-25 23:43:52', '4', '1');
INSERT INTO `topic` VALUES ('4982', '33', '1', '1. 下面哪些是Thread类的方法（）', '1a764c75-a330-439e-a46f-29ed551d3c81.', 'start()', 'run()', 'exit()', 'getPriority()', '', '', 'ABD', '', '0', '2017-12-25 23:44:06', '69', '1');
INSERT INTO `topic` VALUES ('4983', '26', '4', '通过什么命令查找执行命令?', 'f3e778c0-2c9c-4fd6-981b-3d342254bede.', null, null, null, null, null, null, 'WHICH 只能查可执行文件 WHEREIS 只能查二进制文件、说明文档，源文件等', '', '0', '2017-12-25 23:44:31', '4', '1');
INSERT INTO `topic` VALUES ('4984', '26', '3', 'WC命令可以用于统计文件的信息，那么选项-c表示(          )；选项-l表示(       )；选项-w表示(            )。', '7e379ca4-d9ac-45f5-b36f-5ba076aaea08.', null, null, null, null, null, null, '统计字节数、统计行数、统计字数', '', '0', '2017-12-25 23:44:51', '46', '1');
INSERT INTO `topic` VALUES ('4985', '26', '4', '怎么对命令进行取别名？', 'ac939688-9150-44fa-8a04-4af5eeaaa40c.', null, null, null, null, null, null, 'ALIAS LA=\'LS -A\'', '', '0', '2017-12-25 23:44:52', '4', '1');
INSERT INTO `topic` VALUES ('4986', '33', '1', 'j2ee 常用的设计模式有哪些', '29a675ea-8a14-4505-98c1-c48cf818e1fc.', 'Factory(工厂模式),Builder(建造模式),Factory Method(工厂方法模式),Prototype(原始模型模式),Singleton(单例模式),Facade(门面模式)', 'Adapter(适配器模式),Bridge(桥梁模式),Composite(合成模式),Decorator(装饰模式),Flyweight(享元模式),Proxy(代理模式)', 'Command(命令模式),Interpreter(解释器模式),visitor(访问者模式),Iterator(迭代子模式),Mediator(调停模式),Memento(备忘录模式)', 'Observer(观察者模式),State(状态模式),Strategy(策略模式),Template Method(模板方法模式),Chain Of Responsibleity(责任链模式)', '', '', 'ABCD', '', '0', '2017-12-25 23:45:10', '61', '1');
INSERT INTO `topic` VALUES ('4987', '18', '4', ' linux下的代码管理工具有哪些？', '0dacef3b-1d04-4b65-a2df-6d70b18a257a.', null, null, null, null, null, null, 'GIT、SVN、SUBVERSION、CVS、GIT', '', '0', '2017-12-25 23:45:13', '6', '1');
INSERT INTO `topic` VALUES ('4988', '26', '4', '大端和小端对网络编程有什么影响？', 'd50821cb-fa26-41f8-9273-d4010d8fc0f5.', null, null, null, null, null, null, '  标准的网络程序要求发送时必须转化为网络字节序。', '', '0', '2017-12-25 23:45:47', '6', '1');
INSERT INTO `topic` VALUES ('4989', '26', '4', '使用索引的理由', 'cce136f0-2495-4354-9678-2d2d77c05e3e.', null, null, null, null, null, null, '解答：快速访问表中的DATA BLOCK解答：快速访问表中的DATA BLOCK', '', '0', '2017-12-25 23:46:49', '47', '1');
INSERT INTO `topic` VALUES ('4990', '18', '4', '给出在STAR SCHEMA中的两种表及它们分别含有的数据', 'b2329644-ff42-4086-9c98-f7db12e971dd.', null, null, null, null, null, null, '解答：FACT TABLES 和DIMENSION TABLES.FACT TABLE 包含大量的主要的信息而 DIMENSION TABLES 存放对FACT TABLE 某些属性描述的信息', '', '0', '2017-12-25 23:47:13', '47', '1');
INSERT INTO `topic` VALUES ('4991', '26', '4', '服务器的linux\r\n系统是什么版', 'f45a8794-2a89-4a9f-8f68-e2dfd265a841.', null, null, null, null, null, null, 'REDHAT,CENTOS,SUSE,UBNUTU,SOLARIS', '', '0', '2017-12-25 23:47:23', '45', '1');
INSERT INTO `topic` VALUES ('4992', '33', '1', '标准建模 UML中的各种图？', 'e0ab644c-1830-407e-bb3a-cd3c28253b66.', '静态图', '用例图、类图、对象图、构件、部署、', '动态图（行为图）', '活动图、协作图、状态、时序', '', '', 'ABCD', '', '0', '2017-12-25 23:47:36', '61', '1');
INSERT INTO `topic` VALUES ('4993', '26', '4', '通过内核引导参数预留顶部内存', '0cbb020f-4519-4582-9161-c4c3993053c1.', null, null, null, null, null, null, '在LINUX内核引导时，传入参数“MEM=SIZE”保留顶部的内存区间。比如系统有256MB内 存，参数“MEM=248M”会预留顶部的8MB内存，进入系统后可以调用IOREMAP(0XF800000，0X800000)来申请这段内存。', '', '0', '2017-12-25 23:47:57', '4', '1');
INSERT INTO `topic` VALUES ('4994', '18', '4', 'FACT Table上需要建立何种索引?', 'e83d4f17-9e1c-4283-bad1-353f3423859c.', null, null, null, null, null, null, '解答：位图索引 (BITMAP INDEX)', '', '0', '2017-12-25 23:48:03', '47', '1');
INSERT INTO `topic` VALUES ('4995', '18', '4', '给出两种相关约束?', '488d3de6-4db6-4a01-8c88-20508ffe4775.', null, null, null, null, null, null, '解答：主键和外键', '', '0', '2017-12-25 23:48:28', '47', '1');
INSERT INTO `topic` VALUES ('4996', '18', '4', '12. 如何在不影响子表的前提下，重建一个母表', '4fdce5cb-6b86-46c8-995f-01e4356efa89.', null, null, null, null, null, null, '解答：子表的外键强制实效，重建母表，激活外键', '', '0', '2017-12-25 23:48:55', '47', '1');
INSERT INTO `topic` VALUES ('4997', '26', '4', 'Linux设备中字符设备与块设备有什么主要的区别？请分别列举一些实际的设备说出它们是属于哪一类设备。', 'ec70605f-a004-49fa-b8b5-7bfc39278590.', null, null, null, null, null, null, ' 字符设备：字符设备是个能够像字节流（类似文件）一样被访问的设备，由字符设备驱动程序来实现这种特性。字符设备驱动程序通常至少实现OPEN,CLOSE,READ和WRITE系统调用。字符终端、串口、鼠标、键盘、摄像头、声卡和显卡等就是典型的字符设备。\r\n    块设备：和字符设备类似，块设备也是通过/DEV目录下的文件系统节点来访问。块设备上能够容纳文件系统，如：U盘，SD卡，磁盘等', '', '0', '2017-12-25 23:49:04', '4', '1');
INSERT INTO `topic` VALUES ('4998', '18', '4', ' 解释归档和非归档模式之间的不同和它们各自的优缺点', 'b938f090-d616-430d-ab92-0559b2a0a656.', null, null, null, null, null, null, '解答：归档模式是指你可以备份所有的数据库 TRANSACTIONS并恢复到任意一个时间点。非归档模式则相反，不能恢复到任意一个时间点。但是非归档模式可以带来数据库性能上的少许提高.', '', '0', '2017-12-25 23:49:16', '47', '1');
INSERT INTO `topic` VALUES ('4999', '26', '4', '查看驱动模块中打印信息应该使用什么命令？如何查看内核中已有的字符设备的信息？如何查看正在使用的有哪些中断号？', 'daeb6a0e-5401-455b-b7e3-6be8129400f8.', null, null, null, null, null, null, '1) 查看驱动模块中打印信息的命令：DMESG\r\n2) 查看字符设备信息可以用LSMOD 和MODPROBE，LSMOD可以查看模块的依赖关系，MODPROBE在加载模块时会加载其他依赖的模块。\r\n3) 显示当前使用的中断号CAT /PROC/INTERRUPT\r\n', '', '0', '2017-12-25 23:49:30', '4', '1');
INSERT INTO `topic` VALUES ('5000', '18', '4', '如何建立一个备份控制文件?', 'be1cf545-ff98-422e-a4ae-7d0a70a6ba2f.', null, null, null, null, null, null, '解答：ALTER DATABASE BACKUP CONTROL FILE TO TRACE.', '', '0', '2017-12-25 23:49:38', '47', '1');
INSERT INTO `topic` VALUES ('5001', '33', '4', '62-62=1等式不成立，请移动一个数字（不可以移动减号和等于号），使得等式成立，如何移动？', '4fe52989-61bb-4425-aea6-afebbf171869.', null, null, null, null, null, null, '62移动成2的6次方', '', '0', '2017-12-25 23:49:48', '61', '1');
INSERT INTO `topic` VALUES ('5002', '26', '4', '中断和轮询哪个效率高？怎样决定是采用中断方式还是采用轮询方式去实现驱动？', '6a5bcbe4-17a7-4fbf-a2d2-bdc8f4699645.', null, null, null, null, null, null, '中断是CPU处于被动状态下来接受设备的信号，而轮询是CPU主动去查询该设备是否有请求。凡事都是两面性，所以，看效率不能简单的说那个效率高。如果是请求设备是一个频繁请求CPU的设备，或者有大量数据请求的网络设备，那么轮询的效率是比中断高。如果是一般设备，并且该设备请求CPU的频率比较底，则用中断效率要高一些。主要是看请求频率。', '', '0', '2017-12-25 23:51:04', '4', '1');
INSERT INTO `topic` VALUES ('5003', '18', '4', '给出数据库正常启动所经历的几种状态 ?', '4b8b3ccc-40e7-4a16-9b69-4e305ad3e151.', null, null, null, null, null, null, '解答：\r\n\r\nSTARTUP NOMOUNT – 数据库实例启动\r\nSTARTUP MOUNT – 数据库装载\r\nSTARTUP OPEN – 数据库打开', '', '0', '2017-12-25 23:51:28', '47', '1');
INSERT INTO `topic` VALUES ('5004', '18', '4', ' 哪个column可以用来区别V$视图和GV$视图?', 'd5957be1-3f02-4d51-aea6-f5f918a2a569.', null, null, null, null, null, null, '解答： INST_ID 指明集群环境中具体的 某个INSTANCE 。', '', '0', '2017-12-25 23:51:46', '47', '1');
INSERT INTO `topic` VALUES ('5005', '26', '4', '定义函数', 'c247424b-7e08-4f9f-b5f9-ae12fc515419.', null, null, null, null, null, null, 'VOID JIT_TASKLET_FN(UNSIGNED LONG ARG)\r\n{\r\n//中断的底半部  执行该函数的时候，已经出中断了\r\nPRINTK(\"IN JIT_TASKLET_FN  JIFFIES=%LD\\N\",JIFFIES);\r\n}', '', '0', '2017-12-25 23:52:06', '4', '1');
INSERT INTO `topic` VALUES ('5006', '26', '4', ' 如何生成explain plan?', 'a76d5eec-c392-4b2a-9bd0-39913f3db75d.', null, null, null, null, null, null, '解答：运行UTLXPLAN.SQL. 建立PLAN 表\r\n针对特定SQL语句，使用 EXPLAIN PLAN SET STATEMENT_ID= ‘TST1′ INTO PLAN_TABLE\r\n运行UTLXPLP.SQL 或 UTLXPLS.SQL察看EXPLAIN PLAN', '', '0', '2017-12-25 23:52:08', '47', '1');
INSERT INTO `topic` VALUES ('5007', '18', '4', ' 什么是端到端通信？\r\n', '64ebe526-d25a-4698-8261-369eb3251329.', null, null, null, null, null, null, '要深刻了解端到端通信，就首先要对网络的协议层有个了解。\r\n    网络协议最低端的三个层是物理层，数据链路层和网络层。他们都不是端到端的，因为他们相互连接的节点是路由器，是通过路由器将数据传向目的地的。而到了传输层才是真正的端到端，因为在这一层以及这一层以上的数据，是直接由终端1传到终端2的。在达到终端2之前，数据是不会被读写的。传输层的通信是进程通信。', '', '0', '2017-12-25 23:52:13', '6', '1');
INSERT INTO `topic` VALUES ('5008', '18', '4', ' 如何增加buffer cache的命中率?', '35d4ca19-e050-45d6-ba85-326e575c2e31.', null, null, null, null, null, null, '解答：在数据库较繁忙时，适用BUFFER CACHE ADVISORY 工具，查询V$DB_CACHE_ADVICE . 如果有必要更改，可以使用 ALTERSYSTEM SET DB_CACHE_SIZE 命令', '', '0', '2017-12-25 23:52:29', '47', '1');
INSERT INTO `topic` VALUES ('5009', '26', '4', ' ORA-01555的应对方法?', '6aac58fc-f708-4360-98ae-de1a6364c3fc.', null, null, null, null, null, null, '解答：具体的出错信息是SNAPSHOT TOO OLD WITHIN ROLLBACK SEG , 通常可以通过\r\n增大ROLLBACK SEG来解决问题。当然也需要察看一下具体造成错误的SQL文本', '', '0', '2017-12-25 23:52:47', '47', '1');
INSERT INTO `topic` VALUES ('5010', '26', '4', '内核函数mmap的实现原理，机制？', '23729c24-3695-4790-9b1f-ad98a1442666.', null, null, null, null, null, null, 'MMAP函数实现把一个文件映射到一个内存区域，从而我们可以像读写内存一样读写文件，他比单纯调用READ/WRITE也要快上许多。在某些时候我们可以把内存的内容拷贝到一个文件中实现内存备份，当然，也可以把文件的内容映射到内存来恢复某些服务。另外，MMAP实现共享内存也是其主要应用之一，MMAP系统调用使得进程之间通过映射同一个普通文件实现共享内存。', '', '0', '2017-12-25 23:52:58', '4', '1');
INSERT INTO `topic` VALUES ('5011', '18', '4', '如何加密PL/SQL程序?', 'b6901b36-480f-4744-a7df-fd96e41d743c.', null, null, null, null, null, null, '解答：WRAP', '', '0', '2017-12-25 23:53:31', '47', '1');
INSERT INTO `topic` VALUES ('5012', '3', '3', '抽象的关键字是      。', '835b7db7-50be-4a36-81c4-eb7b833b6563.', null, null, null, null, null, null, 'ABSTRACT', '', '0', '2017-12-25 23:54:03', '62', '1');
INSERT INTO `topic` VALUES ('5013', '3', '4', '抽象类必须要有抽象方法吗？', 'bf2116ee-fa8d-4b34-8f90-7b6770e188cd.', null, null, null, null, null, null, '不是必须。抽象类可以没有抽象方法。', '', '0', '2017-12-25 23:54:39', '62', '1');
INSERT INTO `topic` VALUES ('5014', '3', '4', '抽象类可以使用final修饰吗？', 'a1534c68-194e-4ffa-8fd1-d8e6e55c70af.', null, null, null, null, null, null, '不可以。', '定义抽象类就是让其他继承的，而final修饰类表示该类不能被继承，与抽象类的理念违背了', '0', '2017-12-25 23:55:22', '62', '1');
INSERT INTO `topic` VALUES ('5015', '3', '4', '普通类与抽象类有什么区别？', 'ad796fac-5846-4dc3-b221-1a0301b0b72b.', null, null, null, null, null, null, '普通类不能包含抽象方法，抽象类可以包含抽象方法\r\n抽象类不能直接实例化，普通类可以直接实例化', '', '0', '2017-12-25 23:55:53', '62', '1');
INSERT INTO `topic` VALUES ('5016', '4', '4', '接口有什么特点？', '3007dc3d-5f3c-4150-b4b8-c3fec30d8d9a.', null, null, null, null, null, null, '接口中声明全是PUBLIC STATIC FINAL修饰的常量\r\n接口中所有方法都是抽象方法\r\n接口是没有构造方法的\r\n接口也不能直接实例化\r\n接口可以多继承', '', '0', '2017-12-25 23:56:35', '62', '1');
INSERT INTO `topic` VALUES ('5017', '3', '4', 'Java中异常分为哪两种？', 'fc469971-bcff-4c97-840f-cde0ed7e8924.', null, null, null, null, null, null, '编译时异常\r\n运行时异常', '', '0', '2017-12-25 23:57:11', '62', '1');
INSERT INTO `topic` VALUES ('5018', '26', '4', '压缩和解压 ', '9b15168d-4242-4b21-8328-d60d50c2c7a3.', null, null, null, null, null, null, ' 以ZIP和UNZIP处理.ZIP文件 \r\n- ZIP命令的基本使用方法 \r\n- ZIP FILE.ZIP *：ZIP后接压缩后的文件名，在它的后面输入要压缩的文\r\n件即可 ', '', '0', '2017-12-25 23:57:18', '4', '1');
INSERT INTO `topic` VALUES ('5019', '3', '4', '说几个常见的编译时异常类？', '695798d3-41f5-4727-a559-4892fbc26c9f.', null, null, null, null, null, null, 'NULLPOINTEREXCEPTION：空指针异常\r\nARRAYINDEXOUTOFBOUNDSEXCEPTION：数组下标越界\r\nNUMBERFORMATEXCEPTION：数字转换异常\r\nILLEGALARGUMENTEXCEPTION：参数不匹配异常\r\nINSTANTIATIONEXCEPTION：对象初始化异常\r\nARITHMETICEXCEPTION：算术异常', '', '0', '2017-12-25 23:57:37', '62', '1');
INSERT INTO `topic` VALUES ('5020', '26', '4', '- 压缩后，自动删除原文件 ', 'fab264ac-0925-4b48-a608-22f0da85721a.', null, null, null, null, null, null, 'ZIP M FILE.ZIP TO.TXT：把TO.TXT文件压缩成FILE.ZIP文件，TO.TXT会自动删除的 \r\n- 将子目录一起压缩 ', '', '0', '2017-12-25 23:57:57', '4', '1');
INSERT INTO `topic` VALUES ('5021', '3', '4', '异常的处理机制有几种？', '45bf0f5e-d82c-495c-843d-0753f1e1eb3a.', null, null, null, null, null, null, '异常捕捉：TRY…CATCH…FINALLY，异常抛出：THROWS。', '', '0', '2017-12-25 23:57:57', '62', '1');
INSERT INTO `topic` VALUES ('5022', '3', '4', 'Try.catch.finally是必须要存在的吗？', '742127e0-0a0a-4788-be2e-55654e803ddf.', null, null, null, null, null, null, 'TRY块必须存在，CATCH和FINALLY可以不存在，但不能同时不存在', '', '0', '2017-12-25 23:58:26', '62', '1');
INSERT INTO `topic` VALUES ('5023', '26', '4', '挂载命令 ', '4b9432ed-1363-4d26-bc84-25566d36d98a.', null, null, null, null, null, null, 'MOUNT [-PARAMETERS] [设备名称] [挂载点] ', '', '0', '2017-12-25 23:58:36', '4', '1');
INSERT INTO `topic` VALUES ('5024', '26', '4', '作为运维的我们，需要掌握Java那些知识才能更好的运维？', '7c522d41-dd61-4cca-aec5-d0491ebbaa7f.', null, null, null, null, null, null, '比如JVM、项目构建（ANT、MAVEN）、SERVLET和JSP运行原理、JAR和CLASS和JAVA等文件的关系。', '', '0', '2017-12-25 23:58:40', '45', '1');
INSERT INTO `topic` VALUES ('5025', '3', '4', 'Thow与thorws区别', 'bc590e56-0861-4648-a969-fa78c3d2df93.', null, null, null, null, null, null, 'THROW写在代码块内，THROW后面跟的是一个具体的异常实例\r\nTHROW写在方法前面后面，THROWS后面跟的是异常类，异常类可以出现多个', '', '0', '2017-12-25 23:58:50', '62', '1');
INSERT INTO `topic` VALUES ('5026', '26', '4', '查看linux系统分区具体情况 ', 'fbe235cc-f812-4a79-b77c-6f9f36faa1ea.', null, null, null, null, null, null, 'FDISK ‐L ', '', '0', '2017-12-25 23:59:08', '4', '1');
INSERT INTO `topic` VALUES ('5027', '24', '4', 'FTP下载一个文件完成，有几个TCP连接？\r\n', 'ef313915-70e7-417a-b861-9115dc3520c4.', null, null, null, null, null, null, '好像是两次（不确定）。FTP客户端和服务器端的FTP程序通过TCP20和21端口建立连接，一个用于传输文件数据（数据连接），另一个用于传输控制信息（控制连接）。', '', '0', '2017-12-25 23:59:32', '6', '1');
INSERT INTO `topic` VALUES ('5028', '33', '4', '使用Log4j对程序有影响吗？', '8827bd22-81a9-4ac6-9e21-c480b6f0b4cc.', null, null, null, null, null, null, '有，LOG4J是用来日志记录的，记录一些关键敏感的信息，通常会将日志记录到本地文件或者数据库中', '录在本地文件中，会有频繁的io操作，会耗费一些系统资源。记录在数据库中，会频繁地操作数据库表，对系统性能也有一定的影响。但是为了程序安全以及数据的恢复或者bug的跟踪，这点资源消耗是可以承受的。', '0', '2017-12-25 23:59:43', '62', '1');
INSERT INTO `topic` VALUES ('5029', '26', '4', '页式管理的基本原理是什么?', '8b900086-e21f-474d-ba27-27fe4415f64f.', null, null, null, null, null, null, '1）进程的虚拟空间被划分成长度相等的页。\r\n（2）内存空间也按页的大小划分成长度相等的页面。\r\n（3）采用请求调页或预调技术实现内外存储器的统一管理。', '', '0', '2017-12-26 00:00:15', '4', '1');
INSERT INTO `topic` VALUES ('5030', '33', '4', 'Log4j日志有几个级别？', '047a768f-99db-4181-ac51-760628bc7704.', null, null, null, null, null, null, '由低到高：DEBUG、INFO、WRAN、ERROR', '', '0', '2017-12-26 00:00:20', '62', '1');
INSERT INTO `topic` VALUES ('5031', '26', '4', '进程调度有哪些功能?', '3c14d3f4-0a81-4e84-b663-bca7c647c5a2.', null, null, null, null, null, null, '（1）记录系统中所有进程的执行情况。\r\n（2）选择占有处理机的进程\r\n（3）进行进程上下文切换', '', '0', '2017-12-26 00:00:34', '4', '1');
INSERT INTO `topic` VALUES ('5032', '3', '4', '除了使用new创建对象之外，还可以用什么方法创建对象？', '06f3f2c9-ff1f-4bda-b780-79f355fb053a.', null, null, null, null, null, null, 'JAVA反射', '', '0', '2017-12-26 00:00:51', '62', '1');
INSERT INTO `topic` VALUES ('5033', '26', '4', '批处理操作系统、分时操作系统和实时操作系统的特点各是什么？', 'f9ce11ed-53ea-49b6-af02-0cfc18035d7e.', null, null, null, null, null, null, '(1) 批处理操作系统的特点：成批处理，系统吞吐量高，资源利用率高，用户不能直接干预作业的执行。\r\n(2)分时操作系统的特点：多路性、独立性、及时性、交互性。\r\n(3)实时操作系统的特点：及时响应、快速处理；高可靠性和安全性；不要求系统资源利用率。', '', '0', '2017-12-26 00:00:52', '4', '1');
INSERT INTO `topic` VALUES ('5034', '26', '1', '哪个vSphere 组件可用于为每台虚拟机创建实时卷影实例，以便在虚拟机出现故障时可由卷影实例取代虚拟机？ ', '3aed40d2-e8ac-4332-b4c8-9b6a56627336.', 'High Availability', ' Fault Tolerance', ' Data Protection', 'Distributed Resources Scheduler ', '', '', 'B', '', '0', '2017-12-26 00:01:12', '45', '1');
INSERT INTO `topic` VALUES ('5035', '3', '4', 'Java反射创建对象效率高还是通过new创建对象的效率高？', 'c18b9d72-0cb4-4ef6-937d-70d9591b408e.', null, null, null, null, null, null, '通过NEW创建对象的效率比较高', '通过反射时，先找查找类资源，使用类加载器创建，过程比较繁琐，所以效率较低', '0', '2017-12-26 00:01:29', '62', '1');
INSERT INTO `topic` VALUES ('5036', '33', '1', '下面关于java.lang.Exception类的说法正确的是（）', '163fa8e6-f5be-4483-9239-e86cb5b9d506.', '继承自Throwable', 'Serialable', '不记得，反正不正确', '不记得，反正不正确', '', '', 'A', '', '0', '2017-12-26 00:01:42', '69', '1');
INSERT INTO `topic` VALUES ('5037', '24', '1', 'Linux下查看网卡信息的命令是：', '6d89ce32-ed7a-4acb-bbfa-8b84afbf1585.', 'ipconfig ', 'ifconfig ', 'network ', 'netstat ', '', '', 'B', 'ipconfig ：IPConfig实用程序和它的等价图形用户界面——Windows 95/98中的WinIPCfg可用于显示当前的TCP/IP配置的设置值。这些信息一般用来检验人工配置的TCP/IP设置是否正确。\r\nifconfig ：ifconfig是linux中用于显示或配置网络设备（网络接口卡）的命令，英文全称是network interfaces configuring。\r\nnetwork ：网络, 网状物, 广播网\r\nnetstat ：在Internet RFC标准中，Netstat的定义是： Netstat是在内核中访问网络连接状态及其相关信息的程序，它能提供TCP连接，TCP和UDP监听，进程内存管理的相关报告。', '0', '2017-12-26 00:02:28', '46', '1');
INSERT INTO `topic` VALUES ('5038', '26', '1', '以下哪项是对虚拟机的最佳描述？', 'f05227de-bed4-46e8-95e0-ac70b24da644.', '执行虚拟化软件测试程序的物理机 ', '通过软件实施的计算机，可以像物理机一样执行程序', '一种旨在提供网络故障切换和故障恢复功能的计算机工具', '一种软件计算机，其中封装了物理硬件 ', '', '', 'B', '', '0', '2017-12-26 00:02:36', '45', '1');
INSERT INTO `topic` VALUES ('5039', '26', '4', '人机交换的三条黄金法则？', '3071634c-483d-4b50-a7df-4c79a004933f.', null, null, null, null, null, null, '人的方面：人体工程（效）学、心理学、社会学等，\r\n机的方面：网页标准、动态网站技术（ASP、PHP、JSP等等）、DHTML、人工智能、网络硬件(宽带、接入方式、浏览方式等等、)设计工具等', '其他方面：色彩、结构、动画设计、信息管理学等', '0', '2017-12-26 00:03:00', '61', '1');
INSERT INTO `topic` VALUES ('5040', '26', '4', '说出你所知道的保持进程同步的方法？', 'f5b244aa-d3b5-4ae5-b113-ec34831084ce.', null, null, null, null, null, null, '进程间同步的主要方法有原子操作、信号量机制、自旋锁、管程、会合、分布式系统等。', '', '0', '2017-12-26 00:03:01', '4', '1');
INSERT INTO `topic` VALUES ('5041', '26', '4', '什么是中断？中断时CPU做什么工作？', '3f59cd7c-cebc-4d3c-8bae-1595e7b20226.', null, null, null, null, null, null, '中断是指在计算机执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序。待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程。', '', '0', '2017-12-26 00:03:38', '4', '1');
INSERT INTO `topic` VALUES ('5042', '26', '4', '、什么是操作系统的基本功能?', 'dff573e0-cb7e-4a3a-9390-3ab407b2c985.', null, null, null, null, null, null, '1）.处理机管理。在多道程序或多用户的情况下，要组织多个作业同时运行，就要解决对处理机分配调度策略、分配实施和资源回收等问题。\r\n2）.存储管理。存储管理的主要工作是对内部存储器进行分配、保护和扩充和管理。\r\n3）.设备管理。涉及到通道、控制器、输入输出设备的分配和管理以及设备独立性。\r\n4）.信息管理(文件系统管理) 是对系统的软件资源的管理。\r\n5）.用户接口。操作系统还为用户提供一个友好的用户接口。一般来说，操作系统提供两种方式的接口来为用户服务。\r\n ', '', '0', '2017-12-26 00:05:04', '4', '1');
INSERT INTO `topic` VALUES ('5043', '26', '4', '分级调度分为4级：', '47a6e28d-c1e4-42ec-8f25-8f55e16bdb5a.', null, null, null, null, null, null, '(1) 作业调度    (2) 交换调度     (3) 进程调度    (4) 线程调度。', '', '0', '2017-12-26 00:05:30', '4', '1');
INSERT INTO `topic` VALUES ('5044', '26', '1', '由字符界面切换到图形界面的命令是\r\n\r\n(  ) \r\n', '8a171478-7783-4a9d-8cda-27c10e722cf5.', 'startx', 'switch', 'swap', 'exit  ', '', '', 'A ', '', '0', '2017-12-26 00:05:46', '40', '1');
INSERT INTO `topic` VALUES ('5045', '3', '4', 'JDBC操作的步骤', '51ac116f-a2a6-421a-bb24-63d450549eb7.', null, null, null, null, null, null, '加载数据库驱动类\r\n打开数据库连接\r\n执行SQL语句\r\n处理返回结果\r\n关闭资源', '', '0', '2017-12-26 00:06:13', '62', '1');
INSERT INTO `topic` VALUES ('5046', '18', '4', 'TELNET、FTP、SMTP、HTTP的端口号是多少？\r\n', '0b6360d0-2cd1-424e-b82e-943c7234a9c4.', null, null, null, null, null, null, 'FTP--21；TELNET--23；SMTP--25；DNS--53；POP3--110；HTTP(WWW)--80；TFTP--69；', '', '0', '2017-12-26 00:06:22', '6', '1');
INSERT INTO `topic` VALUES ('5047', '18', '4', '那么TCP/IP协议中的端口指的是什么呢？', 'a97d12e1-a619-4f70-a78b-b021cd275802.', null, null, null, null, null, null, '如果把IP地址比作一间房子 ，端口就是出入这间房子的门。真正的房子只有几个门，但是一个IP地址的端口 可以有65536个之多！端口是通过端口号来标记的，端口号只有整数，范围是从0 到65535。', '', '0', '2017-12-26 00:06:38', '6', '1');
INSERT INTO `topic` VALUES ('5048', '3', '4', '怎么在JDBC内调用一个存储过程', 'a7a49cef-29f4-4ce2-a212-7937af084bd9.', null, null, null, null, null, null, '使用CALLABLESTATEMENT', '', '0', '2017-12-26 00:06:47', '62', '1');
INSERT INTO `topic` VALUES ('5049', '18', '3', '获取以太网中IP地址与MAC地址的对应关系的协议是___________', 'a8a19b40-b698-473c-a2c3-63f2f27eb77d.', null, null, null, null, null, null, 'ARP协议', '', '0', '2017-12-26 00:07:01', '6', '1');
INSERT INTO `topic` VALUES ('5050', '26', '1', '以下哪个选项是普通用户的主目录\r\n\r\n( )  \r\n', 'a13edd0c-6e5b-4230-b64e-a6d12bcfa8df.', '/home', '/dev', '/usrD', '/mnt ', '', '', ' A', '', '0', '2017-12-26 00:07:17', '40', '1');
INSERT INTO `topic` VALUES ('5051', '18', '4', '什么是VPN?', '25ff96d3-7aee-4e08-9a57-0a9db5bfcef1.', null, null, null, null, null, null, 'VPN的英文全称是“VIRTUAL PRIVATE NETWORK”，翻译过来就是“虚拟专用网络”。顾名思义，我们可以把它理解成：虚拟出来的企业内部专线，这个私有网络是虚拟的，不受地域限制。', '', '0', '2017-12-26 00:07:28', '6', '1');
INSERT INTO `topic` VALUES ('5052', '26', '3', '\r\n进入个人主目录的命令是\r\n\r\n\r\n\r\n\r\n\r\n\r\n（）\r\n', '6307923e-d0dc-4fd9-877a-64e1a4090045.', null, null, null, null, null, null, 'CD~', '', '0', '2017-12-26 00:07:51', '40', '1');
INSERT INTO `topic` VALUES ('5053', '26', '3', '\r\n假设你的用户名是\r\n\r\nuser,\r\n\r\n那你的主目录为\r\n\r\n\r\n\r\n\r\n\r\n\r\n/home/user,\r\n\r\n如果你的用户名为\r\n\r\nroot,\r\n\r\n则主目录\r\n\r\n为\r\n\r\n\r\n\r\n\r\n\r\n\r\n（）.  \r\n', 'c46c0af6-cb83-45be-abbf-56b308892a09.', null, null, null, null, null, null, '/ROOT', '', '0', '2017-12-26 00:08:27', '40', '1');
INSERT INTO `topic` VALUES ('5054', '18', '4', '常用的虚拟私有网络协议？', '39f59ec0-75c0-406e-bc7f-407615b9a327.', null, null, null, null, null, null, 'IPSEC : IPSEC(缩写IP SECURITY)是保护IP协议安全通信的标准，它主要对IP协议分组进行加密和认证。  ', '', '0', '2017-12-26 00:08:32', '6', '1');
INSERT INTO `topic` VALUES ('5055', '26', '3', '\r\n如果修改了文件后，想退出并保存文件，应在命令模式下输入\r\n\r\n\r\n\r\n\r\n\r\n\r\n:wq,\r\n\r\n如果想不保存强行退\r\n\r\n出，则应当输入\r\n\r\n\r\n\r\n\r\n\r\n\r\n:（） .  \r\n', '1c6b7421-cc27-4fb6-9a8a-6d3ed7c51af4.', null, null, null, null, null, null, 'Q!', '', '0', '2017-12-26 00:08:45', '40', '1');
INSERT INTO `topic` VALUES ('5056', '26', '1', '阅读以下说法并选择与其对应的虚拟机属性：“如果一个虚拟机因为错误而崩溃，同一主机上的其他虚拟机不会受到影响', 'bc05f882-b298-40fd-9c03-61de36939450.', '隔离性', '兼容性', '独立于硬件 ', '统一性', '', '', 'A', '', '0', '2017-12-26 00:08:54', '45', '1');
INSERT INTO `topic` VALUES ('5058', '26', '3', '在字符界面下登录系统时，超级用户显示的提示符为“#”，非超级用户显示为（）\r\n\r\n.  \r\n', '8fe12df1-8c90-402d-b3d6-482f9ef48c02.', null, null, null, null, null, null, '“$”', '', '0', '2017-12-26 00:09:04', '40', '1');
INSERT INTO `topic` VALUES ('5059', '18', '4', '网桥工作在哪一层？', '0dbe06b8-81c6-4d77-9f1e-b3072ec6f557.', null, null, null, null, null, null, '网桥工作在数据链路层，将两个LAN连起来，根据MAC地址来转发帧。\r\n    OSI七层网络模型由下至上为1至7层，分别为物理层(PHYSICAL LAYER)，数据链路层(DATA LINK LAYER)，网络层(NETWORK LAYER)，传输层(TRANSPORT LAYER)，会话层(SESSION LAYER)，表示层(PRESENTATION LAYER)，应用层(APPLICATION LAYER)。', '', '0', '2017-12-26 00:09:07', '6', '1');
INSERT INTO `topic` VALUES ('5060', '26', '3', '\r\n\r\nLinux\r\n\r\n\r\n\r\n\r\n\r\n\r\n操作系统是（）的操作系统，它允许多个用户同时登录到系统，使用系\r\n\r\n统资源。\r\n\r\n  \r\n', '0578bc63-0065-4dd3-9b42-26e4965e6bf3.', null, null, null, null, null, null, '多用户多任务', '', '0', '2017-12-26 00:09:41', '40', '1');
INSERT INTO `topic` VALUES ('5061', '26', '3', '\r\n\r\nGNOME\r\n\r\n桌面环境包括\r\n\r\n    \r\n\r\n面板\r\n\r\n\r\n\r\n\r\n\r\n\r\n     \r\n\r\n、\r\n\r\n    \r\n\r\n程序菜单\r\n\r\n\r\n\r\n\r\n\r\n\r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n和（）\r\n. \r\n', '9a197982-1a67-4bce-8375-3d2d8bae7e27.', null, null, null, null, null, null, '对话框\r\n', '', '0', '2017-12-26 00:10:15', '40', '1');
INSERT INTO `topic` VALUES ('5062', '26', '3', '\r\n增加一个用户的命令是：\r\n\r\nadduser \r\n\r\n或\r\n\r\n\r\n\r\n\r\n\r\n\r\n（）.  \r\n', '86c3e2a2-c4b2-47fc-b151-2f68984d91e4.', null, null, null, null, null, null, 'USERADD', '', '0', '2017-12-26 00:10:50', '40', '1');
INSERT INTO `topic` VALUES ('5063', '4', '4', 'web.xml文件中可以配置哪些内容？', '79912c4e-633b-426b-937f-c2f97f54ee60.', null, null, null, null, null, null, 'WEB.XML用于配置WEB应用的相关信息，如：监听器（LISTENER）、过滤器（FILTER）、 SERVLET、相关参数、会话超时时间、安全验证方式、错误页面等', '', '0', '2017-12-26 00:10:56', '62', '1');
INSERT INTO `topic` VALUES ('5064', '26', '3', '挂载光驱命令：\r\n\r\nmount /dev/cdrom /mnt\r\n\r\n，卸载光驱：\r\n\r\n（）. \r\n', 'd9d7decf-0215-4e09-ad72-285085af441e.', null, null, null, null, null, null, 'UMOUNT /MNT', '', '0', '2017-12-26 00:11:38', '40', '1');
INSERT INTO `topic` VALUES ('5065', '26', '3', '\r\n\r\n查看文件内容，从第一行开始的命令是\r\n\r\n\r\n\r\n\r\n\r\n\r\n（）.\r\n', 'b38e7538-b448-4e2b-8187-495992d7dce7.', null, null, null, null, null, null, 'CAT', '', '0', '2017-12-26 00:11:54', '40', '1');
INSERT INTO `topic` VALUES ('5066', '26', '3', '\r\n\r\n/usr/local/bin/\r\n\r\n\r\n\r\n\r\n\r\n\r\n是（）\r\n', 'f1aecec9-0efc-4442-ab6c-cf2dbab9b337.', null, null, null, null, null, null, '绝对路径', '', '0', '2017-12-26 00:12:11', '40', '1');
INSERT INTO `topic` VALUES ('5067', '26', '3', '安装\r\n\r\nLinux\r\n\r\n所需的两个最根本的分区根分区（“\r\n\r\n/\r\n\r\n”）和交换分区（）\r\n', '362fc22d-3667-43cb-98b9-501dcf9744d0.', null, null, null, null, null, null, '“SWAP”', '', '0', '2017-12-26 00:12:36', '40', '1');
INSERT INTO `topic` VALUES ('5068', '18', '4', '查看数据库版本及当前登录用户是什么', '020c658d-c98d-4da2-9272-8c133a6b9a67.', null, null, null, null, null, null, 'MYSQL> SELECT VERSION(); 查看版本 \r\nMYSQL> SELECT USER(); 查看用户', '', '0', '2017-12-26 00:13:28', '6', '1');
INSERT INTO `topic` VALUES ('5069', '18', '4', '创建GBK字符集的数据库oldboy，并查看已建库的完整语句', '8ade8c69-da14-49ac-8b0d-74955cb9b7a2.', null, null, null, null, null, null, 'MYSQL> CREATE DATABASE OLDBOY CHARACTER SET GBK COLLATE GBK_CHINESE_CI; \r\nMYSQL> SHOW CREATE DATABASE OLDBOY\\G', '', '0', '2017-12-26 00:14:15', '6', '1');
INSERT INTO `topic` VALUES ('5070', '26', '1', '您正在与管理员和管理层开会讨论有关即将进行的虚拟化项目。会议上提到了vCenter，并讨论了是否需要虚拟化vCenter，以方便主机管理。以下哪项是虚拟化vCenter的优势?', '017cc342-134f-4346-b66a-ba46af942809.', 'vCenter只能在使用本地存储时进行虚拟化', 'vCenter可以进行虚拟化，但必须在32位服务器上部署', ' vCenter可以轻松实现虚拟化，HA可在需要时用于重新启动虚拟机  ', 'vCenter与管理员密切相关，因而不能进行虚拟化', '', '', 'C', '', '0', '2017-12-26 00:14:40', '45', '1');
INSERT INTO `topic` VALUES ('5071', '26', '2', '\r\n\r\nLinux\r\n\r\n操作系统的特性有：开放性、多用户、多任务、良好的用户界面等\r\n\r\n.\r\n', 'b980a38f-1e41-449b-be39-f6c2e80d8ddd.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:15:25', '40', '1');
INSERT INTO `topic` VALUES ('5072', '18', '4', '创建用户oldboy，使之可以管理数据库oldboy', 'e7f8c159-1942-430b-942f-6fb826fedd57.', null, null, null, null, null, null, 'MYSQL> GRANT ALL ON OLDBOY.* TO OLDBOY@’LOCALHOST’ IDENTIFIED BY ‘123456’; \r\nMYSQL> SELECT USER,HOST FROM MYSQL.USER;', '', '0', '2017-12-26 00:15:27', '6', '1');
INSERT INTO `topic` VALUES ('5073', '33', '1', '下列不是（EL）表达式语言的隐式对象的是', '89260f71-ac7a-42d0-b2c9-16ec154e2a7d.', 'headerValue', 'pageContext', 'initParam', 'applicationScope', 'sessionScope', 'paramValue', 'AF', 'EL的隐式对象包括：pageContext、initParam（访问上下文参数）、param（访问请求参数）、paramValues、header（访问请求头）、headerValues、cookie（访问cookie）、applicationScope（访问application作用域）、sessionScope（访问session作用域）、requestScope（访问request作用域）、pageScope（访问page作用域）。', '0', '2017-12-26 00:15:29', '62', '1');
INSERT INTO `topic` VALUES ('5074', '26', '2', '\r\n\r\nLinux\r\n\r\n系统的任何用户都可以设置计算机的名字\r\n\r\n. \r\n', '0dfc21da-678c-4830-ada0-62d51589ec07.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 00:15:38', '40', '1');
INSERT INTO `topic` VALUES ('5075', '26', '2', '\r\n\r\nusermod\r\n\r\n命令无法实现的操作是删除指定的账户和对应的主目录\r\n\r\n.\r\n', '976afee2-b3bf-43d3-b69a-f903074410e8.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:15:48', '40', '1');
INSERT INTO `topic` VALUES ('5076', '18', '4', '查看创建的用户oldboy拥有哪些权限', '23d56dd6-2d44-4f38-91a5-897756f7b03e.', null, null, null, null, null, null, 'MYSQL> SHOW GRANTS FOR ABC@LOCALHOST;\r\nMYSQL> SHOW GRANTS FOR OLDBOY@LOCALHOST;\r\nMYSQL> SHOW GRANTS FOR OLDBOY@LOCALHOST\\G', '', '0', '2017-12-26 00:15:49', '6', '1');
INSERT INTO `topic` VALUES ('5078', '26', '2', '非超级用户只能修改自己的口令，超级用户可以修改任何人的口令', '9ac7b651-7a9e-481e-97ef-a0b3f4d3baad.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:16:25', '40', '1');
INSERT INTO `topic` VALUES ('5079', '24', '3', '查看当前数据库有哪些用户___________________________________________', 'd796001a-e1fe-4a27-b73a-72c4a1646c5d.', null, null, null, null, null, null, 'MYSQL> SELECT USER,HOST FROM MYSQL.USER;', '', '0', '2017-12-26 00:16:52', '6', '1');
INSERT INTO `topic` VALUES ('5080', '26', '1', '表达式语言（EL）支持以下哪些运算符？', 'dde740ee-a7a0-4811-98c3-003fdf947f6d.', '算术运算符', 'empty运算符', '条件运算符', '关系运算符', '', '', 'ABCD', '除了.和[]运算符，EL还提供了：\r\n- 算术运算符：+、-、*、/或div、%或mod\r\n- 关系运算符：==或eq、!=或ne、>或gt、>=或ge、<或lt、<=或le\r\n- 逻辑运算符：&&或and、||或or、!或not\r\n- 条件运算符：${statement? A : B}（跟Java的条件运算符类似）\r\n- empty运算符：检查一个值是否为null或者空（数组长度为0或集合中没有元素也返回true）', '0', '2017-12-26 00:17:32', '62', '1');
INSERT INTO `topic` VALUES ('5081', '26', '2', '自由软件是指由开发者提供软件全部源代码并放弃包括版权在内的任何权利，任何用户\r\n\r\n都有权使用、拷贝、扩散、修改的软件，只要用户也将自己修改过的程序代码公开就\r\n\r\n行\r\n\r\n.\r\n', '42776430-b548-4907-b59a-cde92f0d6393.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 00:17:51', '40', '1');
INSERT INTO `topic` VALUES ('5083', '26', '4', '修改目录，文件权限和属主及数组命令', 'c71b81f2-b5ab-41cb-b181-c55857d14418.', null, null, null, null, null, null, ' CHMOD：用于改变指定文件的权限命令。\r\n   CHOWN：用于改变文件拥有属性的命令。\r\n   CHGRP：用于改变文件群组的命令。\r\n   CHATTR：用于设置文件具有不可删除和修改权限。\r\n   LSATTR：用于显示文件或目录的隐藏属性。', '', '0', '2017-12-26 00:17:55', '4', '1');
INSERT INTO `topic` VALUES ('5084', '26', '2', '\r\n\r\nLinux\r\n\r\n版本号分为两类：内核版本与发行版本。而\r\n\r\nLinux\r\n\r\n内核的版本又被分为两种：\r\n\r\n测试版本与产品化版本。\r\n\r\nLinux\r\n\r\n内核版本号由三位数字组成，其中第二位数字说明版本类\r\n\r\n型，如果该数字是偶数，则说明这种版本是产品化版本；如果是奇数，则为测试版\r\n\r\n本\r\n\r\n.\r\n', 'cb7387cb-207f-4c6e-8a59-65aa86e7ee3b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:18:05', '40', '1');
INSERT INTO `topic` VALUES ('5085', '18', '3', '进入oldboy数据库___________', 'ab212a26-36f4-46ad-9d6a-ea5fc01d730d.', null, null, null, null, null, null, 'MYSQL> USE OLDBOY', '', '0', '2017-12-26 00:18:12', '6', '1');
INSERT INTO `topic` VALUES ('5086', '26', '4', '创建和删除目录的命令', '75a6c9cf-a497-4294-a74a-26f069e24edd.', null, null, null, null, null, null, ' MKDIR：用于创建目录\r\n   RMDIR：用于删除空的目录\r\n   RM -F：用于删除不为空的目录', '', '0', '2017-12-26 00:18:21', '4', '1');
INSERT INTO `topic` VALUES ('5088', '26', '2', '可以在标准输出上显示\r\n\r\n2010\r\n\r\n年日历的命令及参数是\r\n\r\ncal2010\r\n\r\n.\r\n', '8ba35c34-96f1-41cf-9cbb-8f73776a386b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:18:48', '40', '1');
INSERT INTO `topic` VALUES ('5089', '26', '4', '显示文件内容的命令', 'c946ac3f-7671-4d75-a15f-790ff122cfb3.', null, null, null, null, null, null, '  CAT：用于显示指定文件的全部内容\r\n   MORE：用分页的形式显示指定文件的内容\r\n   LESS：用分页的形式显示指定文件的内容，区别是MORE和LESS翻页使用的操作键不同。\r\n   HEAD：用于显示文件的前N行内容。\r\n   TAIL：用于显示文件的后N行内容。\r\n   TAIL -F：用于自动刷新的显示文件后N行数据内容。\r\n ', '', '0', '2017-12-26 00:18:57', '4', '1');
INSERT INTO `topic` VALUES ('5090', '4', '4', '服务器收到用户提交的表单数据，到底是调用Servlet的doGet()还是doPost()方法？', '1cbab4f5-0f3c-4ccf-9ed6-8daa32dbca48.', null, null, null, null, null, null, 'HTML的<FORM>元素有一个METHOD属性，用来指定提交表单的方式，其值可以是GET或POST', '我们自定义的Servlet一般情况下会重写doGet()或doPost()两个方法之一或全部，如果是GET请求就调用doGet()方法，如果是POST请求就调用doPost()方法，那为什么为什么这样呢？我们自定义的Servlet通常继承自HttpServlet，HttpServlet继承自GenericServlet并重写了其中的service()方法，这个方法是Servlet接口中定义的。HttpServlet重写的service()方法会先获取用户请求的方法，然后根据请求方法调用doGet()、doPost()、doPut()、doDelete()等方法，如果在自定义Servlet中重写了这些方法，那么显然会调用重写过的（自定义的）方法，这显然是对模板方法模式的应用（如果不理解，请参考阎宏博士的《Java与模式》一书的第37章）。当然，自定义Servlet中也可以直接重写service()方法，那么不管是哪种方式的请求，都可以通过自己的代码进行处理，这对于不区分请求方法的场景比较合适。', '0', '2017-12-26 00:20:14', '62', '1');
INSERT INTO `topic` VALUES ('5091', '26', '2', ' \r\n\r\n在\r\n\r\nLinux\r\n\r\n系统中命令不区分大小写\r\n', '49bd1897-694b-4ebf-bd6a-59ef242ac26c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:20:54', '40', '1');
INSERT INTO `topic` VALUES ('5092', '26', '4', '查找命令', 'd1fa542e-c7ee-48bf-a7ae-10b75180b0d1.', null, null, null, null, null, null, ' FIND：查找指定的文件。\r\n   WHEREIS：查找指定的文件源和二进制文件和手册等\r\n   WHICH：用于查询命令或别名的位置。\r\n   LOCATE：快速查找系统数据库中指定的内容。\r\n   GREP：查找文件里符合条件的字符串。 ', '', '0', '2017-12-26 00:20:57', '4', '1');
INSERT INTO `topic` VALUES ('5093', '3', '4', 'JSP中的静态包含和动态包含有什么区别？', 'fc178af0-f0e5-479a-afdb-6c923c3da0a0.', null, null, null, null, null, null, '静态包含是通过JSP的INCLUDE指令包含页面，动态包含是通过JSP标准动作<JSP:FORWARD>包含页面', '静态包含是编译时包含，如果包含的页面不存在则会产生编译错误，而且两个页面的\"contentType\"属性应保持一致，因为两个页面会合二为一，只产生一个class文件，因此被包含页面发生的变动再包含它的页面更新前不会得到更新。动态包含是运行时包含，可以向被包含的页面传递参数，包含页面和被包含页面是独立的，会编译出两个class文件，如果被包含的页面不存在，不会产生编译错误，也不影响页面其他部分的执行', '0', '2017-12-26 00:21:21', '62', '1');
INSERT INTO `topic` VALUES ('5094', '26', '4', '用户操作命令', '1608d71c-8e45-4c33-911e-83e8be44b32e.', null, null, null, null, null, null, 'SU：切换用户命令\r\n   SUDO：一系统管理员的身份执行命令\r\n   PASSWD：用于修改用户的密码', '', '0', '2017-12-26 00:21:21', '4', '1');
INSERT INTO `topic` VALUES ('5095', '4', '4', 'Servlet中如何获取用户提交的查询参数或表单数据？', 'f2a43ed5-e76e-451d-8aa4-62a4f9c5a590.', null, null, null, null, null, null, '可以通过请求对象（HTTPSERVLETREQUEST）的GETPARAMETER()方法通过参数名获得参数值', '如果有包含多个值的参数（例如复选框），可以通过请求对象的getParameterValues()方法获得。当然也可以通过请求对象的getParameterMap()获得一个参数名和参数值的映射（Map）', '0', '2017-12-26 00:22:03', '62', '1');
INSERT INTO `topic` VALUES ('5096', '18', '4', '查询插入的所有记录，查询名字为oldboy的记录。查询id大于1的记录。', 'aefe4944-60a5-4692-a595-37bf8e929a8c.', null, null, null, null, null, null, 'MYSQL> SELECT * FROM TEST;\r\n+------+-----------+\r\n| ID   | NAME      |\r\n+------+-----------+\r\n|    1 | OLDBOY    |\r\n|    2 | 老男孩    |\r\n|    3 | ETIANTIAN |\r\n+------+-----------+\r\n3 ROWS IN SET (0.00 SEC)', '', '0', '2017-12-26 00:22:07', '6', '1');
INSERT INTO `topic` VALUES ('5097', '18', '4', '把数据id等于1的名字oldboy更改为oldgirl', 'd73fa3b2-34fa-4d54-b11d-3da3b4768bfc.', null, null, null, null, null, null, 'MYSQL> UPDATE TEST SET NAME=\'OLDGIRL\' WHERE ID=1;\r\nQUERY OK, 1 ROW AFFECTED (0.00 SEC)\r\nROWS MATCHED: 1  CHANGED: 1  WARNINGS: 0', '', '0', '2017-12-26 00:22:38', '6', '1');
INSERT INTO `topic` VALUES ('5098', '4', '4', 'Servlet中如何获取用户配置的初始化参数以及服务器上下文参数？', '301d2f30-1bf3-42f5-aca4-4de5b8b4daec.', null, null, null, null, null, null, '可以通过重写SERVLET接口的INIT(SERVLETCONFIG)方法并通过SERVLETCONFIG对象的GETINITPARAMETER()方法来获取SERVLET的初始化参数', '可以通过ServletConfig对象的getServletContext()方法获取ServletContext对象，并通过该对象的getInitParameter()方法来获取服务器上下文参数。当然，ServletContext对象也在处理用户请求的方法（如doGet()方法）中通过请求对象的getServletContext()方法来获得', '0', '2017-12-26 00:22:53', '62', '1');
INSERT INTO `topic` VALUES ('5099', '18', '4', '备份oldboy库及MySQL库', 'ff1dda65-752c-4023-95ad-fd02fe665aec.', null, null, null, null, null, null, 'MYSQLDUMP -UROOT -POLDBOY -S /DATA/3306/MYSQL.SOCK --EVENTS -B OLDBOY MYSQL >/OPT/MYSQL_BACK.SQL \r\nCAT /OPT/MYSQL_BACK.SQL', '', '0', '2017-12-26 00:23:39', '6', '1');
INSERT INTO `topic` VALUES ('5100', '26', '2', ' 配置IP地址、子网掩码、默认网关、DNS地址等参数只有静态手工配置方法', 'ba6acc60-301a-4858-91e6-6a20d9e154f3.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 00:24:01', '40', '1');
INSERT INTO `topic` VALUES ('5101', '18', '4', '删除表test和oldboy数据库并查看', 'a9d590e6-49f3-4683-8468-02f538440491.', null, null, null, null, null, null, 'MYSQL> DROP TABLE TEST;     删除表\r\nMYSQL> DROP DATABASE TEST;  删除库', '', '0', '2017-12-26 00:24:06', '6', '1');
INSERT INTO `topic` VALUES ('5102', '26', '2', '在网络配置时如果输入了IP地址和子网掩码信息，还需要输入网关、主要、次要和第三DNS地址信息', '6695c074-ac86-43a6-9c36-d7620eb119d1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:24:21', '40', '1');
INSERT INTO `topic` VALUES ('5103', '26', '2', '公司中的局域网也是Internet中的一部分', 'a30013cd-a664-4216-bf28-d79787b5645b.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 00:24:32', '40', '1');
INSERT INTO `topic` VALUES ('5104', '26', '2', '两台计算机要通讯必须使用相同的网络协议，而且只能使用相同的操作系统', '4d566010-d568-455c-81ce-88565a1e08bd.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 00:24:44', '40', '1');
INSERT INTO `topic` VALUES ('5105', '4', '4', '如何设置请求的编码以及响应内容的类型？', 'd59f14ad-709e-4dbb-bac3-c25de0358578.', null, null, null, null, null, null, '通过请求对象（SERVLETREQUEST）的SETCHARACTERENCODING(STRING)方法可以设置请求的编码,\r\n通过响应对象（SERVLETRESPONSE）的SETCONTENTTYPE(STRING)方法可以设置响应内容的类型.', '说明：现在如果还有公司在面试的时候问JSP的声明标记、表达式标记、小脚本标记这些内容的话，这样的公司也不用去了，其实JSP内置对象、JSP指令这些东西基本上都可以忘却了，关于Java Web开发的相关知识，可以看一下我的《Servlet&JSP思维导图》，上面有完整的知识点的罗列。想了解如何实现自定义MVC框架的，可以看一下我的《Java Web自定义MVC框架详解》', '0', '2017-12-26 00:24:46', '62', '1');
INSERT INTO `topic` VALUES ('5106', '26', '2', ' 只有那些提供服务的服务器才具有IP地址以便于访问，一般连接到Internet上的个人计算机是没有IP地址的，因为IP地址很有限。', '963618dd-6870-4e93-8a25-ab82930cf4e6.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 00:24:57', '40', '1');
INSERT INTO `topic` VALUES ('5107', '33', '4', '什么是Web Service（Web服务）？', '8f8e13f3-96dc-4fb9-b994-5158b900c3cc.', null, null, null, null, null, null, '从表面上看，WEB SERVICE就是一个应用程序，它向外界暴露出一个能够通过WEB进行调用的API。', '', '0', '2017-12-26 00:25:56', '62', '1');
INSERT INTO `topic` VALUES ('5108', '18', '4', 'Linux命令行恢复以上删除的数据', 'c6cc7f99-bee7-4a7e-ad8b-aab5d46abc1b.', null, null, null, null, null, null, 'MYSQL -UROOT -POLDBOY -S /DATA/3306/MYSQL.SOCK </OPT/MYSQL_BACK.SQL', '', '0', '2017-12-26 00:26:08', '6', '1');
INSERT INTO `topic` VALUES ('5109', '26', '1', '以下哪条命令可以用来使用指定的用户来执行命令，而不用切换用户（）', '65ae3b1c-1adb-47e6-8d66-4340bcf60c3e.', 'su', 'sudo', 'su do\r\n', '以上都不是\r\n', '', '', 'B', '', '0', '2017-12-26 00:26:45', '40', '1');
INSERT INTO `topic` VALUES ('5110', '33', '4', '概念解释：SOAP、WSDL、UDDI。', '44fff60c-ff09-4902-b03f-8759b77a4496.', null, null, null, null, null, null, 'SOAP：简单对象访问协议（SIMPLE OBJECT ACCESS PROTOCOL），是WEB SERVICE中交换数据的一种协议规范。\r\nWSDL：WEB服务描述语言（WEB SERVICE DESCRIPTION LANGUAGE），它描述了WEB服务的公共接口。\r\nUDDI：统一描述、发现和集成（UNIVERSAL DESCRIPTION, DISCOVERY AND INTEGRATION），它是一个基于XML的跨平台的描述规范', '', '0', '2017-12-26 00:27:02', '62', '1');
INSERT INTO `topic` VALUES ('5111', '26', '4', '255.255.254.0网段最多能支持多少主机？', '464337dd-e170-4b87-94ee-9d0c478e6287.', null, null, null, null, null, null, '256个', '', '0', '2017-12-26 00:27:03', '4', '1');
INSERT INTO `topic` VALUES ('5112', '26', '4', '10M网卡传输过程中物理层采用什么编码？', '6bdc6583-1dd0-4940-bce1-d9a3bb9bae4a.', null, null, null, null, null, null, '曼彻斯特编码', '', '0', '2017-12-26 00:27:22', '4', '1');
INSERT INTO `topic` VALUES ('5113', '26', '1', ' 以下哪条命令可以显示正在登录的用户的属组\r\n', '073759cd-6993-401d-82fd-5d081747c42f.', 'groups\r\n\r\n', ' group\r\n', ' groupinfo', ' groupmod', '', '', 'B', '', '0', '2017-12-26 00:27:31', '40', '1');
INSERT INTO `topic` VALUES ('5114', '26', '4', '栈与队列的特点？', '513bfb88-7b51-4f0c-b73d-afe1c899b11f.', null, null, null, null, null, null, '栈是先进后出，只能操作尾节点，队列是先进先出。', '', '0', '2017-12-26 00:27:42', '4', '1');
INSERT INTO `topic` VALUES ('5115', '26', '4', 'Cache的工作方式划分？', '4c8c04e6-c9bb-456b-9ef8-58d79d629d9e.', null, null, null, null, null, null, 'WRITE-NONE,WRITE-ALL,WRITE-THROUGH(写通CACHE，执行写操作时同时写入主存与CACHE)，WRITE-BACK（写回CACHE，执行写操作时不写入主存，除非需要替换）', '', '0', '2017-12-26 00:28:01', '4', '1');
INSERT INTO `topic` VALUES ('5116', '26', '1', '以下哪条命令可以更改指定组的相关信息', 'e737d205-1512-492a-87d6-a3bc6b4327a4.', 'groups\r\n', 'group\r\n', 'groupinfo\r\n', 'groupmod\r\n', '', '', ' D\r\n', '', '0', '2017-12-26 00:28:04', '40', '1');
INSERT INTO `topic` VALUES ('5117', '26', '4', '什么叫NMI中断？', 'c86d9ae7-6e37-439f-b075-d815d3456d38.', null, null, null, null, null, null, '不可屏蔽中断', '', '0', '2017-12-26 00:28:21', '4', '1');
INSERT INTO `topic` VALUES ('5118', '26', '1', '使用groupmod的哪个参数可以对已存在的组名字进行重命名\r\n', 'b8c77293-bad5-486c-8eb6-4ba4f5a61f7c.', ' n\r\n', 'r\r\n', ' p\r\n', ' 以上都不对\r\n', '', '', ' A', '', '0', '2017-12-26 00:28:34', '40', '1');
INSERT INTO `topic` VALUES ('5119', '26', '4', 'RISC主要性能及特性？', '4f60b1e1-994e-4af9-8bd7-af96588590be.', null, null, null, null, null, null, '精简指令集，RISC微处理器不仅精简了指令系统，采用超标量和超流水线结构；它们的指令数目只有几十条，却大大增强了并行处理能力。性能特点一：由于指令集简化后，流水线以及常用指令均可用硬件执行；\r\n性能特点二：采用大量的寄存器，使大部分指令操作都在寄存器之间进行，提高了处理速度；\r\n性能特点三：采用缓存—主机—外存三级存储结构，使取数与存数指令分开执行，使处理器可以完成尽可能多的工作，且不因从存储器存取信息而放慢处理速度。', '', '0', '2017-12-26 00:28:37', '4', '1');
INSERT INTO `topic` VALUES ('5120', '26', '4', '在嵌入式系统中，所谓的北桥指的是什么？', 'ce637465-412b-4864-ae94-95f8f056e32d.', null, null, null, null, null, null, '“南北桥”主要适用于INTEL的X86结构体系，和嵌入式系统没有直接的关联。“北桥”主要指母板上CPU和内存等高速核心部分的控制和通讯桥接芯片，而“南桥”则指和扩展总线和IO的控制和通讯桥接芯片。所谓南北的涵义主要体现在其芯片组在母板上的位置（相对于CPU）——上北下南。在嵌入式系统中通常叫AHB/APB\r\n实际上就是高速总线和低速总线', '', '0', '2017-12-26 00:29:08', '4', '1');
INSERT INTO `topic` VALUES ('5121', '26', '4', '说说轮巡任务调度与抢占式任务调度的区别？', '5ab13719-8c66-49d7-bc76-6c196ed6ad9f.', null, null, null, null, null, null, '轮询任务调度与抢占式任务调度的区别在于抢占式调度可以因为优先级高的任务抢占CPU，而轮询的不能。', '', '0', '2017-12-26 00:29:28', '4', '1');
INSERT INTO `topic` VALUES ('5122', '26', '1', '要使冷迁移正常运行，虚拟机必须_____', '817a62c4-9510-4c5a-8a09-97c7b6336973.', '处于关闭状态', '满足 VMotion 的所有要求', '可以在具有相似的 CPU 系列和步 进功能的系统之间移动。', '仍位于冷迁移之前的同 一个数据存储中', '', '', 'A', '', '0', '2017-12-26 00:29:44', '45', '1');
INSERT INTO `topic` VALUES ('5123', '26', '4', '什么叫存储器高速缓存技术，其主要目的？', 'eb8350c4-3001-4c30-b9bf-9fc10f860cfd.', null, null, null, null, null, null, '：高速缓存英文是CACHE。一种特殊的存储器子系统，其中复制了频繁使用的数据，以利于CPU快速访问。', '', '0', '2017-12-26 00:29:45', '4', '1');
INSERT INTO `topic` VALUES ('5124', '26', '1', 'usermod -s /bin/bash test命令的含义是什么', 'b9d98250-d711-4d50-85fc-9da0e535581f.', ' 将test用户的登录shell更改为bash\r\n', '为test用户建立一个shell', ' 为test命令的执行shell更改为bash\r\n', ' 以上都不对\r\n', '', '', ' A\r\n', '', '0', '2017-12-26 00:29:46', '40', '1');
INSERT INTO `topic` VALUES ('5125', '26', '4', '谈谈Volatile与Register修饰符的作用？', '5487355a-e944-4fc9-b638-6c5eb0cb92e8.', null, null, null, null, null, null, 'VOLATILE是纯程序与在硬件上运行的程序的最大区别，在LINUX系统中编译时必须进行优化的，加上VOLATILE关键词的变量是让编译器不对其优化。', '', '0', '2017-12-26 00:30:15', '4', '1');
INSERT INTO `topic` VALUES ('5126', '26', '1', '显示系统上所有已登录的用户的命令是哪些 ', '586a3787-4eb4-44f3-8004-ebd4c9536dc5.', 'W', ' whoami\r\n', 'whoareyou\r\n', ' who\r\n', '', '', 'AB\r\n', '', '0', '2017-12-26 00:30:21', '40', '1');
INSERT INTO `topic` VALUES ('5127', '26', '1', '以下哪条命令可以用来显示当前用户的有效ID', '1f2cb2d5-26a6-40e4-9945-36a2784d4f94.', 'uid', 'gid', 'guid', 'id', '', '', ' D\r\n', '', '0', '2017-12-26 00:30:49', '40', '1');
INSERT INTO `topic` VALUES ('5128', '26', '4', 'IRQ和FIQ有什么区别，在CPU里面是怎么做的？', '07f3007c-a0b3-44ae-8680-1073a349e05d.', null, null, null, null, null, null, 'IRQ是普通中断，FIQ是快速中断，在ARM体系中，对于快速中断模式，有8个独立的寄存器，转换模式时无需将数据保存起来，而IRQ则不能，这样FIQ的速度就大大地提高了', '', '0', '2017-12-26 00:31:00', '4', '1');
INSERT INTO `topic` VALUES ('5129', '26', '4', 'int *a;\r\nchar *b;\r\na和 b本身是什么类型？', '0dc80642-6624-4c75-991c-43e9e85b5a12.', null, null, null, null, null, null, 'A是指向整型的指针，B是指向字符型的指针。', '', '0', '2017-12-26 00:31:27', '4', '1');
INSERT INTO `topic` VALUES ('5130', '26', '1', ' 以下哪条命令可以报告当前网络的所有状态 ', '4fc4ad8d-0bda-49b9-86da-eecbd1556834.', 'netstat', 'ifconfig', 'ipconfig', 'ping', '', '', 'A', '', '0', '2017-12-26 00:32:09', '40', '1');
INSERT INTO `topic` VALUES ('5131', '26', '4', '网站的安全，如何网站注马，如何防网站攻击 ？', '81073e73-a6a5-43a6-a5c4-f035189aa1b8.', null, null, null, null, null, null, '信息安全问题刻不容缓，作为运维人员，需要遵行运维安全准则，同时站在攻击者的角度思考问题，不放过一切可能存在的漏洞和威胁。网站攻击主要分为内网攻击和外网攻击。', '', '0', '2017-12-26 00:32:14', '6', '1');
INSERT INTO `topic` VALUES ('5132', '26', '4', '任务调度的机制？', '8ccae8a6-9cd1-4360-94e2-947fe2763eba.', null, null, null, null, null, null, '从调度策略、调度时机、调度步骤来讲。', '', '0', '2017-12-26 00:32:33', '4', '1');
INSERT INTO `topic` VALUES ('5133', '26', '4', 'linux的DNS如何搭建', 'e2a1f6ce-0545-4efd-9512-58095ecd4226.', null, null, null, null, null, null, '（1）选择YUM 安装,YUM -Y INSTALL BIND \r\n\r\n（2）VI /ETC/NAME.CONF ;编辑配置文件\r\n\r\nZONE \"TEST.COM\" { ##配置正向区域\r\n\r\nTYPE MASTER; ##配置类型为主域名服务器\r\n\r\nFILE \"TEST.COM.ZONE\"; ##指定区域配置文件\r\n\r\n}\r\n\r\n##配置反向区域\r\n\r\n（3）VI /VAR/NAMED/TEST.COM.ZONE 编辑区域配置文件\r\n\r\n可以先将LOCALHOST.ZONE拷贝到该文件中，避免出错。\r\n\r\n然后配置主机记录\r\n\r\n（4）最后启动服务，SERVICE BIND START\r\n\r\n（5）客户端编辑/ETC/RESOLV.CONF，写入NAMESERVER 【DNS服务器的IP】', '', '0', '2017-12-26 00:32:48', '6', '1');
INSERT INTO `topic` VALUES ('5134', '26', '1', '下面netstat的哪个参数可以显示系统上正在监听的套接字 ', 'c993e5ed-d9a7-45bb-89a4-85b5067e00d2.', '1', 'p', 'n', '以上都不对\r\n', '', '', 'A\r\n', '', '0', '2017-12-26 00:32:55', '40', '1');
INSERT INTO `topic` VALUES ('5135', '26', '4', 'LVS 常用的两种模式，LVS一般跑的什么应用，如WEB几台服务器', '33602f17-7a1b-415e-b098-d975afb2b0a5.', null, null, null, null, null, null, 'NAT/DR，LVS一般用来做数据库的负载均衡器。', '', '0', '2017-12-26 00:33:14', '6', '1');
INSERT INTO `topic` VALUES ('5136', '26', '4', 'TCP/IP建立连接的过程?(3-way shake)', 'f0878209-3f36-450d-83f5-fb32b8dd4a48.', null, null, null, null, null, null, '在TCP/IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。\r\n　　第一次握手：建立连接时，客户端发送SYN包(SYN=J)到服务器，并进入SYN_SEND状\r\n态，等待服务器确认；\r\n第二次握手：服务器收到SYN包，必须确认客户的SYN（ACK=J+1），同时自己也发送一个\r\nSYN包（SYN=K），即SYN+ACK包，此时服务器进入SYN_RECV状态；\r\n　　第三次握手：客户端收到服务器的SYN＋ACK包，向服务器发送确认包ACK(ACK=K+1)\r\n，此包发送完毕，客户端和服务器进入ESTABLISHED状态，完成三次握手。\r\n23.ICMP是什么协议,处于哪一层?', '', '0', '2017-12-26 00:33:28', '4', '1');
INSERT INTO `topic` VALUES ('5137', '26', '1', '下面netstat的哪个参数可以显示系统上正在监听的套接字，及每个套接字所属的程序名称和进程号', 'ce96be2b-2757-4aaa-8f68-57773eae5e88.', '1p', '1', 'np', '以上都不对\r\n', '', '', ' A\r\n', '', '0', '2017-12-26 00:33:31', '40', '1');
INSERT INTO `topic` VALUES ('5138', '24', '4', 'squid的服务器放在负载均衡调度器的前面，还是后面？', '84a46bd6-466a-4940-8410-d193f5d6bad5.', null, null, null, null, null, null, '当然是前面，如果SQUID有，我干嘛需要调度器选取主机帮我处理页面\r\n\r\n', '', '0', '2017-12-26 00:33:42', '6', '1');
INSERT INTO `topic` VALUES ('5139', '26', '4', '.ICMP是什么协议,处于哪一层?', '906a4523-f953-4e2c-9568-18ac3e22f265.', null, null, null, null, null, null, 'INTERNET控制报文协议，处于网络层', '', '0', '2017-12-26 00:33:43', '4', '1');
INSERT INTO `topic` VALUES ('5140', '26', '1', '准备新虚拟机的正确操作顺序是？ ', '3a1ee7b3-633b-4193-84e7-2eca105ee788.', '创建虚拟机、安装操作系统、加载 VMware Tools、安装补丁程序', '创建虚拟机、安装 装补丁程序、安装操作系统、加载 VMware Tools ', '创建虚拟机、加载 VMware Tools、安装操作系统、安装补丁程序', '安装操作系统、创建虚拟机、安装补丁程序、加载 VMware Tools', '', '', 'A', '', '0', '2017-12-26 00:34:00', '45', '1');
INSERT INTO `topic` VALUES ('5141', '26', '1', '在Linux下用来查看网络设备信息所使用的命令是哪个', 'ea47fa86-c1da-498a-9d31-67780b425148.', 'ping', 'ipconfig', 'ifconfig', 'netstat', '', '', ' C\r\n', '', '0', '2017-12-26 00:34:10', '40', '1');
INSERT INTO `topic` VALUES ('5142', '24', '4', '请描述使用那些命令可以查看linux系统当前压力', '248fce00-3084-4f25-bb54-e6d7b058fc5a.', null, null, null, null, null, null, 'IOSTAT、AB、HTTPERF、HDPARM -T /DEV/SDA、JMETER压力测试APACHE工具，MYSQLSLAP的压力测试MYSQL工具', '', '0', '2017-12-26 00:34:16', '6', '1');
INSERT INTO `topic` VALUES ('5143', '18', '4', '如何查询在前三天ssh登陆过的用户以及IP ', '0ba53b4d-0c51-4d28-bc1e-2252adc9ee54.', null, null, null, null, null, null, 'LAST命令或者说CAT /VAR/LOG/LASTLOG \r\n\r\n', '', '0', '2017-12-26 00:34:35', '6', '1');
INSERT INTO `topic` VALUES ('5144', '26', '1', '手动为一块网卡指定IP地址并激活需要用到的参数有哪些 ', '8ef49f3a-c3a5-4689-9276-836f8dea3a65.', '[ipaddress]\r\n', 'up', 'ifconfig', '[devices name]\r\n', '', '', 'ABD\r\n', '', '0', '2017-12-26 00:34:44', '40', '1');
INSERT INTO `topic` VALUES ('5145', '24', '4', '查看当前系统某一硬件的驱动版本。比如网卡  ', 'f7c5c7f8-2b97-4bac-b1f5-6300c1a73bc4.', null, null, null, null, null, null, 'DMESG |GREP \"NETWORK\"或者说DMESG |GREP ETH0 \r\n\r\n', '', '0', '2017-12-26 00:34:57', '6', '1');
INSERT INTO `topic` VALUES ('5146', '26', '1', '在Linux下为eth0指定IP为192.168.1.2并激活eth0设备所使用的命令是哪个', 'a696ab5f-b3e5-44e5-9cae-9eb5a51fff5e.', 'ipconfig eth0 up 192.168.1.2\r\n', ' ifconfig eth0 up 192.168.1.2\r\n', 'ifconfig 192.168.1.2 up eth0\r\n', ' ipconfig 192.168.1.2 up eth0\r\n', '', '', ' B\r\n', '', '0', '2017-12-26 00:35:28', '40', '1');
INSERT INTO `topic` VALUES ('5147', '26', '1', '下列哪一个电源状况命令仅在 VMware Tools 安装后才可用？', '8ceb00ed-c202-4ec1-9fd1-fa76fb5c1b29.', '开机', '重置', '重新启动客户机', '挂起', '', '', 'C', '', '0', '2017-12-26 00:35:42', '45', '1');
INSERT INTO `topic` VALUES ('5148', '26', '1', '在Linux下停用网络设备eth0的命令是哪个\r\n', '4ba639e1-a999-4f96-8f6c-5bd29f0819ff.', ' ipconfig eth0 down\r\n', 'ipconfig eth0 stop\r\n', 'ifconfig eth0 down\r\n', 'ifconfig eth0 stop\r\n', '', '', ' D', '', '0', '2017-12-26 00:36:03', '40', '1');
INSERT INTO `topic` VALUES ('5149', '26', '1', '向192.168.1.0/24网段的广播地址发送ICMP报文的命令是哪个', '81879709-c0f7-4351-899b-4728f645ee66.', 'ping 192.168.1.255\r\n', 'ping 192.168.1.0\r\n', 'ping -b 192.168.1.0\r\n', 'ping -b 192.168.1.255\r\n', '', '', ' D\r\n', '', '0', '2017-12-26 00:36:52', '40', '1');
INSERT INTO `topic` VALUES ('5150', '18', '4', '解释该命令的含义： zcat test.gz|grep “x6game”&gt; ~/log.txt &gt; /dev/null 2 &gt;&1 &', '9da07e76-5793-457c-83f3-27537c850b97.', null, null, null, null, null, null, '用ZCAT命令查看TEST.GZ这个压缩包的内容，并过滤出含有”X6GAME“的字样打印出整行到家目录的LOG.TXT，并把结果（无论正确输出还是错误输出）都放入黑洞（回收站）中，同时放在后台执行这个命令\r\n\r\n##还可以用&>/DEV/NULL这种格式', '', '0', '2017-12-26 00:37:11', '6', '1');
INSERT INTO `topic` VALUES ('5151', '26', '1', '向192.168.1.2的地址发送10次ICMP报文使用哪条命令', 'fd9a147e-a280-48de-98b3-e16caa542a87.', ' ping -b 10 192.168.1.2\r\n', 'ping -c 10 192.168.1.2\r\n', ' ping 10 192.168.1.2\r\n', ' 以上都不是\r\n', '', '', ' B\r\n', '', '0', '2017-12-26 00:37:28', '40', '1');
INSERT INTO `topic` VALUES ('5152', '26', '1', ' 在Linux下配置网关使用的命令是哪个', '7c4327c1-127a-4fde-802e-f6ffb10ea447.', 'netstat\r\n', 'ping', 'route', 'router', '', '', ' C\r\n', '', '0', '2017-12-26 00:37:59', '40', '1');
INSERT INTO `topic` VALUES ('5153', '26', '5', '用Java写一个冒泡排序。', null, null, null, null, null, null, null, null, '冒泡排序几乎是个程序员都写得出来，但是面试的时候如何写一个逼格高的冒泡排序却不是每个人都能做到', '0', '2017-12-26 00:38:13', '62', '1');
INSERT INTO `topic` VALUES ('5154', '26', '1', '模板与虚拟机的区别是什么？', 'e375eed6-424c-427e-a7c3-6fa59d885c8e.', '模板的虚拟磁盘文件始终以稀疏格式存储。', '模板无法启动', '虚拟机和模板必须存储在不同的数据存储中', '虚拟机可以转换为模板，而模板不可以转换为虚拟机', '', '', 'B', '', '0', '2017-12-26 00:38:30', '45', '1');
INSERT INTO `topic` VALUES ('5155', '26', '1', '为系统添加一个默认网关使用的命令是哪条', 'd1491c24-2466-4cf8-afc6-7bd18ac0e15c.', ' route add default gw [ipaddress]\r\n', ' router add default gw [ipaddress]\r\n', 'route make default gw [ipaddress]\r\n', 'router make default gw [ipaddress]\r\n', '', '', ' A\r\n', '', '0', '2017-12-26 00:38:34', '40', '1');
INSERT INTO `topic` VALUES ('5156', '26', '1', '在系统中删除默认网关使用的命令是哪个', '0fb9e43f-f15f-4895-bdcf-e0f4058fea17.', ' router del default\r\n', 'route del default\r\n', ' roure rm default\r\n', '以上都不是\r\n', '', '', ' B\r\n', '', '0', '2017-12-26 00:39:09', '40', '1');
INSERT INTO `topic` VALUES ('5157', '18', '4', '一台web服务器，上边跑的linux+apachce+tomcat+mysql，如果有客户投诉上网站速度慢，请说出你要查找原因的思路，写出详细步骤  ', 'd256aff3-55d5-42d5-afaf-18568edd1047.', null, null, null, null, null, null, '（1）自己也要测试下，判断是不是客户端网络拥塞问题，从而定位到服务端\r\n\r\n（2）查看系统负载，到底什么进程占用率较高的CPU使用率\r\n\r\n（3）是不是应对不了大并发连接，先测试PV，然后用AB命令或HTTPERF测试WEB服务器能承受的压力，适当修改配置参数\r\n\r\n（4）是不是PHP的相应SQL代码效率太低，导致响应慢\r\n\r\n（5）MYSQL响应慢，考虑瓶颈是磁盘IO率，扩充硬件，使用固态硬盘或RAID阵列\r\n\r\n（6）另外，没有做集群的话，建议花点成本做集群或负载均衡', '', '0', '2017-12-26 00:39:13', '6', '1');
INSERT INTO `topic` VALUES ('5158', '18', '4', '说出数据库的几种备份方法，并说出优缺点，你用过哪几种 ', '7ae38f0c-4e53-4dac-909b-cbb010464e03.', null, null, null, null, null, null, '主数据备份、事务日志备份、差异备份', '', '0', '2017-12-26 00:39:32', '6', '1');
INSERT INTO `topic` VALUES ('5159', '26', '1', '显示当前主机的主机名所使用的命令是哪个', '98ffb316-0ab3-46b9-80f6-93082d70cebe.', 'hosts', 'host', 'hostname', 'host name\r\n', '', '', ' C\r\n', '', '0', '2017-12-26 00:39:56', '40', '1');
INSERT INTO `topic` VALUES ('5160', '18', '4', 'raid5做过吗', '450be0e2-e60e-4c2c-85b7-7294db27fda5.', null, null, null, null, null, null, '使用MDADM命令，配置文件RAIDTAB，逻辑设备为/DEV/MD0', '', '0', '2017-12-26 00:40:21', '6', '1');
INSERT INTO `topic` VALUES ('5161', '18', '4', 'raid5最少需要几块盘？10块盘最多做几个raid5？10块盘做2个raid5贡献方面是几块', '6c0f75b9-60f5-4c49-b63b-48c39ed565e2.', null, null, null, null, null, null, '最少3块。至少1块用来做奇偶校验，只要总容量不超过2TB即可。', '', '0', '2017-12-26 00:40:48', '6', '1');
INSERT INTO `topic` VALUES ('5162', '18', '4', '文件属性744的含义', '836c3481-2e9a-43b2-a148-a6ecf73b3956.', null, null, null, null, null, null, '7：文件所有者具有读写可执行权限、44：文件所有者所属组和其他用户具有读权限，没有写和可执行权限', '', '0', '2017-12-26 00:41:35', '6', '1');
INSERT INTO `topic` VALUES ('5163', '18', '4', 'Unix中su与su – 的区别', '7e5d441a-ed2b-40f3-a8b1-d0b6b6c12f85.', null, null, null, null, null, null, 'SU只能获得ROOT的执行权限，不能获得环境变量 而SU -是切换到ROOT并获得ROOT的环境变量及执行权限  ', '', '0', '2017-12-26 00:41:52', '6', '1');
INSERT INTO `topic` VALUES ('5164', '24', '4', 'Unix中查询/opt下文件名为a的文件 ', '000ba9cf-2b05-4c9f-9f20-c5b378cd63e7.', null, null, null, null, null, null, 'FIND /OPT -NAME A -A -TYPE F ', '', '0', '2017-12-26 00:42:10', '6', '1');
INSERT INTO `topic` VALUES ('5165', '26', '1', 'DMA通道信息被保存在哪个文件中？\r\n', 'e735155c-aed4-4a28-b924-4b53c47b20ea.', '/dev/DMA\r\n', ' /etc/drimen\r\n', '/proc/iomem\r\n', '/proc/dma\r\n', '', '', 'D', '', '0', '2017-12-26 00:42:12', '40', '1');
INSERT INTO `topic` VALUES ('5166', '4', '4', 'Servlet的基本架构', '9b38d7fc-c06e-41f3-86cd-161097968d49.', null, null, null, null, null, null, 'PUBLIC CLASS SERVLETNAME EXTENDSHTTPSERVLET {\r\n\r\nPUBLIC VOID DOPOST(HTTPSERVLETREQUESTREQUEST, HTTPSERVLETRESPONSE RESPONSE) THROWS\r\n\r\nSERVLETEXCEPTION, IOEXCEPTION {\r\n\r\n}\r\n\r\nPUBLIC VOID DOGET(HTTPSERVLETREQUESTREQUEST, HTTPSERVLETRESPONSE RESPONSE) THROWS\r\n\r\nSERVLETEXCEPTION, IOEXCEPTION {\r\n\r\n}\r\n\r\n} ', '', '0', '2017-12-26 00:42:16', '62', '1');
INSERT INTO `topic` VALUES ('5167', '24', '4', 'Linux中安装软件的方式', '0b851beb-faa1-4634-832c-7c2f3f2eb5c6.', null, null, null, null, null, null, 'YUM INSTALL 、 RPM -IVH 、 源码包解压,./CONFIGURE &&MAKE &MAKE INSTALL ', '', '0', '2017-12-26 00:42:31', '6', '1');
INSERT INTO `topic` VALUES ('5168', '26', '1', '将分区/dev/hdb6格式化的命令是：\r\n', 'b1808684-c893-40a0-9657-50f7f353ddf2.', 'mkfs -t ext2 /dev/hdb6', 'format /dev/hdb6\r\n', ' format -t ext2 /dev/hdb6\r\n', 'makefile -t ext2 /dev/hdb6\r\n', '', '', 'A', '', '0', '2017-12-26 00:42:44', '40', '1');
INSERT INTO `topic` VALUES ('5169', '18', '4', ' 描述添一块磁盘到这块盘可以使用的全过程', 'a97a15f8-b918-4818-9147-f4e7e065f56d.', null, null, null, null, null, null, '（1）不加电情况下，插入硬盘。（2）开机后，用FISK -L命令可以检测硬盘已经被添加上来了（3）进行磁盘分区FDISK /DEV/SDB ，主分区、扩展分区、逻辑分区。（4）PARTPROBE加载分区表（5）MKFS.EXT4 /DEV/SDB1格式化分区，进入INODE（6）挂载MOUNT /DEV/SDB1 /MNT', '', '0', '2017-12-26 00:42:58', '6', '1');
INSERT INTO `topic` VALUES ('5170', '26', '4', '解释什么是进程互斥和共享', '23eaee30-c486-4374-a277-6f7109a83bb3.', null, null, null, null, null, null, '（1）在多道程序并发设计下，进程互斥是进程之间的间接制约关系。因为资源的共享，当一个进程进入临界区使用临界资源时，另一个进程必须等待。当使用临界资源的进程退出临界区，释放了资源后，另一个进程才会解除阻塞状态。准则：（1）空闲则进（2）忙则等待（3）有限等待\r\n\r\n（2）进程同步：是进程之间的逻辑直接制约关系，类似于生产者消费者问题，他们有一种次序等待的关系，生产者申请空位子，创造出了产品，然后释放同步锁这个大门，消费者才来进行消费产品，产品用完了以后，然后释放空位子资源，让出同步锁，生产者才又能进来。', '', '0', '2017-12-26 00:43:20', '6', '1');
INSERT INTO `topic` VALUES ('5171', '26', '1', '手工使用交换分区的命令是', '86dfb36f-e852-467d-bcfd-a0e4ce17ff85.', 'swapon\r\n', 'mkdirswap', ' swapspace=on\r\n', 'mkswap\r\n', '', '', ' A\r\n', '', '0', '2017-12-26 00:43:26', '40', '1');
INSERT INTO `topic` VALUES ('5172', '26', '1', '下列关于虚拟机快照的说法中，哪一项是正确的？', '0de94088-f012-4921-a98d-759241b29c65.', '快照作为单个文件记录，存储在虚拟机的配置目录中。', '虚拟机一次只能拍摄一张快照', '在拍摄快照过程中可以选择是否捕获虚拟机的内存状态', '只能从命令行管 理快照。', '', '', 'C', '', '0', '2017-12-26 00:43:35', '45', '1');
INSERT INTO `topic` VALUES ('5173', '18', '4', 'STP全称和作用 ', '5808c193-b742-4a10-99c2-396df9e98433.', null, null, null, null, null, null, 'STP称为生成树协议，它的作用是交换机之间逻辑上切断冗余链路，从而防止环路带来的广播风暴，同时在链路故障的情况下，激活链路，恢复网络的连通性。\r\n\r\n具体过程：选根网桥、根端口、指定端口，剩下的必然是阻塞端口。', '', '0', '2017-12-26 00:44:12', '6', '1');
INSERT INTO `topic` VALUES ('5174', '4', '4', '拦截器和过滤器的区别', 'ff50f910-1221-42d8-8645-30c2ccd1ea61.', null, null, null, null, null, null, '1\r\n\r\n、拦截器是基于\r\n\r\nJAVA\r\n\r\n反射机制的，而过滤器是基于函数回调的。\r\n\r\n2\r\n\r\n、过滤器依赖于\r\n\r\nSERVLET\r\n\r\n容器，而拦截器不依赖于\r\n\r\nSERVLET\r\n\r\n容器。\r\n\r\n3\r\n\r\n、拦截器只能对\r\n\r\nACTION\r\n\r\n请求起作用，而过滤器则可以对几乎所有请求起作用。\r\n\r\n4\r\n\r\n、拦截器可以访问\r\n\r\nACTION\r\n\r\n上下文、值栈里的对象，而过滤器不能。\r\n\r\n5\r\n\r\n、在\r\n\r\nACTION\r\n\r\n的生命周期中，拦截器可以多次调用，而过滤器只能在容器初始化时被调用一次。 ', '', '0', '2017-12-26 00:45:19', '62', '1');
INSERT INTO `topic` VALUES ('5175', '26', '1', ' 假设在一个公司的内部有一台Web服务器经常受到内部员工的抱怨，主要现象是在服务器使用高峰期经常出现服务器连接困难和连接超时的现象，可以排除服务器系统过忙，而且也有足够的内存和带宽，没有任何硬件和线路的故障，服务器日志中也没有任何错误的记录，除此之外，最有可能出现的原因是_________________________\r\n', '3c0de70c-dd45-4bc2-bfa9-10861a3c325f.', ' MinSpareServers的值设置过小\r\n', 'MaxClients的值设置过小\r\n', 'MaxRequestPerChild的值设置过小\r\n', 'StartServers的值设置过小\r\n', '', '', 'B', '', '0', '2017-12-26 00:45:20', '40', '1');
INSERT INTO `topic` VALUES ('5178', '18', '4', 'VPN的全称作用和类型？ ', 'e2be6857-ce2c-46a8-9a49-c62e1db32bab.', null, null, null, null, null, null, '虚拟专用网络，在公有网络基础上，搭建一个特殊的隧道，以达到远程访问的目的。类型：L2TP VPN，PPTP VPN ,IPSEC VPN，OPEN VPN，以及MPLS VPN', '', '0', '2017-12-26 00:47:13', '6', '1');
INSERT INTO `topic` VALUES ('5180', '26', '1', '分布式交换机体系结构从以下哪个级别驱动？', 'a137a072-bd22-418c-8842-d02dc71a9737.', '数据中心级别 ', '硬件级别', '主机级别', '虚拟机级别', '', '', 'A', '', '0', '2017-12-26 00:47:29', '45', '1');
INSERT INTO `topic` VALUES ('5181', '18', '4', 'AIX系统中PV，PP，LP，VG，LV分别代表什么 ', 'eaf5ca0e-a33e-4e8c-81f5-6fb28f7d586c.', null, null, null, null, null, null, 'PV：物理卷（PHYSICAL PARTITIONS）  PP: 物理分区（PHYSICAL PARTITIONS）  LP:逻辑分区；   VG:卷组        LV:逻辑卷', '', '0', '2017-12-26 00:47:29', '6', '1');
INSERT INTO `topic` VALUES ('5182', '26', '4', 'linux查看详细网络信息', '7af4722c-4db7-4a6e-9867-378d31e01246.', null, null, null, null, null, null, '：CAT /ETC/SYSCONFIG/NETWORK-SCRIPTS/IFCFG-ETH0 ,DMESG |GREP NETWORK ,ETHTOOL ETH0查看网络带宽', '', '0', '2017-12-26 00:47:39', '4', '1');
INSERT INTO `topic` VALUES ('5183', '4', '4', '模型驱动与属性驱动是什么 模型驱动使用时注意什么问题', '6b41e1fa-2efa-40a7-811a-76d5ccee2db9.', null, null, null, null, null, null, '模型驱动与属性驱动都是用来封装数据的。', '', '0', '2017-12-26 00:47:44', '62', '1');
INSERT INTO `topic` VALUES ('5184', '26', '1', '/tmp目录被默认设置的权限为_______________\r\n', 'e3e3e7cf-ddde-4790-8a7a-efcfbffaa57e.', '0777\r\n', '0755', '1777', '1755', '', '', 'C', '', '0', '2017-12-26 00:47:45', '40', '1');
INSERT INTO `topic` VALUES ('5185', '24', '4', '测试abc.com的连通性命令，阻塞位置的命令 ', '9cdd8a6a-2fc6-4eaa-b040-c94afa647a07.', null, null, null, null, null, null, 'PING   TRACROUTE', '', '0', '2017-12-26 00:47:46', '6', '1');
INSERT INTO `topic` VALUES ('5186', '26', '4', '你了解那些web server  ', '34fa5e1c-91bc-449d-b6d9-37eb1e6b8ca8.', null, null, null, null, null, null, 'APACHE /NGINX /HTTPD /RESIN /IIS的WEB服务器 /LIGHTTPD', '', '0', '2017-12-26 00:47:54', '4', '1');
INSERT INTO `topic` VALUES ('5187', '24', '4', ' EXpirActive RewriteActive 的功能', '18e6846a-7af6-4d53-b834-6d830c49f98f.', null, null, null, null, null, null, 'NGINX.CONF中的东西', '', '0', '2017-12-26 00:48:01', '6', '1');
INSERT INTO `topic` VALUES ('5188', '26', '4', '测试过两种服务器吗，多少次并发，用什么测试的 ', '7006b33a-307f-4eb9-b84f-f1f74aa5f82b.', null, null, null, null, null, null, 'AAPCHE: AB /  HTTPERF /JMETER压力测试APACHE工具\r\nMYSQL: MYSQLSLAP的压力测试MYSQL工具', '', '0', '2017-12-26 00:48:10', '4', '1');
INSERT INTO `topic` VALUES ('5189', '18', '4', 'ftp的两种模式和流程', 'e575041d-b7e4-4270-b438-27644660a352.', null, null, null, null, null, null, '主动模式和被动模式。', '', '0', '2017-12-26 00:48:12', '6', '1');
INSERT INTO `topic` VALUES ('5190', '4', '4', 'Struts2是怎样进行值封装的？', 'bb039558-52f4-412c-bbde-27b890f622f5.', null, null, null, null, null, null, 'STRUTS2的值封装实际上是采用了OGNL表达式.', '', '0', '2017-12-26 00:48:17', '62', '1');
INSERT INTO `topic` VALUES ('5191', '26', '1', '如果在Apache服务器中需要使用/usr/local/lib/icons/下的gif文件，那么最简单的方法是________________\r\n', 'f4f32ef5-0fdb-41de-ba42-f14000789498.', ' 在httpd.conf文件中使用符号链接\r\n', '在httpd.conf文件中添加Alias /image /usr/local/lib/icons\r\n', '在httpd.conf文件中使用重定向\r\n', '在$DOCUMENT_ROOT下创建一个image目录，然后将文件复制到此目录下\r\n', '', '', 'B', '', '0', '2017-12-26 00:48:19', '40', '1');
INSERT INTO `topic` VALUES ('5192', '18', '4', '修改ip DNS 主机名', '6054611e-c041-4e2b-9bf8-dad1df54ba7d.', null, null, null, null, null, null, 'IFCONFIG ETH0 192.168.1.1 NETMASK 255.255.255.0 ;ECHO \"NAMESERVER \">>/ETC/RESOLV.CONF ,HOSTNAME YUEHONGCAI', '', '0', '2017-12-26 00:48:27', '6', '1');
INSERT INTO `topic` VALUES ('5193', '26', '2', 'mysql从服务器down了之后怎么办 ', 'b1194700-4125-4b20-9fc1-ab1c07e186c7.', null, null, null, null, null, null, '正确', '）最好能短期内排除故障，如果排除不了，就从库的数据导出来，换一台slave顶上\r\n主键冲突导致的主从无法同步情况，把bin-log日志格式改为binlog_format= mixed', '0', '2017-12-26 00:48:31', '4', '1');
INSERT INTO `topic` VALUES ('5194', '26', '1', '安装Linux系统的过程中，在创建一个新的分区的时候，若此时已经存在了4个分区，当我们再次创建第5个分区的时候，发现创建失败，那么最有可能的情况是________________\r\n', '13199c36-af1a-4935-a410-eb37ed7e764f.', ' 硬盘无法创建超过4个分区\r\n', ' 需要最后创建swap分区\r\n', ' 已经创建了4个主分区\r\n', ' Linux不能安装在超过4个分区硬盘上\r\n', '', '', 'C', '', '0', '2017-12-26 00:48:55', '40', '1');
INSERT INTO `topic` VALUES ('5195', '26', '1', '如果有一台机器启动着Web服务器，Ftp服务器和网关时，为什么不能让此机器做为日志服务器________________\r\n', '19db9d62-44a1-4499-ac1b-a8e8a53cbda3.', '远程记录日志会降低网络的性能\r\n', '系统日志服务会降低Web服务器的性能\r\n', '在Web服务器宕机的时候，日志信息可能会丢失\r\n', '如果机器上的服务不够安全，那么一个攻击者可以轻易通过日志中的相关信息来追踪我们所有的主机\r\n', '', '', 'D', '', '0', '2017-12-26 00:49:48', '40', '1');
INSERT INTO `topic` VALUES ('5196', '26', '1', '以下哪些是虚拟机的优势？（选择3项）', 'a4d03473-3ebd-4436-8805-8fb789f60a12.', '封装性', '隔离性', '兼容性', '独立于硬件', '', '', 'ABC', '', '0', '2017-12-26 00:50:07', '45', '1');
INSERT INTO `topic` VALUES ('5197', '4', '4', '什么是拦截器', '4edf06bd-efeb-4ca7-a052-aad927ebefca.', null, null, null, null, null, null, '在访问类的某个方法或者属性之前执行，拦截的是ACTION的请求，进行拦截然后在方法的执行前或者之后加入某些操作。', '', '0', '2017-12-26 00:50:10', '62', '1');
INSERT INTO `topic` VALUES ('5198', '26', '1', '如果将系统中的/，/usr，/home，/var目录进行单独的分区，哪一个分区可以被挂载为只读_____________\r\n', 'e9eb804b-d574-44ea-b4fd-1c76aa8aea0b.', ' /\r\n', '/usr\r\n', ' /home\r\n', '/var\r\n', '', '', 'B', '', '0', '2017-12-26 00:50:27', '40', '1');
INSERT INTO `topic` VALUES ('5199', '18', '4', 'squid的流程', '8fa530f5-fef9-4965-a84a-c533a7ee13b4.', null, null, null, null, null, null, '参考文档：HTTP://MACHAEL.BLOG.51CTO.COM/829462/571223/', '', '0', '2017-12-26 00:50:44', '6', '1');
INSERT INTO `topic` VALUES ('5200', '26', '4', 'DNS的A记录 SOA记录 MX记录 ', '76eabbba-bd78-44a5-bcb9-905144cc21d2.', null, null, null, null, null, null, '主机记录、起始授权记录、邮件交换记录，还有别名记录和NS名称记录', '', '0', '2017-12-26 00:50:46', '4', '1');
INSERT INTO `topic` VALUES ('5201', '26', '1', '下面的那类系统文件可以被不同的Linux发行版通过NFS进行共享_____________\r\n', '7b779986-a64d-4850-97d9-28a6a14cf390.', '/usr\r\n', '/usr/bin\r\n', '/usr/share\r\n', '/usr/lib\r\n', '', '', 'C', '', '0', '2017-12-26 00:50:56', '40', '1');
INSERT INTO `topic` VALUES ('5202', '18', '4', 'CDN全称及配置和原理 ', '786eecda-3587-4967-9b20-2f7f890a0d18.', null, null, null, null, null, null, 'CDN：内容分发网络 \r\n\r\n原理：1.用户向浏览器输入WWW.WEB.COM这个域名，浏览器第一次发现本地没有DNS缓存，则向网站的DNS服务器请求；\r\n\r\n  2.网站的DNS域名解析器设置了CNAME，指向了WWW.WEB.51CDN.COM,请求指向了CDN网络中的智能DNS负载均衡系统；\r\n\r\n  3.智能DNS负载均衡系统解析域名，把对用户响应速度最快的IP节点返回给用户；\r\n\r\n  4.用户向该IP节点（CDN服务器）发出请求；\r\n\r\n  5.由于是第一次访问，CDN服务器会向原WEB站点请求，并缓存内容；\r\n\r\n  6.请求结果发给用户\r\n\r\n参考文档：HTTP://BLOG.CSDN.NET/COOLMEME/ARTICLE/DETAILS/9468743\r\n\r\n', '', '0', '2017-12-26 00:51:03', '6', '1');
INSERT INTO `topic` VALUES ('5203', '26', '4', 'cname记录是什么，怎么配置 ', '6ade9625-6b21-4e16-a947-2db40881446e.', null, null, null, null, null, null, '别名记录。在/VAR/NAMED/区域配置的配置文件中，最后几行加入MAIL IN  CNAME SERVER1或者WWW IN CNAME SERVER2 \r\n文档：HTTP://WWW.LINUXIDC.COM/LINUX/2013-11/92320.HTM\r\n', '', '0', '2017-12-26 00:51:03', '4', '1');
INSERT INTO `topic` VALUES ('5204', '26', '4', 'memcache放在哪  ', '01b24998-f1cb-4723-ad6c-3206281ec5a9.', null, null, null, null, null, null, '跟大多数缓存服务器原理相同，当然是放在最前端。', '', '0', '2017-12-26 00:51:20', '4', '1');
INSERT INTO `topic` VALUES ('5205', '18', '4', 'NAT和DR分别用于那种网络环境？', 'f51dfc53-45e2-46e3-85b3-dfa672c1bc73.', null, null, null, null, null, null, 'NAT既适合公网环境又适合私有网络环境，DR只能用来私有网络环境', '', '0', '2017-12-26 00:51:25', '6', '1');
INSERT INTO `topic` VALUES ('5206', '26', '1', 'VMXNET3 的正确定义是什么：', '47a0786a-9f0a-472b-a2bd-84da0c596dc7.', '用于隔离位于同一个已隔离VLAN 中的各虚拟机间的流量。 ', '用于指定分布式交换机中每个成员端口的端口配置选项', ' VMXNET3 是通过VMware Tools 实现的第三代模拟虚拟网卡', '可让虚拟机中的设备驱动程序绕过虚拟化层，直接访问和控制物理设备。', '', '', 'C', '', '0', '2017-12-26 00:51:43', '45', '1');
INSERT INTO `topic` VALUES ('5208', '26', '1', ' 如果你的系统连接Internet失败，但是可以访问本地网络中的计算机，下面是路由表中的信息\r\nDestination Gateway Genmask Flags Metric Ref Use lface\r\n10.0.2.0 0.0.0.0 255.255.255.0 U 0 0 0 eth0\r\n10.0.3.0 0.0.0.0 255.255.255.0 U 0 0 0 eth1\r\n127.0.0.0 0.0.0.0 255.0.0.0 U 0 0 0 lo\r\n出现此类现象的原因是________________\r\n', '5fc0218e-cafa-4a64-a85f-cbac3a3d03ac.', '子网掩码错误\r\n', '在同一子网中有太多的默认路由信息\r\n', ' 没有默认路由\r\n', '网关地址不正确\r\n', '', '', 'C', '', '0', '2017-12-26 00:51:53', '40', '1');
INSERT INTO `topic` VALUES ('5209', '26', '4', ' NFS遇到多人同时操作一个文件时，怎么办 ', 'a2798ee4-66c4-409e-af3d-e83e92ac92bb.', null, null, null, null, null, null, '：/ETC/INIT.D/NFSLOCK 这个NFS锁是为了防止多个客户端同时对同一个文件进行操作而产生的锁机制\r\n参考文档： HTTP://WWW.JB51.NET/ARTICLE/41600.HTM', '', '0', '2017-12-26 00:51:55', '4', '1');
INSERT INTO `topic` VALUES ('5210', '18', '4', '一台新的LINUX系统，怎么调优操作', 'a47b451e-38e3-4b19-bf75-5cd093f03e47.', null, null, null, null, null, null, '硬件、服务编译安装、配置参数', '', '0', '2017-12-26 00:52:05', '6', '1');
INSERT INTO `topic` VALUES ('5211', '4', '4', 'ActionContext是用来干什么的', 'c10b4c29-f3e7-4a33-95ac-12e2df35b4e0.', null, null, null, null, null, null, 'ACTIONCONTEXT是ACTION的上下文。', '', '0', '2017-12-26 00:52:07', '62', '1');
INSERT INTO `topic` VALUES ('5212', '18', '4', '在机房做过服务器上架么，对哪种服务器熟', '3ab58800-f521-4245-83e5-a70aa57bce9d.', null, null, null, null, null, null, '一般来说对CENTOS7和乌班图不熟悉，其他还行', '', '0', '2017-12-26 00:52:22', '6', '1');
INSERT INTO `topic` VALUES ('5213', '26', '4', ' cacti是怎样监控的  ', '46ddf3c7-5532-4bca-bec8-770e1a2edf51.', null, null, null, null, null, null, 'RRD-TOOL存储和更新数据，SNMP提取数据，监控方式是轮询', '', '0', '2017-12-26 00:52:23', '4', '1');
INSERT INTO `topic` VALUES ('5214', '26', '4', '怎样监控apache，mysql，监控什么 ', 'c1ae0c75-3609-4556-bd98-5a00222e5f03.', null, null, null, null, null, null, '监控软件如NAGIOS/ZABBIX，或者SHELL脚本。服务的存活状况，网络带宽、CPU的使用率、磁盘IO率', '', '0', '2017-12-26 00:52:39', '4', '1');
INSERT INTO `topic` VALUES ('5215', '18', '4', '如何检测Apache是否达到服务器极限，如何解决 ', '3e9e2838-8ed5-47e0-b618-05f396e181a1.', null, null, null, null, null, null, '利用HTTPERF结合AUTOBENCH可以很方便的测试出单台服务器的极限并发数\r\n\r\n参考文档：HTTP://WWW.360DOC.COM/CONTENT/16/0805/15/35594620_580995419.SHTML', '', '0', '2017-12-26 00:52:41', '6', '1');
INSERT INTO `topic` VALUES ('5216', '4', '4', 'Spring的aop你怎样实现?', 'cf1d9d6b-76fa-4585-898b-9e6b457bfb68.', null, null, null, null, null, null, '用动态代理和CGLIB实现,有接口的用动态代理,无接口的用CGLIB', '', '0', '2017-12-26 00:52:59', '62', '1');
INSERT INTO `topic` VALUES ('5217', '18', '4', ' 在架构中如何避免单点故障。  ', 'a09cd8df-cd16-4bc1-9117-fa5d5bcd7a13.', null, null, null, null, null, null, '单点故障就是因为某一节点挂了，导致全网瘫痪的情况。一般都是冗余备份或者KEEPALIVED', '', '0', '2017-12-26 00:53:17', '6', '1');
INSERT INTO `topic` VALUES ('5218', '26', '4', ' squid怎么样查看运行状态，内存使用情况', 'acedd08f-e323-40ee-b33c-b96a193fca7e.', null, null, null, null, null, null, '：/USR/LOCAL/SQUID/BIN/SQUIDCLIENT -P 80 MGR:INFO  ；SQUIDCLIENT -P 80 MGR:MEM    ##MGR:MANNGER管理者', '', '0', '2017-12-26 00:53:36', '4', '1');
INSERT INTO `topic` VALUES ('5219', '26', '4', '写Iptables策略时,针对web要注意些什么? ', 'cf01b176-d0c1-4767-a751-51738ba5f2fa.', null, null, null, null, null, null, '别把自己关在了外面，对22端口处于规则的第一列，并且允许。', '', '0', '2017-12-26 00:53:55', '4', '1');
INSERT INTO `topic` VALUES ('5220', '4', '4', 'Spring在SSH起什么作用', 'bfc249d4-c5be-4952-a1c9-8641be9f7418.', null, null, null, null, null, null, '为大部分框架提供模版,常见的核心类提供初始化,并且整合三层框架', '', '0', '2017-12-26 00:54:05', '62', '1');
INSERT INTO `topic` VALUES ('5221', '26', '4', ' 文件同步rsync和scp优缺？ ', 'ce44423f-7002-4466-a413-b6d056fcaf2c.', null, null, null, null, null, null, '：（1）SCP是把文件全部复制过去，当文件修改后还是把所有文件复制过去，RSYNC第一次是把所有文件同步过去，当文件修改后，只把修改的文件同步过去。\r\n（2）RSYNC+INOTIFY能实现实时同步，SCP不能实时，而且需要输入密码\r\n（3）用RSYNC做文件的复制要比SCP的速度快', '', '0', '2017-12-26 00:54:14', '4', '1');
INSERT INTO `topic` VALUES ('5222', '18', '4', 'Shell你了解多少，怎么实现一个文件的最后一行。', '7904d29a-160c-4917-a98b-9703c1d808f5.', null, null, null, null, null, null, 'TAIL -1 FILENAM', '', '0', '2017-12-26 00:54:28', '6', '1');
INSERT INTO `topic` VALUES ('5223', '26', '4', ' linux系统安全要考虑些什么？ ', '014f2a0b-7724-43de-8f4c-4b972789b189.', null, null, null, null, null, null, '：（1）从IPTABLES-TCP WRAPPERS-具体服务本身的身份验证-SELINUX\r\n（2）保持最新的KERNEL，使用入侵检测系统（SNORT）或者入侵保护系统，购买硬件防火墙如天泰、华赛\r\n（3）设定用户账号的安全等级，比如STICKY位\r\n（4）限制超级用户的权利，禁止ROOT远程登录', '', '0', '2017-12-26 00:54:28', '4', '1');
INSERT INTO `topic` VALUES ('5224', '26', '4', 'Apache,tomcat常用的优化参数？', '99c3658a-6e6c-4b5b-ba3a-d9e173f0f9f4.', null, null, null, null, null, null, 'KEEPALIVE ON开启长连接、MAXKEEPALIVEREQUESTS一次长连接允许客户端可以发出多少次请求、 KEEPALIVETIMEOUT两次请求间隔超过这个时间就中止长连接\r\nMAXCLIENTS允许多少个客户端并发连接，HOSTNAMELOOKUPS OFF关闭DNS查询，MAXREQUESTSPERCHILD每个子进程能处理多少请求后，撤销该进程重新创建', '', '0', '2017-12-26 00:54:47', '4', '1');
INSERT INTO `topic` VALUES ('5225', '18', '4', '谈谈你了解的系统架构', '4e87126f-4772-4470-8f79-c663552955a4.', null, null, null, null, null, null, '前端2台LVS+KEEPALIVED，接着4台NGINX，然后各种应用服务器，后端2台MYSQL主从。', '', '0', '2017-12-26 00:54:48', '6', '1');
INSERT INTO `topic` VALUES ('5226', '4', '4', 'Spring的IOC和AOP你在项目中是怎么使用的？', 'ce0bd6cb-50be-4dff-8fb8-0c3a4d363f9f.', null, null, null, null, null, null, 'IOC主要来解决对象之间的依赖问题,把所有的BEAN的依赖关系通过配置文件或者注解关联起来,降低了耦合度,AOP一般用来整合框架时候都可以用得到,', '', '0', '2017-12-26 00:54:48', '62', '1');
INSERT INTO `topic` VALUES ('5227', '26', '4', '列举tomcat常用三个默认端口？', '5f1a152d-b653-41cf-bd62-32deec16a576.', null, null, null, null, null, null, '8080', '', '0', '2017-12-26 00:55:07', '4', '1');
INSERT INTO `topic` VALUES ('5228', '18', '4', ' nginx和apache的区别', '71300281-8e3e-4653-8549-ee8a9d8b3962.', null, null, null, null, null, null, 'APACHE:（1）REWRITE ，比NGINX 的REWRITE 强大 ;（2）模块超多，基本想到的都可以找到 ;（3）少BUG ，NGINX 的BUG 相对较多\r\n\r\nNGINX: （1）支持FASTCGI （2）抗并发能力强，消耗较少的内存和资源（3）轻量级WEB服务器，处理静态页面能力强 （4）NGINX支持反向代理 （5）NGINX配置简洁', '', '0', '2017-12-26 00:55:12', '6', '1');
INSERT INTO `topic` VALUES ('5229', '26', '1', '当使用netstat –r命令产生了后面的结果10.13.5.0 * 255.255.255.0 U 40 0 0 eth1对该结果描述最恰当的解释是_________________\r\n', 'f1a768d0-c6fc-4bfa-aec7-5134883f5be1.', '10.13.5.0是一个可以访问外部网络的网关\r\n', '有40个包等待通过这个路由进行传输\r\n', ' 10.13.5的网段可以通过本地的在eth1设备上的NIC配置\r\n', 'IP地址为10.13.5.0的主机现在是激活的\r\n', '', '', 'C', '', '0', '2017-12-26 00:55:23', '40', '1');
INSERT INTO `topic` VALUES ('5230', '26', '4', '为什么不用lighttpd ', '8225f93a-0161-41ed-9e75-3d1a67574e23.', null, null, null, null, null, null, '只是到LIGHTTPD可以作为图片服务器，支持FASTCGI。可能相比NGINX，它稍逊色一点', '', '0', '2017-12-26 00:55:39', '6', '1');
INSERT INTO `topic` VALUES ('5231', '4', '4', 'Spring主要使用了哪三种模式？', '08242909-43ef-4dc9-9389-fcb58a4744f9.', null, null, null, null, null, null, ' 工厂模式-->每个BEAN的创建通过方法\r\n\r\n单例模式-->默认的每个BEAN的作用域都是单例\r\n\r\n代理模式-->关于AOP的实现是通过代理,体现代理模式', '', '0', '2017-12-26 00:55:39', '62', '1');
INSERT INTO `topic` VALUES ('5232', '26', '4', 'Pctfree,pctused,freelist之间的关系？  ', 'a019eae1-fd24-40a5-b3e8-62b8fa7c30a7.', null, null, null, null, null, null, 'ORACLE中的内容\r\nPCTUSED：一个块的使用水位的百分比，这个水位将使该块返回到可用列表中去等待更多的插入操作。\r\nPCTFREE：用来为一个块保留的空间百分比，以防止在今后的更新操作中增加一列或多列值的长度。\r\nFREELIST：可用列表是表中的一组可插入数据的可用块', '', '0', '2017-12-26 00:55:54', '4', '1');
INSERT INTO `topic` VALUES ('5233', '18', '4', '403 404 500 503错误 ', 'c1c56e88-2786-4d7a-bcca-0c9050b4bccf.', null, null, null, null, null, null, '403 禁止访问 404 网页未找到 500 内部服务器错误 503 服务暂时不可用，请稍后尝试', '', '0', '2017-12-26 00:55:57', '6', '1');
INSERT INTO `topic` VALUES ('5234', '26', '4', '如果一个目录下有1000个子目录 每个子目录下有10000个文件 如何只删除文件不删除目录', '246e3da3-abd6-4d20-93cb-5635f3d55f4d.', null, null, null, null, null, null, '：（1）FIND /当前目录下/  -TYPE F -EXEC RM -F {} \\;  ##但是系统开销太大，不是最佳方法\r\n（2）\r\n扩展1：删除一个目录下的所有文件，但保留一个指定文件？\r\nFIND /当前目录下/ -TYPE F ! -NAME \"指定文件名\" -EXEC RM -F {} \\; \r\n扩展2：比如目录下有*.LOG文件若干个，我想保留最新的3个，其余的全部删除\r\nLS -T *.LOG | TAIL -N +4 | XARGS RM -F   ##-T 按修改时间排序,TAIL -N +4表示从顺序从第4行及以下行显示，如果是-4则逆序', '', '0', '2017-12-26 00:56:26', '4', '1');
INSERT INTO `topic` VALUES ('5235', '26', '4', 'cacti和nagios 做过么？自己做的还是一块做的？ ', '2a96538a-e808-4972-a59e-999debd14162.', null, null, null, null, null, null, '先把视频过一遍，然后参考文档做实验', '', '0', '2017-12-26 00:57:22', '4', '1');
INSERT INTO `topic` VALUES ('5238', '26', '4', '查看mysql的端口号用的命令  ', '855fc28b-3650-492c-ad78-2f59ae50c554.', null, null, null, null, null, null, 'NETSTAT -TULPN |GREP MYSQLD ', '', '0', '2017-12-26 00:58:16', '4', '1');
INSERT INTO `topic` VALUES ('5239', '26', '4', '一个文件的权限分三段，第三段代表什么？ ', '83029f50-dcab-4a83-a842-fa488ed10bbc.', null, null, null, null, null, null, '文件所有者的所在组权限。', '', '0', '2017-12-26 00:58:40', '4', '1');
INSERT INTO `topic` VALUES ('5240', '26', '4', '设置mysql启动时运行的命令 ', '6808cc8b-1040-4b1e-b17d-53d32f84b80d.', null, null, null, null, null, null, '：/ETC/INIT.D/MYSQLD START ，如果是源码包，一般是安装目录的中BIN程序下\r\n', '', '0', '2017-12-26 00:58:59', '4', '1');
INSERT INTO `topic` VALUES ('5241', '26', '1', '在Debian Linux中将机器获取IP地址的方式由动态分配转变为固定IP时，需要修改的文件是__________________\r\n', 'ae6b9c8d-58b7-4600-9693-42a27973e1db.', ' /etc/network/interface\r\n', ' /etc/network/interfaces\r\n', '/etc/networking/interface\r\n', ' /etc/networking/interfaces\r\n', '', '', 'B', '', '0', '2017-12-26 00:59:04', '40', '1');
INSERT INTO `topic` VALUES ('5242', '25', '4', '$# $? $! $$ $1 $0 含义  ', '83eb4868-8620-4a71-adcf-49714311e904.', null, null, null, null, null, null, '$#参数的个数              $?上一个命令的执行返回值    $!最后运行的后台PROCESS的PID  \r\n\r\n    $$当前进程（SHELL）的PID  $1第一个位置参数变量        $0脚本文件名或者AWK文本中的某一行的全部内容', '', '0', '2017-12-26 00:59:08', '6', '1');
INSERT INTO `topic` VALUES ('5243', '26', '4', '设置一个脚本开机启动  ', 'b5660712-f11a-4660-b121-abb358fed9ee.', null, null, null, null, null, null, '：（1）移动脚本到/ETC/INIT.D/TEST.SH\r\n（2）赋予执行权限CHMOD +X \r\n（3）CHKCONFIG --ADD TEST.SH\r\n（4）CHKCONFIG --LEVEL 2345 TEST.SH ON', '', '0', '2017-12-26 00:59:25', '4', '1');
INSERT INTO `topic` VALUES ('5244', '26', '1', '下面的哪条命令可以向DHCP服务器请求一个动态的IP___________________\r\n', 'cdc5035c-8738-4b0e-b2e2-1e8b2f338cb7.', 'ifup eth0\r\n', 'dhcpd eth0\r\n', 'dhclient eth0\r\n', '/etc/init.d/networking restart\r\n', '', '', 'C', '', '0', '2017-12-26 00:59:52', '40', '1');
INSERT INTO `topic` VALUES ('5246', '26', '1', 'ping命令使用的是哪种协议_________________\r\n', 'e85f57c9-68ae-4dda-bc40-6a8f79d99783.', 'ICMP', 'IGMP', 'TCP', 'UDP', '', '', 'A', '', '0', '2017-12-26 01:01:10', '40', '1');
INSERT INTO `topic` VALUES ('5247', '26', '1', '查询系统中当前的arp缓存数据使用的命令_______________', '1cd516ae-b517-4a11-8d20-22579e0b3220.', 'netstat –arp\r\n', 'arpcache\r\n', 'cat /proc/arp\r\n', 'arp –a\r\n', '', '', 'D', '', '0', '2017-12-26 01:01:46', '40', '1');
INSERT INTO `topic` VALUES ('5248', '26', '1', '使用下面的那条命令______________________可以生成DNS密钥\r\n', '4b2dfd3c-8b08-4e4b-8ece-eb2b4d9c581a.', 'named --keygen\r\n', 'bind --keygen\r\n', 'dnssec-keygen\r\n', 'dnskeygen\r\n', '', '', 'C', '', '0', '2017-12-26 01:02:23', '40', '1');
INSERT INTO `topic` VALUES ('5249', '26', '1', '添加下面的哪个选项，可以将128M的内存转换为DNS的缓存_________________\r\n', 'fcbcf834-3c74-48db-9545-92ffee78a1a7.', 'datasize 128M\r\n', 'memlimit 128M\r\n', 'cachesize 128M\r\n', 'memsize 128M\r\n\r\n', '', '', 'A', '', '0', '2017-12-26 01:02:59', '40', '1');
INSERT INTO `topic` VALUES ('5250', '26', '1', '当使用IP地址192.168.1.2配置好了一台从DNS服务器时，需要在主服务器（192.168.1.1）的named.conf中添加哪一行，可以让从DNS服务器进行zone文件的传输_______________\r\n', 'e354c7ab-63c2-4fc7-8d8d-b06cfa11bb09.', 'allow-update {192.168.1.2}\r\n', 'allow-replicate {192.168.1.1}\r\n', 'allow-transfer {192.168.1.1}\r\n', ' allow-transfer {192.168.1.2}\r\n', '', '', 'D', '', '0', '2017-12-26 01:03:37', '40', '1');
INSERT INTO `topic` VALUES ('5251', '26', '4', '字符型驱动设备怎么创建设备文件', 'ae9f4989-1df4-49ba-84b5-039756f2a856.', null, null, null, null, null, null, ' 手动创建：MKNOD /DEV/LED C 250 0    其中DEV/LED 为设备节点 C 代表字符设备 250代表主设备号 0代表次设备号\r\n       还有UDEV/MDEV自动创建设备文件的方式，UDEV/MDEV是运行在用户态的程序，可以动态管理设备文件，包括创建和删除设备文件，运行在用户态意味着系统要运行之后。在  /ETC/INIT.D/RCS 脚本文件中会执行 MDEV -S 自动创建设备节点。\r\n', '', '0', '2017-12-26 01:03:37', '4', '1');
INSERT INTO `topic` VALUES ('5252', '24', '4', '请解释下列shell命令的用途top：', '61e3664c-cd9d-43d4-ba9b-0cb29a154522.', null, null, null, null, null, null, '该命令提供了实时对系统处理器状态的监控，它能够实时显示系统中各个进程的资源占用情况。该命令可以按照对CPU、内存使用和执行时间对系统任务进程进行排序显示，同时还可以通过交互式命令进行设定显示。', '', '0', '2017-12-26 01:04:13', '6', '1');
INSERT INTO `topic` VALUES ('5253', '26', '1', '那条命令可以用来检查httpd.conf文件的语法____________________\r\n', 'f0a4f70c-1775-4a3b-8924-fe91d6b97e1c.', '/etc/init.d/apache configtest\r\n', '/etc/init.d/apache configcheck\r\n', ' apachectl configtest\r\n', 'apachectl configcheck\r\n', '', '', 'C', '', '0', '2017-12-26 01:04:15', '40', '1');
INSERT INTO `topic` VALUES ('5254', '26', '4', ' 在需要调度的地方调用以下函数', '2c1a20db-2414-402e-aa9b-2559ad602d6c.', null, null, null, null, null, null, 'TASKLET_SCHEDULE(&TLET);\r\n   一般在中断函数当中调度在不晚于下一个时钟滴答之前执行\r\n', '', '0', '2017-12-26 01:04:16', '4', '1');
INSERT INTO `topic` VALUES ('5255', '24', '4', '写出15个以上你所知道的常用的Linux命令和它的功能。', '7971eba5-f4a8-4c44-84ec-ad679258c496.', null, null, null, null, null, null, 'LS：列出目录\r\nCP：复制\r\nRM：删除\r\nCAT：将文件的内容打印到标准输出\r\nMKDIR：建立目录\r\nTAR：打包压缩\r\nPS：查看进程\r\nTOP：查看机器使用情况\r\nDF：检查磁盘空间占用情况\r\nFIND：在指定路径下查找指定文件\r\nGREP：过滤文本\r\nCD：改变当前工作目录\r\nMOUNT：挂载/卸载指定的文件系统\r\nIFCONFIG：配置网络或显示当前网络接口状态\r\nTELNET:：远程登录', '', '0', '2017-12-26 01:04:46', '6', '1');
INSERT INTO `topic` VALUES ('5256', '26', '1', ' 如何在使用ssh登录时忽略密码的输入__________________\r\n', '022497fb-f3ce-4fc7-b642-05220c1990d3.', '将本地机器上的ssh的公钥添加到远程服务器上的~/.ssh/authorized_keys文件中\r\n', '将本地机器上的ssh的私钥添加到远程服务器上的~/.ssh/authorized_keys文件中\r\n', '将本地机器上的ssh的公钥添加到远程服务器上的~/.ssh/known_keys文件中\r\n', ' 将远程服务器上的ssh公钥添加到本地机器上的~/.ssh/authorized_keys文件中\r\n', '', '', 'A', '', '0', '2017-12-26 01:04:58', '40', '1');
INSERT INTO `topic` VALUES ('5257', '26', '1', '当我们查看/etc/passwd文件的时候，发现所有用户信息中都包含一个x，这里x代表_________________', '82c08ec8-61ec-4c6e-bbb1-25b91c704d20.', '密码是加密的\r\n', '启用shadow文件保存密码\r\n', '所有密码为空格\r\n', ' 所有的密码都有有效期\r\n', '', '', 'B', '', '0', '2017-12-26 01:05:37', '40', '1');
INSERT INTO `topic` VALUES ('5258', '26', '4', '用户虚拟地址\r\n', '4e858d7d-07d5-4a8e-84f0-ce5ecbac029a.', null, null, null, null, null, null, '  这是在用户空间进程所能看到的常规地址。每个进程多有自己的虚拟地址，并且可以使用大于物理内存大小的空间', '', '0', '2017-12-26 01:05:39', '4', '1');
INSERT INTO `topic` VALUES ('5259', '26', '4', ' 内核逻辑地址\r\n', 'e9c411d6-fe60-4cf7-b53f-5977e03fdc45.', null, null, null, null, null, null, ' 内核逻辑地址组成了内核的常规地址空间。该地址映射了部分（或者全部）内存，并经常被视为物理地址。\r\n     逻辑地址使用硬件内建的指针大小，因此在安装了大量内存的32位系统中，它无法寻址全部的物理内存。\r\n     逻辑地址通常保存在UNSIGNED LONG或者VOID *这样类型的变量中。KMALLOC返回的内存就是内核逻辑地址。\r\n     （上面这段话很重要，一定要理解，建议自己使用记号笔标红）\r\n', '', '0', '2017-12-26 01:06:05', '4', '1');
INSERT INTO `topic` VALUES ('5260', '26', '1', ' 当从系统中删除一个登录名为ming的用户时使用命令userdel ming，这样处理之后，虽然/etc/passwd文件已经被更新了，不过该用户的home目录等相关文件依旧存在，那么该使用下面的那条命令来进行完全的删除_______________________\r\n', '407044ca-365b-4b74-8110-5e894d071eec.', ' userdel -m ming\r\n', 'userdel -l ming\r\n', 'userdel -a ming\r\n', 'userdel -r ming\r\n', '', '', 'D', '', '0', '2017-12-26 01:06:15', '40', '1');
INSERT INTO `topic` VALUES ('5261', '26', '1', '当我们在/etc/passwd文件中添加“ming::501:501:Ming:/home/ming:/bin/bash”这么一行后，并使用passwd命令为ming用户设置了密码，此时发现ming用户依然无法登录，主要原因是_____________________\r\n', 'ff8e359b-b66f-4874-98e3-d5143ce704fa.', '用户不能修改自己的密码\r\n', ' ming用户对自己的主目录没有足够的权限\r\n', 'ming用户的用户信息应该全部使用小写\r\n', '在创建用户时密码区域不能为空\r\n', '', '', 'B', '', '0', '2017-12-26 01:06:45', '40', '1');
INSERT INTO `topic` VALUES ('5262', '26', '1', '哪个文件可以查看系统中所有已存在的用户_______________\r\n', '38b631db-3ed5-4207-a6ec-03bb55bc02fe.', '/etc/passwd\r\n', '/etc/users\r\n', ' /etc/password\r\n', '/etc/user.conf\r\n', '', '', 'A', '', '0', '2017-12-26 01:07:22', '40', '1');
INSERT INTO `topic` VALUES ('5263', '26', '1', '当我们以一个非root用户将Apache放入一个jail环境里运行时，发现Apache的主进程无法启动，这时最主要的原因是___________________\r\n', '20c40a11-410d-49eb-bf5c-6c915aba1888.', 'Apache需要以root身份来启动80端口', '因为Apache的默认页面index.html没有添加到jail环境中\r\n', ' 需要在httpd.conf文件中的mod-chroot模块部分添加LoadModule一行\r\n', '当Apache在jail环境中运行时，需要使用虚拟主机的方法\r\n', '', '', 'A', '', '0', '2017-12-26 01:08:13', '40', '1');
INSERT INTO `topic` VALUES ('5264', '26', '1', ' 当i386架构的机器上，安装Linux时，最大的交换分区支持到________________\r\n', 'ceecb7c2-d129-4ea5-9a60-931402dbed40.', '1G\r\n', '2G\r\n', '8G\r\n', '512M\r\n', '', '', 'B', '', '0', '2017-12-26 01:08:44', '40', '1');
INSERT INTO `topic` VALUES ('5265', '26', '1', ' 当需要在系统中添加sales组，并在该组中添加uesr1 user2 uesr3三个用户时，我们需要添加下面的哪一行来实现_______________\r\n', '7135791a-5729-4802-971f-2eb87d354c82.', ' 在/etc/group文件中，添加sales:44:user1,user2,user3\r\n', '使用命令groupadd sales\r\n', '使用命令groupadd -a sales user1 user2 user3\r\n', '在/etc/group文件中，添加sales::44:user1,user2,user3\r\n', '', '', 'D', '', '0', '2017-12-26 01:09:23', '40', '1');
INSERT INTO `topic` VALUES ('5266', '26', '4', 'call命令', 'ca408e34-1fce-4c6e-952f-d6be5702a601.', null, null, null, null, null, null, 'CALL命令用于强制调用某函数： CALL <EXPR> 表达式中可以一是函数，以此达到强制调用函数的目的，它会显示函数的返回值（如果函数返回值不是VOID）。 其实，前面介绍的PRINT命令也可以完成强制调用函数的功能。', '', '0', '2017-12-26 01:09:34', '4', '1');
INSERT INTO `topic` VALUES ('5267', '26', '1', ' 在我们使用ssh登录时，下面的哪个文件可以使我们省略密码输入的步骤____________\r\n', '59d5e6d7-0e07-471b-9da0-56a02cf41a62.', ' ~/.ssh/known_keys\r\n', '~/.ssh/allowed_keys\r\n', '~/.ssh/authorized_keys\r\n', '~/.ssh/trusted_keys\r\n', '', '', 'C', '', '0', '2017-12-26 01:09:58', '40', '1');
INSERT INTO `topic` VALUES ('5268', '26', '1', 'sudo命令的用途是', '648feaf9-d07c-4085-9573-c2516a3f89dd.', '类似su\r\n', '列出系统上是否含有一个叫“sudo”的用户\r\n', '于su一样\r\n', '检测硬件\r\n', '', '', 'A\r\n', '', '0', '2017-12-26 01:10:56', '40', '1');
INSERT INTO `topic` VALUES ('5269', '26', '1', '当你想使用不同的引导脚本时，应该修改/etc/inittab文件中哪个条目', 'b80a6683-d83c-4d04-9242-d183c76a771f.', 'boot\r\n', 'bootwait\r\n', 'sysinit\r\n', '\r\n', '', '', 'C\r\n', '', '0', '2017-12-26 01:11:24', '40', '1');
INSERT INTO `topic` VALUES ('5270', '26', '1', '如何列出所有已被挂载的文件系统\r\n', 'b352bc10-9e72-449b-b82c-7c6acd03f1d7.', 'mount –rf\r\n', 'mount –af\r\n', 'mount\r\n', 'mount –a\r\n', '', '', 'C', '', '0', '2017-12-26 01:12:03', '40', '1');
INSERT INTO `topic` VALUES ('5271', '26', '1', '一个文件的权限是rw-rws---，以8进制数值形式表示出来的结果是', 'f7df7679-ff0a-4ddd-8ac8-dbcda6b4684b.', '2670', '6700', '670', '1670', '', '', 'A\r\n', '', '0', '2017-12-26 01:12:32', '40', '1');
INSERT INTO `topic` VALUES ('5272', '18', '3', 'RPM 最大的问题为软件之间的（）问题', '8072aa65-fa2a-41b8-b3b3-aed740d21106.', null, null, null, null, null, null, '相依性', '', '0', '2017-12-26 01:12:43', '29', '1');
INSERT INTO `topic` VALUES ('5273', '26', '1', '/etc/hosts.allow与/etc/host.deny文件的用途是', '6702b953-10b4-46b3-91b2-080fd0ff74c8.', '决定用户可以使用何种服务\r\n', ' 检测、响应来自网络的请求\r\n', '判断哪些用户可以登录本系统\r\n', '判断用户不能使用何种服务\r\n', '', '', 'B\r\n', '', '0', '2017-12-26 01:13:01', '40', '1');
INSERT INTO `topic` VALUES ('5274', '26', '1', '假设有一个用户在系统上有几个循环测试软件，当你需要终止该用户的这些任务，采用下列的何种方法是最好的做法。', '8b16def0-0f58-4cf5-bf90-7f66ce6cc42c.', ' kill\r\n', 'suspend\r\n', 'hup\r\n', 'killall\r\n', '', '', 'D\r\n', '', '0', '2017-12-26 01:13:36', '40', '1');
INSERT INTO `topic` VALUES ('5275', '26', '1', '如何将你的主目录中的一个名为games目录复制到软盘中,假设该软盘已被系统使用默认的挂载方式挂载到默认挂载点上', 'a96b3be4-3b3d-4eef-91e6-9e5202aa7df8.', 'cd; copy games a:\r\n', 'cd; cp games /mnt/floppy\r\n', 'cd; cp –r games /dev/a:\r\n', 'cd; cp –r games /mnt/floppy\r\n', '', '', 'D\r\n', '', '0', '2017-12-26 01:14:10', '40', '1');
INSERT INTO `topic` VALUES ('5276', '18', '3', 'RPM 软件的属性相依问题，已经可以藉由 () 或者是 () 等方式加以克服。 CentOS 使用的就是 yum 机制。', '5955e7a1-8477-4e68-83f1-234006cb56ac.', null, null, null, null, null, null, 'YUM  APT', '', '0', '2017-12-26 01:14:34', '29', '1');
INSERT INTO `topic` VALUES ('5277', '26', '1', '下面哪条命令不会显示用户登录情况', '8f2c3e3b-6657-4b96-a975-1bf1bcc1cdc4.', 'who\r\n', 'fuser\r\n', 'users\r\n', 'finger\r\n', '', '', 'B\r\n', '', '0', '2017-12-26 01:14:54', '40', '1');
INSERT INTO `topic` VALUES ('5278', '26', '1', '关闭一台支持多用户同时登录服务器最稳妥的方法是采用_______命令。\r\n', 'f1ab948f-0d4c-48c7-ac36-b808c1a36f17.', 'shutdown\r\n', 'halt\r\n', 'sync；sync；halt\r\n', 'reboot\r\n', '', '', 'A', '', '0', '2017-12-26 01:15:27', '40', '1');
INSERT INTO `topic` VALUES ('5279', '26', '4', 'CPU 频率不主存储器癿关系', '429e3672-17ad-4e7f-815f-3886496aea8f.', null, null, null, null, null, null, '理论上，CPU 不主存储器癿外频应该要相同扄好。丌过，因为技术方面癿提升，因此这两者癿频率速\r\n度丌会相同， 但外频则应该是一致癿较佳。丼例来说，上面提到癿 INTEL E8400 CPU 外频为\r\n333MHZ，则应该选用 DDR II 667 这个型号， 因为该内存型号癿外频为 333MHZ 乊故喔', '', '0', '2017-12-26 01:15:54', '4', '1');
INSERT INTO `topic` VALUES ('5280', '26', '4', '不管是 Windows 还是 Linux ，要架设好一部堪称完美的服务器，『基本功课』还是得做的，这包括了：', '2f73036c-b072-402c-8f39-e28865d2abab.', null, null, null, null, null, null, '基础网络的基本概念，以方便进行联网与设定及除错；\r\n熟悉操作系统的简易操作：包括登录分析、账号管理、文书编辑器的使用等等的技巧；\r\n信息安全方面：包括防火墙与软件更新方面的相关知识等等；\r\n该服务器协议所需软件的基本安装、设定、除错等，才有办法实作。', '', '0', '2017-12-26 01:16:14', '29', '1');
INSERT INTO `topic` VALUES ('5281', '26', '1', ' redhat linux中用来实现安装，删除，列出已被安装软件的命令是', 'bd16106d-cdff-482f-8a4e-8acd378f85da.', ' smit\r\n', 'setld\r\n', 'pkgadd,pkginfo,pkgchl,pkgdel\r\n', 'pkgadd,pkginfo,pkgchk,pkgrm\r\n', ' rpm\r\n', '', 'E\r\n', '', '0', '2017-12-26 01:16:20', '40', '1');
INSERT INTO `topic` VALUES ('5282', '26', '1', 'man passwd与man 5 passwd之间的区别是', '6624a848-b78a-407e-a74e-2c2e3ea7960e.', '没有区别\r\n', 'man passwd显示passwd命令的帮助man 5 passwd显示的是passwd文件的帮助信息\r\n', '显示man page的最后5行\r\n', '显示man page前5行\r\n', '', '', 'B\r\n', '', '0', '2017-12-26 01:17:25', '40', '1');
INSERT INTO `topic` VALUES ('5283', '26', '1', 'ps –ef –forest命令用来显示\r\n', 'd7b44fd3-74ed-400b-932e-b32e51c61949.', '与ps –ef一样\r\n', '显示父进程与子进程之间的关系\r\n', '硬件设备\r\n', ' 与ls –Rp一样\r\n', '', '', 'B', '', '0', '2017-12-26 01:17:59', '40', '1');
INSERT INTO `topic` VALUES ('5284', '26', '1', '找出当前目录中所有链接到INODE 8738的文件的命令是\r\n', 'bfd001e4-a2ad-4467-8409-37392545aad7.', 'find . –inode 8738\r\n', 'whereis . inode 8738\r\n', 'locate . inode 8738\r\n', 'find . –inum 8738\r\n', '', '', 'D', '', '0', '2017-12-26 01:18:37', '40', '1');
INSERT INTO `topic` VALUES ('5285', '26', '1', ' _____命令是用来配置或显示网络设备', 'fc25f541-988a-4211-a2d2-3c33cd2d36d4.', 'ifconfig\r\n', 'eth-config\r\n', 'ipconfig\r\n', 'eth-cfg\r\n', '', '', 'A\r\n', '', '0', '2017-12-26 01:19:14', '40', '1');
INSERT INTO `topic` VALUES ('5286', '26', '4', '简述网络的概念？', '87eb5fe3-c645-43b8-babe-b318ffd01a53.', null, null, null, null, null, null, '网络就是几部计算机主机或者是网络打印机之类的接口设备， 透过网络线或者是无线网络的技术，将这些主机与设备连接起来， 使得数据可以透过网络媒体(网络线以及其他网络卡等硬件)来传输的一种方式。', '', '0', '2017-12-26 01:20:12', '29', '1');
INSERT INTO `topic` VALUES ('5287', '26', '1', ' mount使用哪个选项可以使用户无法在被挂的分区上执行程序\r\n', '0f266cd1-d4b5-4e4e-991d-49bcde90ea28.', 'nouser\r\n', '\r\n rootsquash\r\n\r\n\r\n\r\n\r\n', 'noexec\r\n', 'read-only\r\n', '', '', 'C', '', '0', '2017-12-26 01:20:20', '40', '1');
INSERT INTO `topic` VALUES ('5288', '26', '1', '目前Linux内核可以支持的处理器数量是', 'deb98433-41ea-44f0-8b55-55a3ed7ae693.', '4\r\n', '8', '16', '23\r\n', '', '', 'C\r\n', '', '0', '2017-12-26 01:20:47', '40', '1');
INSERT INTO `topic` VALUES ('5289', '26', '2', '创建一个新用户之后，该用户的家目录在 /root目录内', 'edb0d3cc-b0a4-4a52-b2d1-413d7df0f29c.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:21:12', '40', '1');
INSERT INTO `topic` VALUES ('5290', '26', '2', '在Linux操作系统下，可以挂载windows的分区。', '62c1ede8-c9fc-44a5-867f-d363bac88afc.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:21:37', '40', '1');
INSERT INTO `topic` VALUES ('5291', '26', '4', '计算机网络区域范围？', '011ff2da-84e0-4898-8c4e-840ec4f0f19a.', null, null, null, null, null, null, '局域网络 (LOCAL AREA NETWORK, LAN)\r\n广域网 (WIDE AREA NETWORK, WAN)', '', '0', '2017-12-26 01:21:59', '29', '1');
INSERT INTO `topic` VALUES ('5292', '18', '4', '以太网络的速度与标准？', '13d0bac6-7ba0-453c-b205-760c9f98d19d.', null, null, null, null, null, null, '以太网络的流行主要是它成为国际公认的标准所致。早先 IEEE 所制订的以太网络标准为 802.3 的 IEEE 10BASE5 ，这个标准主要的定义是：『10 代表传输速度为 10MBPS，BASE 表示采用基频信号来进行传输，至于 5 则是指每个网络节点之间最长可达 500 公尺。', '', '0', '2017-12-26 01:25:05', '29', '1');
INSERT INTO `topic` VALUES ('5293', '26', '4', '由于主机与主机的联机以及主机与集线器的联机时， 所使用的网络线脚位定义并不相同，因此由于接头的不同网络线又可分为两种：', 'f3299ca5-fbae-4f82-afd3-efcd208a9b4b.', null, null, null, null, null, null, '跳线：一边为 568A 一边为 568B 的接头时称为跳线，用在直接链接两部主机的网络卡。\r\n并行线：两边接头同为 568A 或同为 568B 时称为并行线，用在链接主机网络卡与集线器之间的线材；', '', '0', '2017-12-26 01:26:00', '29', '1');
INSERT INTO `topic` VALUES ('5294', '26', '4', '在 IPv4 里面就只有两种 IP 的类别，分别是：', 'd382be3c-5790-4379-acd0-506645084b38.', null, null, null, null, null, null, 'PUBLIC IP : 公共 IP ，经由 INTERNIC 所统一规划的 IP，有这种 IP 才可以连上 INTERNET ；\r\n\r\nPRIVATE IP : 私有 IP 或保留 IP，不能直接连上 INTERNET 的 IP ， 主要用于局域网络内的主机联机规划。', '', '0', '2017-12-26 01:28:49', '29', '1');
INSERT INTO `topic` VALUES ('5295', '26', '4', '为了应付某些企业内部的网络设定，于是就有了私有 IP (Private IP) 的产生了。私有 IP 也分别在 A, B, C 三个 Class 当中各保留一段作为私有 IP 网段，那就是：', '6045a903-75a8-4084-95ce-6b796a1a2164.', null, null, null, null, null, null, 'CLASS A：10.0.0.0    - 10.255.255.255\r\nCLASS B：172.16.0.0  - 172.31.255.255\r\nCLASS C：192.168.0.0 - 192.168.255.255', '', '0', '2017-12-26 01:29:28', '29', '1');
INSERT INTO `topic` VALUES ('5296', '26', '2', ' Linux可以支持ADSL连接上网', '651cb73a-d344-4799-814d-0765988fd989.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:31:09', '40', '1');
INSERT INTO `topic` VALUES ('5297', '26', '4', 'IP 的取得方式？', '442e8efb-7f10-41cf-882b-418434d7b1e9.', null, null, null, null, null, null, '直接手动设定(STATIC)\r\n透过拨接取得\r\n自动取得网络参数 (DHCP)', '', '0', '2017-12-26 01:31:11', '29', '1');
INSERT INTO `topic` VALUES ('5298', '26', '2', ' Linux下任何用户都可以自己的身份通过执行shutdown命令关闭计算机', '5ee25a69-9a8a-4d89-bc3a-8118e8621420.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:31:27', '40', '1');
INSERT INTO `topic` VALUES ('5299', '26', '2', '通过适当的配置Linux可以在网络上担当起路由器的角色', 'b2c4ff4d-a4f0-441b-bcfd-4da960d1fcbd.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:32:38', '40', '1');
INSERT INTO `topic` VALUES ('5300', '26', '2', 'man是Linux的查询联机手册的命令', '3fb7da82-981a-4e23-946f-b9f6e84205f5.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:33:12', '40', '1');
INSERT INTO `topic` VALUES ('5301', '26', '2', 'Linux不支持Adsl', '537d3c2a-2f6b-4504-9893-78f747341055.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:33:45', '40', '1');
INSERT INTO `topic` VALUES ('5302', '26', '2', ' GPL是GNU通用公共许可证的缩写', '03332923-2c57-43dc-805b-10a19d9dfa4f.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:33:54', '40', '1');
INSERT INTO `topic` VALUES ('5303', '26', '2', 'XFS是linux使用的一种文件系统', '24dcdaf2-5519-4f9e-842b-3d491990f1e5.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:34:22', '40', '1');
INSERT INTO `topic` VALUES ('5304', '26', '2', 'GPL是GNU通用公共许可证的缩写GPL是GNU通用公共许可证的缩写', 'a2e064ab-123f-4a0c-a661-9d7154abcdde.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:34:33', '40', '1');
INSERT INTO `topic` VALUES ('5305', '26', '3', '一般来说，一部主机里面的网络参数应该具备有：（）（）, （）, （）, （）, （）, （）等', '461a875b-6472-4ef4-8e8f-3d7c54bbbfea.', null, null, null, null, null, null, 'IP  NETMASK  NETWORK  BROADCAST  GATEWAY  DNS ', '', '0', '2017-12-26 01:35:26', '29', '1');
INSERT INTO `topic` VALUES ('5306', '26', '4', 'DNS 主要的目的在于？', 'af6b8f9b-f735-42b6-a1b2-2d932cd02a69.', null, null, null, null, null, null, '进行 HOSTNAME 对应 IP 的功能；', '', '0', '2017-12-26 01:36:31', '29', '1');
INSERT INTO `topic` VALUES ('5307', '26', '2', 'ReiserFs是Linux使用的一种文件系统', '72835a41-9616-42da-8fed-9bed430a93e1.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:37:01', '40', '1');
INSERT INTO `topic` VALUES ('5309', '26', '2', '目前市场上没有使用Linux操作系统的智能手机 N\r\n', '5065baeb-300e-454a-a7b3-e66c8a708ff0.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:37:40', '40', '1');
INSERT INTO `topic` VALUES ('5310', '26', '2', 'Liunx可以用于嵌入式系统', '59b3670f-d2dd-41cf-9dd0-698bb2707032.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:37:50', '40', '1');
INSERT INTO `topic` VALUES ('5311', '26', '2', 'ping命令是测试网络状态的', '1de41034-c525-4f30-a959-1b68d102fe1f.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:38:42', '40', '1');
INSERT INTO `topic` VALUES ('5312', '26', '2', 'Linux能对Fat32分区中的文件进行读写操作', '6312bf1a-0f9f-4f6d-9e56-5a07cb134338.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:39:11', '40', '1');
INSERT INTO `topic` VALUES ('5313', '26', '2', 'Linux不支持U盘', '7b397621-fd79-4c23-8fac-086252f97dbb.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:39:23', '40', '1');
INSERT INTO `topic` VALUES ('5314', '26', '2', 'Liunx不能挂载Fat/Fat32格式的分区', '2d36d6f5-1aee-4fad-b84b-afba453ec7cd.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:40:51', '40', '1');
INSERT INTO `topic` VALUES ('5315', '26', '2', ' Linux不能挂载NTFS格式的分区 ', '24dfc44a-9384-40d3-8e57-7804cd2555d4.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:41:03', '40', '1');
INSERT INTO `topic` VALUES ('5316', '26', '2', 'shutdown命令的效果是关闭计算机', '5d09ce2a-83a6-4b1a-9481-c993a8e3c569.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:41:14', '40', '1');
INSERT INTO `topic` VALUES ('5317', '26', '2', 'reboot命令是让系统重新启动', 'fbbede9e-1f73-49be-8aed-80ff6150d00c.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:41:35', '40', '1');
INSERT INTO `topic` VALUES ('5318', '26', '2', '在Linux下可以通过虚拟机运行windows下的应用程序', '8d40ebf9-f4fb-4f37-b109-048c0f270980.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:41:47', '40', '1');
INSERT INTO `topic` VALUES ('5319', '26', '3', '无线网络所需要的硬件： （）、（）', '237570b9-80dd-451f-9d6a-016075bb7bf7.', null, null, null, null, null, null, 'AP  无线网卡', '', '0', '2017-12-26 01:42:22', '29', '1');
INSERT INTO `topic` VALUES ('5320', '26', '2', 'Linux是用Fortran语言开发的', '3e534a39-827d-4987-b64b-1f0012468d8d.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:42:31', '40', '1');
INSERT INTO `topic` VALUES ('5321', '26', '2', 'Linux是用C、C++以及汇编语言开发的', '31342a17-727f-4250-b5de-fa169789ac4f.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:42:44', '40', '1');
INSERT INTO `topic` VALUES ('5322', '26', '2', 'Linux下普通用户的密码丢失后可以请root运行passwd命令密码重置该用户的口令', 'db17e7cc-5f7a-4a60-bcdd-b5bfea075222.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:43:33', '40', '1');
INSERT INTO `topic` VALUES ('5323', '26', '2', '在linux下当root用户口令丢失后将没有办法重新设置root的口令', '871407ac-412f-489f-94ee-de08ed457c5a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:43:46', '40', '1');
INSERT INTO `topic` VALUES ('5324', '26', '2', '在linux下/etc/passwd文件记录了所有用户的除了登录口令的其他的帐户信息 ', 'bf5beb46-c974-454d-9e44-eb1a4dcb0547.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:43:56', '40', '1');
INSERT INTO `topic` VALUES ('5325', '26', '3', 'Linux 以太网络卡的默认代号为 （）, （）等等, 无线网卡则为 （）, （） 等等；', '7bfd857f-14d0-44f5-9c6a-80ad62d4eb9c.', null, null, null, null, null, null, 'ETH0  ETH1   WLAN0  RA0', '', '0', '2017-12-26 01:44:02', '29', '1');
INSERT INTO `topic` VALUES ('5327', '26', '3', '可以使用 （）来重新启动整个系统的网络接口。', 'ef9711d4-d2af-47ad-81f2-1e60d1ff2db3.', null, null, null, null, null, null, '/ETC/INIT.D/NETWORK RESTART ', '', '0', '2017-12-26 01:45:35', '29', '1');
INSERT INTO `topic` VALUES ('5328', '26', '3', 'ADSL 拨接后可以产生一个新的实体接口，名称为 （）', '9bbcda3a-bcd6-4092-a888-a55d86ed34a3.', null, null, null, null, null, null, 'PPP0', '', '0', '2017-12-26 01:45:58', '29', '1');
INSERT INTO `topic` VALUES ('5329', '26', '3', '无线网卡与无线基地台之间的联机由于是透过无线接口，所以需要特别注意（）；', 'ecf6fea2-9508-47ac-a65b-5fe55de9fc68.', null, null, null, null, null, null, '网络安全', '', '0', '2017-12-26 01:46:32', '29', '1');
INSERT INTO `topic` VALUES ('5330', '26', '3', '设定网络卡可以使用 （）这个指令，而设定无线网卡则需要 （） ，至于扫瞄基地台， 可以使用 （） 这个指令。', '9dc9c49a-73d2-4c2d-9bde-f1f47b197858.', null, null, null, null, null, null, 'IFCONFIG   IWCONFIG  IWLIST', '', '0', '2017-12-26 01:47:28', '29', '1');
INSERT INTO `topic` VALUES ('5331', '26', '2', ' 在Linux下/etc/shadow文件对所有用户都是可读可写的', '22bdb0d8-d197-4a22-8996-6c354aa446c6.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:48:11', '40', '1');
INSERT INTO `topic` VALUES ('5332', '26', '3', '修改网络接口的硬件相关参数，可以使用 （） 这个指令，包括 MTU 等等；', '70fd02b1-d7d2-484b-97b4-4a7b901d6ded.', null, null, null, null, null, null, 'IFCONFIG', '', '0', '2017-12-26 01:48:37', '29', '1');
INSERT INTO `topic` VALUES ('5333', '26', '2', ' Linux下普通用户的密码丢失后可以请root用户查阅shadow文件找回丢失的密码', '3cc86664-c05f-4858-94ef-573da5362987.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:48:47', '40', '1');
INSERT INTO `topic` VALUES ('5335', '26', '3', '路由的修改与查阅可以使用 （） 来查询，此外， （） 亦可进行新增、删除路由的工作；', 'f9790b3c-145d-4d72-8318-94a58841d429.', null, null, null, null, null, null, 'ROUTE  ROUTE', '', '0', '2017-12-26 01:49:12', '29', '1');
INSERT INTO `topic` VALUES ('5336', '26', '2', ' Linux下普通用户不能通过passwd命令修改自己的密码 ', 'cc2af622-fce9-43d9-ba30-99775713b1f3.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:49:13', '40', '1');
INSERT INTO `topic` VALUES ('5337', '26', '2', 'Linux下普通用户的密码丢失后没有办法重置该用户的密码 ', '55b1160e-86e9-43fc-870a-808f74d6d197.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:49:24', '40', '1');
INSERT INTO `topic` VALUES ('5338', '26', '2', 'Linux备份磁盘之前需要先挂载此块磁盘', '74d8acf4-20cd-4457-80ca-9a16430a90e2.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:50:56', '40', '1');
INSERT INTO `topic` VALUES ('5339', '26', '2', 'Linux支持包括NFS、CODA、SMB/CIFS、NCP的网络文件系统', '07772697-5d3f-431e-a4d6-fcebf9378da4.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:51:08', '40', '1');
INSERT INTO `topic` VALUES ('5340', '26', '2', ' Linux没有办法与windows实现文件的共享', 'dcced116-81a2-4f9b-9db5-5bf5c35141c4.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:51:32', '40', '1');
INSERT INTO `topic` VALUES ('5341', '26', '3', '（） 可以用来匿名登录远程的 FTP 主机', '51ccf979-c93c-488d-9eee-20c42219621f.', null, null, null, null, null, null, 'LFTP', '', '0', '2017-12-26 01:51:46', '29', '1');
INSERT INTO `topic` VALUES ('5342', '26', '2', 'Unix的标准图形界面是X Window ', '793cd3c3-2cc8-4bc9-ae74-3eb661a33da7.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:51:53', '40', '1');
INSERT INTO `topic` VALUES ('5343', '24', '4', '输入文件的最后5行到另一个文件中(酷讯)', '2cedeb3a-0ec1-4aa0-8962-96a296083e12.', null, null, null, null, null, null, 'TAIL-N 5 FILE1>>FILE2', '', '0', '2017-12-26 01:51:56', '6', '1');
INSERT INTO `topic` VALUES ('5344', '26', '2', 'Linux内核版本是一个类似x.y.z的一串数字，如果有两个版本的内核分别是2.6.11与2.6.12,其中版本为2.6.12的内核比较新', 'ce077055-486f-440e-b228-930dd6235da6.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:52:08', '40', '1');
INSERT INTO `topic` VALUES ('5345', '26', '2', 'Linux内核版本是一个类似x.y.z的一串数字，其中y如果是奇数代表了此版本的内核是稳定版的内核', '4d79ea6c-343b-4e5d-a2be-202708a39128.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:52:21', '40', '1');
INSERT INTO `topic` VALUES ('5346', '26', '2', ' Linux下有很多freeware,这里的free是可以自由使用的意思', '9d375ed4-9172-4b5e-a7b7-e9828b07629d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:53:08', '40', '1');
INSERT INTO `topic` VALUES ('5348', '26', '3', '透过 （）分析三向交握，以及分析明码传输的数据，可发现网络加密的重要性。', 'd86abb84-f54f-452a-85e0-d1c54c9d6463.', null, null, null, null, null, null, 'TCPDUMP ', '', '0', '2017-12-26 01:54:08', '29', '1');
INSERT INTO `topic` VALUES ('5349', '24', '4', '查找文件中包含hello的行(酷讯)', '8eae140b-c448-4962-9e93-c15693ab4af9.', null, null, null, null, null, null, 'GREP HELLO FILENAME', '', '0', '2017-12-26 01:54:10', '6', '1');
INSERT INTO `topic` VALUES ('5350', '26', '2', ' 终止一个前台进程可以用命令CTRL+C。', 'f734cf4c-00b3-46ad-be0d-a904d96166b0.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:54:17', '40', '1');
INSERT INTO `topic` VALUES ('5351', '26', '2', ' Linux文件权限中只保存了文件所有者的信息', 'c07e7659-d0c0-4081-94f8-fd36f5efe61d.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:54:27', '40', '1');
INSERT INTO `topic` VALUES ('5352', '24', '4', '查找当前目录下所有目录名为CVS的子目录的命令', '7838cedb-87bc-4432-bb41-8f0cbf1c913e.', null, null, null, null, null, null, 'FIND./CVS-MAXDEPTH 1-TYPE D-PRINT', '', '0', '2017-12-26 01:54:30', '6', '1');
INSERT INTO `topic` VALUES ('5353', '26', '3', '撷取封包以分析封包的流向，可使用 （） ，至于图形接口的 wireshark 则可以进行更为详细的解析。', 'b1e65701-040a-416d-852b-3eaeffb343df.', null, null, null, null, null, null, 'TCPDUMP', '', '0', '2017-12-26 01:57:11', '29', '1');
INSERT INTO `topic` VALUES ('5354', '26', '4', '网络封包要进入我们 Linux 本机，至少需要通过 哪些步骤？', 'f4fd00cf-e7f0-4cc0-acf6-176d69210bf9.', null, null, null, null, null, null, '(1)防火墙 (2)服务本身的管理 (3)SELINUX (4)取得档案的 RWX 权限等步骤；', '', '0', '2017-12-26 01:58:54', '29', '1');
INSERT INTO `topic` VALUES ('5355', '26', '2', '删除系统内核中不用的设备驱动程序时不需要重新编译内核。', 'cc34c178-294d-4c4d-89f4-0040bcf2ba04.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 01:58:54', '40', '1');
INSERT INTO `topic` VALUES ('5356', '24', '4', '如何让一个程序在后台运行并把输入定向到指定的文件', '5fe4b9f6-ab26-4992-a899-4d397d4b1bc8.', null, null, null, null, null, null, '可使用命令：NOHUP程序>>文件名2>&1\r\n注意，2>&1要放在输出文件名的后面）', '', '0', '2017-12-26 01:59:24', '6', '1');
INSERT INTO `topic` VALUES ('5357', '26', '2', ' 修改文件/etc/fstab文件，可以设定开机时候自动挂载的文件系统', '8191934e-7b7b-41f2-8f44-0e8be513f6c8.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 01:59:54', '40', '1');
INSERT INTO `topic` VALUES ('5358', '26', '4', 'rootkit？', 'a097e618-4cea-41ef-b749-26bc5363ccd2.', null, null, null, null, null, null, 'ROOTKIT 为一种取得 ROOT 的工具组，你可以利用 RKHUNTER 来查询你主机是否被植入 ROOTKIT；', '', '0', '2017-12-26 02:00:02', '29', '1');
INSERT INTO `topic` VALUES ('5359', '18', '4', '定时执行一个程序的方法有什么', 'b2a29c3c-2d23-4689-8853-517c5c7e6f35.', null, null, null, null, null, null, '可以使用AT或者CRONTAB，其中AT是处理仅执行一次就结束调度的命令，适用于突发性工作，而CRONTAB将会循环一直进行下去，适用于例行性工作。', '', '0', '2017-12-26 02:00:10', '6', '1');
INSERT INTO `topic` VALUES ('5360', '18', '4', 'vi编辑器中，如何替换指定的字符串', '7c3c3bc1-cc50-4e21-82fc-a0b5dfff9731.', null, null, null, null, null, null, '使用S命令，例如：\r\n：N1,N2S/WORD1/WORD2/G，将第N1行与N2行之间的WORD1替换为WORD2\r\n：1,$S/WORD1/WORD2/G，从第一行到最后一行中的WORD1替换为WORD2', '', '0', '2017-12-26 02:00:33', '6', '1');
INSERT INTO `topic` VALUES ('5361', '26', '3', '（）是预防被入侵的最有效方法之一。', '5707ffa7-1e30-4dd8-82d4-db988828dc09.', null, null, null, null, null, null, '软件升级', '', '0', '2017-12-26 02:00:37', '29', '1');
INSERT INTO `topic` VALUES ('5362', '18', '4', '当更新后，cvs中文件有冲突时。如何判断哪些你编辑的内容和更新下来的内容', '53c493b4-eeef-41f4-a2f3-a4fe626dc671.', null, null, null, null, null, null, '使用CVS时，如果出现冲突，双击冲突的文件（标识为红色），显示文件比较窗口。其中蓝色为需要传入的更新，其中灰色为需要传出的修改，其中红色为需要手工解决的冲突。\r\n可以首先将蓝色需要传入的更新，然后手工解决红色部分，自行选择保留左边还是右边，并选择MARK AS MERGE将文件标志为合并，此时将以左边窗口中的内容为依据向服务器提示传出，即灰色和红色部分都会以左边窗口的内容为依据向服务器提交。\r\n如果冲突文件打开无任何的颜色提示，可选择UPDATE AND OVERRIDE，使用服务器上的文\r\n件更新本地文件。', '', '0', '2017-12-26 02:00:52', '6', '1');
INSERT INTO `topic` VALUES ('5363', '24', '4', 'Linux下，如何查看所有用户', '7e1a0ab8-c1da-482e-9768-9bf0a899dca5.', null, null, null, null, null, null, 'CAT/ETC/PASSWD', '', '0', '2017-12-26 02:01:09', '6', '1');
INSERT INTO `topic` VALUES ('5364', '18', '4', 'Linux上的crond服务可对服务器设置计划任务，请问如果我需设置每2分钟执行一次/tmp/test.sh的脚本应如何设置计划任务，请写出操作方法。', 'cb792ed6-8d28-4834-9d13-d3d06639d628.', null, null, null, null, null, null, '\r\n    首先用ROOT用户的权限登录。\r\n    切换到/ETC/INIT.D/目录下，使用命令：CROND START启动CROND服务\r\n    切换到/ETC/目录下，使用命令：CRONTAB–E\r\n    编辑如下：/2***/TMP/TEST.SH\r\n', '', '0', '2017-12-26 02:02:03', '6', '1');
INSERT INTO `topic` VALUES ('5365', '26', '3', '每部主机都有自己的路由表，此路由表 (routing table) 是作为（）时的路径依据；', '5aff8454-d158-4453-b718-f059ec76f878.', null, null, null, null, null, null, '封包传送', '', '0', '2017-12-26 02:02:17', '29', '1');
INSERT INTO `topic` VALUES ('5366', '18', '4', '查看磁盘空间使用率的Linux命令是什么？查看有哪些系统进程正在运行命令是什么？检测Linux性能（cpu，磁盘io，内存，网络等）都用到哪些命令？', 'ab3287f4-069f-4a62-ab9b-bcc99805cd57.', null, null, null, null, null, null, '查看磁盘空间使用率的命令：DF\r\n查看系统进程命令：TOP\r\n检测LINUX性能的命令：PS，FREE，VMSTAT，NETSTAT', '', '0', '2017-12-26 02:02:18', '6', '1');
INSERT INTO `topic` VALUES ('5367', '18', '4', 'Linux下终止一个进程用什么命令？打包压缩和解包用什么命令？软连接和硬链接有什么区别？建立软连接的命令是？', '093a95bf-f9f1-46e4-a5c9-72ae427c6cdf.', null, null, null, null, null, null, '终止进程的命令：KILL\r\n打包压缩和解包命令：TAR\r\n建立软连接的命令：LN-S源文件目标链接名\r\n硬链接是通过文件系统的INODE来产生新文件名，而不是新文件，它只是在某个目录新建一条文件名链接到某INODE号码的管理记录而已，而软链接是创建一个独立的文件，该文件会让数据的读取指向它链接的那个文件的文件名，类似于WINDOWS中的快捷方式。', '', '0', '2017-12-26 02:02:36', '6', '1');
INSERT INTO `topic` VALUES ('5368', '18', '4', '说说Linux下的find命令和grep命令的区别', '18f6a734-fc4b-4ee7-872e-c7c692211af8.', null, null, null, null, null, null, 'FIND：在磁盘/分区中找到文件，可以配TYPE可以配SIZE TIME等，通过文件名或文件大小或访问时间找到指定文件。\r\nGREP：查找文件里符合条件的字符串，并把匹配的行打印出来，可以使用正则表达式。', '', '0', '2017-12-26 02:03:02', '6', '1');
INSERT INTO `topic` VALUES ('5369', '26', '3', '重复路由可能会让你的（）传递到错误的方向。', 'a9ca8a12-faf8-443e-9228-aa2bc47317e5.', null, null, null, null, null, null, '网络封包', '', '0', '2017-12-26 02:03:04', '29', '1');
INSERT INTO `topic` VALUES ('5370', '24', '4', '有mail.log的一个文档，内容为若干邮件地址，其中用\'\\n\'将邮件地址分隔。要求从中\r\n\r\n挑选出sina.com的邮件地址（包括从文件读取、过滤到列印出来）。\r\nmail.log内容如下：\r\njames@sina.com.cn\r\njack@163.com\r\nzhansan@sohu.com\r\nlisi@hotmail.com\r\nwangwu@gmail.com', '1bf2b60c-3b64-4736-9811-0d7d1bbf017d.', null, null, null, null, null, null, 'CAT MAIL.LOG|GREP SINA.COM', '', '0', '2017-12-26 02:03:26', '6', '1');
INSERT INTO `topic` VALUES ('5371', '26', '3', '动态路由通常是用在两个 （） 之间沟通彼此的路由规则用的，常见的 Linux 上的动态路由套件为 （） ', 'a76ab236-a22d-428e-837b-5907222273ed.', null, null, null, null, null, null, 'ROUTER  ZEBRA', '', '0', '2017-12-26 02:04:01', '29', '1');
INSERT INTO `topic` VALUES ('5372', '26', '3', 'arp proxy 可以透过 （） 与 （） 的功能，让路由器两端都在同一个网段内。', '2adc122e-7136-4932-9a5d-41d00597931b.', null, null, null, null, null, null, 'ARP  ROUTE', '', '0', '2017-12-26 02:04:38', '29', '1');
INSERT INTO `topic` VALUES ('5373', '18', '4', '你用什么方法检查PHP脚本的执行效率（通常是脚本执行时间）和数据库SQL的效率（通常是数据库Query时间），并定位和分析脚本执行和数据库查询的瓶颈所在？', '3e1e8ff9-0c32-4305-9615-bd396628d0e4.', null, null, null, null, null, null, '脚本执行时间，启用XDEBUG，使用WINCACHEGRIND分析。\r\n数据库查询，MYSQL使用EXPLAIN分析查询，启用SLOW QUERY LOG记录慢查询。', '', '0', '2017-12-26 02:05:28', '6', '1');
INSERT INTO `topic` VALUES ('5374', '26', '4', '什么是防火墙？', 'c48a5021-9402-49ca-b735-7dd13aa83427.', null, null, null, null, null, null, '防火墙就是透过订定一些有顺序的规则，并管制进入到我们网域内的主机 (或者可以说是网域) 数据封包的一种机制！更广义的来说，只要能够分析与过滤进出我们管理之网域的封包数据， 就可以称为防火墙。', '', '0', '2017-12-26 02:05:42', '29', '1');
INSERT INTO `topic` VALUES ('5375', '18', '4', '请举例说明在你的开发过程中用什么方法来加快页面的加载速度。', '13019c12-6737-49c9-98dc-cefb7f0b84ba.', null, null, null, null, null, null, '要用到服务器资源时才打开，及时关闭服务器资源，数据库添加索引，页面可生成静态，图片等大文件单独服务器，使用代码优化工具等。', '', '0', '2017-12-26 02:06:33', '6', '1');
INSERT INTO `topic` VALUES ('5376', '26', '3', '防火墙可以分为（）与（）。', '6edc50c7-3fea-4c4a-a540-5e0d85c17e61.', null, null, null, null, null, null, '硬件防火墙  本机的软件防火墙', '', '0', '2017-12-26 02:06:45', '29', '1');
INSERT INTO `topic` VALUES ('5377', '18', '4', 'PHP中几个输入函数echo, print(), print_r(), printf(), sprintf(), var_dump()的区别。', '0ce8c2ac-9a7d-486f-94b6-34b9b8bdeb99.', null, null, null, null, null, null, '1.ECHO : 是语句不是函数，没有返回值，可输出多个变量值，不需要圆括号。不能输出数组和对象，只能打印简单类型（如INT,STRING）;\r\n\r\n2.PRINT : 是语句不是函数, 有返回值1，只能输出一个变量， 不一定需要圆括号，不能输出数组和对象，只能打印简单类型（如INT,STRING）;\r\n\r\n3.PRINT_R() :是函数， 可打印复合类型 （如STRING, INT, FLOAT, ARRAY, OBJECT等）输出ARRAY时会用结构表示，而且可通过PRINT_R($STR,TRUE)来使PRINT_R()不输出而返回PRINT_R处理后的值;\r\n\r\n4.PRINTF() :是函数 把文字格式化后输出，参考C语言\r\n\r\n5.SPRINTF() ： 是函数， 跟PRINTF()相似，但不打印，而是返回格式化的文字（该函数把格式化的字符串写入一个变量,而不是输出出来）其他的与PRINTF一样;\r\n\r\n6.VAR_DUMP() :是函数，输出变量的内容、类型或字符串的内容、类型、长度。', '', '0', '2017-12-26 02:07:34', '6', '1');
INSERT INTO `topic` VALUES ('5378', '18', '4', 'PHP获取文件内容的方法，对应的函数', 'a3853f9a-f65c-4902-b814-bc97b05bbec8.', null, null, null, null, null, null, '1.FILE_GET_CONTENTS()  得到文件的内容（可以以GET和POST方法获取），整个文件读入一个字符串中;\r\n\r\n2.用FOPEN() 打开URL， 以GET 方式获取内容（借助FGETS()函数）;\r\n\r\n3.用FSOCKOPEN函数 打开URL (可以以GET 和 POST 方式获取)以GET方式获取完整的数据  包括HEADER 和 BODY;\r\n\r\n4.使用CURL 库获取内容，使用CURL库之前，需查看PHP.INI，查看是否已打开了CURL扩展', '', '0', '2017-12-26 02:08:00', '6', '1');
INSERT INTO `topic` VALUES ('5379', '18', '4', 'PHP 如何获取客户端的IP地址', 'a3debfe0-f18b-429a-8d4a-4a398a74ab29.', null, null, null, null, null, null, '$_SERVER[\'REMOTE_ADDR\'] ;  通过全局数组来获得\r\n\r\nGETENV(\'REMOTE_ADDR\') ; 通过环境变量来获得\r\n当客户机使用代理的时候获取不到真实的IP地址', '', '0', '2017-12-26 02:08:45', '6', '1');
INSERT INTO `topic` VALUES ('5380', '26', '4', '防火墙最重要的任务是什么？', '62695bab-5e14-4f74-b9a0-4341aee294b3.', null, null, null, null, null, null, '切割被信任(如子域)与不被信任(如 INTERNET)的网段；\r\n划分出可提供 INTERNET 的服务与必须受保护的服务；\r\n分析出可接受与不可接受的封包状态；', '', '0', '2017-12-26 02:08:51', '29', '1');
INSERT INTO `topic` VALUES ('5381', '26', '4', '在你的 Linux 主机实地上网之前，还是得先：', '15c44e0b-ddb4-4a28-bbea-c8db61619de8.', null, null, null, null, null, null, '关闭几个不安全的服务；\r\n升级几个可能有问题的套件；\r\n架设好最起码的安全防护--防火墙--', '', '0', '2017-12-26 02:10:16', '29', '1');
INSERT INTO `topic` VALUES ('5382', '26', '4', '不同 Linux 核心版本的防火墙软件？', '3f78b781-095c-4da0-8b25-acf1b423dac5.', null, null, null, null, null, null, 'VERSION 2.0：使用 IPFWADM 这个防火墙机制；\r\nVERSION 2.2：使用的是 IPCHAINS 这个防火墙机制；\r\nVERSION 2.4 与 2.6 ：主要是使用 IPTABLES 这个防火墙机制，不过在某些早期的 VERSION 2.4 版本的 DISTRIBUTIONS 当中，亦同时支持 IPCHAINS (编译成为模块)，好让用户仍然可以使用来自 2.2 版的 IPCHAINS 的防火墙规划。不过，不建议在 2.4 以上的核心版本使用 IPCHAINS ', '', '0', '2017-12-26 02:11:40', '29', '1');
INSERT INTO `topic` VALUES ('5383', '18', '4', '数据库中的事务是什么?', 'f136c44f-18ab-462d-9cbf-24572a2c6614.', null, null, null, null, null, null, '事务（TRANSACTION）是作为一个单元的一组有序的数据库操作。如果组中的所有操作都成功，则认为事务成功，即使只有一个操作失败，事务也不成功。如果所有操作完成，事务则提交，其修改将作用于所有其他数据库进程。如果一个操作失败，则事务将回滚，该事务所有操作的影响都将取消。ACID 四大特性,原子性、隔离性、一致性、持久性。', '', '0', '2017-12-26 02:11:40', '6', '1');
INSERT INTO `topic` VALUES ('5384', '18', '4', '了解XSS攻击吗？如何防止？', 'a41e6ac0-38b8-4385-8301-1272a5485a6c.', null, null, null, null, null, null, 'XSS是跨站脚本攻击，首先是利用跨站脚本漏洞以一个特权模式去执行攻击者构造的脚本，然后利用不安全的ACTIVEX控件执行恶意的行为。\r\n使用HTMLSPECIALCHARS()函数对提交的内容进行过滤，使字符串里面的特殊符号实体化。\r\n', '', '0', '2017-12-26 02:11:57', '6', '1');
INSERT INTO `topic` VALUES ('5385', '26', '4', 'SQL注入漏洞产生的原因？如何防止？', 'faac7b85-3327-41ca-9647-92e165a335d9.', null, null, null, null, null, null, 'SQL注入产生的原因：程序开发过程中不注意规范书写SQL语句和对特殊字符进行过滤，导致客户端可以通过全局变量POST和GET提交一些SQL语句正常执行。', '', '0', '2017-12-26 02:12:21', '6', '1');
INSERT INTO `topic` VALUES ('5386', '26', '4', '假设对外的 IP 固定为 192.168.1.100 ，若不想使用伪装，该如何处理？', '59bf235c-cbdb-4d26-9098-dcc7be5abed9.', null, null, null, null, null, null, '答：\r\nIPTABLES -T NAT -A POSTROUTING -O ETH0 -J SNAT \\\r\n         --TO-SOURCE 192.168.1.100', '', '0', '2017-12-26 02:13:56', '29', '1');
INSERT INTO `topic` VALUES ('5387', '18', '4', '框架中什么是单一入口和多入口 ， 单一入口的优缺点？', '30834840-a373-4f44-acd3-58afac2dd2e0.', null, null, null, null, null, null, '\r\n    多口就是通过访问不同的文件来完成用户请求。单一入口只 WEB 程序所有的请求都指向一个脚本文件的。\r\n    单一入口更容易控制权限，方便对 HTTP 请求可以进行安全性检查。\r\n    缺点：URL 看起来不那么美观，特别是对搜索引擎来说不友好。', '', '0', '2017-12-26 02:14:01', '6', '1');
INSERT INTO `topic` VALUES ('5388', '26', '4', '假设你的 NAT 服务器对外 IP 有好几个，那你想要轮流使用不同的 IP 时，又该如何设定？举例来说，你的 IP 范围为 192.168.1.210~192.168.1.220', 'd228f216-52ea-4b19-90e3-838c5511533f.', null, null, null, null, null, null, '答：\r\nIPTABLES -T NAT -A POSTROUTING -O ETH0 -J SNAT \\\r\n         --TO-SOURCE 192.168.1.210-192.168.1.220', '', '0', '2017-12-26 02:14:33', '29', '1');
INSERT INTO `topic` VALUES ('5389', '26', '4', '对于关系型数据库而言，索引是相当重要的概念，请回答有关索引的几个问题：\r\na)、索引的目的是什么？', '50adc267-daeb-4699-9798-c9d777d5560e.', null, null, null, null, null, null, '快速访问数据表中的特定信息，提高检索速度\r\n创建唯一性索引，保证数据库表中每一行数据的唯一性。\r\n加速表和表之间的连接\r\n使用分组和排序子句进行数据检索时，可以显著减少查询中分组和排序的', '', '0', '2017-12-26 02:15:04', '6', '1');
INSERT INTO `topic` VALUES ('5390', '26', '4', '索引对数据库系统的负面影响是什么？', '50e29620-9d08-411e-8f95-6e7080fa6e0c.', null, null, null, null, null, null, '创建索引和维护索引需要耗费时间，这个时间随着数据量的增加而增加；索引需要占用物理空间，不光是表需要占用数据空间，每个索引也需要占用物理空间；当对表进行增、删、改、的时候索引也要动态维护，这样就降低了数据的维护速度。', '', '0', '2017-12-26 02:15:23', '6', '1');
INSERT INTO `topic` VALUES ('5391', '18', '4', '为数据表建立索引的原则有哪些？', 'c9282edd-f010-4695-93a2-88e36a61fa69.', null, null, null, null, null, null, '\r\n    在最频繁使用的、用以缩小查询范围的字段上建立索引。\r\n    在频繁使用的、需要排序的字段上建立索引', '', '0', '2017-12-26 02:15:57', '6', '1');
INSERT INTO `topic` VALUES ('5392', '26', '3', '要拥有一部安全的主机，必须要有（）；（）；（）；（）。 仅有防火墙是不足够的；', 'a9447a90-1238-4bd9-913f-9bac32f1a991.', null, null, null, null, null, null, '良好的主机权限设定  随时的更新套件  定期的重要数据备份  完善的员工教育训练', '', '0', '2017-12-26 02:16:01', '29', '1');
INSERT INTO `topic` VALUES ('5393', '26', '4', '什么情况下不宜建立索引？', '61d5086b-2dd4-4676-83be-aa8ad6fedc10.', null, null, null, null, null, null, '\r\n    对于查询中很少涉及的列或者重复值比较多的列，不宜建立索引。\r\n    对于一些特殊的数据类型，不宜建立索引，比如文本字段（TEXT）等。', '', '0', '2017-12-26 02:16:18', '6', '1');
INSERT INTO `topic` VALUES ('5394', '18', '4', '简述在MySQL数据库中MyISAM和InnoDB的区别', 'a5a70661-86c7-4f58-9153-67487d5d0255.', null, null, null, null, null, null, '区别于其他数据库的最重要的特点就是其插件式的表存储引擎。切记：存储引擎是基于表的，而不是数据库。\r\n\r\nINNODB与MYISAM的区别：\r\n\r\nINNODB存储引擎: 主要面向OLTP(ONLINE TRANSACTION PROCESSING，在线事务处理)方面的应用，是第一个完整支持ACID事务的存储引擎(BDB第一个支持事务的存储引擎，已经停止开发)。', '', '0', '2017-12-26 02:16:37', '6', '1');
INSERT INTO `topic` VALUES ('5395', '26', '3', '防火墙最大的功能就是帮助你（），可以管制来源与目标的 IP ', '3f35bb39-0ed0-45ee-9149-81f79f52aa0e.', null, null, null, null, null, null, '『限制某些服务的存取来源』', '', '0', '2017-12-26 02:16:41', '29', '1');
INSERT INTO `topic` VALUES ('5396', '18', '4', '写出三种以上MySQL数据库存储引擎的名称（提示：不区分大小写）', 'ccb06c45-cde5-4c5c-bc41-4d202adaabb1.', null, null, null, null, null, null, 'MYISAM、INNODB、BDB（BERKELEYDB）、MERGE、MEMORY（HEAP）、EXAMPLE、FEDERATED、\r\nARCHIVE、CSV、BLACKHOLE、MAXDB 等等十几个引擎', '', '0', '2017-12-26 02:17:08', '6', '1');
INSERT INTO `topic` VALUES ('5397', '18', '4', ' 什么是面向对象？主要特征是什么？几大原则是什么？', 'c85103f0-22da-4a26-a59b-43439440fbac.', null, null, null, null, null, null, '面向对象是程序的一种设计模式，它利于提高程序的重用性，使程序机构更加清晰。 主要特征是：封装、继承、多态。\r\n五大基本原则： 单一职责原则；开放封闭原则；替换原则； 依赖原则； 接口分离原则。', '', '0', '2017-12-26 02:17:26', '6', '1');
INSERT INTO `topic` VALUES ('5398', '26', '3', '防火墙依据封包抵挡的阶层，可以分为 【】 以及 【】 两种类型。', 'd31dc63a-9782-4471-be9a-e246aba5905a.', null, null, null, null, null, null, 'PROXY  IP FILTER (封包过滤)', '', '0', '2017-12-26 02:17:42', '29', '1');
INSERT INTO `topic` VALUES ('5399', '18', '4', '使用过 Memcache 缓存吗，如果使用过，能够简单的描述一下它的工作原理吗？', '64d61d8a-96d6-4c7b-9cba-cc123b4f4c42.', null, null, null, null, null, null, 'MEMCAHCE 是把所有的数据保存在内存当中，采用 HASH 表的方式，每条数据由 KEY 和 VALUE 组成，每个 KEY 是独一无二的，当要访问某个值的时候先按照找到值，然后返回结果。\r\nMEMCAHCE 采用 LRU 算法来逐渐把过期数据清除掉。', '', '0', '2017-12-26 02:18:18', '6', '1');
INSERT INTO `topic` VALUES ('5400', '26', '3', '在防火墙内，但不在 LAN 内的服务器所在网域，通常被称为 【】', '2b3ab9e2-08da-4076-9bd3-7ef05f5b81dc.', null, null, null, null, null, null, 'DMZ (非军事区)', '', '0', '2017-12-26 02:18:45', '29', '1');
INSERT INTO `topic` VALUES ('5401', '26', '3', 'ptables 的预设 table 共有三个，分别是 （）, （） 及 （） ，惯用者为 filter (本机) 与 nat (后端主机)。', '7ced2c05-6b75-4a45-a6a7-76e99db6cd81.', null, null, null, null, null, null, 'FILTER  NAT  MANGLE', '', '0', '2017-12-26 02:21:31', '29', '1');
INSERT INTO `topic` VALUES ('5402', '26', '4', '主机名的目的在于？', 'f4ebc95a-4d5d-4c11-aee0-819c31c9d6bd.', null, null, null, null, null, null, '辅助人们记忆 TCP/IP 的 IP 数值', '', '0', '2017-12-26 02:22:48', '29', '1');
INSERT INTO `topic` VALUES ('5403', '26', '3', '合法的主机名必须要透过（）后，才能够在 Internet 上面完整的生效', 'd13407d3-0c03-459d-acc6-831c30406e3e.', null, null, null, null, null, null, '合法授权', '', '0', '2017-12-26 02:23:32', '29', '1');
INSERT INTO `topic` VALUES ('5404', '26', '4', '主机名的由来？', '14939130-27b8-4e95-9a82-339ea226c0c6.', null, null, null, null, null, null, '因为 IP 是这么难记忆的东西，因此人们就使用『名字』来对应到主机的 IP，这就是主机名的由来。', '', '0', '2017-12-26 02:24:40', '29', '1');
INSERT INTO `topic` VALUES ('5405', '26', '4', '目前远程联机服务器的主要类型有哪些？', '49a86b5b-e36b-44f3-94d8-0453a28f2d5d.', null, null, null, null, null, null, '如果以登入的联机界面来分类，基本上有文字接口与图形接口两种：\r\n\r\n文字接口明码： TELNET, RSH 等为主，目前非常少用；\r\n文字接口密码： SSH 为主，已经取代上述的 TELNET, RSH 等明码方式；\r\n图形接口： XDMCP, VNC, RDP 等较为常见', '', '0', '2017-12-26 02:27:20', '29', '1');
INSERT INTO `topic` VALUES ('5406', '26', '4', '常见的远程登录服务有哪些？', 'a897c823-0afe-4ce1-9c92-a2be900152e5.', null, null, null, null, null, null, '有 RSH, TELNET, SSH, VNC, XDMCP 及 RDP 等；', '', '0', '2017-12-26 02:29:03', '29', '1');
INSERT INTO `topic` VALUES ('5407', '26', '4', 'ssh 的 client 端软件提供哪些程序？', 'd3171273-0be2-4aaa-a3a5-4ea59d08669b.', null, null, null, null, null, null, 'SSH 的 CLIENT 端软件提供 SSH, SCP, SFTP 等程序', '', '0', '2017-12-26 02:30:50', '29', '1');
INSERT INTO `topic` VALUES ('5408', '26', '3', '除了 Xdmcp 之外，我们可以利用 （） 来进行 X 的远程登录架构。', 'ed0dc2a3-ff69-427a-832f-ab6a5aa99115.', null, null, null, null, null, null, 'VNC  ', '', '0', '2017-12-26 02:31:43', '29', '1');
INSERT INTO `topic` VALUES ('5409', '26', '3', 'sh 的 public Key 是放在（），而 private key 是放在 （）。', 'ecf6a6e2-b52a-4a55-b72c-3617b19ed5df.', null, null, null, null, null, null, '服务器端  CLIENT 端', '', '0', '2017-12-26 02:32:42', '29', '1');
INSERT INTO `topic` VALUES ('5410', '26', '4', ' 要设定好一个网络的环境，使计算机可以顺利的连上 Internet ，那么你的计算机里面一定要有底下几个网络的参数才行？', '001e7e6e-0bb4-4594-9f16-9be5a353c084.', null, null, null, null, null, null, '分别是：\r\n\r\nIP, NETMASK, NETWORK, BROADCAST, GATEWAY, DNS IP', '', '0', '2017-12-26 02:33:47', '29', '1');
INSERT INTO `topic` VALUES ('5411', '26', '4', 'DHCP (Dynamic Host Configuration Protocol)的功能？', 'fa1a80b2-9245-48af-8f88-2829be842ef5.', null, null, null, null, null, null, 'DHCP (DYNAMIC HOST CONFIGURATION PROTOCOL) 可以提供网络参数给客户端计算机，使其自动设定网络的功能。', '', '0', '2017-12-26 02:35:10', '29', '1');
INSERT INTO `topic` VALUES ('5412', '26', '4', ' DHCP 的统一管理有什么好处？', 'e446f8e5-f3fe-4414-ad8e-a42af78e5912.', null, null, null, null, null, null, '透过 DHCP 的统一管理，在同一网域当中就比较不容易出现 IP 冲突的情况发生。', '', '0', '2017-12-26 02:36:15', '29', '1');
INSERT INTO `topic` VALUES ('5413', '26', '3', 'DHCP 可以透过 （） 的比对来提供 Static IP (或称为固定 IP)，否则通常提供客户端 dynamic IP (或称为动态 IP)。', '729fa797-175a-4f7d-8aa1-66fdc640d40e.', null, null, null, null, null, null, 'MAC', '', '0', '2017-12-26 02:37:08', '29', '1');
INSERT INTO `topic` VALUES ('5414', '26', '3', 'DHCP 服务与 （） 服务的相关性很高。', '24fc5679-2eb4-4cd8-9640-2a77ab6b7732.', null, null, null, null, null, null, 'DNS', '', '0', '2017-12-26 02:38:02', '29', '1');
INSERT INTO `topic` VALUES ('5415', '26', '4', '若 DHCP 客户端取得 IP 的速度太慢怎么办？', 'e7ba3807-2b0f-42f3-b9aa-bd721aad002e.', null, null, null, null, null, null, '可以找一下有网管 SWITCH 的 STP 设定值。', '', '0', '2017-12-26 02:38:46', '29', '1');
INSERT INTO `topic` VALUES ('5416', '26', '4', '什么是 NFS (Network FileSystem)？', '5f75a875-d2ef-4abe-af92-3c43d76ed3a3.', null, null, null, null, null, null, 'NFS 就是 NETWORK FILESYSTEM 的缩写，最早之前是由 SUN 这家公司所发展出来的 (注1)。 它最大的功能就是可以透过网络，让不同的机器、不同的操作系统、可以彼此分享个别的档案 (SHARE FILES)。', '', '0', '2017-12-26 02:40:08', '29', '1');
INSERT INTO `topic` VALUES ('5417', '26', '4', '什么是 RPC (Remote Procedure Call)？', '1cff6be3-772e-44f7-9076-cf685842773e.', null, null, null, null, null, null, 'RPC 最主要的功能就是在指定每个 NFS 功能所对应的 PORT NUMBER ，并且回报给客户端，让客户端可以连结到正确的埠口上去。', '', '0', '2017-12-26 02:41:11', '29', '1');
INSERT INTO `topic` VALUES ('5418', '26', '3', 'NFS 服务器与客户端的使用者（）、（） 最好要一致，可以避免权限错乱。', 'd57ba062-8127-4ee6-9be8-4a772b0fe0dc.', null, null, null, null, null, null, '账号名称  UID', '', '0', '2017-12-26 02:42:26', '29', '1');
INSERT INTO `topic` VALUES ('5419', '26', '3', 'NFS 服务器预设对客户端的 root 进行权限压缩，通常压缩其成为 （）或 （）。', '74969e8c-d994-4933-aaf0-d59502d4a33e.', null, null, null, null, null, null, 'NFSNOBODY   NOBODY', '', '0', '2017-12-26 02:43:00', '29', '1');
INSERT INTO `topic` VALUES ('5420', '26', '4', 'NIS 的主要功能？', 'dae4c6ac-44b1-4b67-890f-418775fd8692.', null, null, null, null, null, null, 'NIS 的主要功能：管理帐户信息。', '', '0', '2017-12-26 02:44:36', '29', '1');
INSERT INTO `topic` VALUES ('5421', '18', '4', '熟悉思科路由交换机的配置命令？', '603abd8e-21c1-4075-9a90-d0e525b39233.', null, null, null, null, null, null, '用户模式，特权模式，全局配置模式，接口模式\r\n\r\n', '', '0', '2017-12-26 02:45:33', '6', '1');
INSERT INTO `topic` VALUES ('5422', '26', '4', 'Network Information Service (NIS) 也可以称为 Sun Yellow Pages (yp)，主要是负责？', '1061a2c4-0abc-458f-914c-7e8bf20e8eed.', null, null, null, null, null, null, 'NETWORK INFORMATION SERVICE (NIS) 也可以称为 SUN YELLOW PAGES (YP)，主要是负责在网域当中帮忙 NIS CLIENT 端查寻账号与密码以及其他相关网络参数的服务', '', '0', '2017-12-26 02:46:10', '29', '1');
INSERT INTO `topic` VALUES ('5423', '26', '4', '怎么让使用者在任一部 NIS 管辖的主机登入都可以使用同一份家目录？', 'f9a64be7-8c1f-4ec6-9eb8-81b9788adb0e.', null, null, null, null, null, null, '需开启 NFS 提供 /HOME 给所有的主机挂载使用', '', '0', '2017-12-26 02:47:33', '29', '1');
INSERT INTO `topic` VALUES ('5425', '26', '4', '请简单说明 NIS Server/client 的架构？', '7d84f86f-33c6-4711-b7c3-ef6a86b53253.', null, null, null, null, null, null, 'NIS MASTER/CLIENT 的特色为：\r\nNIS SERVER 的 MASTER 先将自己的账号、密码相关档案制作成为数据库档案(DATABASE FILE)；\r\nNIS SERVER 的 MASTER 将自己的数据库档案传送到 SLAVE 上面；\r\nNIS SERVER 的 SLAVE 接收来自『信任的 NIS SERVER MASTER 主机』的数据后，更新自己的数据库，使自己的数据库与 MASTER 主机的数据同步；\r\n网域当中的所有 NIS CLIENT 查寻 NIS SERVER 时，会找寻『最先响应的那一部 NIS 主机的数据库内容』。\r\n也就是说，架设 SLAVE NIS SERVER 可以分担区域内 NIS 的工作！', '', '0', '2017-12-26 02:48:51', '29', '1');
INSERT INTO `topic` VALUES ('5426', '26', '4', '请简单说明 NIS server 的功能与工作流程？', 'ed307239-90d6-4cad-ad5f-c39aa782d9ed.', null, null, null, null, null, null, '当你有多部具有相同账号的 LINUX 主机时，即可利用 NIS 所提供的服务，来利用一部 NIS 主机掌控所有的 LINUX 主机的登入时所需查阅的账号与密码验证。流程如下：\r\nNIS SERVER 将自己系统内的 /ETC/PASSWD, /ETC/GROUP, /ETC/HOSTS 等制作成为 DBM 的数据库格式档案；\r\nNIS CLIENT 若有用户登入的要求时，会前往 NIS SERVER 搜寻数据库里面的数据做为验证之用。\r\n每次更动 NIS SERVER 上面的用户数据时，则 NIS SERVER 需要重新制作 DBM 数据库档案才行！', '', '0', '2017-12-26 02:49:20', '29', '1');
INSERT INTO `topic` VALUES ('5427', '18', '4', 'LVS三种模式的工作过程？', 'c4622393-bf3f-4073-bc1c-2c3e24ebb023.', null, null, null, null, null, null, 'NAT (NETWORK ADDRESS TRANSLATION)模式。LB收到用户请求包后，LB将请求包中虚拟服务器的IP地址转换为某个选定RS的IP地址，转发给RS；RS将应答包发给 LB，LB将应答包中RS的IP转为虚拟服务器的IP地址，回送给用户。\r\nIP隧道 (IP TUNNELING)模式。LB收到用户请求包后，根据IP隧道协议封装该包，然后传给某个选定的RS；RS解出请求信息，直接将应答内容传给用户。此时要求RS和LB都要支持IP隧道协议。\r\nDR(DIRECT ROUTING)模式。LB收到请求包后，将请求包中目标MAC地址转换为某个选定RS的MAC地址后将包转发出去，RS收到请求包后 ,可直接将应答内容传给用户。此时要求LB和所有RS都必须在一个物理段内,且LB与RS群共享一个虚拟IP。', '', '0', '2017-12-26 02:49:46', '6', '1');
INSERT INTO `topic` VALUES ('5428', '18', '4', '简述/etc/fstab里面个字段的含义？', 'e4265300-7e8f-4675-b2ef-2b3e49e4e179.', null, null, null, null, null, null, '因为MOUNT挂载在重启服务器后会失效，所以需要将分区信息写到/ETC/FSTAB文件中让它永久挂载：\r\n磁盘分区                挂载目录       文件格式    \r\n/DEV/SDB1              /MNT/DAVID       EXT3          DEFAULTS 0 0', '', '0', '2017-12-26 02:50:10', '6', '1');
INSERT INTO `topic` VALUES ('5429', '18', '4', 'Apache设置虚拟目录的字段？', 'f9f4058e-98ec-471e-9498-d5ae95763758.', null, null, null, null, null, null, 'NAMEVIRTUALHOST 192.168.1.2             //设置域名虚拟主机使用的IP地址\r\n<VIRTUALHOST 192.168.1.2:80>           //建立在地址上的虚拟主机区域\r\nSERVERNAME WWW.SFZHANG.COM            //虚拟主页说使用的域名\r\nDOCUMENTROOT /DATA/VHOSTS/SFZHANG    //建立虚拟主机所使用的文档根目录\r\n</VIRTUALHOST>', '', '0', '2017-12-26 02:50:26', '6', '1');
INSERT INTO `topic` VALUES ('5430', '26', '4', '什么是 GMT (格林威治) 时间与 UTC 时间？', 'a59c49a1-917e-4210-aaab-750fd961b543.', null, null, null, null, null, null, '由于地球是圆的，所以同一时间点上，在地球共可分为 24 个时区，其中，我们以欧洲的格林威治时间为一个对照的依据，这个即是 GMT 时间。台湾时间比 GMT 时间快了 8 小时。至于 UTC 时间则是由原子钟所计算的时间，这个时间是相当的准确的， 主要仍以格林威治时间为时区！', '', '0', '2017-12-26 02:51:33', '29', '1');
INSERT INTO `topic` VALUES ('5431', '26', '3', 'NTP 服务器之间的时间误差不可超过（），否则 NTP 服务会自动关闭。', '819fd0b6-8c1f-4aea-9c21-15ad247982b6.', null, null, null, null, null, null, ' 1000 秒', '', '0', '2017-12-26 02:52:30', '29', '1');
INSERT INTO `topic` VALUES ('5432', '26', '3', '在 Linux 下想要手动处理时间时，需以 date 设定时间后，以 （） 来写入 BIOS 所记录的时间。', '984ed407-1408-417f-b477-289a75f4b98e.', null, null, null, null, null, null, 'HWCLOCK -W', '', '0', '2017-12-26 02:52:55', '29', '1');
INSERT INTO `topic` VALUES ('5433', '26', '3', 'NTP 提供的客户端软件为 （） 这个指令。', 'db37f653-0b12-4de9-80b2-cf1a7c3ad3da.', null, null, null, null, null, null, 'NTPDATE', '', '0', '2017-12-26 02:54:28', '29', '1');
INSERT INTO `topic` VALUES ('5434', '26', '3', 'NTP 服务器的联机状态可以使用 （） 及 （） 来查询。', '35ab27fb-69e5-4b7d-9aeb-db572fcc9adc.', null, null, null, null, null, null, 'NTPSTAT  NTPQ -P', '', '0', '2017-12-26 02:55:12', '29', '1');
INSERT INTO `topic` VALUES ('5435', '26', '4', 'Linux 系统本来就有的两种时间？', '4a66756c-ab67-4c39-81a9-c3260ac53ff4.', null, null, null, null, null, null, '一种是 LINUX 以 1970/01/01 开始计数的系统时间，一种则是 BIOS 记载的硬件时间。', '', '0', '2017-12-26 02:56:09', '29', '1');
INSERT INTO `topic` VALUES ('5436', '26', '3', 'SAMBA 可以让 （） 与 （） 直接进行文件系统的使用。', '340b6c3e-0746-4268-b4d6-900088a0a659.', null, null, null, null, null, null, 'LINUX  WINDOWS', '', '0', '2017-12-26 02:57:33', '29', '1');
INSERT INTO `topic` VALUES ('5437', '26', '3', 'amba 使用的 daemon 主要有管理分享权限的 （） 以及 NetBIOS 解析的 （）。', '00502c08-6823-439f-9772-a25971d10d2d.', null, null, null, null, null, null, 'SMBD   NMBD', '', '0', '2017-12-26 02:58:30', '29', '1');
INSERT INTO `topic` VALUES ('5438', '26', '3', ' Samba 的主配置文件之档名为（）。', '50f36ac1-d42b-46d9-984c-46f0cf2b3080.', null, null, null, null, null, null, 'SMB.CONF', '', '0', '2017-12-26 03:00:05', '29', '1');
INSERT INTO `topic` VALUES ('5439', '26', '3', 'Samba 主要支持 （） 的打印机服务器。', '4e4a2132-0106-42ef-9486-4cb2f8c26063.', null, null, null, null, null, null, 'CUPS', '', '0', '2017-12-26 03:01:02', '29', '1');
INSERT INTO `topic` VALUES ('5441', '26', '4', '一般来说， SAMBA 使用的配置文件放置在哪里？档名为何？', 'ab83fcba-65fb-4910-ad77-ac97812b29ae.', null, null, null, null, null, null, '使用的档名为 SMB.CONF ，通常会放置在 /ETC/SAMBA/SMB.CONF 里面，不过，最好可以使用 RPM -QC PACKAGENAME 来查询！', '', '0', '2017-12-26 03:01:46', '29', '1');
INSERT INTO `topic` VALUES ('5442', '26', '4', ' 哪一个指令可以用来判断 smb.conf 这个配置文件的正确性？', 'e0c82169-be52-45b6-adfb-e28732d1705e.', null, null, null, null, null, null, '当我们修改完 SMB.CONF 之后，记得要以 TESTPARM 来进行 SAMBA 的确认！', '', '0', '2017-12-26 03:02:13', '29', '1');
INSERT INTO `topic` VALUES ('5443', '26', '4', ' 哪一个指令可以用来察看 SAMBA 主机分享出什么目录？', '08046f16-2151-4492-8ec1-a87a09579604.', null, null, null, null, null, null, '利用 SMBCLIENT 即可：『SMBCLIENT -L NETBIOSNAME -U USERNAME 』！', '', '0', '2017-12-26 03:02:33', '29', '1');
INSERT INTO `topic` VALUES ('5444', '26', '4', ' 在 Linux 客户端挂载网芳的文件系统主要是依据哪个指令来达成的？', '440335f5-c9a2-48ee-ab12-1d7f5f74b63e.', null, null, null, null, null, null, '就是透过 MOUNT.CIFS 或 MOUNT -T CIFS 来达成的！', '', '0', '2017-12-26 03:02:57', '29', '1');
INSERT INTO `topic` VALUES ('5445', '26', '4', ' 使用 smbpasswd 去新增一位使用者 badbird，让他可以登入我的 Linux SAMBA 主机，但是无论如何就是无法新增。你认为原因可能是什么？', '7e2325d2-5e0b-4ab6-bb79-0ceaede74d5a.', null, null, null, null, null, null, '由于 SAMBA 用户的信息必须要存在于 /ETC/PASSWD 里面，既然无法新增，应该先确认 BADBIRD 这个用户已经存在于 LINUX 系统当中了！', '', '0', '2017-12-26 03:03:26', '29', '1');
INSERT INTO `topic` VALUES ('5446', '26', '4', ' 代理服务器的功能？', 'f1f660b2-300c-4550-b6cc-2e2d528e10ff.', null, null, null, null, null, null, '代理服务器的功能是在代理用户向因特网要求 WEB PAGE 的数据，同时达成 WEB PAGES 的快取记录，以达到带宽节省的目的； 此外，还可以额外的达成防火墙的功能。', '', '0', '2017-12-26 03:04:32', '29', '1');
INSERT INTO `topic` VALUES ('5447', '26', '4', '一般来说，代理服务器的功能主要有？', '93e7c95f-7110-4404-99af-b8d9c80e3627.', null, null, null, null, null, null, '作为 WWW 的网页资料取得代理人\r\n作为内部区网的单点对外防火墙系统\r\n', '', '0', '2017-12-26 03:06:15', '29', '1');
INSERT INTO `topic` VALUES ('5448', '26', '4', '架设 Proxy 后的优点？', '2300d7bc-4db1-4e81-b852-59387aa7bb49.', null, null, null, null, null, null, '节省单点对外的网络带宽，降低网络负载\r\n以较短的路径取得网络数据，有网络加速的感觉\r\n透过上层代理服务器的辅助，达到自动数据分流的效果\r\n提供防火墙内部的计算机连上 INTERNET', '', '0', '2017-12-26 03:07:20', '29', '1');
INSERT INTO `topic` VALUES ('5449', '26', '4', ' 在预设的情况下，CentOS 的 squid 具有哪几个特色？', 'a9eb26c5-c796-4a30-b9c0-f1af430ac25a.', null, null, null, null, null, null, '仅有本机 (LOCALHOST, 127.0.0.1) 来源可以使用这个 SQUID 功能\r\nSQUID 所监听的 PROXY 服务埠口在 PORT 3128\r\n快取目录所在的位置在 /VAR/SPOOL/SQUID/ ，且仅有 100MB 的磁盘高速缓存量\r\n除了 SQUID 程序所需要的基本内存之外，尚提供 8MB 的内存来给热门档案快取在内存中 (因为内存速度比硬盘还快)\r\n默认启动 SQUID 程序的用户为 SQUID 这个账号 (与磁盘高速缓存目录权限有关)', '', '0', '2017-12-26 03:08:10', '29', '1');
INSERT INTO `topic` VALUES ('5450', '26', '3', ' 如果需要大容量的磁盘，通常会使用（ ） 磁盘阵列的架构。', '615cd432-381c-47a4-ba84-157eb160ea03.', null, null, null, null, null, null, 'RAID', '', '0', '2017-12-26 03:10:03', '29', '1');
INSERT INTO `topic` VALUES ('5451', '18', '4', '请使用Linux系统命令统计出establish状态的连接数有多少?', 'd30f2af9-749c-444e-9318-cdcc7f238c45.', null, null, null, null, null, null, 'NETSTAT -AN |GREP 80 |GREP ESTABLISHED |WC -L', '', '0', '2017-12-26 03:10:34', '6', '1');
INSERT INTO `topic` VALUES ('5452', '26', '3', '取得外部磁盘容量的作法，主要有 ()及  两()大类的方式。', '2e90e3ad-0e3a-42b0-af59-f33ec480f7e2.', null, null, null, null, null, null, 'NAT   SAN', '', '0', '2017-12-26 03:10:46', '29', '1');
INSERT INTO `topic` VALUES ('5453', '18', '4', 'mysql数据库的备份还原是怎么做的？', 'b2e5bc74-2498-4f4e-bbfc-b5e4365460e0.', null, null, null, null, null, null, '平时采用两种方法来做：1）利用MYSQL自带的使用工具MYSQLDUMP和MYSQL来备份还原数据库 2）利用第三方的MYSQL管理工具比如：MYSQLADMIN 3）停止MYSQLD服务拷贝数据文件', '', '0', '2017-12-26 03:10:50', '6', '1');
INSERT INTO `topic` VALUES ('5454', '18', '4', '简述运维工程师的职责？', '3c29d594-29f9-43d0-8102-f467983c9af7.', null, null, null, null, null, null, '负责公司运营平台的正常工作；加强平台的自动化管理；随便写写，写好听的就行…..', '', '0', '2017-12-26 03:11:03', '6', '1');
INSERT INTO `topic` VALUES ('5455', '18', '4', 'Linux系统是由那些部分组成？', '80bd1dde-5aac-48bf-b6d2-a04a28d97b97.', null, null, null, null, null, null, 'LINUX系统内核，SHELL，文件系统和应用程序四部分组成。', '', '0', '2017-12-26 03:11:17', '6', '1');
INSERT INTO `topic` VALUES ('5456', '18', '4', ')用一条命令查看目前系统已启动服务所监听的端口？', '5635b30c-9f7e-4127-b943-f2f46810a333.', null, null, null, null, null, null, '[ROOT@NAGIOS ~]# NETSTAT -ANTL |GREP “LISTEN”  ', '', '0', '2017-12-26 03:11:35', '6', '1');
INSERT INTO `topic` VALUES ('5457', '18', '4', '使用lsof命令查看占用80端口的进程？', '97555bfd-bae8-4bfa-80f6-b85f4eb022b5.', null, null, null, null, null, null, '[ROOT@NAGIOS ~]# LSOF `WHICH HTTPD`   或者LSOF -I:80也可以', '', '0', '2017-12-26 03:11:58', '6', '1');
INSERT INTO `topic` VALUES ('5458', '26', '4', 'iSCSI 协议主要分为 ？', 'd09ed08b-ace5-4406-bd84-68aed7f836e1.', null, null, null, null, null, null, 'ISCSI 协议主要分为 ISCSI TARGET (提供磁盘装置者) 及 ISCSI INITIATOR (存取 TARGET 磁盘)。', '', '0', '2017-12-26 03:13:12', '29', '1');
INSERT INTO `topic` VALUES ('5459', '26', '4', '一般定义 target 名称为？', '984c56b0-70b0-4a96-b6a1-8f1721e74544.', null, null, null, null, null, null, 'IQN.YYYY-MM.<REVERSED DOMAIN NAME>:IDENTIFIER', '', '0', '2017-12-26 03:13:41', '29', '1');
INSERT INTO `topic` VALUES ('5460', '26', '3', '一部 target 里面可分享多个磁盘，每个磁盘都是一个 （）。', 'b6fca016-d5cd-4e39-a062-ce0797e1cfd6.', null, null, null, null, null, null, 'LUN', '', '0', '2017-12-26 03:14:05', '29', '1');
INSERT INTO `topic` VALUES ('5461', '26', '3', ' iSCSI initiator 主要透过（） 软件达成链接到 target 的任务。', 'd2783abf-8cf6-4fcd-b86c-eeb77f84aa76.', null, null, null, null, null, null, ' ISCSI-INITIATOR-UTILS', '', '0', '2017-12-26 03:14:50', '29', '1');
INSERT INTO `topic` VALUES ('5462', '18', '4', '统计出一台web server上的各个状态（ESTABLISHED/SYN_SENT/SYN_RECV等）的个数？', '2e747595-1904-4065-b096-b3a51acc6d1a.', null, null, null, null, null, null, '[ROOT@NAGIOS ~]# NETSTAT -ANTL |GREP “ESTABLISHED” |WC -L\r\n[ROOT@NAGIOS ~]# NETSTAT -ANTL |GREP “SYN_SENT” |WC -L\r\n[ROOT@NAGIOS ~]# NETSTAT -ANTL |GREP “SYN_RECV” |WC -L\r\n上面的命令可以用一条命令来统计出来TCP各种状态连接总数:\r\n[ROOT@NAGIOS ~]# NETSTAT -N |GREP ^TCP |AWK ‘{PRINT $NF}’ |SORT -R |UNIQ -C \r\n\r\n[ROOT@NAGIOS ~]# NETSTAT -N |AWK ‘/^TCP/{++S[$NF]}END{FOR (I IN S ) PRINT I,S[I]}’   ', '', '0', '2017-12-26 03:15:08', '6', '1');
INSERT INTO `topic` VALUES ('5463', '26', '3', ' iscsi-initiator-utils 主要提供 （）来完成所有的动作。', 'dd8df850-2e42-483b-b61d-34c7158a493f.', null, null, null, null, null, null, 'ISCSIADM ', '', '0', '2017-12-26 03:15:19', '29', '1');
INSERT INTO `topic` VALUES ('5464', '24', '4', '查找/usr/local/apache/logs目录最后修改时间大于30天的文件，并删除？', 'b2d5e3d7-4db8-4b98-8418-65532fdb340f.', null, null, null, null, null, null, 'FIND  /USR/LOCAL/APACHE/LOGS -TYPE F -MTIME +30 -EXEC RM -F {}  \\;', '', '0', '2017-12-26 03:15:29', '6', '1');
INSERT INTO `topic` VALUES ('5465', '26', '4', ' DNS 查询的指令主要有？', 'c7268b26-2c29-4631-9421-802e98509b4c.', null, null, null, null, null, null, ' HOST, NSLOOKUP, DIG, WHOIS 等等', '', '0', '2017-12-26 03:16:44', '29', '1');
INSERT INTO `topic` VALUES ('5466', '26', '4', ' 反解的纪录主要有？', '4facc6d2-6e5a-4f66-96e1-ceabfc7df997.', null, null, null, null, null, null, '反解的纪录主要有： SOA, PTR 等。', '', '0', '2017-12-26 03:17:13', '29', '1');
INSERT INTO `topic` VALUES ('5467', '26', '4', '正解的纪录(record)主要有？', '351985b8-5434-4db7-af19-4f173ce82a1a.', null, null, null, null, null, null, 'SOA, A, MX, NS, CNAME, TXT 及 HINFO 等', '', '0', '2017-12-26 03:17:39', '29', '1');
INSERT INTO `topic` VALUES ('5468', '24', '4', '添加一条到192.168.3.0/24的路由，网关为192.168.1.254？', 'b93b9b34-fdf1-4791-8040-51c95c6296d3.', null, null, null, null, null, null, 'ROUTE ADD  -NET 192.168.3.0 NETMASK 255.255.255.0 GW 192.168.1.254', '', '0', '2017-12-26 03:17:42', '6', '1');
INSERT INTO `topic` VALUES ('5469', '24', '4', '利用sed命令将test.txt中所有的回车替换成空格？', '46b15bd4-8617-4c7d-802a-f004c88778c2.', null, null, null, null, null, null, 'SED -I S/\\R/ /G TEST.TXT ', '', '0', '2017-12-26 03:19:35', '6', '1');
INSERT INTO `topic` VALUES ('5470', '24', '4', '在每周6的凌晨3:15执行/home/shell/collect.pl，并将标准输出和标准错误输出到/dev/null设备，请写出crontab中的语句？', '4695c728-8f02-432d-b653-ade65925c2bd.', null, null, null, null, null, null, '15 3 * * 6 /HOME/SHELL/COLLECT.PL  > /DEV/NULL  2>&1', '', '0', '2017-12-26 03:23:27', '6', '1');
INSERT INTO `topic` VALUES ('5471', '24', '4', '匹配文本中的key，并打印出该行及下面的5行？', 'cb0f1659-7865-4253-b446-891767102702.', null, null, null, null, null, null, 'GREP -A5 KEY FILENAME', '', '0', '2017-12-26 03:35:35', '6', '1');
INSERT INTO `topic` VALUES ('5472', '24', '4', 'dmesg命令中看到ip_conntrack: table full, dropping packet.，如何解决？', 'c9feef57-b62d-49da-bcf8-5950f12977ad.', null, null, null, null, null, null, '加大IP_CONNTRACK_MAX 的值；\r\n降低IP_CONNTRACK_TIMEOUT的时间；', '', '0', '2017-12-26 03:35:53', '6', '1');
INSERT INTO `topic` VALUES ('5473', '26', '2', '在你进行实施的过程中，公司制作的一款软件系统缺少某一项功能，而且公 司也明确表示不会再为系统做任何的修改或添加任何的功能， 而客户也坚决要求', 'f0c1482f-5422-4fee-baf9-d55e0d527afb.', null, null, null, null, null, null, '正确', '需要这一项功能！对于实施人员来说，应该怎么去合理妥善处理这个问题？ answer:说清楚你实施的是一个项目，不是定制软件。比如超市里卖的皮鞋和鞋匠做的皮鞋，这都是鞋子，但前者是商品，很多一样的商品，你可以买到差', '0', '2017-12-26 09:16:51', '36', '1');
INSERT INTO `topic` VALUES ('5474', '24', '2', 'cat /proc/interrupts 是显示中断', '740a54a2-a0ae-4626-9219-79331172d07d.', null, null, null, null, null, null, '正确', 'cat /proc/interrupts 显示中断', '0', '2017-12-26 09:18:04', '30', '1');
INSERT INTO `topic` VALUES ('5475', '26', '2', '查询出房费都大于200的帐号。', 'c9609155-1175-4c9c-9733-ec84bd2f6aaf.', null, null, null, null, null, null, '正确', 'Select accounts form guest where money >’200’', '0', '2017-12-26 09:18:38', '36', '1');
INSERT INTO `topic` VALUES ('5476', '26', '4', '查询出1月份每个帐号酒水和房费的总金额。', '3f450dad-705f-43d5-b488-4242b1728620.', null, null, null, null, null, null, 'SELECT SUM(DETAIL),DETAILS FORM GUEST WHERE DETAILS=’房费’OR DETAILS=’酒水’ GROUP BY DETAIL', '', '0', '2017-12-26 09:19:35', '36', '1');
INSERT INTO `topic` VALUES ('5478', '18', '3', '可以使用_________来观察 RPC program 之间的关系！', '5cdfe0dd-ae08-44c9-8905-53f76854b318.', null, null, null, null, null, null, 'RPCINFO', '', '0', '2017-12-26 09:19:54', '48', '1');
INSERT INTO `topic` VALUES ('5479', '26', '4', '删除1月份班次为空的记录。', '30bb55e4-7f5f-4452-ab85-22eec8976214.', null, null, null, null, null, null, 'DELETE FORM GUEST WHERE DATE=>’2010-01-01’ AND DATE=', '', '0', '2017-12-26 09:20:16', '36', '1');
INSERT INTO `topic` VALUES ('5480', '26', '4', '将不是房费的记帐代码的班次都更改为‘001’。', '478a2630-78aa-4981-863e-606f3913f5b4.', null, null, null, null, null, null, 'UPDATE GUEST SET CLASS=’001’WERE DETAILS >', '', '0', '2017-12-26 09:21:06', '36', '1');
INSERT INTO `topic` VALUES ('5481', '32', '4', '选择MySQL而不选orcale的原因', 'c19da043-e1d0-41bc-8133-15050d22d27f.', null, null, null, null, null, null, 'MYSQL开源\r\nMYSQL轻便快捷\r\nMYSQL对命令行和图形界面的支持都很好\r\nMYSQL支持通过QUERY BROWSER进行管理', '', '0', '2017-12-26 17:59:09', '67', '1');
INSERT INTO `topic` VALUES ('5482', '32', '4', 'MySQL中如何将表导出为XML文件?', '88927cfe-e9d7-4cc4-8a9f-4dd9e92d3697.', null, null, null, null, null, null, '我们可以使用’-E’(EXPORT)选项来把MYSQL表或整个数据库导出到XML文件。当处理大型表的时候我们可能需要手动导出，不过对于小表的话可以直接使用想PHPMYADMIN等这样的工具', '', '0', '2017-12-26 17:59:53', '67', '1');
INSERT INTO `topic` VALUES ('5483', '32', '4', '查询员工表所有数据, 并说明使用*的缺点 ', '20046217-a2ed-49b0-8ccc-83702ae62ccf.', null, null, null, null, null, null, 'SELECT* FROM EMP;\r\n\r\n使用*的缺点有：查询出了不必要的列；效率上不如直接指定列名。', '', '0', '2017-12-26 18:00:28', '62', '1');
INSERT INTO `topic` VALUES ('5484', '32', '4', '查询职位(JOB)为\'PRESIDENT\'的员工的工资', '15d50e94-789c-4315-b0ff-e96c955e22a2.', null, null, null, null, null, null, 'SELECT* FROM EMP WHERE JOB = \'PRESIDENT\';', '', '0', '2017-12-26 18:02:07', '62', '1');
INSERT INTO `topic` VALUES ('5485', '32', '4', '查询佣金(COMM)为0或为NULL的员工信息', '4cad6675-fbcc-44e4-bdde-313e91c2960a.', null, null, null, null, null, null, 'SELECT* FROM EMP WHERE COMM = 0 OR COMM IS NULL;', '', '0', '2017-12-26 18:02:29', '62', '1');
INSERT INTO `topic` VALUES ('5486', '4', '4', '#{}和${}的区别是什么？', '3470a742-0c05-4e0a-8fbb-d7940cc5557e.', null, null, null, null, null, null, '#{}是预编译处理，${}是字符串替换。\r\nMYBATIS在处理#{}时，会将SQL中的#{}替换为?号，调用PREPAREDSTATEMENT的SET方法来赋值；\r\nMYBATIS在处理${}时，就是把${}替换成变量的值。\r\n使用#{}可以有效的防止SQL注入，提高系统安全性。', '', '0', '2017-12-26 18:03:53', '62', '1');
INSERT INTO `topic` VALUES ('5487', '32', '4', '简述基本表和视图和区别。', '67b48f7f-a830-44a0-b40b-b763ff0f9a4c.', null, null, null, null, null, null, '基本表是独立存在的表，它所对应的数据实际存储在数据 库中；视图是从一个表或多个基本表导出的表在数据库中存储有关视图的定义而不存放视图所对应的数据，视图是一个虚表 ', '', '0', '2017-12-26 18:04:17', '67', '1');
INSERT INTO `topic` VALUES ('5488', '32', '4', '当实体类中的属性名和表中的字段名不一样 ，怎么办 ？', 'ebba628f-7e0d-4b06-a7cd-aba5cfcd857e.', null, null, null, null, null, null, '第1种： 通过在查询的SQL语句中定义字段名的别名，让字段名的别名和实体类的属性名一致 \r\n\r\n第2种： 通过<RESULTMAP>来映射字段名和实体类属性名的一一对应的关系', '', '0', '2017-12-26 18:04:39', '62', '1');
INSERT INTO `topic` VALUES ('5489', '32', '4', '什么是事务？它具有哪些性质？', '42aa5685-7fea-4a78-9daf-82ecc327627e.', null, null, null, null, null, null, '构成单一逻辑工作单元的操作集合，要么完整的执行， 要么完全不执行。', '', '0', '2017-12-26 18:04:44', '67', '1');
INSERT INTO `topic` VALUES ('5490', '32', '4', '关系操作的分类', '1dbfdfeb-0ecf-425f-9161-204b8a1e6cb4.', null, null, null, null, null, null, '有查询操作和更新操作两类。查询操作是关系操作中最主要的部分，查询操作分为选择、投影、连接、除、并、交、差、笛卡尔积等。更新操作包括插入、删除、修改', '', '0', '2017-12-26 18:18:23', '67', '1');
INSERT INTO `topic` VALUES ('5491', '26', '4', '你听说过Linux下面的iptables和Firewalld么？知不知道它们是什么，是用来干什么的？', 'b10c5f1e-66a6-415a-97b5-02f179b9ad8e.', null, null, null, null, null, null, 'IPTABLES和FIREWALLD我都知道，并且我已经使用IPTABLES好一段时间了。IPTABLES主要由C语言写成，并且以GNU GPL许可证发布。它是从系统管理员的角度写的，最新的稳定版是IPTABLES 1.4.21。IPTABLES通常被用作类UNIX系统中的防火墙，更准确的说，可以称为IPTABLES/NETFILTER。管理员通过终端/GUI工具与IPTABLES打交道，来添加和定义防火墙规则到预定义的表中。NETFILTER是内核中的一个模块，它执行包过滤的任务。\r\nFIREWALLD是RHEL/CENTOS 7（也许还有其他发行版，但我不太清楚）中最新的过滤规则的实现。它已经取代了IPTABLES接口，并与NETFILTER相连接。', '', '0', '2017-12-26 18:18:28', '19', '1');
INSERT INTO `topic` VALUES ('5492', '26', '4', ' 你用过一些iptables的GUI或命令行工具么？', '635dc60f-7fb5-4de5-8f35-ccb1b7a0d37d.', null, null, null, null, null, null, '虽然我既用过GUI工具，比如与WEBMIN结合的SHOREWALL；以及直接通过终端访问IPTABLES，但我必须承认通过LINUX终端直接访问IPTABLES能给予用户更高级的灵活性、以及对其背后工作更好的理解的能力。GUI适合初级管理员，而终端适合有经验的管理员。', '', '0', '2017-12-26 18:18:47', '19', '1');
INSERT INTO `topic` VALUES ('5493', '32', '4', '数据库完整性与安全', 'c5538f61-af1c-4eb8-8529-76ac38ecf8f2.', null, null, null, null, null, null, '数据库的安全性：指保护数据库以防止不合法使用所造成的数据泄密、更改或破坏。  数据库的完整性：防止数据库中存在不符合语义的数据，其防范对象是不合语义的、不正确的数据。', '', '0', '2017-12-26 18:19:02', '67', '1');
INSERT INTO `topic` VALUES ('5494', '18', '4', '那么iptables和firewalld的基本区别是什么呢？', 'addcab88-7de6-421b-a699-6ced73150585.', null, null, null, null, null, null, 'IPTABLES和FIREWALLD都有着同样的目的（包过滤），但它们使用不同的方式。IPTABLES与FIREWALLD不同，在每次发生更改时都刷新整个规则集。通常IPTABLES配置文件位于‘/ETC/SYSCONFIG/IPTABLES‘，而FIREWALLD的配置文件位于‘/ETC/FIREWALLD/‘。FIREWALLD的配置文件是一组XML文件。以XML为基础进行配置的FIREWALLD比IPTABLES的配置更加容易，但是两者都可以完成同样的任务。例如，FIREWALLD可以在自己的命令行界面以及基于XML的配置文件下使用IPTABLES。', '', '0', '2017-12-26 18:19:11', '19', '1');
INSERT INTO `topic` VALUES ('5495', '18', '4', ' 如果有机会的话，你会在你所有的服务器上用firewalld替换iptables么？', 'a4e8246b-ca4c-4e5e-b773-b345041d972c.', null, null, null, null, null, null, '我对IPTABLES很熟悉，它也工作的很好。如果没有任何需求需要FIREWALLD的动态特性，那么没有理由把所有的配置都从IPTABLES移动到FIREWALLD。通常情况下，目前为止，我还没有看到IPTABLES造成什么麻烦。IT技术的通用准则也说道“为什么要修一件没有坏的东西呢？”。上面是我自己的想法，但如果组织愿意用FIREWALLD替换IPTABLES的话，我不介意。', '', '0', '2017-12-26 18:19:33', '19', '1');
INSERT INTO `topic` VALUES ('5496', '32', '4', '自主存取控制：', '77b367b6-b19d-4daf-bdbf-2a3d76c7d194.', null, null, null, null, null, null, '用户可自由地决定将数据的存取权限授予何人，决定是否将“授权”的权限授予别人。', '', '0', '2017-12-26 18:19:58', '67', '1');
INSERT INTO `topic` VALUES ('5497', '18', '4', 'iptables使用的表有哪些？请简要的描述iptables使用的表以及它们所支持的链。', 'a6161c39-926d-4996-88ea-d2c72820eace.', null, null, null, null, null, null, 'NAT 表\r\nMANGLE 表\r\nFILTER 表\r\nRAW 表\r\nNAT表 : NAT表主要用于网络地址转换。根据表中的每一条规则修改网络包的IP地址。流中的包仅遍历一遍NAT表。例如，如果一个通过某个接口的包被修饰（修改了IP地址），该流中其余的包将不再遍历这个表。通常不建议在这个表中进行过滤，由NAT表支持的链称为PREROUTING 链，POSTROUTING 链和OUTPUT 链。\r\nMANGLE表 : 正如它的名字一样，这个表用于校正网络包。它用来对特殊的包进行修改。它能够修改不同包的头部和内容。MANGLE表不能用于地址伪装。支持的链包括PREROUTING 链，OUTPUT 链，FORWARD 链，INPUT链和POSTROUTING 链。\r\nFILTER表 : FILTER表是IPTABLES中使用的默认表，它用来过滤网络包。如果没有定义任何规则，FILTER表则被当作默认的表，并且基于它来过滤。支持的链有INPUT 链，OUTPUT 链，FORWARD 链。\r\nRAW表 : RAW表在我们想要配置之前被豁免的包时被使用。它支持PREROUTING 链和OUTPUT 链。', '', '0', '2017-12-26 18:20:34', '19', '1');
INSERT INTO `topic` VALUES ('5498', '18', '4', '简要谈谈什么是iptables中的目标值（能被指定为目标），他们有什么用', 'eb1e0f60-92b4-4f24-b56b-c3aa12a0a889.', null, null, null, null, null, null, 'ACCEPT : 接受包\r\nQUEUE : 将包传递到用户空间 (应用程序和驱动所在的地方)\r\nDROP : 丢弃包\r\nRETURN : 将控制权交回调用的链并且为当前链中的包停止执行下一调用规则', '', '0', '2017-12-26 18:20:59', '19', '1');
INSERT INTO `topic` VALUES ('5499', '18', '4', '你怎么检测在CentOS中安装iptables时需要的iptables的rpm？', 'f1aa5652-5554-4e09-80ec-3bc1897aa920.', null, null, null, null, null, null, 'IPTABLES已经被默认安装在CENTOS中，我们不需要单独安装它。但可以这样检测RPM：\r\n# RPM -QA IPTABLES\r\n \r\nIPTABLES-1.4.21-13.EL7.X86_64\r\n如果您需要安装它，您可以用YUM来安装。\r\n#YUMINSTALL IPTABLES-SERVICES', '', '0', '2017-12-26 18:21:35', '19', '1');
INSERT INTO `topic` VALUES ('5500', '32', '4', '事务的ACID特性是：', '65243b2b-7b6b-4c15-958d-2b7b81ff0244.', null, null, null, null, null, null, '原子性：事务是一个不可分割的单位。  一致性：事务对数据库操作的结果是将数据库从一个一致性状态变为另一个一致性状态。 隔离性：多个事务的并发执行不互相干扰。  持续性：事务一旦提交，它对数据库中数据的改变就是永久性的。', '', '0', '2017-12-26 18:21:42', '67', '1');
INSERT INTO `topic` VALUES ('5501', '18', '4', '怎样检测并且确保iptables服务正在运行？', 'f5247db8-6d19-42b2-bf8e-8f587f5061b5.', null, null, null, null, null, null, '您可以在终端中运行下面的命令来检测IPTABLES的状态。\r\n# SERVICE STATUS IPTABLES           [ONCENTOS6/5]\r\n#SYSTEMCTLSTATUS IPTABLES         [ONCENTOS7]\r\n如果IPTABLES没有在运行，可以使用下面的语句\r\n---------------- 在CENTOS6/5下 ---------------- \r\n# CHKCONFIG --LEVEL 35 IPTABLES ON\r\n# SERVICE IPTABLES START\r\n \r\n---------------- 在CENTOS7下 ---------------- \r\n#SYSTEMCTLENABLE IPTABLES \r\n#SYSTEMCTLSTART IPTABLES \r\n我们还可以检测IPTABLES的模块是否被加载：\r\n#LSMOD| GREP IP_TABLES', '', '0', '2017-12-26 18:21:57', '19', '1');
INSERT INTO `topic` VALUES ('5502', '32', '4', '登记日志文件时为什么必须先写日志文件，后写数据库？', '9477a6a9-bba2-4b4e-a581-d45c3a87418b.', null, null, null, null, null, null, '把数据的修改写到数据库和把对数据的修改操作写到日志文件是两个不同的操作，在两个操作之间可能会发生故障如果先写了数据库修改，而在日志文件中没有登记这个修改，在恢复的时候就无法恢复这个修改了；如果先写日志，但没有修改数据库，按日志恢复时只是多执行一次撤消操作，并不影响数据库的正确性，为了安全，一定要先写日志文件。', '', '0', '2017-12-26 18:22:10', '67', '1');
INSERT INTO `topic` VALUES ('5503', '18', '4', '你怎么检查iptables中当前定义的规则呢？', 'c219fbd6-2457-42da-97da-338f7c399d6a.', null, null, null, null, null, null, '当前的规则可以简单的用下面的命令查看：\r\n# IPTABLES -L\r\n示例输出\r\nCHAININPUT (POLICY ACCEPT)\r\nTARGET    PROT OPT SOURCE              DESTINATION         \r\nACCEPT    ALL  --  ANYWHERE             ANYWHERE             STATE RELATED,ESTABLISHED\r\nACCEPT    ICMP --  ANYWHERE             ANYWHERE            \r\nACCEPT    ALL  --  ANYWHERE             ANYWHERE            \r\nACCEPT    TCP  --  ANYWHERE             ANYWHERE             STATE NEW TCP DPT:SSH\r\nREJECT    ALL  --  ANYWHERE             ANYWHERE             REJECT-WITH ICMP-HOST-PROHIBITED\r\n \r\nCHAINFORWARD (POLICY ACCEPT)\r\nTARGET    PROT OPT SOURCE              DESTINATION         \r\nREJECT    ALL  --  ANYWHERE            ANYWHERE             REJECT-WITH ICMP-HOST-PROHIBITED\r\n \r\nCHAINOUTPUT (POLICY ACCEPT)\r\nTARGET    PROT OPT SOURCE              DESTINATION', '', '0', '2017-12-26 18:22:19', '19', '1');
INSERT INTO `topic` VALUES ('5504', '18', '4', '你怎样刷新所有的iptables规则或者特定的链呢？', '3e8f4fb0-64bc-49cd-b4a7-b2ef9da42fc5.', null, null, null, null, null, null, '# IPTABLES --FLUSH OUTPUT\r\n要刷新所有的规则，可以用：\r\n# IPTABLES --FLUSH', '', '0', '2017-12-26 18:22:39', '19', '1');
INSERT INTO `topic` VALUES ('5505', '32', '4', '什么样的并发调度是正确的调度？', 'b7fd38c2-99fa-4c9a-9eff-737cba504e65.', null, null, null, null, null, null, '多个事务的并发执行的结果与按某一次序串行的执行它们时的结果相同，我们说这样的并发调度是可串行化的调度，如果一个调度是可串行化的，那么认为它是正确的调度。', '', '0', '2017-12-26 18:22:50', '67', '1');
INSERT INTO `topic` VALUES ('5506', '18', '4', '请在iptables中添加一条规则，接受所有从一个信任的IP地址（例如，192.168.0.7）过来的包。', 'a752e15f-6e5e-48fd-9002-b9fec6e15705.', null, null, null, null, null, null, '上面的场景可以通过运行下面的命令来完成。\r\n# IPTABLES -A INPUT -S 192.168.0.7-J ACCEPT \r\n我们还可以在源IP中使用标准的斜线和子网掩码：\r\n# IPTABLES -A INPUT -S 192.168.0.7/24 -J ACCEPT \r\n# IPTABLES -A INPUT -S 192.168.0.7/255.255.255.0 -J ACCEPT', '', '0', '2017-12-26 18:23:07', '19', '1');
INSERT INTO `topic` VALUES ('5507', '32', '4', '事务的COMMIT语句和ROLLBACK语句的功能是什么？', '33bfd46c-da64-4d53-b3b1-6740ead8997d.', null, null, null, null, null, null, 'COMMIT语句表示事务执行成功地接结束（提交），此时告诉系统，DB要进入一个新的正确状态，该事务对DB的所有更新都已交付实施（写入磁盘）。  ROLLBACK语句表示事务执行不成功地结束（应该“回退”）此时告诉系统，已发生错误，DB可能处在不正确的状态，该事务对DB的所有更新必须被撤消，DB应恢复该事务到初始状态。', '', '0', '2017-12-26 18:23:19', '67', '1');
INSERT INTO `topic` VALUES ('5508', '18', '4', '怎样在iptables中添加规则以ACCEPT，REJECT，DENY和DROP ssh的服务？', '1e127100-af3d-473d-afdb-328a26648a64.', null, null, null, null, null, null, '但愿SSH运行在22端口，那也是SSH的默认端口，我们可以在IPTABLES中添加规则来ACCEPT SSH的TCP包（在22号端口上）。\r\n# IPTABLES -A INPUT -S -P TCP --DPORT 22 -J ACCEPT \r\nREJECT SSH服务（22号端口）的TCP包。\r\n# IPTABLES -A INPUT -S -P TCP --DPORT 22 -J REJECT\r\nDENY SSH服务（22号端口）的TCP包。\r\n# IPTABLES -A INPUT -S -P TCP --DPORT 22 -J DENY\r\nDROP SSH服务（22号端口）的TCP包。\r\n# IPTABLES -A INPUT -S -P TCP --DPORT 22 -J DROP', '', '0', '2017-12-26 18:23:28', '19', '1');
INSERT INTO `topic` VALUES ('5509', '32', '4', '日志文件中记载了哪些内容？', 'e4665548-8e5a-4a7b-a964-5109fad5e68e.', null, null, null, null, null, null, '日志文件中记载了事务开始标记、事务结束标记以及事务对DB的插入、删除和修改的每一次操作前后的值。', '', '0', '2017-12-26 18:23:38', '67', '1');
INSERT INTO `topic` VALUES ('5510', '32', '4', '并发操作会产生几种不一致情况?用什么方法避免各种不一致的情况? ', '9b4957f2-3e12-42f4-82d7-3969c222571c.', null, null, null, null, null, null, '并发操作可能会产生丢失修改,不能重复读和读”脏”数据这三种不一致情况，采用封锁机制来进行并发控制,可避各种不一致情况。一级封锁协议可以避免丢失修改，二级封锁协议可以避免丢失修改和读”脏”数据，三级封锁协议可以避免丢失修改、不能重复读和读”脏”数据。', '', '0', '2017-12-26 18:23:56', '67', '1');
INSERT INTO `topic` VALUES ('5511', '18', '4', '让我给你另一个场景，假如有一台电脑的本地IP地址是192.168.0.6。你需要封锁在21、22、23和80号端口上的连接，你会怎么做？', 'aa5819b8-7b68-479d-9401-6df5acd31bcc.', null, null, null, null, null, null, ' 这时，我所需要的就是在IPTABLES中使用‘MULTIPORT‘选项，并将要封锁的端口号跟在它后面。上面的场景可以用下面的一条语句搞定：\r\n# IPTABLES -A INPUT -S 192.168.0.6-P TCP -M MULTIPORT --DPORT 22,23,80,8080 -J DROP\r\n可以用下面的语句查看写入的规则。\r\n# IPTABLES -L\r\n \r\nCHAININPUT (POLICY ACCEPT)\r\nTARGET    PROT OPT SOURCE              DESTINATION         \r\nACCEPT    ALL  --  ANYWHERE             ANYWHERE             STATE RELATED,ESTABLISHED\r\nACCEPT    ICMP --  ANYWHERE             ANYWHERE            \r\nACCEPT    ALL  --  ANYWHERE             ANYWHERE            \r\nACCEPT    TCP  --  ANYWHERE             ANYWHERE             STATE NEW TCP DPT:SSH\r\nREJECT    ALL  --  ANYWHERE             ANYWHERE             REJECT-WITH ICMP-HOST-PROHIBITED\r\nDROP      TCP  --  192.168.0.6          ANYWHERE             MULTIPORT DPORTS SSH,TELNET,HTTP,WEBCACHE\r\n \r\nCHAINFORWARD (POLICY ACCEPT)\r\nTARGET    PROT OPT SOURCE              DESTINATION         \r\nREJECT    ALL  --  ANYWHERE             ANYWHERE             REJECT-WITH ICMP-HOST-PROHIBITED\r\n \r\nCHAINOUTPUT (POLICY ACCEPT)\r\nTARGET    PROT OPT SOURCE              DESTINATION', '', '0', '2017-12-26 18:23:57', '19', '1');
INSERT INTO `topic` VALUES ('5512', '32', '4', '为什么要设立日志文件?', '2b78d29d-6a4d-49b7-bf77-eecdbaf5bbc2.', null, null, null, null, null, null, '设立日志文件的目的，是为了记录对数库中数据的每一次更新操作，从而DBMS可以根据日志文件进行事务故障的恢复和糸统故障的恢复，并可结合后授副本进去介质故障的恢复。', '', '0', '2017-12-26 18:24:19', '67', '1');
INSERT INTO `topic` VALUES ('5513', '32', '4', '试述查询优化的一般步骤。', '43f06d79-d763-4420-a1ee-16d9edc4a9fd.', null, null, null, null, null, null, '1）把查询转换成某种内部表示  2） 把语法树转换成标准（优化）形式 3） 择低层的存取路径  4） 生成查询计划，选择代价最小的', '', '0', '2017-12-26 18:25:02', '67', '1');
INSERT INTO `topic` VALUES ('5514', '32', '4', '数据库转储的意义是什么？常用的有几种方法？', '94926ded-2623-411f-b4d3-986ad51dce69.', null, null, null, null, null, null, '数据转储是数据库恢复中采用的基本技术，所谓转储即DBA定期将整个数据库复制到磁带或另一个磁盘上保存起来的过程。这些备用的数据文本称为后备副本或后援副本。当数据库遭到破坏后可以将后备副本重新载入，将数据库恢复到转储时的状态。  转储可分为静态转储和动态转储。静态转储是在系统中无运行事务时进行的转储操作。动态转储是指转储期间允许对数据库进行存取或修改。即转储和用户事务可以并发执行。', '', '0', '2017-12-26 18:25:39', '67', '1');
INSERT INTO `topic` VALUES ('5515', '32', '4', '什么是数据库的完整性约束条件？', '9d197b7d-7153-4ab7-9a2e-8ff90a17def4.', null, null, null, null, null, null, '1）静态列级约束 2）静态元组约束 3）静态关系约束 4） 动态列级约束 5） 动态元组约束 \r\n  - 12 -  6） 动态关系约束', '', '0', '2017-12-26 18:26:54', '67', '1');
INSERT INTO `topic` VALUES ('5516', '32', '4', '什么是数据独立性?在数据库中有哪两级独立性?', 'a0ca280c-3a33-457c-84cd-e2e27c74b509.', null, null, null, null, null, null, '指应用程序和数据库的数据结 构之间相互独立，不受影响。物理独立性和逻辑独立性', '', '0', '2017-12-26 18:32:57', '67', '1');
INSERT INTO `topic` VALUES ('5517', '32', '4', '什么是DB的系统缓冲区？', '22b68af0-cc8f-4ae2-9c96-852c54a101a7.', null, null, null, null, null, null, '应用程序运行时，DBMS在内存为其开辟一个程序工作区，主要 用于数据的传输和格式的转换', '', '0', '2017-12-26 18:33:37', '67', '1');
INSERT INTO `topic` VALUES ('5518', '32', '4', 'DBS中有哪些类型的故障？哪些故障破坏了数据库？哪些故障未破坏数据库？', '2e62f6fd-630d-42e1-9dfb-5259473fb928.', null, null, null, null, null, null, '事务和系统故障未破坏DB，但其中的某些数据不正确介质故障破坏了DB', '', '0', '2017-12-26 18:35:53', '67', '1');
INSERT INTO `topic` VALUES ('5519', '32', '4', 'SQL完整性约束有哪些？', '47635822-bbd4-48c2-8a7e-2a9414165364.', null, null, null, null, null, null, '域约束、基本表约束和断言', '', '0', '2017-12-26 18:36:15', '67', '1');
INSERT INTO `topic` VALUES ('5520', '32', '4', '简述类图中的重复度与ER图中实体的基数的区别。', '7237dcc7-56b8-4480-9c0d-cf9e387b9109.', null, null, null, null, null, null, '实体基数指与一 个实体有关联系的另一端实体数目的最小、最大值，基数应写在这一端实体的边上；重复度指参与关联的这一端对象数目的最大最小值，重复度应写在这一端的边上', '', '0', '2017-12-26 18:36:51', '67', '1');
INSERT INTO `topic` VALUES ('5521', '32', '4', 'ODBC的体系结构有哪几层？', '65775924-ac91-4ac7-ab74-457557b138ad.', null, null, null, null, null, null, '纵向四部分：ODBC数据库应用程序、驱动程序 管理器、ODB驱动程序、数据源 ', '', '0', '2017-12-26 18:37:16', '67', '1');
INSERT INTO `topic` VALUES ('5522', '32', '4', '逻辑设计阶段的主要步骤。', '07268e9f-3994-4378-88fe-dd72207b9a8a.', null, null, null, null, null, null, '把概念模型转换为逻辑模型，设计外模型，设计应用程序与数据库的接口，评价模型、修正模型', '', '0', '2017-12-26 18:37:34', '67', '1');
INSERT INTO `topic` VALUES ('5523', '24', '4', '查看Linux系统当前单个共享内存段的最大值（命令）', '861868d7-7940-41b7-b343-289d7e007056.', null, null, null, null, null, null, 'IPCS -M \r\nIPCS -A ', '', '0', '2017-12-26 18:37:52', '19', '1');
INSERT INTO `topic` VALUES ('5524', '32', '4', '设有关系模式R(S#，C#，CNAME，TNAME)，其属性分别表示 学生的学号、选修课程号、课程名、任课教师名。请说明该关系模式存在哪些操作异常。', '8fb413fc-c1f4-416c-8dc0-2f05805fda24.', null, null, null, null, null, null, '修改异常、插入异常、删除异常', '', '0', '2017-12-26 18:38:05', '67', '1');
INSERT INTO `topic` VALUES ('5525', '32', '4', '简述SQL数据库表的三种类型及它们的区别。', 'b4707814-19df-49a3-8704-313c684993fb.', null, null, null, null, null, null, '基本表，视图，导出表，基本表是实际存储在数据库中的表，视图是由一个或多个基本表或其他视图构成的表，而导出表是执行了查询时产生的表', '', '0', '2017-12-26 18:38:53', '67', '1');
INSERT INTO `topic` VALUES ('5526', '26', '4', '查看Linux系统当前指定用户的邮件队列 ', '647c09ad-db5f-444a-93c8-72629b4db06b.', null, null, null, null, null, null, 'MAILQ', '', '0', '2017-12-26 18:38:57', '19', '1');
INSERT INTO `topic` VALUES ('5527', '32', '4', '简述数据库的完整性含义以及DBMS的完整性子系统的功能。', '2e9df6ab-fd18-4aab-852a-ff5373cd0472.', null, null, null, null, null, null, '数据库完整性指数据的正确性、有效性和相容性、防止错误的数据进入数据库  完整性子系统的主要功能：监督事务的执行，并测试是否违反完整性规则，若有违反现象，采取恰当的操作', '', '0', '2017-12-26 18:39:10', '67', '1');
INSERT INTO `topic` VALUES ('5528', '32', '4', 'SQL的视图机制有哪些优点?', 'f56e41f4-1237-461d-9226-dcb2d6dbd901.', null, null, null, null, null, null, '数据安全性、逻辑数据独立性、操作简便性', '', '0', '2017-12-26 18:39:27', '67', '1');
INSERT INTO `topic` VALUES ('5529', '32', '4', '简述ODBC体系结构中驱动程序管理器的功能。', '5caabd9e-6371-47ef-87b8-83da1fa417f3.', null, null, null, null, null, null, '驱动程序管理器是一个动态链接库，用于链接各种DBS和DBMS驱动程序，管理应用程序和DBMS 驱动程序之间的交互作用', '', '0', '2017-12-26 18:39:42', '67', '1');
INSERT INTO `topic` VALUES ('5530', '32', '4', '简述面向对象技术中聚合的概念。', '9b3941dc-b4bf-4cd0-9e91-c5e424c109ea.', null, null, null, null, null, null, '聚合表达了成分对象和聚合对象之间的IS PART OF 的联系，聚合实际是一种较强形式的关联联系  ．简述外部模型的优点。  简化了用户的观点，有助于数据库的安全性保护，外部模型是对概念模型的支持', '', '0', '2017-12-26 18:40:00', '67', '1');
INSERT INTO `topic` VALUES ('5531', '32', '4', '简述弱实体的概念', '62c87e27-3540-4d6e-8eec-0f54d9a0e99f.', null, null, null, null, null, null, '一个实体的存在必须以另一实体的存在为前提，此时前者称为“弱实体”，后者称为“强实体”', '', '0', '2017-12-26 18:40:21', '67', '1');
INSERT INTO `topic` VALUES ('5532', '32', '4', '以订购关系ORDER(订单号，书号，书名，单价，订购数量)为例，说明插入异常的含 义。(注：一个订单可订购多种图书) ', '71b3ab68-0757-4d82-928b-f245460103f4.', null, null, null, null, null, null, '订单号和书号是主键，均不能为空，当创建一个没有任何书号的新订单号时就会出现插入异常', '', '0', '2017-12-26 18:40:44', '67', '1');
INSERT INTO `topic` VALUES ('5533', '32', '4', '简述核心SQL的四个组成部分。', '7050b037-6cde-4eab-9fc3-1f4a66f32769.', null, null, null, null, null, null, '数据定义语言、数据操纵语言、嵌入式SQL语言的使用规定、数据控制语言', '', '0', '2017-12-26 18:41:01', '67', '1');
INSERT INTO `topic` VALUES ('5534', '32', '4', '简述事务的性质。', 'd1823d41-2b4b-42a1-91c1-a82a54408da3.', null, null, null, null, null, null, 'ACID，原子性、一致性、隔离性、持久性', '', '0', '2017-12-26 18:41:34', '67', '1');
INSERT INTO `topic` VALUES ('5535', '32', '4', '简述权限的定义及权限的种类。', '430c6dae-cb85-411f-878b-9fb2d649d402.', null, null, null, null, null, null, '用户使用数据库的方式称为权限，权限有两种：访问数据的权限和修改数据结构的权限。访问数据的权限有四个：增、删、查、改  修改库结构的权限有四个：索引、资源、修改、撤销', '', '0', '2017-12-26 18:41:59', '67', '1');
INSERT INTO `topic` VALUES ('5536', '32', '4', '简述T-SQL语言中Begin„End语句的作用。', '3f89e86d-99d4-4adc-bb3d-cd82abae40db.', null, null, null, null, null, null, '将多条SQL语句封闭起来，形成一个语句块，使这些语句块作为一个整体执行', '', '0', '2017-12-26 18:42:15', '67', '1');
INSERT INTO `topic` VALUES ('5537', '32', '4', '简述PowerBuilder9.0中连接ODBC数据库的步骤。', '032efc33-bedc-40bf-9a94-d0877240d703.', null, null, null, null, null, null, '建立ODBC数据源，建立数据库描述文件，连接数据源', '', '0', '2017-12-26 18:42:32', '67', '1');
INSERT INTO `topic` VALUES ('5538', '32', '4', '简述SQL／CLI中环境记录的功能。', '2738bcd1-fc4c-4f5b-8afe-5af8878f5d2f.', null, null, null, null, null, null, '用作为一个容器，设置环境信息，以保存一个或多个数据库连接。', '', '0', '2017-12-26 18:42:49', '67', '1');
INSERT INTO `topic` VALUES ('5539', '32', '4', 'DBMS的存储管理器有哪几部分组成?', '7ca6b06c-c6d7-40bc-8088-a493e6bbbbb0.', null, null, null, null, null, null, '权限和完整性管理器、事务管理器、文件管理器、缓冲区管理器', '', '0', '2017-12-26 18:43:13', '67', '1');
INSERT INTO `topic` VALUES ('5540', '18', '4', '查询\r\n查询\r\nfile1 \r\n/var/log/messages日志出现kernel:nf_conntrack:tablefull,dropping packet,请问是什么原因导致的，如何解决？\r\n \r\n ', 'c214fbf2-9526-4495-b4c1-3ae9e0339c1f.', null, null, null, null, null, null, '1）加大跟踪表的大小\r\n2）禁用一些不必跟踪的连接状态\r\n3）禁用模块 IP_VS NF_CONNTECT', '', '0', '2017-12-26 18:43:19', '19', '1');
INSERT INTO `topic` VALUES ('5541', '32', '4', '所有的视图都可以更新吗?为什么?', '1a277474-d524-4398-8481-c5275edd5727.', null, null, null, null, null, null, '如果视图是从单个基本表只使用选择投影操作导出的，并且包含了基本表的主键，那么这样的视图称为：行列子集视图，并且可以被执行更新操作，允许用户更新的视图在定义时加上WITH CHECK OPTION 短语', '', '0', '2017-12-26 18:43:38', '67', '1');
INSERT INTO `topic` VALUES ('5542', '18', '4', 'linux系统nginx与Php环境，发现PHP-FPM进程高，请说出可能的原因以及如何解决？', '45a8fd29-44d0-49b5-ae40-be59407b8a85.', null, null, null, null, null, null, '1）PHP的插件程序与现有的PHP版本存在不兼容情况，解决方法从PHP.INI中禁止相关插件\r\n2）软件本身存在问题，需要开发协同运维一同处理，查找原因\r\n3）PHP程序存在死循环现象，使用服务器负载过高，解决方法使用TOP命令查看', '', '0', '2017-12-26 18:43:40', '19', '1');
INSERT INTO `topic` VALUES ('5543', '18', '4', '磁盘报错：nospace left on device，但是df-h查看空间没有满，为什么？', 'dc3fde34-3648-43a6-a832-b6a4ee238a37.', null, null, null, null, null, null, '系统INODE满了，因为所有的文件的文件名信息都是存放在INODE里面的，文件内容是存放在BLOCK里面\r\n可以使用DF -I 来查看INODE的使用情况\r\n[ROOT@MYSQL-1 DOWNLOAD]# DF -I\r\nFILESYSTEM INODES IUSED IFREE IUSE% MOUNTED ON\r\n/DEV/SDA2 1234576 138303 1096273 12% /\r\nTMPFS 60785 1 60784 1% /DEV/SHM\r\n/DEV/SDA1 51200 38 51162 1% /BOOT', '', '0', '2017-12-26 18:44:16', '19', '1');
INSERT INTO `topic` VALUES ('5544', '32', '4', '封锁可能带来哪些问题?', 'd48fc639-e5de-43e7-af15-1a48b642761d.', null, null, null, null, null, null, '活锁饿死和死锁', '', '0', '2017-12-26 18:44:20', '67', '1');
INSERT INTO `topic` VALUES ('5545', '18', '4', '磁盘空间满了，删除一部分nginx日志后，但是磁盘空间还是满的，为什么？', '814a3b6f-4a25-4954-a504-aa9af3809688.', null, null, null, null, null, null, '删除的日志信息，一部分可能还是被进程调用，因此，需要重启NGINX服务来释放进程；或者实际生产环境中使用>/LOG/ACCESS.LOG清空文件', '', '0', '2017-12-26 18:44:37', '19', '1');
INSERT INTO `topic` VALUES ('5546', '32', '4', 'SQL Server 2000安装程序自动创建的系统数据库有哪些?', 'dbda94ae-46bf-44d7-a92e-92ccbe65eb93.', null, null, null, null, null, null, 'MASTER、记录了所有SQL 的系统信息，登录账号，系统配置设置，系统中所有数据库及其系统信息以及存储介质信息 MODEL、为用户创建数据库提供模板数据库 MSDB、存储任务计划信息，事件处理信息，备份恢复信息以及异常报告 TEMPDB  存放所有临时表和临时的存储程序和两个范例数据库  NORTHWIND、  PUBS', '', '0', '2017-12-26 18:44:44', '67', '1');
INSERT INTO `topic` VALUES ('5547', '32', '4', '简述PowerBuilder 9.0集成开发环境中系统树窗口的功能。', '53d50b24-1ac5-4f97-9755-7a2381b32ac9.', null, null, null, null, null, null, '为开发人员提供关于工作空间的活 动状态视图，它和WINDOWS的资源管理器相似', '', '0', '2017-12-26 18:45:10', '67', '1');
INSERT INTO `topic` VALUES ('5548', '18', '4', '提取文件test.log中FAILD与SUCCESSFUL的字符但不包括DONE的行，然后以:为隔符，提取第三列[root@mysql-1]# cat test.log\r\nFAILD:SUCCESSFUL:DONE:CRITICAL\r\nFAILD:SUCCESSFUL:NO:GOOD\r\nFAILD:NO:DO:QINGYUN\r\nSUCCESSFUL:DONE:CRITICAL::CRITICAL', '60c640af-6f93-46ab-9bf7-4c476b68ba52.', null, null, null, null, null, null, '方法一：\r\n[ROOT@MYSQL-1]# EGREP “FAILD|SUCCESSFUL”TEST.LOG |GREP -V DONE|AWK -F ‘:’ ‘{PRINT $3}’\r\nNO\r\nDO\r\n方法二：\r\n[ROOT@MYSQL-1]# EGREP “FAILD|SUCCESSFUL”TEST.LOG |GREP -V DONE|CUT -D: -F3\r\nNO\r\nDO', '', '0', '2017-12-26 18:45:24', '19', '1');
INSERT INTO `topic` VALUES ('5549', '32', '4', '在类图中，子类之间的语义约束有哪些?', '5216f231-dd6c-45aa-9155-cb744f16709b.', null, null, null, null, null, null, 'OVERLAPPING重叠：子类的对象集可以相交 DISJOINT 不相交：子类的对象集不可以相交COMPLETE 完备：超类中的对象必须在子类中出现 IMCOMPLETE 非完备：超类中的对象可以不再子类中出现', '', '0', '2017-12-26 18:45:32', '67', '1');
INSERT INTO `topic` VALUES ('5550', '18', '4', ' 公司机房的服务器接近254台了，请你设计一个解决方案，如何划分网段，并实现业务平滑迁移。', '98e18c8b-0aea-4bf3-ae80-813e16c1bd0e.', null, null, null, null, null, null, '第一种方案：变长子网掩码的方法，加大IP地址的可使用范围，全网分发/ETC/HOSTS文件\r\n第二种方案：增加核心交换机，在核心交换机划分VLAN，将新增的服务器加入新的VLAN中，全网分发/ETC/HOSTS文件', '', '0', '2017-12-26 18:45:42', '19', '1');
INSERT INTO `topic` VALUES ('5551', '32', '4', '简述数据库系统三级模式结构中的两级映像，并说明其优点。', 'd0d5d305-a7ee-453b-9d36-04f7509ddf1a.', null, null, null, null, null, null, '如果数据库的内模式要修改，即数据库的物理结构有所改变，那么只要对模式/内模式映像作相应的修改，可以使逻辑模式尽可能保持不变，如果数据库的逻辑模式要修改，那么只要对外模式/模式映像作相应的修\r\n改，可以使外模式和应用程序尽可能保持不变', '', '0', '2017-12-26 18:45:49', '67', '1');
INSERT INTO `topic` VALUES ('5552', '32', '4', '简述数据库故障的种类。', '45e2a628-f206-4096-bfd1-65ba3e0be685.', null, null, null, null, null, null, '事务故障、系统故障、介质故障', '', '0', '2017-12-26 18:46:34', '67', '1');
INSERT INTO `topic` VALUES ('5553', '18', '4', 'Nginx反向代理如何实现代理RS节点上的不同虚拟主机，请说出原理和配置方法或思路。', '37401c63-362e-4333-bd2a-74366f73725a.', null, null, null, null, null, null, '客户端向反向代理发送请求，反向代理按一定的规则转发至目标服务器，并将返回的内容返回给客户端，可分为以下两种：\r\n配置内部不同服务器转发：\r\nUPSTREAM APP1 {\r\nSERVER 192.168.1.10:80 WEIGHT=5;\r\nSERVER 192.168.1.11:80 WEIGHT=5;\r\n}\r\nUPSTREAM APP2 {\r\nSERVER 192.168.1.20:80 WEIGHT=5;\r\nSERVER 192.168.1.21:80 WEIGHT=5;\r\n}\r\n配置SERVER\r\nSERVER{\r\nLISTERN 80;\r\nSERVER_NAME APP.ABC.COM\r\n}\r\n配置匹配转发规则：\r\nLOCATION /APP1/ {\r\nPROXY_PASS HTTP://EXAMPLE.COM/APP1;\r\nPROXY_SET_HEADER HOST $HOST;\r\n}\r\nLOCATION/APP2/ {\r\nPROXY_PASSHTTP://EXAMPLE.COM/APP2;\r\nPROXY_SET_HEADER HOST $HOST;\r\n}\r\n做为负载均衡\r\n配置负载均衡服务器池，也就是调度规则\r\nUPSTREAM TEST_SERVERS {\r\nSERVER 192.168.1.2:80 WEIGHT=5;\r\nSERVER 192.168.1.4:80 WEIGHT=5;\r\nSERVER 192.168.1.6:82 WEIGHT=15;\r\n}\r\n然后配置SERVER标签，\r\nSERVER {\r\nLISTEN 80;\r\nSERVER_NAME WWW.ABC.COM;\r\nPROXY_PASS HTTP://TEST_SERVERS;\r\nPROXY_SET_HEADER HOST $HOST\r\n}\r\n配置完成后，重新加载NGINX服务', '', '0', '2017-12-26 18:47:04', '19', '1');
INSERT INTO `topic` VALUES ('5554', '18', '4', '说出netstat -an命令结果中最后一列status对应的不同网络连接状态含义', 'e963bb54-303e-4700-bfcd-a4b8416fde2b.', null, null, null, null, null, null, '[ROOT@ ~]# NETSTAT -AN\r\nACTIVE INTERNET CONNECTIONS (SERVERS ANDESTABLISHED)\r\nPROTO RECV-Q SEND-Q LOCAL ADDRESS FOREIGN ADDRESS STATE\r\nTCP 0 0 0.0.0.0:22 0.0.0.0:* LISTEN\r\nTCP 0 0 139.24.65.45:54296 10.11.68.13:80 ESTABLISHED\r\nTCP 0 52 39.24.65.145:22 36.32.8.85:546 ESTABLISHED\r\nTCP 0 0 139.24.165.45:586 10.11.8.13:80 CLOSE_WAIT\r\nLISTEN 服务启动后首先处于的状态（监听状态）\r\nESTABLISHED 建立连接，表示建立连接的两端可以正常通信了\r\nCLOSE_WAIT 对方主动关闭连接或网络异常而中断，因此状态会变成\r\nTIME_WAIT 主动断开连接，收到对方确认后的状态，相当于释放资源，可以设置些种状态的参数，也就是主动断开后，下一次再连接的时间间隔\r\nSYN_SENT 请求连接的状态，需要访问其它机器时首先发出的同步信号', '', '0', '2017-12-26 18:47:26', '19', '1');
INSERT INTO `topic` VALUES ('5555', '32', '4', '什么是ODBC数据源？', '43a04b3a-e9e6-42d4-8b0b-1ee36e3a5a5e.', null, null, null, null, null, null, '是驱动程序与DBS连接的桥梁，数据源不是DBS，而是表示一个ODBC驱动程序和DBMS 特殊连接的命名。', '', '0', '2017-12-26 18:47:26', '67', '1');
INSERT INTO `topic` VALUES ('5556', '32', '4', '简述引用类型的概念。', '622ba314-45c0-49f7-9b4f-b9caa3abb458.', null, null, null, null, null, null, '引用类型相当于程序设计中指针的概念，引用类型这个概念可以把类型定义中的实例映射扩充到类型值域中的实例映射，提供有关实现细节的抽象。引用类型可以避免数据结构的无穷嵌套问题。', '', '0', '2017-12-26 18:47:43', '67', '1');
INSERT INTO `topic` VALUES ('5557', '18', '4', 'binlog是什么？binlog记录的是什么？有几种模式及优缺点，企业中选择哪种模式做同步？', '083e6e24-c70c-43a7-86ca-7f7202f6f179.', null, null, null, null, null, null, 'BINLOG：是用于记录所有更新了数据的操作语句，语句以事件的形式保存，它描述数据的更改过程\r\n作用：用于实时备份数据，数据库的主从复制\r\nLOG_BIN 打开记录BINLOG功能\r\nBINLOG的查看\r\nMYSQLBINLOG /HOME/MYSQL/BINLOG/BINLOG.000003\r\nBINLOG的删除：可分为自动与手动删除\r\n自动删除\r\n能过BINLOG参数EXPIRE_LOGS_DAYS来实现\r\nSHOW BINARY LOGS;\r\nSHOW VARIABLES LIKE “EXPIRE_LOGS_DAYS;”\r\nSET GLOABLE EXPIRE_LOGS_DAYS=3;\r\n手工删除\r\nRESET MASTER 删除主的BINLOG\r\nRESET SLAVE 删除从的中继日志\r\n三种模式：\r\nROW LEVEL模式 :日志会记录每一行数据被修改的形式，然后在从端对相同的数据进行修改\r\n优点：可以不记录执行SQL语句上下文相关的信息，只记录哪一条数据被修改，修改成什么样了\r\n缺点：所有执行的语句都当记录到日志文件中，而且都会以每行记录的修改来记录，会产生大量的日志内容\r\nSTATEMENT模式：每一条修改数据的SQL都会记录MASTER的BIN-LOG中，SLAVE在复制的时候SQL进程会解析成和原来MASTER端执行过的相同的SQL来执行\r\n优点：解决了上ROW LEVEL模式的缺点，不需要记录每一行数据的变化，减少日志量，可以得高性能\r\n缺点：由于记录的是执行语句，在此模式下会有主从无法复制的问题出现\r\nMIXED自动模式：MYSQL会根据执行的每一条具体SQL语句来区分对待记录的日志格式，\r\n企业使用场景：\r\n1）如果不会用到MYSQL特殊的功能，基本都是默认的模式STATEMENT模式\r\n2）如果会到MYSQL的一些特殊功能，基本都是会使用ROW LEVEL模式', '', '0', '2017-12-26 18:48:00', '19', '1');
INSERT INTO `topic` VALUES ('5558', '32', '4', '简述事务的调度、串行调度和并发调度的含义。', 'c182a6c6-cd3c-4cca-b83a-5bb3dde0f067.', null, null, null, null, null, null, '事务的执行次序称为：调度。如果多个事务依次执行，则成为事务的串行调度，如果利用分时的方法，同时处理多个事务，乘务事务的并发调度', '', '0', '2017-12-26 18:48:03', '67', '1');
INSERT INTO `topic` VALUES ('5559', '18', '4', ' 请详细描述http协议原理', '8726c105-a97c-498b-9fc3-9942a861e3de.', null, null, null, null, null, null, 'HTTP协议：是客户端与服务端之间通信传输数据的基础，HTTP协议是基于TCP/IP协议之上的协议\r\n原理包括四个过程：\r\n连接：浏览器与服务器建立连接，打开一个SOCKET的虚拟文件，表明连接建立成功\r\n请求：浏览器通过SOCKET向服务器提交请求（一般是GET或POST请示命令）\r\n应答：浏览器请求提交后，通过HTTP协议传送给服务器，服务器收到后进行处理将结果又通过HTTP回传给客户端，从而在客户端显示出所请求的页面\r\n关闭连接：当应答结束后，浏览器与服务器之间就断开连接', '', '0', '2017-12-26 18:48:23', '19', '1');
INSERT INTO `topic` VALUES ('5560', '32', '4', '相对于数据库系统，文件系统阶段数据管理有哪些缺陷?', 'aee57310-19c8-477c-9fdf-4cd93621666c.', null, null, null, null, null, null, '数据冗余、数据不一致、数据联系弱', '', '0', '2017-12-26 18:48:26', '67', '1');
INSERT INTO `topic` VALUES ('5561', '32', '4', '简述关系代数表达式的启发式优化规则。', '7ccd6bd0-ac18-44c0-8783-2f8f7f884f18.', null, null, null, null, null, null, '1、尽可能早的执行选择操作2、尽可能造地执行投影操作3、避免直接做笛卡尔积，把笛卡尔积操作之前和之后的一连串选择和投影合并起来一起做。', '', '0', '2017-12-26 18:48:45', '67', '1');
INSERT INTO `topic` VALUES ('5562', '18', '4', '请详细描述MySQL主从复制原理', 'f4778fe9-323b-4c83-ad7a-e6ff3270667b.', null, null, null, null, null, null, '原理：主库开启BINLOG功能并授权从库连接主库同步的用户权限 ,将数据库的修改或变化生成BIN-LOG日志，从库通过CHANGE MSTER的语句得到主库的相关信息，从库开启SLAVE并连接主加进行相关验证，验证通过后，主库的IO线程根据从库的请求将相关位置点信息，与最新的BLNLOG信息发送给从库的IO线程，从库的IO线程将SQL语句的信息放在RELAY-LOG中，最后从库的SQL线程将RELAY-LOG中的SQL语句应用到从库中，实现主库与从库之间的数据同步，然后不断重新上述动作', '', '0', '2017-12-26 18:48:46', '19', '1');
INSERT INTO `topic` VALUES ('5563', '32', '4', '简述DBS中系统故障的恢复方法。', '774ff5c0-a684-4d78-bcf0-a86a61f78abb.', null, null, null, null, null, null, '1、对未完成事务做UNDO 处理，2、对已提交事务但更新还留在缓冲区的事务进行REDO 处理', '', '0', '2017-12-26 18:49:09', '67', '1');
INSERT INTO `topic` VALUES ('5564', '18', '4', '用一条命令将除了sshd、crond、network、rsyslog几个服务之外的服务全部关闭（无需开机自动）', 'c35098cf-3372-4126-8b8b-317f31e5cc7d.', null, null, null, null, null, null, '方法一：\r\n[ROOT@CENTOS6~]# FOR NAME IN `CHKCONFIG –LIST|GREP 3:ON|AWK ‘{PRINT $1}’|GREP -EV “SSHD|CROND|RSYSLOG|NETWORK”`;DOCHKCONFIG $NAME OFF;DONE\r\n[ROOT@CENTOS6~]# CHKCONFIG –LIST|GREP 3:ON\r\nCROND 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF\r\nNETWORK 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF\r\nRSYSLOG 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF\r\nSSHD 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF\r\n方法二：\r\n[ROOT@CENTOS6 ~]# CHKCONFIG–LIST|GREP 3:ON|AWK ‘{PRINT $1}’|GREP -EV”SSHD|CROND|RSYSLOG|NETWORK”|SED -R “S#(.*)#CHKCONFIG \\1OFF#G”|BASH\r\n[ROOT@CENTOS6~]# CHKCONFIG –LIST|GREP 3:ON\r\nCROND 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF\r\nNETWORK 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF\r\nRSYSLOG 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF\r\nSSHD 0:OFF 1:OFF 2:ON 3:ON 4:ON 5:ON 6:OFF', '', '0', '2017-12-26 18:49:16', '19', '1');
INSERT INTO `topic` VALUES ('5565', '32', '4', 'SQL中哪些机制提供了安全性？', '4bc78309-6569-413d-8187-b6c1cf237c38.', null, null, null, null, null, null, '视图，权限，角色，审计', '', '0', '2017-12-26 18:49:35', '67', '1');
INSERT INTO `topic` VALUES ('5566', '32', '4', '什么是SQL/CLI？', 'bd68859c-567c-400e-beaa-e709d6a0fd37.', null, null, null, null, null, null, 'SQL的调用层接口定义了一套可以从宿主语言调用的公共函数，每一个函数具有一个名称和一个要求的算法。', '', '0', '2017-12-26 18:49:51', '67', '1');
INSERT INTO `topic` VALUES ('5567', '32', '4', '简述对象联系图的定义。', '20d04708-5c1c-48dc-8bd6-5d31f791874d.', null, null, null, null, null, null, '描述面向对象数据模型的基本工具，它不仅完整地揭示了数据的联系，也罢查询的层次观点表现得一清二楚', '', '0', '2017-12-26 18:50:07', '67', '1');
INSERT INTO `topic` VALUES ('5568', '18', '4', '说明系统/etc/inittab中各个启动级别的含意', 'f9136c19-b016-4602-9c42-71e2ac315889.', null, null, null, null, null, null, '[ROOT@CENTOS6~]# TAIL /ETC/INITTAB\r\n#DEFAULT RUNLEVEL. THE RUNLEVELS USED ARE:\r\n# 0 – HALT (DO NOT SET INITDEFAULT TO THIS) 关机\r\n# 1 – SINGLE USER MODE 单用户模式\r\n# 2 – MULTIUSER, WITHOUT NFS (THE SAME AS 3,IF YOU DO NOT HAVE NETWORKING) 多用户，没有NFS\r\n# 3 – FULL MULTIUSER MODE 完整多用户模式\r\n# 4 – UNUSED\r\n# 5 – X11 桌面模式\r\n# 6 – REBOOT (DO NOT SET INITDEFAULT TO THIS) 重启\r\n#\r\nID:3:INITDEFAULT: 默认', '', '0', '2017-12-26 18:50:21', '19', '1');
INSERT INTO `topic` VALUES ('5569', '32', '4', 'T-SQL中有哪些变量？各有哪些特点？', 'b2272034-3604-4049-8c67-38c65188b012.', null, null, null, null, null, null, '局部变量和全局变量局部变量是由用户定义和维护，名称以单个@字符开头，全局变量由系统定义和维护，并且要指定声明的变量名及其数据类型。局部变量的作用域只能是当前的批处理，新声明的变量的默认值为空，在表达式中使用它们之前必须为它们赋初始值。', '', '0', '2017-12-26 18:50:30', '67', '1');
INSERT INTO `topic` VALUES ('5570', '32', '4', '简述数据库概念设计的主要步骤', '314b0287-b1b6-40c9-8892-9a6dd23a2b8c.', null, null, null, null, null, null, '进行数据抽象，设计局部概念模型，将局部概念模型综合成全局概念模型，评审', '', '0', '2017-12-26 18:50:59', '67', '1');
INSERT INTO `topic` VALUES ('5571', '32', '4', '什么是数据冗余?它会引起哪些操作异常? ', '88f42b9f-26a9-4448-aff6-eac2cada82c0.', null, null, null, null, null, null, '指同一个数据在系统中多次重复出现。', '', '0', '2017-12-26 18:51:16', '67', '1');
INSERT INTO `topic` VALUES ('5572', '32', '4', '简述SQL Server查询分析器的功能。', 'f1a0dd01-073a-4677-9e4b-170c3da233f0.', null, null, null, null, null, null, '提供图形界面来执行一个或多个T—SQL语句，用户以文 本的方式编辑T-SQL语句，然后发给服务器，并接受执行的结果，使用这个 工具，用户可以交互地设计和测试T-SQL语句，批处理，和脚本', '', '0', '2017-12-26 18:51:49', '67', '1');
INSERT INTO `topic` VALUES ('5573', '18', '4', '如何过滤出已知当前目录下oldboy中的所有一级目录(不包含子目录，即只能是一级目录)', '2de23284-3175-435e-8236-c6a84f9be2c4.', null, null, null, null, null, null, '方法1：FIND ./ -TYPE D -MAXDEPTH 1\r\n方法2：LS -F\r\n方法3：LS -L  | GREP ^D\r\n方法4：LS -F | GREP /$\r\n方法5：LS -L | GREP -V ^-\r\n方法6：TREE -L 1 /\r\n方法7：根据颜色来区分文件和目录\r\n方法8：LS -L | SED -N /^D/P', '', '0', '2017-12-26 18:52:02', '19', '1');
INSERT INTO `topic` VALUES ('5574', '32', '4', '在UML类图中，类由哪三部分组成?', 'bc15cdfb-8add-45f2-a5a7-e04fad5ce597.', null, null, null, null, null, null, '类名，属性，该类提供的方法', '', '0', '2017-12-26 18:52:03', '67', '1');
INSERT INTO `topic` VALUES ('5575', '18', '4', '一个目录中有很多文件(ls查看时好多屏)，想最快速度查看到最近更新的文件，如何看？', '2a4feec3-f8af-435a-86a8-4c37094ca46b.', null, null, null, null, null, null, 'LS -LRT  /ETC #最底部的就是最新更新的文件\r\n参数说明：\r\n-R, –REVERSE #翻转排序\r\n-T #按照修改时间排序', '', '0', '2017-12-26 18:52:27', '19', '1');
INSERT INTO `topic` VALUES ('5576', '32', '4', '简述PowerBuilder中数据窗口对象的功能。', '147d34e8-865a-4879-8705-bf5bc2273bac.', null, null, null, null, null, null, '数据窗口是封装了对数据库中的数据操作的对象， 它极大地方便了应用程序对数据库的使用，可以对数据库进行查询，插入，删除和修改操作。', '', '0', '2017-12-26 18:52:47', '67', '1');
INSERT INTO `topic` VALUES ('5577', '18', '4', '已知apache服务的访问日志按天记录在服务器本地目录/app/logs下，由于磁盘空间紧张，现在要求只能保留最近7天访问日志！请问如何解决？', '490af6fc-5f83-45d1-8f08-50ec3cf9cb9c.', null, null, null, null, null, null, '办法或配置或处理命令(提示：可以从APACHE服务配置上着手，也可以从生成出来的日志上着手)\r\n1>.服务自身的功能实现\r\n2>.手动删除\r\nFIND ./ -MTIME +7 -TYPE F -NAME “*.LOG” -EXEC RM -F {} \\; #查找7天以前的日志并删除之', '', '0', '2017-12-26 18:52:53', '19', '1');
INSERT INTO `topic` VALUES ('5578', '18', '4', '打印配置文件nginx.conf内容的行号及内容，该如何做？', '8fb1020f-e29d-4c8a-bef4-05148f6ba527.', null, null, null, null, null, null, '方法1：CAT -N NGINX.CONF\r\n方法2：LESS -N NGINX.CONF\r\n方法3：GREP -N . NGINX.CONF #此处的.(点)号，表示任意单个字符，-N是给过滤出的每一行加行号', '', '0', '2017-12-26 18:53:12', '19', '1');
INSERT INTO `topic` VALUES ('5579', '18', '4', '如何迅速返回到上一次的目录？', '51b1f523-9108-4b40-b8e3-65f008c1b40e.', null, null, null, null, null, null, 'CD –    #环境变量OLDPWD始终记录着上一次的位置', '', '0', '2017-12-26 18:53:32', '19', '1');
INSERT INTO `topic` VALUES ('5580', '18', '4', '调试系统服务时，希望能实时查看系统日志/var/log/messages的更新，如何做？', 'aa528c75-1be9-4558-b962-2a2f0753cce6.', null, null, null, null, null, null, '方法1：TAIL -F /VAR/LOG/MESSAGES\r\n方法2：TAIL -F /VAR/LOG/MESSAGES #和-F比多个重试的功能，就是文件不存在了，会不断尝试', '', '0', '2017-12-26 18:54:02', '19', '1');
INSERT INTO `topic` VALUES ('5581', '18', '4', '安装完系统(CentOS/RHEL)后，希望让网络文件共享服务NFS,仅在3级别上开机自启该如何做？', '277464cd-03ca-4fa6-b5f6-620ac79e0051.', null, null, null, null, null, null, 'CHKCONFIG –LEVEL 3 NFS OFF', '', '0', '2017-12-26 18:54:20', '19', '1');
INSERT INTO `topic` VALUES ('5582', '18', '4', '如何查看/etc/services文件有多少行？', '6dff91d5-d28a-4269-be2d-e9e3a880f07a.', null, null, null, null, null, null, '方法1：直接使用命令WC\r\nWC -L  /ETC/SERVICES\r\n方法2：给文件内容加行号\r\nCAT -N  /ETC/SERVICES | TAIL -1\r\n方法3：SED  -N  ‘$=’  /ETC/SERVICES\r\n方法4：GREP -N $ /ETC/SERVICES | TAIL -1', '', '0', '2017-12-26 18:54:39', '19', '1');
INSERT INTO `topic` VALUES ('5583', '18', '4', '请过滤出ifconfig中的ip地址？', '52781a03-f38b-40de-82e1-21dc2e6c8e12.', null, null, null, null, null, null, '方法1：IFCONFIG ETH1|GREP “INET ADD”|CUT -D’:’ -F2|CUT -D’ ‘ -F1\r\n方法2：IFCONFIG ETH1|GREP “INET ADDR”|AWK -F: ‘{PRINT $2}’|AWK ‘{PRINT $1}’\r\n方法3：IFCONFIG ETH1|AWK -F ‘[ :]+’ ‘NR==2 {PRINT $4}’\r\n方法4：IFCONFIG ETH0|SED -N ‘2P’|SED ‘S#^.*ADDR:##G’|SED ‘S# BC.*$##G’', '', '0', '2017-12-26 18:55:01', '19', '1');
INSERT INTO `topic` VALUES ('5584', '18', '4', '如何将/etc/inittab中的权限取出来，以数字644这样的形式打印', '1cbb99df-ee8d-4a00-8bd9-9fd02d064a92.', null, null, null, null, null, null, '方法1：STAT /ETC/INITTAB |SED -N ‘4P’|AWK -F “[(/]” ‘{PRINT $2}’\r\n方法2：STAT -C %A  /ETC/INITTAB\r\n方法3：LL /ETC/PASSWD |CUT -C 1-9|TR RWX- 4210|AWK -F “” ‘{PRINT $1+$2+$3 $4+$5+$6 $7+$8+$9}’', '', '0', '2017-12-26 18:55:18', '19', '1');
INSERT INTO `topic` VALUES ('5585', '18', '4', '在/tools目录下的文件里面都被植入了广告链接，如何将其去除', 'a26d528d-8d07-4512-a325-fe8cb3163b27.', null, null, null, null, null, null, '删除植入广告：\r\nSED -I ‘/<P CLASS=”CHROMEFRAME”>YOU ARE USING AN OUTDATED BROWSER. PLEASE <A HREF=”HTTPS:\\/\\/WWW.GOOGLE.COM\\/CHROME\\/” REL=”EXTERNAL NOFOLLOW” TARGET=”_BLANK”>UPGRADE YOUR BROWSER<\\/A> AND TRY AGAIN.<\\/P>\\//D’ KAKA', '', '0', '2017-12-26 18:55:39', '19', '1');
INSERT INTO `topic` VALUES ('5586', '18', '4', '打印出kaka文件中除掉空行的内容', 'b5bdc46e-5c4d-4754-9c6b-bfa1fd26c1ca.', null, null, null, null, null, null, '方法1：GREP -V “^$” KAKA\r\n方法2：SED  ‘/^$/D’ KAKA', '', '0', '2017-12-26 18:56:00', '19', '1');
INSERT INTO `topic` VALUES ('5587', '18', '4', '打印3天前的日期，格式如：2016-05-06', 'f76f91be-9db4-4eb7-8752-3cdc35bfd848.', null, null, null, null, null, null, '方法1：DATE “+%F” -D “3 DAY AGO”\r\n方法2：DATE “+%F” -D “-3 DAY”', '', '0', '2017-12-26 18:56:17', '19', '1');
INSERT INTO `topic` VALUES ('5588', '4', '4', '什么是控制反转(IOC)？什么是依赖注入？', '9b762eea-1c39-4927-bb93-9fe34ceef500.', null, null, null, null, null, null, '控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过“依赖注入”实现的。\r\n\r\n控制反转是一种以给予应用程序中目标组件更多控制为目的设计范式，并在我们的实际工作中起到了有效的作用。\r\n\r\n依赖注入是在编译阶段尚未知所需的功能是来自哪个的类的情况下，将其他对象所依赖的功能对象实例化的模式。这就需要一种机制用来激活相应的组件以提供特定的功能，所以依赖注入是控制反转的基础。否则如果在组件不受框架控制的情况下，框架又怎么知道要创建哪个组件？\r\n\r\n在JAVA中依然注入有以下三种实现方式：\r\n\r\n构造器注入\r\nSETTER方法注入\r\n接口注入', '', '0', '2017-12-26 19:08:20', '52', '1');
INSERT INTO `topic` VALUES ('5589', '4', '4', '请解释下Spring框架中的IoC？', 'a241e09e-524a-44da-9611-e59642fd9b68.', null, null, null, null, null, null, 'SPRING中的 ORG.SPRINGFRAMEWORK.BEANS 包和 ORG.SPRINGFRAMEWORK.CONTEXT包构成了SPRING框架IOC容器的基础。\r\nBEANFACTORY 接口提供了一个先进的配置机制，使得任何类型的对象的配置成为可能。APPLICATIONCONTEX接口对BEANFACTORY（是一个子接口）进行了扩展，在BEANFACTORY的基础上添加了其他功能，比如与SPRING的AOP更容易集成，也提供了处理MESSAGE RESOURCE的机制（用于国际化）、事件传播以及应用层的特别配置，比如针对WEB应用的WEBAPPLICATIONCONTEXT。\r\nORG.SPRINGFRAMEWORK.BEANS.FACTORY.BEANFACTORY 是SPRING IOC容器的具体实现，用来包装和管理前面提到的各种BEAN。BEANFACTORY接口是SPRING IOC 容器的核心接口。\r\nIOC:把对象的创建、初始化、销毁交给SPRING来管理，而不是由开发者控制，实现控制反转。', '', '0', '2017-12-26 19:09:06', '52', '1');
INSERT INTO `topic` VALUES ('5590', '4', '4', 'Spring有几种配置方式？', '12a97c80-b536-44ae-be5c-ee719a5fdecd.', null, null, null, null, null, null, '将SPRING配置到应用开发中有以下三种方式：\r\n基于XML的配置\r\n基于注解的配置\r\n基于JAVA的配置', '', '0', '2017-12-26 19:09:34', '52', '1');
INSERT INTO `topic` VALUES ('5591', '24', '1', ' Pwd命令的功能是（） ', '38a5f00c-08a8-4f0b-a27a-768d3d5af358.', '设置用户的口令 ', ' 显示用户的口令', '显示当前工作的目录', '改变当前工作的目录', '', '', 'C', '', '0', '2017-12-26 19:11:06', '19', '1');
INSERT INTO `topic` VALUES ('5592', '4', '4', '如何用基于Java配置的方式配置Spring？', '6e62cede-0cb7-4be5-aec7-7cac5d62f7a6.', null, null, null, null, null, null, 'SPRING对JAVA配置的支持是由@CONFIGURATION注解和@BEAN注解来实现的。由@BEAN注解的方法将会实例化、配置和初始化一个新对象，这个对象将由SPRING的IOC容器来管理。@BEAN声明所起到的作用与<BEAN/> 元素类似。被@CONFIGURATION所注解的类则表示这个类的主要目的是作为BEAN定义的资源。被@CONFIGURATION声明的类可以通过在同一个类的内部调用@BEAN方法来设置嵌入BEAN的依赖关系。\r\n最简单的@CONFIGURATION 声明类请参考下面的代码：\r\n@CONFIGURATION    \r\nPUBLIC CLASS APPCONFIG{    \r\n    @BEAN    \r\n    PUBLIC MYSERVICE MYSERVICE() {    \r\n        RETURN NEW MYSERVICEIMPL();    \r\n    }    \r\n}   \r\n对于上面的@BEANS配置文件相同的XML配置文件如下：\r\n<BEANS>    \r\n    <BEAN ID=\"MYSERVICE\" CLASS=\"COM.SOMNUS.SERVICES.MYSERVICEIMPL\"/>    \r\n</BEANS> ', '', '0', '2017-12-26 19:11:53', '52', '1');
INSERT INTO `topic` VALUES ('5593', '4', '4', '请解释Spring Bean的生命周期？', 'e5da4150-f7f5-4d00-854d-42416b89830d.', null, null, null, null, null, null, 'SPRING BEAN的生命周期简单易懂。在一个BEAN实例被初始化时，需要执行一系列的初始化操作以达到可用的状态。同样的，当一个BEAN不在被调用时需要进行相关的析构操作，并从BEAN容器中移除。\r\nSPRING BEAN FACTORY 负责管理在SPRING容器中被创建的BEAN的生命周期。BEAN的生命周期由两组回调（CALL BACK）方法组成。\r\n初始化之后调用的回调方法。\r\n销毁之前调用的回调方法。\r\nSPRING框架提供了以下四种方式来管理BEAN的生命周期事件：\r\nINITIALIZINGBEAN和DISPOSABLEBEAN回调接口\r\n针对特殊行为的其他AWARE接口\r\nBEAN配置文件中的CUSTOM INIT()方法和DESTROY()方法\r\n@POSTCONSTRUCT和@PREDESTROY注解方式', '', '0', '2017-12-26 19:13:12', '52', '1');
INSERT INTO `topic` VALUES ('5594', '18', '1', 'cd命令可以改变用户的当前目录，当用户键入cd并按enter后（） ', '72603a5b-f647-469b-81a3-c7d8dbb2ac61.', '当前目录为根目录', ' 当前目录没变，屏幕显示当前目录 ', '当前目录改为用户主目录 ', '当前目录改为上一级目录 ', '', '', 'D', '', '0', '2017-12-26 19:13:51', '19', '1');
INSERT INTO `topic` VALUES ('5595', '4', '4', '请解释自动装配模式的区别？', '7aab49aa-2e82-4598-a1d1-2321a7b16f28.', null, null, null, null, null, null, '在SPRING框架中共有5种自动装配，让我们逐一分析。\r\nNO：这是SPRING框架的默认设置，在该设置下自动装配是关闭的，开发者需要自行在BEAN定义中用标签明确的设置依赖关系。\r\nBYNAME：该选项可以根据BEAN名称设置依赖关系。当向一个BEAN中自动装配一个属性时，容器将根据BEAN的名称自动在在配置文件中查询一个匹配的BEAN。如果找到的话，就装配这个属性，如果没找到的话就报错。\r\nBYTYPE：该选项可以根据BEAN类型设置依赖关系。当向一个BEAN中自动装配一个属性时，容器将根据BEAN的类型自动在在配置文件中查询一个匹配的BEAN。如果找到的话，就装配这个属性，如果没找到的话就报错。\r\nCONSTRUCTOR：造器的自动装配和BYTYPE模式类似，但是仅仅适用于与有构造器相同参数的BEAN，如果在容器中没有找到与构造器参数类型一致的BEAN，那么将会抛出异常。\r\nAUTODETECT：该模式自动探测使用构造器自动装配或者BYTYPE自动装配。首先，首先会尝试找合适的带参数的构造器，如果找到的话就是用构造器自动装配，如果在BEAN内部没有找到相应的构造器或者是无参构造器，容器就会自动选择BYTPE的自动装配方式。', '', '0', '2017-12-26 19:14:19', '52', '1');
INSERT INTO `topic` VALUES ('5596', '18', '2', 'LINUX的文件系统是一个目录树 ', '4af93f1a-917f-42fe-9cf6-5f79ea68ef4a.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 19:14:42', '19', '1');
INSERT INTO `topic` VALUES ('5597', '18', '2', '在Windows分区中是能看到Linux分区的', '58beeeaa-eddf-46f0-a1d3-51abc367354d.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 19:15:09', '19', '1');
INSERT INTO `topic` VALUES ('5598', '26', '2', ' Linux操作系统和微软的DOS及windows一样,文件目录都是采用树型结构,而Linux只有一个根. ', 'ebfba746-431a-48a5-84ff-1bb95efdb37e.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 19:15:45', '19', '1');
INSERT INTO `topic` VALUES ('5599', '4', '4', '构造方法注入和设值注入有什么区别？', '98886ec8-2c72-4ec1-9dc5-2bb74cafbba1.', null, null, null, null, null, null, '请注意以下明显的区别：\r\n在设值注入方法支持大部分的依赖注入，如果我们仅需要注入INT、STRING和LONG型的变量，我们不要用设值的方法注入。对于基本类型，如果我们没有注入的话，可以为基本类型设置默认值。在构造方法注入不支持大部分的依赖注入，因为在调用构造方法中必须传入正确的构造参数，否则的话为报错。\r\n设值注入不会重写构造方法的值。如果我们对同一个变量同时使用了构造方法注入又使用了设置方法注入的话，那么构造方法将不能覆盖由设值方法注入的值。很明显，因为构造方法尽在对象被创建时调用。\r\n在使用设值注入时有可能还不能保证某种依赖是否已经被注入，也就是说这时对象的依赖关系有可能是不完整的。而在另一种情况下，构造器注入则不允许生成依赖关系不完整的对象。\r\n在设值注入时如果对象A和对象B互相依赖，在创建对象A时SPRING会抛出SOBJECTCURRENTLYINCREATIONEXCEPTION异常，因为在B对象被创建之前A对象是不能被创建的，反之亦然。所以SPRING用设值注入的方法解决了循环依赖的问题，因对象的设值方法是在对象被创建之前被调用的。\r\n', '', '0', '2017-12-26 19:15:46', '52', '1');
INSERT INTO `topic` VALUES ('5600', '4', '4', 'Spring 框架中都用到了哪些设计模式？', 'e87bb1bd-ff3d-463f-9750-c00df454fe23.', null, null, null, null, null, null, 'SPRING框架中使用到了大量的设计模式，下面列举了比较有代表性的：\r\n代理模式—在AOP和REMOTING中被用的比较多。\r\n单例模式—在SPRING配置文件中定义的BEAN默认为单例模式。\r\n模板方法—用来解决代码重复的问题。比如. RESTTEMPLATE, JMSTEMPLATE, JPATEMPLATE。\r\n前端控制器—SPRING提供了DISPATCHERSERVLET来对请求进行分发。\r\n视图帮助(VIEW HELPER )—SPRING提供了一系列的JSP标签，高效宏来辅助将分散的代码整合在视图里。\r\n依赖注入—贯穿于BEANFACTORY / APPLICATIONCONTEXT接口的核心理念。\r\n工厂模式—BEANFACTORY用来创建对象的实例。', '', '0', '2017-12-26 19:16:47', '52', '1');
INSERT INTO `topic` VALUES ('5601', '4', '4', 'ApplicationContext通常的实现是什么?', '1ccf78b8-39ae-4e4d-8743-ff9ae3952da1.', null, null, null, null, null, null, 'FILESYSTEMXMLAPPLICATIONCONTEXT ：此容器从一个XML文件中加载BEANS的定义，XML BEAN 配置文件的全路径名必须提供给它的构造函数。\r\nCLASSPATHXMLAPPLICATIONCONTEXT：此容器也从一个XML文件中加载BEANS的定义，这里，你需要正确设置CLASSPATH因为这个容器将在CLASSPATH里找BEAN配置。\r\nWEBXMLAPPLICATIONCONTEXT：此容器加载一个XML文件，此文件定义了一个WEB应用的所有BEAN。', '', '0', '2017-12-26 19:18:58', '52', '1');
INSERT INTO `topic` VALUES ('5602', '4', '4', '在 Spring中如何注入一个java集合？', 'fc58f2eb-f564-4e3d-8984-0fb7d298e275.', null, null, null, null, null, null, 'SPRING提供以下几种集合的配置元素：\r\n<LIST>类型用于注入一列值，允许有相同的值。\r\n<SET> 类型用于注入一组值，不允许有相同的值。\r\n<MAP> 类型用于注入一组键值对，键和值都可以为任意类型。\r\n<PROPS>类型用于注入一组键值对，键和值都只能为STRING类型。', '', '0', '2017-12-26 19:20:34', '52', '1');
INSERT INTO `topic` VALUES ('5603', '4', '4', 'JdbcTemplate', 'eb49df62-1a15-430b-acb8-f5b722c06300.', null, null, null, null, null, null, 'JDBCTEMPLATE 类提供了很多便利的方法解决诸如把数据库数据转变成基本数据类型或对象，执行写好的或可调用的数据库操作语句，提供自定义的数据错误处理。', '', '0', '2017-12-26 19:21:57', '52', '1');
INSERT INTO `topic` VALUES ('5604', '4', '4', '@Qualifier 注解', 'a04cbea4-8880-4b33-b308-707fd9a028f9.', null, null, null, null, null, null, '当有多个相同类型的BEAN却只有一个需要自动装配时，将@QUALIFIER 注解和@AUTOWIRE 注解结合使用以消除这种混淆，指定需要装配的确切的BEAN。', '', '0', '2017-12-26 19:22:10', '52', '1');
INSERT INTO `topic` VALUES ('5605', '4', '4', '使用Spring通过什么方式访问Hibernate?', 'de67b23b-4d57-46e5-9609-d6f18e062b0b.', null, null, null, null, null, null, '在SPRING中有两种方式访问HIBERNATE：\r\n控制反转 HIBERNATE TEMPLATE和 CALLBACK。\r\n继承 HIBERNATEDAOSUPPORT提供一个AOP 拦截器。', '', '0', '2017-12-26 19:22:41', '52', '1');
INSERT INTO `topic` VALUES ('5606', '4', '4', ' Spring支持的ORM', 'ab85b00b-5a02-4faf-bccf-098066957a23.', null, null, null, null, null, null, 'SPRING支持以下ORM：\r\nHIBERNATE\r\nIBATIS\r\nJPA (JAVA PERSISTENCE API)\r\nTOPLINK\r\nJDO (JAVA DATA OBJECTS)\r\nOJB', '', '0', '2017-12-26 19:22:57', '52', '1');
INSERT INTO `topic` VALUES ('5607', '4', '4', 'Spring支持的事务管理类型\r\n', 'b359dc0e-e9da-472f-9565-abb3de691cba.', null, null, null, null, null, null, 'SPRING支持两种类型的事务管理：\r\n编程式事务管理：这意味你通过编程的方式管理事务，给你带来极大的灵活性，但是难维护。\r\n声明式事务管理：这意味着你可以将业务代码和事务管理分离，你只需用注解和XML配置来管理事务。', '', '0', '2017-12-26 19:23:34', '52', '1');
INSERT INTO `topic` VALUES ('5608', '4', '4', ' Spring框架的事务管理有哪些优点？', 'fb376239-f9f9-4017-abb9-7d0665bbc4af.', null, null, null, null, null, null, '它为不同的事务API 如 JTA，JDBC，HIBERNATE，JPA 和JDO，提供一个不变的编程模式。\r\n它为编程式事务管理提供了一套简单的API而不是一些复杂的事务API如\r\n它支持声明式事务管理。\r\n它和SPRING各种数据访问抽象层很好得集成。', '', '0', '2017-12-26 19:23:55', '52', '1');
INSERT INTO `topic` VALUES ('5609', '4', '4', 'Aspect 切面', 'af4f3a39-7242-4bf2-8849-ed4bf0cbc710.', null, null, null, null, null, null, 'AOP核心就是切面，它将多个类的通用行为封装成可重用的模块，该模块含有一组API提供横切功能。比如，一个日志模块可以被称作日志的AOP切面。根据需求的不同，一个应用程序可以有若干切面。在SPRING AOP中，切面通过带有@ASPECT注解的类实现。', '', '0', '2017-12-26 19:24:19', '52', '1');
INSERT INTO `topic` VALUES ('5610', '4', '4', '在Spring AOP 中，关注点和横切关注的区别是什么？', '21654f4c-6183-4e95-8598-b2b390f327ec.', null, null, null, null, null, null, '关注点是应用中一个模块的行为，一个关注点可能会被定义成一个我们想实现的一个功能。\r\n横切关注点是一个关注点，此关注点是整个应用都会使用的功能，并影响整个应用，比如日志，安全和数据传输，几乎应用的每个模块都需要的功能。因此这些都属于横切关注点。', '', '0', '2017-12-26 19:24:42', '52', '1');
INSERT INTO `topic` VALUES ('5611', '4', '4', '连接点', '38c94c81-fc8e-481f-b1d1-11b41ae85119.', null, null, null, null, null, null, '连接点代表一个应用程序的某个位置，在这个位置我们可以插入一个AOP切面，它实际上是个应用程序执行SPRING AOP的位置。', '', '0', '2017-12-26 19:24:57', '52', '1');
INSERT INTO `topic` VALUES ('5612', '4', '4', '通知', '791526a5-cd92-4def-824b-25fc6961e366.', null, null, null, null, null, null, '通知是个在方法执行前或执行后要做的动作，实际上是程序执行时要通过SPRINGAOP框架触发的代码段。\r\nSPRING切面可以应用五种类型的通知：\r\nBEFORE：前置通知，在一个方法执行前被调用。\r\nAFTER: 在方法执行之后调用的通知，无论方法执行是否成功。\r\nAFTER-RETURNING: 仅当方法成功完成后执行的通知。\r\nAFTER-THROWING: 在方法抛出异常退出时执行的通知。\r\nAROUND: 在方法执行之前和之后调用的通知。', '', '0', '2017-12-26 19:25:18', '52', '1');
INSERT INTO `topic` VALUES ('5613', '4', '4', '切点', 'a3ae7f1e-a42c-4dec-b281-c06e1ce3dcb0.', null, null, null, null, null, null, '切入点是一个或一组连接点，通知将在这些位置执行。可以通过表达式或匹配的方式指明切入点。', '', '0', '2017-12-26 19:25:37', '52', '1');
INSERT INTO `topic` VALUES ('5614', '4', '4', '有几种不同类型的自动代理？', 'c160e491-69d2-4d8a-b95f-a954a046414a.', null, null, null, null, null, null, 'BEANNAMEAUTOPROXYCREATOR\r\nDEFAULTADVISORAUTOPROXYCREATOR\r\nMETADATA AUTOPROXYING', '', '0', '2017-12-26 19:26:07', '52', '1');
INSERT INTO `topic` VALUES ('5615', '4', '4', '解释基于XML Schema方式的切面实现。', '17bc3cb6-3fe5-4d66-af3c-a1c11cd3eb6a.', null, null, null, null, null, null, '在这种情况下，切面由常规类以及基于XML的配置实现。', '', '0', '2017-12-26 19:26:26', '52', '1');
INSERT INTO `topic` VALUES ('5616', '4', '4', 'DispatcherServlet', 'bd221161-c078-4fd2-b1b0-e8126552408f.', null, null, null, null, null, null, 'SPRING的MVC框架是围绕DISPATCHERSERVLET来设计的，它用来处理所有的HTTP请求和响应。', '', '0', '2017-12-26 19:26:54', '52', '1');
INSERT INTO `topic` VALUES ('5617', '4', '4', 'WebApplicationContext', '18076ae1-6d9e-4877-a153-a4e6dc13047c.', null, null, null, null, null, null, 'WEBAPPLICATIONCONTEXT 继承了APPLICATIONCONTEXT 并增加了一些WEB应用必备的特有功能，它不同于一般的APPLICATIONCONTEXT ，因为它能处理主题，并找到被关联的SERVLET。', '', '0', '2017-12-26 19:27:09', '52', '1');
INSERT INTO `topic` VALUES ('5618', '4', '4', '@Controller 注解', 'daaac83c-644b-4edf-af0d-04d36393a25e.', null, null, null, null, null, null, '该注解表明该类扮演控制器的角色，SPRING不需要你继承任何其他控制器基类或引用SERVLET API。', '', '0', '2017-12-26 19:27:26', '52', '1');
INSERT INTO `topic` VALUES ('5619', '4', '4', '@RequestMapping 注解', '7cc643b4-338b-42ad-8109-2a873853a4ee.', null, null, null, null, null, null, '该注解是用来映射一个URL到一个类或一个特定的方处理法上。', '', '0', '2017-12-26 19:27:40', '52', '1');
INSERT INTO `topic` VALUES ('5620', '4', '4', 'Struts工作机制？为什么要使用Struts？', '8af3e14d-0387-4625-9013-11bfe3609f8b.', null, null, null, null, null, null, '工作机制：\r\n\r\nSTRUTS的工作流程:\r\n\r\n在WEB应用启动时就会加载初始化ACTIONSERVLET，ACTIONSERVLET从STRUTS-CONFIG.XML文件中读取配置信息,把它们存放到各种配置对象，当ACTIONSERVLET接收到一个客户请求时,将执行如下流程.\r\n\r\n　　(1)检索和用户请求匹配的ACTION MAPPING实例,如果不存在,就返 回请求路径无效信息;\r\n\r\n　　(2)如果ACTION FORM实例不存在,就创建一个ACTION FORM对象,把客户提交的表单数据保存到ACTION FORM对象中;\r\n\r\n　　(3)根据配置信息决定是否需要表单验证.如果需要验证,就调用ACTION FORM的VALIDATE()方法;\r\n\r\n　　(4)如果ACTION FORM的VALIDATE()方法返回NULL或返回一个不包含ACTION MESSAGE的 ACTUIBERRORS对象,就表示表单验证成功;\r\n\r\n　　(5)ACTION SERVLET 根据ACTION MAPPING所包含的映射信息决定将请求转发给哪个ACTION,如果相应的ACTION实例不存在,就先创建这个实例,然后调用ACTION的EXECUTE()方法;\r\n\r\n　　(6)ACTION的EXECUTE()方法返回一个ACTION FORWARD对象,ACTION SERVLET再把客户请求转发给 ACTION FORWARD对象指向的JSP组件;\r\n\r\n　　(7)ACTION FORWARD对象指向JSP组件生成动态网页,返回给客户;\r\n\r\n为什么要用：\r\n\r\nJSP、SERVLET,JAVABEAN技术的出现给我们构建强大的企业应用系统提供了可能。但用这些技术构建的系统非常的繁乱，所以在此之上，我们需要一个规则、一个把这些技术组织起来的规则，这就是框架，STRUTS便应运而生。\r\n\r\n基于STRUTS开发的应用由3类组件构成：控制器组件、模型组件、视图组件', '', '0', '2017-12-26 19:31:13', '52', '1');
INSERT INTO `topic` VALUES ('5621', '4', '4', '如何优化Hibernate？', '0cac5d4c-3146-4ee3-af4e-b5f8051ba09f.', null, null, null, null, null, null, '1. 使用双向一对多关联，不使用单向一对多\r\n\r\n　　2.灵活使用单向一对多关联\r\n\r\n　　3.不用一对一，用多对一取代\r\n\r\n　　4.配置对象缓存，不使用集合缓存\r\n\r\n　　5.一对多集合使用BAG,多对多集合使用SET\r\n\r\n　　6.继承类使用显式多态\r\n\r\n　　7.表字段要少，表关联不要怕多，有二级缓存撑腰', '', '0', '2017-12-26 19:31:38', '52', '1');
INSERT INTO `topic` VALUES ('5622', '4', '4', 'Spring工作原理', '9f616d07-0622-4565-8f30-b40ee6c5d433.', null, null, null, null, null, null, 'SPRING 已经用过一段时间了，感觉SPRING是个很不错的框架。\r\n\r\n内部最核心的就是IOC了，动态注入，让一个对象的创建不用NEW了，可以自动的生产，这其实就是利用JAVA里的反射,反射其实就是在运行时动态的去创建、调用对象，SPRING就是在运行时，跟XML SPRING的配置文件来动态的创建对象，和调用对象里的方法的 。\r\n\r\nSPRING还有一个核心就是AOP这个就是面向切面编程，可以为某一类对象 进行监督和控制（也就是在调用这类对象的具体方法的前后去调用你指定的 模块）从而达到对一个模块扩充的功能。这些都是通过配置类达到的。\r\n\r\nSPRING目的：就是让对象与对象（模块与模块）之间的关系没有通过代码来关联，都是通过配置类说明管理的（SPRING根据这些配置 内部通过反射去动态的组装对象）', '', '0', '2017-12-26 19:32:13', '52', '1');
INSERT INTO `topic` VALUES ('5623', '4', '4', 'struts2有哪些优点', '238fc05c-7025-4356-bb0e-6c3da43e1c4f.', null, null, null, null, null, null, '1.在软件设计上STRUTS2的应用可以不依赖于SERVLET API和STRUTS API。 STRUTS2的这种设计属于无侵入式设计；\r\n\r\n　　2.拦截器，实现如参数拦截注入等功能；\r\n\r\n　　3.类型转换器，可以把特殊的请求参数转换成需要的类型；\r\n\r\n　　4.多种表现层技术，如：JSP、FREEMARKER、VELOCITY等；\r\n\r\n　　5.STRUTS2的输入校验可以对指定某个方法进行校验；\r\n\r\n　　6.提供了全局范围、包范围和ACTION范围的国际化资源文件管理实现', '', '0', '2017-12-26 19:32:56', '52', '1');
INSERT INTO `topic` VALUES ('5624', '4', '4', 'Spring框架有哪些模块？', 'ccea576a-fd27-48c9-8f49-8069078e0820.', null, null, null, null, null, null, 'SPRING框架由七个模块组成组成，这7个模块(或组件)均可以单独存在，也可以与其它一个或多个模块联合使用，如下所示：\r\n　　(1)SPRING 核心容器——IOC容器\r\n　　(2)SPRING AOP\r\n　　(3)SPRING ORM\r\n　　(4)SPRING DAO\r\n　　(5)SPRING WEB\r\n　　(6)SPRING上下文（CONTEXT）\r\n　　(7)SPRING MVC', '', '0', '2017-12-26 19:35:54', '52', '1');
INSERT INTO `topic` VALUES ('5625', '3', '4', '请讲下Java里面的容器 ', 'e2f7d1b1-83e9-414a-a710-cfa276742b3d.', null, null, null, null, null, null, '分两大类，MAP和COLLECTION。而COLLECTION又有子接口LIST(数据存储顺序和插入顺序是一样的)、SET(里面的元素具有唯一性) \r\n MAP是存储键值对的,里面的健不可以重复,但值可以重复\r\nA. 对于LIST主要有ARRAYLIST和LINKEDLIST两种实现。实现的数据结构不同，所以主要的区别也都是和数据结构相关的。 ARRAYLIST基于数组，随机访问快，而对于中间元素的插入删除效率比较低，而且需要考虑扩容问题。LINKEDLIST，则 基于链表，和ARRAYLIST提到的正相反，随机访问慢，但对于中间元素的插入和删除更有效率。\r\nSET也是一种COLLECTION，和LIST比起来主要体现在元素唯一性。', '', '0', '2017-12-26 19:36:10', '75', '1');
INSERT INTO `topic` VALUES ('5626', '3', '4', '请说下Iterator的作用', 'bc5abca0-43f0-45ff-a55e-3ef1f09f1524.', null, null, null, null, null, null, ' 迭代器可以实现COLLECTION接口的方法，可以一个一个地获取集合中的元素\r\n在遍历集合时 可判断是否有下一个元素', '', '0', '2017-12-26 19:36:27', '75', '1');
INSERT INTO `topic` VALUES ('5627', '3', '4', '说下ArrayList和LinkedList的区别和联系，并说明什么情况下用它们', '6e1226a5-ad15-4a13-a978-544c1f3a4944.', null, null, null, null, null, null, '区别:ARRAYLIST用于对象的随机访问速度快,没有顺序\r\nLINKEDLIST实现机制是链表式的,和顺序有关,速度比ARRAYLIST慢\r\n联系:ARRAYLIST和LINKEDLIST都是LIST接口的实现类\r\n当要快速获取一个值时,用ARRAYLIST,用于顺序插入操作时,用LINKEDLIST.', '', '0', '2017-12-26 19:36:45', '75', '1');
INSERT INTO `topic` VALUES ('5628', '3', '4', '说下List，Set，Map三种集合各有什么特征', '6ae4cd23-8a50-4030-a12d-b33bab17807c.', null, null, null, null, null, null, ' LIST集合中的元素可以重复,\r\nSET集合中的元素不可以重复\r\nMAP集合用键-值映射存放对象,MAP容器中的键对象不能重复,值对象可以重复', '', '0', '2017-12-26 19:37:01', '75', '1');
INSERT INTO `topic` VALUES ('5629', '4', '4', '为什么要使用Spring框架，它有什么优点？', '7f03202a-429c-4aae-924d-993cbb9048cc.', null, null, null, null, null, null, '　(1)轻量级的框架\r\n　　(2)非侵入性\r\n　　(3)可以整合其它的框架，比如STRUTS，HIBERNATE等\r\n　　(4)可以提供事务管理', '', '0', '2017-12-26 19:37:32', '52', '1');
INSERT INTO `topic` VALUES ('5630', '26', '4', '什么是泛型，怎么使用的，有什么好处？', 'f0f9cdf8-1154-433d-8c80-d0d9121e15ad.', null, null, null, null, null, null, '定义一个集合时，可以知道里面定义的是什么类型\r\n使用:在集合类型后面加< 数据类型 >\r\n使用泛型后,从集合中取得元素后就不用再用强转 ', '', '0', '2017-12-26 19:37:41', '75', '1');
INSERT INTO `topic` VALUES ('5631', '3', '4', '什么是for each循环，它可以循环那些数据类型', 'bc00bccf-11dd-4c5d-b014-1c14a3d94198.', null, null, null, null, null, null, ' 也可以叫增强型循环，通过对象拿到集合里的值，因为扩展性比较强，建议多使用', '', '0', '2017-12-26 19:38:03', '75', '1');
INSERT INTO `topic` VALUES ('5632', '4', '4', '怎么使用Spring配置事务?', '714e49db-cfec-4193-b25d-bebbfedd0ffa.', null, null, null, null, null, null, 'SPRING同时支持编程式事务策略和声明式事务策略，大部分时候都采用声明式事务策略。\r\n声明式事务管理的配置方式，通常有以下4种：\r\n　　(1)使用TRANSACTIONPROXYFACTORYBEAN为目标BEAN生成事务代理的配置。此方式是最传统、配置文件最臃肿、最难以阅读的方式。\r\n　　(2)采用BEAN继承的事务代理配置方式，比较简洁，但依然是增量式配置。\r\n　　(3)采用BEANNAMEAUTOPROXYCREATOR，根据BEAN NAME自动生成事务代理的方式。这是直接利用SPRING的AOP框架配置事务代理的方式，需要对SPRING的AOP框架有所理解。但这种方式避免了增量式配置，效果非常不错。\r\n　　(4)采用DEFAULTADVISORAUTOPROXYCREATOR，直接利用SPRING的AOP框架配置事务代理的方式，效果非常不错，只是这种配置方式的可读性不如第3种方式。', '', '0', '2017-12-26 19:38:05', '52', '1');
INSERT INTO `topic` VALUES ('5633', '3', '3', '写一个for each循环看看', '19110099-1037-483f-b612-fe5e2e39a775.', null, null, null, null, null, null, 'FOR(OBJECT OBJECT : LIST){\r\nSYSTEM.OUT.PRINTLN(OBJECT);\r\n}', '', '0', '2017-12-26 19:38:28', '75', '1');
INSERT INTO `topic` VALUES ('5634', '3', '4', '什么是强转怎么写的,有什么优缺点,一般要多用还是少用，为什么？', 'ff984d0a-b06c-4aaf-8a54-14dd784b0bb9.', null, null, null, null, null, null, '一般在继承的基础上用.一般是范围小的转换成范围大的，譬如BYTE可以转换成INT，还可以子类转换成父类，反之则不行。\r\nPERSON PERSON=NEW STUDENT();\r\nSTUDENT STUDENT=(STUDENT)PERSON;\r\n把运行期的强转为编译期的.\r\n编译期不会出错.运行期容易出错.所以一般少用', '', '0', '2017-12-26 19:38:45', '75', '1');
INSERT INTO `topic` VALUES ('5635', '4', '4', '请你谈谈SSH整合', '36491716-0525-49aa-a4b6-238aa4e37ff0.', null, null, null, null, null, null, 'SSH整合：\r\n　　(1) STRUTS（表示层）+ SPRING（业务层）+ HIBERNATE（持久层）\r\n　　(2) STRUTS：STRUTS是一个表示层框架，主要作用是界面展示、接收请求和分发请求。\r\n在MVC框架中，STRUTS属于VC层次，负责界面表现，负责MVC关系的分发。\r\n　　(VIEW：沿用JSP，HTTP，FORM，TAG，RESOURSE；CONTROLLER：ACTIONSERVLET，STRUTS-CONFIG.XML，ACTION)\r\n　　(3) HIBERNATE：\r\nHIBERNATE是一个持久层框架，它只负责与关系数据库的操作。\r\n　　(4) SPRING：SPRING是一个业务层框架，是一个整合的框架，能够很好地黏合表示层与持久层。', '', '0', '2017-12-26 19:39:11', '52', '1');
INSERT INTO `topic` VALUES ('5636', '3', '4', 'Hashtable名字为什么没有驼峰命名', '84a31f9f-b503-4ca5-91d6-98b46036e8c8.', null, null, null, null, null, null, 'HASHTABLE的由来比较古老,当时还没有命名规范', '', '0', '2017-12-26 19:39:13', '75', '1');
INSERT INTO `topic` VALUES ('5637', '4', '4', 'Spring里如何定义Hibernate?Mapping？', 'e6aed483-0fa9-4607-808f-69263a43688b.', null, null, null, null, null, null, '添加HIBERNATE MAPPING 文件到WEB-INF目录下的APPLICATIONCONTEXT.XML文件中。', '', '0', '2017-12-26 19:39:30', '52', '1');
INSERT INTO `topic` VALUES ('5638', '3', '4', '写出Collections的6个方法，并详细解释', '5b66960f-e370-413d-b0cc-40afdaaba6b9.', null, null, null, null, null, null, ' SORT():对集合进行排序\r\nSHUFFLE():打乱集合中的元素顺序\r\nADDALL():将一个集合添加到另一个集合中\r\nMAX():判断集合中的最大值\r\nMIN():判断集合中的最小值\r\nCOPY():将一个集合中的元素复制到另一个集合中去\r\nFILL():将一个集合中的元素全部替换成指定的元素', '', '0', '2017-12-26 19:39:39', '75', '1');
INSERT INTO `topic` VALUES ('5639', '3', '4', 'Arrays类是做什么的，写出它的常用6个方法', '4f9edc41-e060-409e-b21e-9798344b2311.', null, null, null, null, null, null, 'ARRAYS是数组的一个工具类\r\nSORT():对数组进行排序\r\nBINARYSEARCH():搜索数组指定元素的下标\r\nCOPYOF():复制数组中指定长度的元素\r\nDEEPEQUALS():比较两个数组的深度\r\nFILL():把数组中的所有元素替换成指定元素\r\nEQUALS():比较指定两个数组的元素是否相等', '', '0', '2017-12-26 19:39:59', '75', '1');
INSERT INTO `topic` VALUES ('5640', '4', '4', '解释一下Dependency Injection(DI,依赖注入)和IoC(Inversion of Control,控制反转)', '8d8c2163-d64d-4b55-bb5c-9aa50aafc96d.', null, null, null, null, null, null, '1.依赖注入DI是一种设计模式，通常也称作控制反转，尽管在技术上来讲，依赖注入是一个IOC的特殊实现，依赖注入是指一个对象应用另外一个对象来提供一种特殊的能力。例如，把一个数据库连接以参数的形式传到一个对象的构造函数里面而不是在那个对象内部自行创建一个连接。\r\n　　2.控制反转和依赖注入的基本思想就是把类的依赖从类内部转化到外部以减少依赖。\r\n　　3.应用控制反转，对象在被创建的时候，由一个调控系统内所有对象的外界实体，将其所依赖的对象的引用，传递给它。\r\n也可以说，依赖被注入到对象中。所以，控制反转是，关于一个对象如何获取它依赖的对象的引用，这个责任的反转', '', '0', '2017-12-26 19:40:04', '52', '1');
INSERT INTO `topic` VALUES ('5641', '3', '4', '比较下集合和数组的优缺点', 'b1295f3e-9e48-4dcf-a83d-2ea94352a698.', null, null, null, null, null, null, '集合是多个对象的容器,可以将不同数据类型的多个对象组织在一起\r\n数组类型是有相同数据类型的数据集合,数组是很多语言都支持的底层数据结构,性能上是最高的', '', '0', '2017-12-26 19:40:21', '75', '1');
INSERT INTO `topic` VALUES ('5642', '4', '4', 'Spring中的核心类有那些，各有什么作用?', '5c9297b7-7fe9-42d9-950b-2a7f6f7992f0.', null, null, null, null, null, null, 'BEANFACTORY：产生一个新的实例，可以实现单例模式。\r\nBEANWRAPPER：提供统一的GET及SET方法。\r\nAPPLICATIONCONTEXT：提供SPRING框架的实现，包括BEANFACTORY的所有功能。', '', '0', '2017-12-26 19:40:32', '52', '1');
INSERT INTO `topic` VALUES ('5643', '3', '4', '如何对一个对象排序，有几种方法', 'cc3de54e-8805-45ea-ba71-845de70e3367.', null, null, null, null, null, null, '把对象放入LIST集合中,用COLLECTIONS工具类调用SORT()方法进行排序,但是这个类必须实现COMPABLE接口才行\r\n把对象放在SET集合中,用TREESET()实现类对集合直接排序', '', '0', '2017-12-26 19:40:37', '75', '1');
INSERT INTO `topic` VALUES ('5644', '3', '4', '在集合里面怎么判断两个对象相等，要实现什么方法', 'd1ba7bd8-9a03-456a-a763-20d8be58f0c4.', null, null, null, null, null, null, ' EQUALS方法', '', '0', '2017-12-26 19:40:56', '75', '1');
INSERT INTO `topic` VALUES ('5645', '4', '4', '什么是AOP，AOP的作用是什么?', 'eae0c8d0-bbdb-4430-9a18-097c656398bb.', null, null, null, null, null, null, '面向切面编程(AOP)提供另外一种角度来思考程序结构，通过这种方式弥补了面向对象编程(OOP)的不足。\r\n除了类(CLASSES)以外，AOP提供了切面。切面对关注点进行模块化，例如横切多个类型和对象的事务管理。\r\nSPRING的一个关键的组件就是AOP框架，可以自由选择是否使用AOP，提供声明式企业服务，特别是为了替代EJB声明式服务。\r\n最重要的服务是声明性事务管理，这个服务建立在SPRING的抽象事物管理之上。\r\n允许用户实现自定义切面，用AOP来完善OOP的使用，可以把SPRING AOP看作是对SPRING的一种增强.', '', '0', '2017-12-26 19:41:01', '52', '1');
INSERT INTO `topic` VALUES ('5646', '3', '4', '怎么样把集合转化成数组，或把数组转化为集合', '0ec9be2c-83e9-4496-9767-6c67d557bf5c.', null, null, null, null, null, null, '把集合转为数组,可以用TOARRAY()方法 \r\n把数组转为集合时, FOR EACH循坏，先把数组中的元素转为STRING型,再放到集合里', '', '0', '2017-12-26 19:41:09', '75', '1');
INSERT INTO `topic` VALUES ('5647', '3', '4', '分别写出List，Set，Map里面的5个常用方法', '953a13f2-b907-472f-912b-4abadb7e2fbc.', null, null, null, null, null, null, 'LIST:ADD()新增 CLEAR()清除 CONTAINS()判断是否包含某个元素 \r\nINDEXOF()一个元素在集合中首次出现的位置\r\nSET()把指定下标的元素替换成自定义元素\r\nSET:ADD()新增 CLEAR()清除 CONTAINS()判断是否包含某个元素\r\nREMOVE():把集合中指定下标的元素删掉\r\nSIZE():返回集合长度\r\nMAP: CONTAINSKEY（）是否包含指定KEY CONTAINSVALUE（）是否包含指定VALUE KEYSET()返回所有KEY PUT()添加元素 REMOVE()移除', '', '0', '2017-12-26 19:41:26', '75', '1');
INSERT INTO `topic` VALUES ('5648', '4', '4', '使用Spring有什么好处?', '94f0f630-897e-4d6b-9062-6024e106282e.', null, null, null, null, null, null, '(1)SPRING能有效地组织你的中间层对象，无论你是否选择使用了EJB。如果你仅仅使用了STRUTS或其它的包含了J2EE特有APIS的?FRAMEWORK，你会发现SPRING关注了遗留问题。\r\n　　(2)SPRING能消除在许多工程上对SINGLETON的过多使用。\r\n　　(3)SPRING能消除使用各种格式的属性定制文件的需要，在整个工程中，可通过一种一致的方法来进行配置。\r\n　　(4)SPRING能通过接口而不是类促进好的编程习惯，减少编程代价到几乎为零。\r\n　　(5)SPRING被设计为让使用它创建的应用尽可能少的依赖于它的APIS。在SPRING应用中的大多数业务对象没有依赖于SPRING。\r\n　　(6)使用SPRING构建的应用程序易于单元测试。\r\n　　(7)SPRING能使EJB的使用成为一个实现选择，而不是应用架构的必然选择。你能选择用POJOS或LOCAL?EJBS来实现业务接口，却不会影响调用代码。\r\n　　(8)SPRING帮助你解决许多问题而无需使用EJB。SPRING能提供一种EJB的替换物，它们适于许多WEB应用。\r\n例如,SPRING能使用AOP提供声明性事务而不通过使用EJB容器，如果你仅仅需要与单个的数据库打交道，甚至不需要JTA实现。\r\n　　(9)SPRING为数据存取提供了一致的框架，不论是使用JDBC或O/R?MAPPING产品（如HIBERNATE）。', '', '0', '2017-12-26 19:41:34', '52', '1');
INSERT INTO `topic` VALUES ('5649', '3', '4', 'HashMap与LinkedHashMap,和TreeMap的区别。', '8d7202ae-3f56-4dd9-b01e-22f2ffb4e2ef.', null, null, null, null, null, null, '共同点：HASHMAP,LINKEDHASHMAP,TREEMAP都属于MAP的实现类.\r\n不同点: 1.HASHMAP里面存入的键值对在取出的时候是随机的,\r\n2.TREEMAP取出来的是排序后的键值对。但如果您要按自然顺序或自定义顺序遍历键，那么TREEMAP会更好。\r\n3. LINKEDHASHMAP 是HASHMAP的一个子类，如果需要输出的顺序和输入的相同,那么用LINKEDHASHMAP可以实现.', '', '0', '2017-12-26 19:41:45', '75', '1');
INSERT INTO `topic` VALUES ('5650', '3', '4', 'HashMap怎么实现有序', '7da846a9-2dca-4164-bd6f-92299395f527.', null, null, null, null, null, null, '可以转化放入TREEMAP里面。 ', '', '0', '2017-12-26 19:42:04', '75', '1');
INSERT INTO `topic` VALUES ('5651', '3', '4', '在List里面怎么去掉重复的数？', 'f1aee53b-139d-4c18-9bae-f47d82058eee.', null, null, null, null, null, null, '通过把LIST里面的数据放入HASHSET可以去除重复', '', '0', '2017-12-26 19:42:19', '75', '1');
INSERT INTO `topic` VALUES ('5652', '4', '4', '什么是Spring，它有什么特点?', '2450ef74-50d1-4365-9146-86db7d44cfeb.', null, null, null, null, null, null, 'SPRING是一个轻量级的控制反转(IOC)和面向切面(AOP)的容器框架。\r\n　　(1)轻量——从大小与开销两方面而言SPRING都是轻量的。完整的SPRING框架可以在一个大小只有1MB多的JAR文件里发布，并且SPRING所需的处理开销也是微不足道的。此外，SPRING是非侵入式的：典型地，SPRING应用中的对象不依赖于SPRING的特定类。\r\n　　(2)控制反转——SPRING通过一种称作控制反转（IOC）的技术促进了松耦合。当应用了IOC，一个对象依赖的其它对象会通过被动的方式传递进来，而不是这个对象自己创建或者查找依赖对象。你可以认为IOC与JNDI相反——不是对象从容器中查找依赖，而是容器在对象初始化时不等对象请求就主动将依赖传递给它。\r\n　　(3)面向切面——SPRING提供了面向切面编程的丰富支持，允许通过分离应用的业务逻辑与系统级服务（例如审计（AUDITING）和事务管理）进行内聚性的开发。应用对象只实现它们应该做的——完成业务逻辑——仅此而已。\r\n它们并不负责其它的系统级关注点，例如日志或事务支持。\r\n　　(4)容器——SPRING包含并管理应用对象的配置和生命周期，在这个意义上它是一种容器，你可以配置你的每个BEAN如何被创建——基于一个可配置原型（PROTOTYPE），你的BEAN可以创建一个单独的实例或者每次需要时都生成一个新的实例——以及它们是如何相互关联的。然而，SPRING不应该被混同于传统的重量级的EJB容器，它们经常是庞大与笨重的，难以使用。\r\n　　(5)框架——SPRING可以将简单的组件配置、组合成为复杂的应用。在SPRING中，应用对象被声明式地组合，典型地是在一个XML文件里。SPRING也提供了很多基础功能（事务管理、持久化框架集成等等），将应用逻辑的开发留给了你。', '', '0', '2017-12-26 19:42:23', '52', '1');
INSERT INTO `topic` VALUES ('5653', '3', '4', '在List里面有几种排序？', 'f68f6d85-f741-4e35-a14b-97fca195961a.', null, null, null, null, null, null, '两种：实现COMPARABLE<ARTICLE>接口,实现里面的COMPARETO方法进行排序。还有调用COLLECTIONS.SORT()方法排序！', '', '0', '2017-12-26 19:42:32', '75', '1');
INSERT INTO `topic` VALUES ('5654', '3', '4', '说一下链表跟数组的区别', '1d48b320-d721-41e1-a69e-d13d5e38e472.', null, null, null, null, null, null, '链表：用一组任意储存单元存放线性表的数据元素，并且通过指针链相接结点的序列称为链表。是一种常见的数据组织形式，它采用了动态分配内存的形式实现。需要时可以用NEW分配内存空间，不需要时用DELETE将已分配的空间释放，不会造成内存空间的浪费。不靠数组实现，没有下标。\r\n数组必须事先定义固定的长度，不能适应数据动态增减的情况。当数据增加时，可能超出原先定义的元素个数；当数据减少时，造成数据浪费。在使用的时候还要数组初始化，注意数组的下标越界。\r\n', '', '0', '2017-12-26 19:43:02', '75', '1');
INSERT INTO `topic` VALUES ('5655', '3', '4', 'HashSet的理解', '5489c406-24d4-45ea-b746-0aafee65ff03.', null, null, null, null, null, null, 'HASHSET实现了SET接口，HASHSET不保证集合的迭代顺序，允许使用NULL元素。HASHSET的底层使用了HASHMAP，使用HASHMAP实列进行对集合的元素进行操作，然后再封装成HASHSET的操作。\r\n', '', '0', '2017-12-26 19:43:20', '75', '1');
INSERT INTO `topic` VALUES ('5656', '3', '4', '什么类可以实现有序存储（除ArrayList以外）？', 'd78b00a5-21c7-435a-8db7-920f0c00abc1.', null, null, null, null, null, null, '一种按照插入的顺序排序,譬如LINKEDLIST,LISKEDHASHMAP,另外一种是插入后重新排序TREESET,TREEMAP \r\n', '', '0', '2017-12-26 19:43:34', '75', '1');
INSERT INTO `topic` VALUES ('5657', '4', '4', '比较Hibernate的三种检索策略优缺点?', '37da24ae-4ffa-42b3-86cd-5d1b1a763487.', null, null, null, null, null, null, '1.立即检索:\r\n　　优点：对应用程序完全透明，不管对象处于持久化状态，还是游离状态，应用程序都可以方便的从一个对象导航到与它关联的对象；\r\n　　缺点：1.SELECT语句太多；2.可能会加载应用程序不需要访问的对象白白浪费许多内存空间\r\n2.延迟检索：\r\n　　优点：由应用程序决定需要加载哪些对象，可以避免可执行多余的SELECT语句，以及避免加载应用程序不需要访问的对象。因此能提高检索性能，并且能节省内存空间；\r\n　　缺点：应用程序如果希望访问游离状态代理类实例，必须保证他在持久化状态时已经被初始化；\r\n3.迫切左外连接检索\r\n　　优点：\r\n　　1.对应用程序完全透明，不管对象处于持久化状态，还是游离状态，应用程序都可以方便地冲一个对象导航到与它关联的对象。\r\n　　2.使用了外连接，SELECT语句数目少；\r\n　　缺点：\r\n　　1.可能会加载应用程序不需要访问的对象，白白浪费许多内存空间；\r\n　　2.复杂的数据库表连接也会影响检索性能；', '', '0', '2017-12-26 19:43:48', '52', '1');
INSERT INTO `topic` VALUES ('5658', '3', '4', 'HashMap和ArrayList是不是都是线程不安全的？ ', '11a43af9-c843-4980-b695-2b2a5bbbc686.', null, null, null, null, null, null, 'ARRAYLIST是线程不安全的；HASHMAP是线程不安全的；还有我们常见的一些JAVA集合都是线程不安全,这样做是为了提高性能\r\n在JDK5以后提供了线程安全的并发包JAVA.UTIL.CONCURRENT并发包,譬如里面的类COPYONWRITEARRAYLIST,COPYONWRITEARRAYSET,CONCURRENTHASHMAP等\r\n', '', '0', '2017-12-26 19:43:48', '75', '1');
INSERT INTO `topic` VALUES ('5659', '3', '4', 'ArrayList集合加入1万条数据，应该怎么提高效率', '2530b307-4714-4193-a35a-c420e10f1979.', null, null, null, null, null, null, '因为ARRAYLIST的底层是数组实现,并且数组的默认值是10,如果插入10000条要不断的扩容,耗费时间,所以我们调用ARRAYLIST的指定容量的构造器方法ARRAYLIST(INT SIZE) 就可以实现不扩容,就提高了性能\r\n', '', '0', '2017-12-26 19:44:05', '75', '1');
INSERT INTO `topic` VALUES ('5660', '4', '4', '说下Hibernate的缓存机制', 'ba10d5e3-a5af-41c8-bc38-d62973dee9bd.', null, null, null, null, null, null, '1.内部缓存存在HIBERNATE中又叫一级缓存，属于应用事物级缓存;\r\n2.二级缓存：\r\n　　A)应用级缓存;\r\n　　B)分布式缓存;\r\n条件：数据不会被第三方修改、数据大小在可接受范围、数据更新频率低、同一数据被系统频繁使用、非关键数据;\r\n　　C)第三方缓存的实现;', '', '0', '2017-12-26 19:44:21', '52', '1');
INSERT INTO `topic` VALUES ('5661', '3', '4', '你知道HashMap底层是怎么实现的吗？', '20326152-b940-4ece-8652-d13abd92a15d.', null, null, null, null, null, null, '简单的说是一个数组,因为数组的性能比较好,数组里面放的是ENTRY类,HASHMAP类有一个叫做ENTRY的内部类。这个ENTRY类包含了KEY-VALUE作为实例变量。当存储或者获取对象的时候,就根据哈希算法,对象的HASHCODE调用得到这个下标,以便实现快速访问.', '', '0', '2017-12-26 19:44:27', '75', '1');
INSERT INTO `topic` VALUES ('5662', '3', '4', '怎样遍历List Set，Map', '7452f434-d784-4636-aeea-b0f9872c9086.', null, null, null, null, null, null, 'LIST 和SET可以通过一般FOR循环,迭代器循环,或者增强型循环来遍历, 其中一般FOR循环性能最快,迭代器循环可以判断和得到下一个值,FOR EACH增强型循环扩展性强,但性能稍低.\r\nMAP循环可以通过KEYSET得到KEY的SET集合,然后遍历这个集合就可以得到所有的VALUE\r\n', '', '0', '2017-12-26 19:44:44', '75', '1');
INSERT INTO `topic` VALUES ('5663', '3', '4', 'Set为什么是不允许重复的。', '044fb138-f6b9-408e-9b84-c77f1a4bbdc4.', null, null, null, null, null, null, 'SET的实现机制不允许重复的', '', '0', '2017-12-26 19:45:01', '75', '1');
INSERT INTO `topic` VALUES ('5664', '4', '4', '说说Hibernate中的update()和saveOrUpdate()的区别，session的load()和get()的区别。', '7eeb5eff-01d9-4406-a5dc-f38a0c4c80b2.', null, null, null, null, null, null, 'SAVEORUPDATE()方法可以实现UPDATE()的功能，但会多些步骤，具体如下：\r\n　　1. 如果对象在该SESSION中已经被持久化，不进行操作；\r\n　　2. 对象的标识符属性(IDENTIFIER PROPERTY)在数据库中不存在或者是个暂时的值，调用SAVE()方法保存它；\r\n　　3. 如果SESSION中的另一个对象有相同的标识符抛出一个异常；以上皆不符合则调用UPDATE()更新之。\r\nSession.load/get方法均可以根据指定的实体类和id从数据库读取记录，并返回与之对应的实体对象。\r\nsession的get()和load()其区别在于：\r\n　　1. 如果未能发现符合条件的记录，get方法返回null，而load方法会抛出一个ObjectNotFoundException；\r\n　　2. load方法可返回实体的代理类实例，而get方法永远直接返回实体类；\r\n　　3. load方法可以充分利用内部缓存和二级缓存中的现有数据，而get方法则仅仅在内部缓存中进行数据查找，如没有发现对应数据，将越过二级缓存，直接调用SQL完成数据读取。', '', '0', '2017-12-26 19:45:13', '52', '1');
INSERT INTO `topic` VALUES ('5665', '3', '4', 'ArrayList为什么要用for循环，为什么要用迭代器，又有什么好处。', '0f003cba-86b4-4bd1-833a-49e251a7b7cb.', null, null, null, null, null, null, 'FOR循环通过对象拿到集合里的值\r\n迭代器可以实现COLLECTION接口的方法，可以一个一个地获取集合中的元素\r\n在遍历集合时 可判断是否有下一个元素\r\n', '', '0', '2017-12-26 19:45:21', '75', '1');
INSERT INTO `topic` VALUES ('5666', '3', '4', '你对栈与队列了解多少你是怎么用的。', '82779ae2-824e-44d4-adfc-2196962cb880.', null, null, null, null, null, null, '队列是一种数据结构，FIFO 先进先出有点类似与栈，只是在队列中第一个插入的数据项也会被最先删除,\r\n队列的两个基本操作：\r\n一个是插入一个数据项，即把一个数据项放入队尾\r\n另一个是移除一个数据项，即移除队头的数据项.', '', '0', '2017-12-26 19:45:39', '75', '1');
INSERT INTO `topic` VALUES ('5667', '3', '4', '如果我要存取很多的数据，但是又不需要重复的，要选择什么容器，说一下为什么使用它，它是哪个的子类？', '3aff0889-4847-4892-9c85-bb12e4280df2.', null, null, null, null, null, null, 'SET容器，它是不允许重复的，它是COLLECTION的子类', '', '0', '2017-12-26 19:45:58', '75', '1');
INSERT INTO `topic` VALUES ('5668', '3', '4', '哪种方法可以得到Map的Key？', 'ae011294-d119-455a-9a51-4f12711b76e7.', null, null, null, null, null, null, 'KEYSET()方法', '', '0', '2017-12-26 19:46:14', '75', '1');
INSERT INTO `topic` VALUES ('5669', '4', '4', 'hibernate中对象的三种状态?', '43d435a2-0426-4bee-83ff-642c0aecb045.', null, null, null, null, null, null, '瞬时态(TRANSIENT)、持久态(PERSISTENT)、脱管态(DETACHED)。\r\n\r\n处于持久态的对象也称为PO(PERSISTENCE OBJECT)，瞬时对象和脱管对象也称为VO（VALUE OBJECT）。\r\n\r\n瞬时态:\r\n\r\n由NEW命令开辟内存空间的JAVA对象， EG. PERSON PERSON =NEW PERSON(”AMIGO”, “女”);\r\n\r\n如果没有变量对该对象进行引用，它将被JAVA虚拟机回收。\r\n\r\n瞬时对象在内存孤立存在，它是携带信息的载体，不和数据库的数据有任何关联关系，在HIBERNATE中，可通过SESSION的SAVE()或 SAVEORUPDATE()方法将瞬时对象与数据库相关联，并将数据对应的插入数据库中，\r\n\r\n此时该瞬时对象转变成持久化对象。\r\n\r\n持久态:\r\n\r\n处于该状态的对象在数据库中具有对应的记录，并拥有一个持久化标识。如果是用HIBERNATE的DELETE()方法，对应的持久对象就变成瞬时对象，因数据库中的对应数据已被删除，该对象不再与数据库的记录关联。\r\n当一个SESSION执行CLOSE()或CLEAR()、EVICT()之后，持久对象变成脱管对象，此时持久对象会变成脱管对象，此时该对象虽然具有数据库识别值，但它已不在HIBERNATE持久层的管理之下。\r\n持久对象具有如下特点：\r\n　　1.和SESSION实例关联；\r\n　　2.在数据库中有与之关联的记录。\r\n脱管态:\r\n当与某持久对象关联的SESSION被关闭后，该持久对象转变为脱管对象。当脱管对象被重新关联到SESSION上时，并再次转变成持久对象。\r\n脱管对象拥有数据库的识别值，可通过UPDATE()、SAVEORUPDATE()等方法，转变成持久对象。\r\n脱管对象具有如下特点：\r\n　　1.本质上与瞬时对象相同，在没有任何变量引用它时，JVM会在适当的时候将它回收；\r\n　　2.比瞬时对象多了一个数据库记录标识值。', '', '0', '2017-12-26 19:46:55', '52', '1');
INSERT INTO `topic` VALUES ('5670', '4', '4', 'ssh集成原理', 'ec8c8bc1-2e05-4817-81bf-fd827fa4640e.', null, null, null, null, null, null, '没有SPRING，只用STRUTS和HIBERNATE也可以进行开发。只不过这个时候STRUTS的ACTION是有STRUTS的\r\nOBJECTFACTORY创建的，ACTION和SERVICE以及SERVICE和DAO之间的关系，是由程序员自己维护；\r\n-没有SPRING，HIBERNATE中的事务也是程序员自己控制的\r\n-SPRING在三大框架的整合过程中，充当粘合剂的作用,主要负责粘合STRUTS和HIBERNATE\r\n-SPRING提供IOC容器，这样STRUTS的ACTION以及ACTION和SERVICE、SERVICE和DAO之间的关系都交给\r\nSPRING的IOC容器进行管理\r\n-SPRING提供了AOP(面向切面编程)，HIBERNATE的事务 不需要程序编写代码，只需要在配置文件中做些配置即可\r\n\r\n注意：IOC控制反转 ，是一种编程思想；  DI依赖注入 是IOC的具体实现', '', '0', '2017-12-26 19:47:18', '75', '1');
INSERT INTO `topic` VALUES ('5671', '26', '4', '在数据库中条件查询速度很慢的时候,如何优化?', '63ef68e2-b747-4d2b-abfd-8bb45178bdc9.', null, null, null, null, null, null, '1.建索引;\r\n　　2.减少表之间的关联;\r\n　　3.优化SQL，尽量让SQL很快定位数据，不要让SQL做全表查询，应该走索引,把数据量大的表排在前面;\r\n　　4.简化查询字段，没用的字段不要，已经对返回结果的控制，尽量返回少量数据;', '', '0', '2017-12-26 19:47:21', '52', '1');
INSERT INTO `topic` VALUES ('5672', '4', '4', '在struts的流程中涉及的设计模式', 'd30afde0-0fe2-4f55-806f-d857d647d6ed.', null, null, null, null, null, null, '-STRUTSPREPAREANDEXECUTEFILTER前端控制器  JAVAEE的设计模式\r\n-ACTIONPROXY 代理\r\n-OBJECTFACTORY工厂\r\n-拦截器   责任链、适配器\r\n-RESULT 策略、模版方法', '', '0', '2017-12-26 19:47:33', '75', '1');
INSERT INTO `topic` VALUES ('5673', '4', '4', '在进行ssh单元测试的时候，如果service上的方法结束之后，使用了延迟加载，会出现延迟加载的no-session异常', '2f4552b0-6b5d-4ff2-bf9b-13ddb6ce420f.', null, null, null, null, null, null, '让测试类集成SPRING-TEST中提供的ABSTRACTTRANSACTIONALJUNIT4SPRINGCONTEXTTESTS\r\n如果集成了该类，那么SPRING配置文件中的事物控制将不起作用，它将事物控制在测试方式上，方法结束之后，\r\n事物结束，而且默认对事物的操作是回滚', '', '0', '2017-12-26 19:47:53', '75', '1');
INSERT INTO `topic` VALUES ('5674', '4', '4', '关于线程安全', 'c38cfc21-45ad-49eb-ae6f-fc2ff2956d2d.', null, null, null, null, null, null, '-多线程环境下\r\n-有共享数据\r\n-共享数据涉及修改操作\r\n以上三个条件都满足的情况下，需要考虑线程安全问题', '', '0', '2017-12-26 19:48:06', '75', '1');
INSERT INTO `topic` VALUES ('5675', '4', '4', '简述你对IoC（Inversion  of  Control）的理解，描述一下Spring中实现DI（Dependency?Injection）的几种方式。\r\n', 'a5968264-161a-480b-b373-fc3f93a1981e.', null, null, null, null, null, null, 'SPRING的IOC有三种注入方式:\r\n第一是根据属性注入也叫SET方法注入；\r\n第二种是根据构造方法进行注入；\r\n第三种是根据注解进行注入，这种方式我认为比较好，方便，要是BEAN多的话，使用前两种方式会使得配置文件过于臃肿。', '', '0', '2017-12-26 19:48:18', '52', '1');
INSERT INTO `topic` VALUES ('5676', '4', '4', '怎么解决线程安全问题', '9c023520-3b28-4064-b9f8-dd6bacebb5e8.', null, null, null, null, null, null, '-方案1：尽量使用局部变量\r\n-方案2：如果是实例变量，可以采用多例的方式\r\n-方案3：如果是实例变量，添加SYNCHRONIZED修饰', '', '0', '2017-12-26 19:48:30', '75', '1');
INSERT INTO `topic` VALUES ('5677', '4', '4', '简单描述Spring?Framework与Struts的不同之处，整合Spring与Struts有哪些方法，哪种最好，为什么？', '410452c6-dda0-473b-b39e-277d762b4652.', null, null, null, null, null, null, '答、SPRING是完整的一站式框架，而STRUTS仅是MVC框架，且着重于MVC中的C。\r\nSPRING有三种方式整合\r\nSTRUTS：使用SPRING的ACTIONSUPPORT类整合STRUTS；\r\n使用SPRING的DELEGATINGREQUESTPROCESSOR覆盖STRUTS的REQUESTPROCESSOR；\r\n将STRUTS ACTION 管理委托给SPRING框架，动作委托最好。', '', '0', '2017-12-26 19:49:01', '52', '1');
INSERT INTO `topic` VALUES ('5678', '4', '4', 'jsp的九大内置对象\r\n内置对象的名称	 对应的完整类名', '2207d8da-b6b9-4b6c-9240-6f01a781f446.', null, null, null, null, null, null, 'PAGECONTEXT	 JAVAX.SERVLET.JSP.PAGECONTEXT\r\nREQUEST	 JAVAX.SERVLET.HTTP.HTTPSERVLETREQUEST\r\nSESSION	 JAVAX.SERVLET.HTTP.HTTPSESSION\r\nAPPLICATION	 JAVAX.SERVLET.SERVLETCONTEXT\r\n\r\nOUT	 JAVAX.SERVLET.JSP.JSPWRITER\r\nRESPONSE	 JAVAX.SERVLET.HTTP.HTTPSERVLETRESPONSE\r\n\r\nEXCEPTION	 JAVA.LANG.EXCEPTION\r\nCONFIG	 JAVAX.SERVLET.SERVLETCONFIG\r\nPAGE	 THIS\r\n\r\n四个内置的范围： PAGECONTEXT(页面范围) <  REQUEST(请求范围)<  SESSION(会话范围) <  APPLICATION(应用范围)\r\n\r\n修改为：<BASE HREF=\"<%=REQUEST.GETSCHEME()%>://<%=REQUEST.GETSERVERNAME()%>:<%=REQUEST.GETSERVERPORT() %><%=REQUEST.GETCONTEXTPATH() %>/\">\r\n', '', '0', '2017-12-26 19:49:05', '75', '1');
INSERT INTO `topic` VALUES ('5679', '4', '4', 'struts的前端控制器 StrutsPrapareAndExecuteFilter中doFilter()', '4087ac37-54bf-4a4d-ad9b-7ddc96eea4e8.', null, null, null, null, null, null, '-处理字符集\r\n-将REQUEST和RESPONSE放到THREADLOCAL中(REQUEST和RESPONSE对象有要求:一个线程对应一个请求，一次请求对应一个REQUEST对象\r\n,REQUEST对象是线程安全的，不是多线程共享的)', '', '0', '2017-12-26 19:49:26', '75', '1');
INSERT INTO `topic` VALUES ('5680', '4', '4', '开发原则', '3f8a6a61-37ec-41df-bfee-7a54105dc71b.', null, null, null, null, null, null, '-OCP:开闭原则  对扩展开发，对修改关闭  (本质：在扩展功能的时候尽量不要修改JAVA的源代码)\r\n-依赖倒转原则:面向抽象编程、面向接口编程、不要面向具体编程\r\n-里氏替换原则:只要是父类出现的地方子类都可以出现\r\n-合成聚合复用原则:能用HAS-A的地方尽量少用IS-A\r\n-迪米特法则:不要和陌生人说话\r\n-接口隔离原则:接口应该定义的专一一些，不要把所有的方法都放到同一个接口中', '', '0', '2017-12-26 19:49:46', '75', '1');
INSERT INTO `topic` VALUES ('5681', '4', '4', '在struts的Action中获取ServletAPI(request\\response\\session...)的方式', '71f8eea6-43d4-4012-a291-1062248a4c37.', null, null, null, null, null, null, '-直接从ACTIONCONTEXT中获取\r\n-从工具列SERVLETACTIONCONTEXT中获取\r\n-通过实现转配接口  SERVLETREQUESTAWARE\\SERVLETRESPONSETAWARE...', '', '0', '2017-12-26 19:50:08', '75', '1');
INSERT INTO `topic` VALUES ('5682', '4', '4', '持久层框架有：', '4a281a5c-9ddd-48a2-845c-aece014dde48.', null, null, null, null, null, null, '- HIBERNATE\r\n- MYBATIS\r\n- TOPLINK\r\n- GUZZ\r\n- JOOQ\r\n- SPRING DATA\r\n- ACTIVEJDBC', '', '0', '2017-12-26 19:50:18', '52', '1');
INSERT INTO `topic` VALUES ('5683', '4', '4', '在struts的action中与页面交互传值的方式', 'c6f830fc-ef26-47d4-b7ca-69ac438f683c.', null, null, null, null, null, null, '-普通属性驱动(常用)\r\n-域驱动(常用)\r\n-模型驱动	(MODELDRIVEN)\r\n', '', '0', '2017-12-26 19:50:28', '75', '1');
INSERT INTO `topic` VALUES ('5684', '4', '4', 'Session的save()、update()、merge()、lock()、saveOrUpdate()和persist()方法分别是做什么的？有什么区别？', 'ea8eab82-ec92-4251-a7c5-bc2a9418d8df.', null, null, null, null, null, null, 'HIBERNATE的对象有三种状态：瞬时态（TRANSIENT）、持久态（PERSISTENT）和游离态（DETACHED），如第135题中的图所示。瞬时态的实例可以通过调用SAVE()、PERSIST()或者SAVEORUPDATE()方法变成持久态；游离态的实例可以通过调用 UPDATE()、SAVEORUPDATE()、LOCK()或者REPLICATE()变成持久态。SAVE()和PERSIST()将会引发SQL的INSERT语句，而UPDATE()或MERGE()会引发UPDATE语句。SAVE()和UPDATE()的区别在于一个是将瞬时态对象变成持久态，一个是将游离态对象变为持久态。MERGE()方法可以完成SAVE()和UPDATE()方法的功能，它的意图是将新的状态合并到已有的持久化对象上或创建新的持久化对象。对于PERSIST()方法，按照官方文档的说明：① PERSIST()方法把一个瞬时态的实例持久化，但是并不保证标识符被立刻填入到持久化实例中，标识符的填入可能被推迟到FLUSH的时间；② PERSIST()方法保证当它在一个事务外部被调用的时候并不触发一个INSERT语句，当需要封装一个长会话流程的时候，PERSIST()方法是很有必要的；③ SAVE()方法不保证第②条，它要返回标识符，所以它会立即执行INSERT语句，不管是在事务内部还是外部。至于LOCK()方法和UPDATE()方法的区别，UPDATE()方法是把一个已经更改过的脱管状态的对象变成持久状态；LOCK()方法是把一个没有更改过的脱管状态的对象变成持久状态。', '', '0', '2017-12-26 19:50:49', '52', '1');
INSERT INTO `topic` VALUES ('5685', '4', '4', 'Spring 如何整合 Struts2 ?', 'ffffd721-0c53-4ef6-912d-29b7fd240c96.', null, null, null, null, null, null, ' 整合 STRUTS2, 即由 IOC 容器管理 STRUTS2 的 ACTION:\r\n    > 安装 SPRING 插件: 把 STRUTS2-SPRING-PLUGIN-2.2.1.JAR 复制到\r\n  当前 WEB 应用的 WEB-INF双击查看原图B 目录下\r\n    > 在 SPRING 的配置文件中配置 STRUTS2 的 ACTION 实例\r\n    > 在 STRUTS 配置文件中配置 ACTION,  但其 CLASS 属性不再指向该ACTION 的实现类, 而是指向 SPRING 容器中 ACTION 实例的 ID\r\n', '', '0', '2017-12-26 19:50:50', '75', '1');
INSERT INTO `topic` VALUES ('5686', '4', '4', 'Spring 如何整合 Hibernate', 'b40dcb26-0a0a-43de-8f41-4154cea51b9b.', null, null, null, null, null, null, '整合  HIBERNATE,  即由  IOC  容器生成  SESSIONFACTORY  对象,  并使用SPRING 的声明式事务\r\n    > 利用 LOCALSESSIONFACTORYBEAN 工厂 BEAN, 声明一个使用 XML 映射文件的 SESSIONFACTORY 实例.\r\n    > 利用 HIBERNATETRANSACTIONMANAGER 配置 HIBERNATE 的事务管理器\r\n', '', '0', '2017-12-26 19:51:06', '75', '1');
INSERT INTO `topic` VALUES ('5687', '4', '4', '阐述Session加载实体对象的过程。', 'db522c33-3475-4068-8b6a-e3813380d14b.', null, null, null, null, null, null, 'SESSION加载实体对象的步骤是：\r\n① SESSION在调用数据库查询功能之前，首先会在一级缓存中通过实体类型和主键进行查找，如果一级缓存查找命中且数据状态合法，则直接返回；\r\n② 如果一级缓存没有命中，接下来SESSION会在当前NONEXISTS记录（相当于一个查询黑名单，如果出现重复的无效查询可以迅速做出判断，从而提升性能）中进行查找，如果NONEXISTS中存在同样的查询条件，则返回NULL；\r\n③ 如果一级缓存查询失败则查询二级缓存，如果二级缓存命中则直接返回；\r\n④ 如果之前的查询都未命中，则发出SQL语句，如果查询未发现对应记录则将此次查询添加到SESSION的NONEXISTS中加以记录，并返回NULL；\r\n⑤ 根据映射配置和SQL语句得到RESULTSET，并创建对应的实体对象；\r\n⑥ 将对象纳入SESSION（一级缓存）的管理；\r\n⑦ 如果有对应的拦截器，则执行拦截器的ONLOAD方法；\r\n⑧ 如果开启并设置了要使用二级缓存，则将数据对象纳入二级缓存；\r\n⑨ 返回数据对象。', '', '0', '2017-12-26 19:51:14', '52', '1');
INSERT INTO `topic` VALUES ('5688', '4', '4', 'Spring MVC 的运行流程', '75c6866e-601e-4bad-8ac1-2691582f91e3.', null, null, null, null, null, null, '  ①. 在整个 SPRING MVC 框架中， DISPATCHERSERVLET 处于核心位置，负责协调和组织不同组件以完成请求处理并返回响应的工作\r\n  ②. SPRINGMVC 处理请求过程：\r\n    >  若一个请求匹配  DISPATCHERSERVLET 的请求映射路径(在  WEB.XML 中指定), WEB 容器将该请求转交给 DISPATCHERSERVLET 处理\r\n    > DISPATCHERSERVLET 接收到请求后, 将根据请求信息(包括 URL、 HTTP 方法、 请求头、 请求参数、 COOKIE 等)及 HANDLERMAPPING 的配置找到处理请求的处理器(HANDLER). 可将 HANDLERMAPPING 看成路由控制器， 将 HANDLER 看成目标主机。\r\n    > 当 DISPATCHERSERVLET 根据 HANDLERMAPPING 得到对应当前请求的HANDLER 后，通过 HANDLERADAPTER 对 HANDLER 进行封装，再以统一的适配器接口调用 HANDLER。\r\n    >  处 理 器 完 成 业 务 逻 辑 的 处 理 后 将 返 回 一 个   MODELANDVIEW  给DISPATCHERSERVLET, MODELANDVIEW 包含了视图逻辑名和模型数据信息\r\n    > DISPATCHERSERVLET 借助 VIEWRESOLER 完成逻辑视图名到真实视图对象的解析\r\n    > 得到真实视图对象 VIEW 后, DISPATCHERSERVLET 使用这个 VIEW 对MODELANDVIEW 中的模型数据进行视图渲染\r\n', '', '0', '2017-12-26 19:52:00', '75', '1');
INSERT INTO `topic` VALUES ('5689', '4', '4', '讲下SpringMvc和Struts1,Struts2的比较的优势', 'e3b8e6f8-7b6d-4564-a5c5-10b125c5d8b9.', null, null, null, null, null, null, ' 性能上STRUTS1>SPRINGMVC>STRUTS2 开发速度上SPRINGMVC和STRUTS2差不多,比STRUTS1要高\r\n', '', '0', '2017-12-26 19:52:25', '75', '1');
INSERT INTO `topic` VALUES ('5690', '4', '4', '如何理解Hibernate的延迟加载机制？在实际应用中，延迟加载与Session关闭的矛盾是如何处理的？', '94bb511d-64e9-4a22-aaec-7c659494bd04.', null, null, null, null, null, null, '延迟加载就是并不是在读取的时候就把数据加载进来，而是等到使用时再加载。HIBERNATE使用了虚拟代理机制实现延迟加载，我们使用SESSION的LOAD()方法加载数据或者一对多关联映射在使用延迟加载的情况下从一的一方加载多的一方，得到的都是虚拟代理，简单的说返回给用户的并不是实体本身，而是实体对象的代理。代理对象在用户调用GETTER方法时才会去数据库加载数据。但加载数据就需要数据库连接。而当我们把会话关闭时，数据库连接就同时关闭了。\r\n\r\n延迟加载与SESSION关闭的矛盾一般可以这样处理：\r\n① 关闭延迟加载特性。这种方式操作起来比较简单，因为HIBERNATE的延迟加载特性是可以通过映射文件或者注解进行配置的，但这种解决方案存在明显的缺陷。首先，出现”NO SESSION OR SESSION WAS CLOSED”通常说明系统中已经存在主外键关联，如果去掉延迟加载的话，每次查询的开销都会变得很大。\r\n② 在SESSION关闭之前先获取需要查询的数据，可以使用工具方法HIBERNATE.ISINITIALIZED()判断对象是否被加载，如果没有被加载则可以使用HIBERNATE.INITIALIZE()方法加载对象。\r\n③ 使用拦截器或过滤器延长SESSION的生命周期直到视图获得数据。SPRING整合HIBERNATE提供的OPENSESSIONINVIEWFILTER和OPENSESSIONINVIEWINTERCEPTOR就是这种做法。', '', '0', '2017-12-26 19:52:25', '52', '1');
INSERT INTO `topic` VALUES ('5691', '4', '4', '讲下SpringMvc的核心入口类是什么,Struts1,Struts2的分别是什么', 'e83ac00b-434b-43d1-880b-9ed490c3dbab.', null, null, null, null, null, null, 'SPRINGMVC的是DISPATCHSERVLET,STRUTS1的是ACTIONSERVLET,STRUTS2的是STRUTSPREPAREANDEXECUTEFILTER\r\n', '', '0', '2017-12-26 19:52:43', '75', '1');
INSERT INTO `topic` VALUES ('5692', '4', '4', '举一个多对多关联的例子，并说明如何实现多对多关联映射。', '1c8fabae-3fc1-412f-bc98-7f17555f76ca.', null, null, null, null, null, null, '例如：商品和订单、学生和课程都是典型的多对多关系。可以在实体类上通过@MANYTOMANY注解配置多对多关联或者通过映射文件中的和标签配置多对多关联，但是实际项目开发中，很多时候都是将多对多关联映射转换成两个多对一关联映射来实现的。', '', '0', '2017-12-26 19:53:04', '52', '1');
INSERT INTO `topic` VALUES ('5693', '4', '4', 'SpringMvc的控制器是不是单例模式,如果是,有什么问题,怎么解决', 'cde11e3b-86c7-4ea9-b36b-862bf3ff19e1.', null, null, null, null, null, null, '是单例模式,所以在多线程访问的时候有线程安全问题,不要用同步,会影响性能的,解决方案是在控制器里面不能写字段\r\n', '', '0', '2017-12-26 19:53:20', '75', '1');
INSERT INTO `topic` VALUES ('5694', '4', '4', '谈一下你对继承映射的理解。', '8d040791-c045-41be-8ebb-b0356f99a95c.', null, null, null, null, null, null, '继承关系的映射策略有三种：\r\n① 每个继承结构一张表（TABLE PER CLASS HIERARCHY），不管多少个子类都用一张表。\r\n② 每个子类一张表（TABLE PER SUBCLASS），公共信息放一张表，特有信息放单独的表。\r\n③ 每个具体类一张表（TABLE PER CONCRETE CLASS），有多少个子类就有多少张表。\r\n第一种方式属于单表策略，其优点在于查询子类对象的时候无需表连接，查询速度快，适合多态查询；缺点是可能导致表很大。后两种方式属于多表策略，其优点在于数据存储紧凑，其缺点是需要进行连接查询，不适合多态查询。', '', '0', '2017-12-26 19:53:26', '52', '1');
INSERT INTO `topic` VALUES ('5695', '4', '4', 'SpingMvc中的控制器的注解一般用那个,有没有别的注解可以替代\r\n', 'de0b1538-409e-4f6b-a9e3-b3da2fa5335e.', null, null, null, null, null, null, '一般用@CONNTROLLER注解,表示是表现层,不能用用别的注解代替.\r\n', '', '0', '2017-12-26 19:53:33', '75', '1');
INSERT INTO `topic` VALUES ('5696', '4', '4', '简述Hibernate常见优化策略。', 'deadc245-897d-49cd-9e2b-9110459624b0.', null, null, null, null, null, null, '这个问题应当挑自己使用过的优化策略回答，常用的有：\r\n① 制定合理的缓存策略（二级缓存、查询缓存）。\r\n② 采用合理的SESSION管理机制。\r\n③ 尽量使用延迟加载特性。\r\n④ 设定合理的批处理参数。\r\n⑤ 如果可以，选用UUID作为主键生成器。\r\n⑥ 如果可以，选用基于版本号的乐观锁替代悲观锁。\r\n⑦ 在开发过程中, 开启HIBERNATE.SHOW_SQL选项查看生成的SQL，从而了解底层的状况；开发完成后关闭此选项。\r\n⑧ 考虑数据库本身的优化，合理的索引、恰当的数据分区策略等都会对持久层的性能带来可观的提升，但这些需要专业的DBA（数据库管理员）提供支持。', '', '0', '2017-12-26 19:53:41', '52', '1');
INSERT INTO `topic` VALUES ('5697', '4', '4', ' @RequestMapping注解用在类上面有什么作用', '4f47e8e2-0871-41af-bfb9-99be1d19b6a4.', null, null, null, null, null, null, '用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。', '', '0', '2017-12-26 19:53:47', '75', '1');
INSERT INTO `topic` VALUES ('5698', '4', '4', '怎么样把某个请求映射到特定的方法上面', 'a6506818-3765-49df-907b-b858dca8f645.', null, null, null, null, null, null, ' 直接在方法上面加上注解@REQUESTMAPPING,并且在这个注解里面写上要拦截的路径', '', '0', '2017-12-26 19:54:01', '75', '1');
INSERT INTO `topic` VALUES ('5699', '4', '4', '如果在拦截请求中,我想拦截get方式提交的方法,怎么配置', '857538e7-d311-435b-b985-0dc6e1f17253.', null, null, null, null, null, null, '可以在@REQUESTMAPPING注解里面加上METHOD=REQUESTMETHOD.GET\r\n', '', '0', '2017-12-26 19:54:15', '75', '1');
INSERT INTO `topic` VALUES ('5700', '4', '4', ' 如果在拦截请求中,我想拦截提交参数中包含\"type=test\"字符串,怎么配置', '74eaabb0-8367-493e-9cec-ebc9cb0457cb.', null, null, null, null, null, null, '可以在@REQUESTMAPPING注解里面加上PARAMS=\"TYPE=TEST\"', '', '0', '2017-12-26 19:54:31', '75', '1');
INSERT INTO `topic` VALUES ('5701', '4', '4', '你是如何理解”横切关注”这个概念的？', '3ca7b6e1-8ea9-4cc5-a51f-4871665cb73e.', null, null, null, null, null, null, '”横切关注”是会影响到整个应用程序的关注功能，它跟正常的业务逻辑是正交的，没有必然的联系，但是几乎所有的业务逻辑都会涉及到这些关注功能。通常，事务、日志、安全性等关注就是应用中的横切关注功能。', '', '0', '2017-12-26 19:54:44', '52', '1');
INSERT INTO `topic` VALUES ('5702', '4', '4', '我想在拦截的方法里面得到从前台传入的参数,怎么得到\r\n', 'b045fff9-dbc3-4927-ac98-a994990eefcc.', null, null, null, null, null, null, '直接在形参里面声明这个参数就可以,但必须名字和传过来的参数一样', '', '0', '2017-12-26 19:54:47', '75', '1');
INSERT INTO `topic` VALUES ('5703', '4', '4', '如果前台有很多个参数传入,并且这些参数都是一个对象的,那么怎么样快速得到这个对象', '4bb4e45c-d011-4416-9bda-c800e0284cc9.', null, null, null, null, null, null, ' 直接在方法中声明这个对象,SPRINGMVC就自动会把属性赋值到这个对象里面', '', '0', '2017-12-26 19:55:03', '75', '1');
INSERT INTO `topic` VALUES ('5704', '4', '4', '怎么样在方法里面得到Request,或者Session', '7514bbe3-2e1a-4b8b-bfe1-5b70a1f42816.', null, null, null, null, null, null, '直接在方法的形参中声明REQUEST,SPRINGMVC就自动把REQUEST对象传入', '', '0', '2017-12-26 19:55:19', '75', '1');
INSERT INTO `topic` VALUES ('5705', '4', '4', 'Spring中自动装配的方式有哪些？', '718c95d4-0e8a-4093-b19b-bd98f48bdae5.', null, null, null, null, null, null, '- NO：不进行自动装配，手动设置BEAN的依赖关系。\r\n- BYNAME：根据BEAN的名字进行自动装配。\r\n- BYTYPE：根据BEAN的类型进行自动装配。\r\n- CONSTRUCTOR：类似于BYTYPE，不过是应用于构造器的参数，如果正好有一个BEAN与构造器的参数类型相同则可以自动装配，否则会导致错误。\r\n- AUTODETECT：如果有默认的构造器，则通过CONSTRUCTOR的方式进行自动装配，否则使用BYTYPE的方式进行自动装配。', '', '0', '2017-12-26 19:55:23', '52', '1');
INSERT INTO `topic` VALUES ('5706', '4', '4', 'SpringMvc中函数的返回值是什么.\r\n', '06aefa52-58b8-416c-954e-5ca5b4c08178.', null, null, null, null, null, null, '返回值可以有很多类型,有STRING, MODELANDVIEW,当一般用STRING比较好', '', '0', '2017-12-26 19:55:32', '75', '1');
INSERT INTO `topic` VALUES ('5707', '4', '4', 'SpringMvc怎么处理返回值的', 'b0fba377-e704-469d-a4e1-7b1b46affcde.', null, null, null, null, null, null, ' SPRINGMVC根据配置文件中INTERNALRESOURCEVIEWRESOLVER的前缀和后缀,用前缀+返回值+后缀组成完整的返回值\r\n', '', '0', '2017-12-26 19:55:46', '75', '1');
INSERT INTO `topic` VALUES ('5708', '4', '4', 'SpringMVC怎么样设定重定向和转发的', 'd7f7c669-c444-451a-8100-2ae05f530959.', null, null, null, null, null, null, ' 在返回值前面加\"FORWARD:\"就可以让结果转发,譬如\"FORWARD:USER.DO?NAME=METHOD4\" 在返回值前面加\"REDIRECT:\"就可以让返回值重定向,譬如\"REDIRECT:HTTP://WWW.BAIDU.COM\"\r\n', '', '0', '2017-12-26 19:55:58', '75', '1');
INSERT INTO `topic` VALUES ('5709', '4', '4', ' SpringMvc用什么对象从后台向前台传递数据的', 'ad6552a6-bdab-4f74-a04a-8bd013e984cf.', null, null, null, null, null, null, ' 通过MODELMAP对象,可以在这个对象里面用PUT方法,把对象加到里面,前台就可以通过EL表达式拿到', '', '0', '2017-12-26 19:56:11', '75', '1');
INSERT INTO `topic` VALUES ('5710', '4', '4', 'SpringMvc中有个类把视图和数据都合并的一起的,叫什么', 'ebca57d3-1a81-4240-a84c-e31e057da88d.', null, null, null, null, null, null, '  叫MODELANDVIEW', '', '0', '2017-12-26 19:56:25', '75', '1');
INSERT INTO `topic` VALUES ('5711', '4', '4', '怎么样把ModelMap里面的数据放入Session里面\r\n', '87daaa7c-9aa0-4431-9e6b-05dee592528f.', null, null, null, null, null, null, '可以在类上面加上@SESSIONATTRIBUTES注解,里面包含的字符串就是要放入SESSION里面的KEY', '', '0', '2017-12-26 19:56:38', '75', '1');
INSERT INTO `topic` VALUES ('5712', '4', '4', 'SpringMvc怎么和AJAX相互调用的', '2a9d30d0-1166-4fe4-89c5-07545ae9c7fd.', null, null, null, null, null, null, '通过JACKSON框架就可以把JAVA里面的对象直接转化成JS可以识别的JSON对象\r\n  具体步骤如下\r\n  1.加入JACKSON.JAR\r\n  2.在配置文件中配置JSON的映射\r\n  3.在接受AJAX方法里面可以直接返回OBJECT,LIST等,但方法前面要加上@RESPONSEBODY注解', '', '0', '2017-12-26 19:56:52', '75', '1');
INSERT INTO `topic` VALUES ('5713', '4', '4', '什么是MyBatis的接口绑定,有什么好处', '3aa6e685-851f-49f4-9bb2-d62dcff823f8.', null, null, null, null, null, null, '接口映射就是在IBATIS中任意定义接口,然后把接口里面的方法和SQL语句绑定,我们直接调用接口方法就可以,这样比起原来了SQLSESSION提供的方法我们可以有更加灵活的选择和设置.', '', '0', '2017-12-26 19:57:07', '75', '1');
INSERT INTO `topic` VALUES ('5714', '26', '4', 'PHP的意思？ ', '8f0c2390-0c4d-4e05-8ec8-703dc6e8580a.', null, null, null, null, null, null, 'PHP是一个基于服务端来创建动态网站的脚本语言，您可以用PHP和HTML生成网站主页', '', '0', '2017-12-26 19:57:08', '46', '1');
INSERT INTO `topic` VALUES ('5715', '4', '4', '如何在Web项目中配置Spring的IoC容器？', 'c425c4db-03ae-41d6-894d-dbc483025801.', null, null, null, null, null, null, '如果需要在WEB项目中使用SPRING的IOC容器，可以在WEB项目配置文件WEB.XML中做出如下配置：\r\n<CONTEXT-PARAM>\r\n    <PARAM-NAME>CONTEXTCONFIGLOCATION</PARAM-NAME>\r\n    <PARAM-VALUE>CLASSPATH:APPLICATIONCONTEXT.XML</PARAM-VALUE>\r\n</CONTEXT-PARAM>\r\n<LISTENER>\r\n    <LISTENER-CLASS> ORG.SPRINGFRAMEWORK.WEB.CONTEXT.CONTEXTLOADERLISTENER\r\n    </LISTENER-CLASS>\r\n</LISTENER>', '', '0', '2017-12-26 19:57:19', '52', '1');
INSERT INTO `topic` VALUES ('5716', '4', '4', '接口绑定有几种实现方式,分别是怎么实现的?', 'b068c1d5-1134-4ffe-b488-ef5f94609200.', null, null, null, null, null, null, '接口绑定有两种实现方式,一种是通过注解绑定,就是在接口的方法上面加上@SELECT @UPDATE等注解里面包含SQL语句来绑定,另外一种就是通过XML里面写SQL来绑定,在这种情况下,要指定XML映射文件里面的NAMESPACE必须为接口的全路径名.\r\n', '', '0', '2017-12-26 19:57:21', '75', '1');
INSERT INTO `topic` VALUES ('5717', '4', '4', '什么情况下用注解绑定,什么情况下用xml绑定', '9a0a1dfc-07ab-487d-a9e0-9e9c6e0f602e.', null, null, null, null, null, null, '当SQL语句比较简单时候,用注解绑定,当SQL语句比较复杂时候,用XML绑定,一般用XML绑定的比较多\r\n', '', '0', '2017-12-26 19:57:35', '75', '1');
INSERT INTO `topic` VALUES ('5718', '4', '4', 'MyBatis实现一对一有几种方式?具体怎么操作的', 'e35a01b9-8c04-4e61-b204-cc25c006f4d4.', null, null, null, null, null, null, ' 有联合查询和嵌套查询,联合查询是几个表联合查询,只查询一次,通过在RESULTMAP里面配置ASSOCIATION节点配置一对一的类就可以完成;嵌套查询是先查一个表,根据这个表里面的结果的外键ID,去再另外一个表里面查询数据,也是通过ASSOCIATION配置,但另外一个表的查询通过SELECT属性配置\r\n', '', '0', '2017-12-26 19:57:49', '75', '1');
INSERT INTO `topic` VALUES ('5719', '4', '4', '选择使用Spring框架的原因（Spring框架为企业级开发带来的好处有哪些）？', '3f9bf54c-3601-4815-9e00-08b2812b1f74.', null, null, null, null, null, null, '可以从以下几个方面作答：\r\n- 非侵入式：支持基于POJO的编程模式，不强制性的要求实现SPRING框架中的接口或继承SPRING框架中的类。\r\n- IOC容器：IOC容器帮助应用程序管理对象以及对象之间的依赖关系，对象之间的依赖关系如果发生了改变只需要修改配置文件而不是修改代码，因为代码的修改可能意味着项目的重新构建和完整的回归测试。有了IOC容器，程序员再也不需要自己编写工厂、单例，这一点特别符合SPRING的精神”不要重复的发明轮子”。\r\n- AOP（面向切面编程）：将所有的横切关注功能封装到切面（ASPECT）中，通过配置的方式将横切关注功能动态添加到目标代码上，进一步实现了业务逻辑和系统服务之间的分离。另一方面，有了AOP程序员可以省去很多自己写代理类的工作。\r\n- MVC：SPRING的MVC框架是非常优秀的，从各个方面都可以甩STRUTS 2几条街，为WEB表示层提供了更好的解决方案。\r\n- 事务管理：SPRING以宽广的胸怀接纳多种持久层技术，并且为其提供了声明式的事务管理，在不需要任何一行代码的情况下就能够完成事务管理。\r\n- 其他：选择SPRING框架的原因还远不止于此，SPRING为JAVA企业级开发提供了一站式选择，你可以在需要的时候使用它的部分和全部，更重要的是，你甚至可以在感觉不到SPRING存在的情况下，在你的项目中使用SPRING提供的各种优秀的功能。', '', '0', '2017-12-26 19:58:03', '52', '1');
INSERT INTO `topic` VALUES ('5720', '4', '4', 'MyBatis里面的动态Sql是怎么设定的?用什么语法?', 'cf5ff4bb-f69f-4a7e-b20e-5cf3fb7cd1de.', null, null, null, null, null, null, '\r\n  MYBATIS里面的动态SQL一般是通过IF节点来实现,通过OGNL语法来实现,但是如果要写的完整,必须配合WHERE,TRIM节点,WHERE节点是判断包含节点有内容就插入WHERE,否则不插入,TRIM节点是用来判断如果动态语句是以AND 或OR开始,那么会自动把这个AND或者OR取掉 \r\n', '', '0', '2017-12-26 19:58:12', '75', '1');
INSERT INTO `topic` VALUES ('5721', '4', '4', 'IBatis和MyBatis在核心处理类分别叫什么', 'f4724d07-aaf6-4127-bd39-cc0828297b64.', null, null, null, null, null, null, ' IBATIS里面的核心处理类交SQLMAPCLIENT,MYBATIS里面的核心处理类叫做SQLSESSION \r\n', '', '0', '2017-12-26 19:58:26', '75', '1');
INSERT INTO `topic` VALUES ('5722', '4', '4', '依赖注入时如何注入集合属性？', '67158eda-de42-4f32-9764-fc5944598376.', null, null, null, null, null, null, '可以在定义BEAN属性时，通过<LIST> / <SET> / <MAP> / <PROPS>分别为其注入列表、集合、映射和键值都是字符串的映射属性。', '', '0', '2017-12-26 19:58:26', '52', '1');
INSERT INTO `topic` VALUES ('5723', '4', '4', 'IBatis和MyBatis在细节上的不同有哪些', 'fd4d3388-fa9d-4685-b02b-f36b95da80be.', null, null, null, null, null, null, '在SQL里面变量命名有原来的#变量# 变成了#{变量}  原来的$变量$变成了${变量},\r\n	原来在SQL节点里面的CLASS都换名字交TYPE \r\n	原来的QUERYFOROBJECT QUERYFORLIST 变成了SELECTONE SELECTLIST  \r\n	原来的别名设置在映射文件里面放在了核心配置文件里\r\n', '', '0', '2017-12-26 19:58:38', '75', '1');
INSERT INTO `topic` VALUES ('5724', '4', '4', '讲下MyBatis的缓存', 'acf604ba-270a-4bd7-be44-723466af1d33.', null, null, null, null, null, null, 'MYBATIS的缓存分为一级缓存和二级缓存,一级缓存放在SESSION里面,默认就有,二级缓存放在它的命名空间里,默认是打开的,使用二级缓存属性类需要实现SERIALIZABLE序列化接口(可用来保存对象的状态),可在它的映射文件中配置<CACHE/>\r\n', '', '0', '2017-12-26 19:58:51', '75', '1');
INSERT INTO `topic` VALUES ('5725', '4', '4', '大型网站在架构上应当考虑哪些问题？', '3994137a-1e43-4588-863a-be2423cbdf51.', null, null, null, null, null, null, '- 分层：分层是处理任何复杂系统最常见的手段之一，将系统横向切分成若干个层面，每个层面只承担单一的职责，然后通过下层为上层提供的基础设施和服务以及上层对下层的调用来形成一个完整的复杂的系统。计算机网络的开放系统互联参考模型（OSI/RM）和INTERNET的TCP/IP模型都是分层结构，大型网站的软件系统也可以使用分层的理念将其分为持久层（提供数据存储和访问服务）、业务层（处理业务逻辑，系统中最核心的部分）和表示层（系统交互、视图展示）。需要指出的是：（1）分层是逻辑上的划分，在物理上可以位于同一设备上也可以在不同的设备上部署不同的功能模块，这样可以使用更多的计算资源来应对用户的并发访问；（2）层与层之间应当有清晰的边界，这样分层才有意义，才更利于软件的开发和维护。\r\n- 分割：分割是对软件的纵向切分。我们可以将大型网站的不同功能和服务分割开，形成高内聚低耦合的功能模块（单元）。在设计初期可以做一个粗粒度的分割，将网站分割为若干个功能模块，后期还可以进一步对每个模块进行细粒度的分割，这样一方面有助于软件的开发和维护，另一方面有助于分布式的部署，提供网站的并发处理能力和功能的扩展。\r\n- 分布式：除了上面提到的内容，网站的静态资源（JAVASCRIPT、CSS、图片等）也可以采用独立分布式部署并采用独立的域名，这样可以减轻应用服务器的负载压力，也使得浏览器对资源的加载更快。数据的存取也应该是分布式的，传统的商业级关系型数据库产品基本上都支持分布式部署，而新生的NOSQL产品几乎都是分布式的。当然，网站后台的业务处理也要使用分布式技术，例如查询索引的构建、数据分析等，这些业务计算规模庞大，可以使用HADOOP以及MAPREDUCE分布式计算框架来处理。\r\n- 集群：集群使得有更多的服务器提供相同的服务，可以更好的提供对并发的支持。\r\n- 缓存：所谓缓存就是用空间换取时间的技术，将数据尽可能放在距离计算最近的位置。使用缓存是网站优化的第一定律。我们通常说的CDN、反向代理、热点数据都是对缓存技术的使用。\r\n- 异步：异步是实现软件实体之间解耦合的又一重要手段。异步架构是典型的生产者消费者模式，二者之间没有直接的调用关系，只要保持数据结构不变，彼此功能实现可以随意变化而不互相影响，这对网站的扩展非常有利。使用异步处理还可以提高系统可用性，加快网站的响应速度（用AJAX加载数据就是一种异步技术），同时还可以起到削峰作用（应对瞬时高并发）。&QUOT；能推迟处理的都要推迟处理”是网站优化的第二定律，而异步是践行网站优化第二定律的重要手段。\r\n- 冗余：各种服务器都要提供相应的冗余服务器以便在某台或某些服务器宕机时还能保证网站可以正常工作，同时也提供了灾难恢复的可能性。冗余是网站高可用性的重要保证。', '', '0', '2017-12-26 19:58:55', '52', '1');
INSERT INTO `topic` VALUES ('5726', '4', '4', 'MyBatis(IBatis)的好处是什么', 'a1ae502c-aa93-41f0-ab46-ca93f2eb64d6.', null, null, null, null, null, null, 'IBATIS把SQL语句从JAVA源程序中独立出来，放在单独的XML文件中编写，给程序的维护带来了很大便利。\r\nIBATIS封装了底层JDBC API的调用细节，并能自动将结果集转换成JAVA BEAN对象，大大简化了JAVA数据库编程的重复工作。\r\n因为IBATIS需要程序员自己去编写SQL语句，程序员可以结合数据库自身的特点灵活控制SQL语句，\r\n因此能够实现比HIBERNATE等全自动ORM框架更高的查询效率，能够完成复杂查询。\r\n', '', '0', '2017-12-26 19:59:07', '75', '1');
INSERT INTO `topic` VALUES ('5727', '4', '4', '讲一下线程的几种实现方式?启动方式？区分方式？', 'e92cd832-d645-4fdb-ba51-c9fea6ddacff.', null, null, null, null, null, null, '①实现方式\r\n1、通过继承THREAD类实现一个线程\r\n2、通过实现RUNNABLE接口实现一个线程\r\n   继承扩展性不强，JAVA总只支持单继承，如果一个类继承THREAD就不能继承其他的类了。\r\n②怎么启动？\r\n   THREAD THREAD = NEW THREAD(继承了THREAD的对象/实现了RUNNABLE的对象)\r\n   THREAD.SETNAME(“设置一个线程名称”);\r\n   THREAD.START();\r\n   启动线程使用START方法，而启动了以后执行的是RUN方法。\r\n③怎么区分线程？在一个系统中有很多线程，每个线程都会打印日志，我想区分是哪个线程打印的怎么办？\r\n   THREAD.SETNAME(“设置一个线程名称”); 这是一种规范，在创建线程完成后，都需要设置名称。\r\n', '', '0', '2017-12-26 19:59:38', '75', '1');
INSERT INTO `topic` VALUES ('5728', '33', '4', '你用过的网站前端优化的技术有哪些？', '8be36f6a-8b6b-4eed-94c8-d02c829324dd.', null, null, null, null, null, null, '① 浏览器访问优化：\r\n- 减少HTTP请求数量：合并CSS、合并JAVASCRIPT、合并图片（CSS SPRITE）\r\n- 使用浏览器缓存：通过设置HTTP响应头中的CACHE-CONTROL和EXPIRES属性，将CSS、JAVASCRIPT、图片等在浏览器中缓存，当这些静态资源需要更新时，可以更新HTML文件中的引用来让浏览器重新请求新的资源\r\n- 启用压缩\r\n- CSS前置，JAVASCRIPT后置\r\n- 减少COOKIE传输\r\n② CDN加速：CDN（CONTENT DISTRIBUTE NETWORK）的本质仍然是缓存，将数据缓存在离用户最近的地方，CDN通常部署在网络运营商的机房，不仅可以提升响应速度，还可以减少应用服务器的压力。当然，CDN缓存的通常都是静态资源。\r\n③ 反向代理：反向代理相当于应用服务器的一个门面，可以保护网站的安全性，也可以实现负载均衡的功能，当然最重要的是它缓存了用户访问的热点资源，可以直接从反向代理将某些内容返回给用户浏览器。', '', '0', '2017-12-26 19:59:39', '52', '1');
INSERT INTO `topic` VALUES ('5729', '4', '4', '线程池的作用？', '89266690-3bef-4d6a-aeef-bd6a8735cb21.', null, null, null, null, null, null, '1、限定线程的个数，不会导致由于线程过多导致系统运行缓慢或崩溃\r\n2、线程池不需要每次都去创建或销毁，节约了资源、\r\n3、线程池不需要每次都去创建，响应时间更快。\r\n连接池也是一样？', '', '0', '2017-12-26 19:59:51', '75', '1');
INSERT INTO `topic` VALUES ('5730', '33', '4', '你使用过的应用服务器优化技术有哪些？', '13c1911d-c3d4-49cb-98cd-e801b0fce92d.', null, null, null, null, null, null, '① 分布式缓存：缓存的本质就是内存中的哈希表，如果设计一个优质的哈希函数，那么理论上哈希表读写的渐近时间复杂度为O(1)。缓存主要用来存放那些读写比很高、变化很少的数据，这样应用程序读取数据时先到缓存中读取，如果没有或者数据已经失效再去访问数据库或文件系统，并根据拟定的规则将数据写入缓存。对网站数据的访问也符合二八定律（PARETO分布，幂律分布），即80%的访问都集中在20%的数据上，如果能够将这20%的数据缓存起来，那么系统的性能将得到显著的改善。当然，使用缓存需要解决以下几个问题：\r\n- 频繁修改的数据；\r\n- 数据不一致与脏读；\r\n- 缓存雪崩（可以采用分布式缓存服务器集群加以解决，MEMCACHED是广泛采用的解决方案）；\r\n- 缓存预热；\r\n- 缓存穿透（恶意持续请求不存在的数据）。\r\n② 异步操作：可以使用消息队列将调用异步化，通过异步处理将短时间高并发产生的事件消息存储在消息队列中，从而起到削峰作用。电商网站在进行促销活动时，可以将用户的订单请求存入消息队列，这样可以抵御大量的并发订单请求对系统和数据库的冲击。目前，绝大多数的电商网站即便不进行促销活动，订单系统都采用了消息队列来处理。\r\n③ 使用集群。\r\n④ 代码优化：\r\n- 多线程：基于JAVA的WEB开发基本上都通过多线程的方式响应用户的并发请求，使用多线程技术在编程上要解决线程安全问题，主要可以考虑以下几个方面：A. 将对象设计为无状态对象（这和面向对象的编程观点是矛盾的，在面向对象的世界中被视为不良设计），这样就不会存在并发访问时对象状态不一致的问题。B. 在方法内部创建对象，这样对象由进入方法的线程创建，不会出现多个线程访问同一对象的问题。使用THREADLOCAL将对象与线程绑定也是很好的做法，这一点在前面已经探讨过了。C. 对资源进行并发访问时应当使用合理的锁机制。\r\n- 非阻塞I/O： 使用单线程和非阻塞I/O是目前公认的比多线程的方式更能充分发挥服务器性能的应用模式，基于NODE.JS构建的服务器就采用了这样的方式。JAVA在JDK 1.4中就引入了NIO（NON-BLOCKING I/O）,在SERVLET 3规范中又引入了异步SERVLET的概念，这些都为在服务器端采用非阻塞I/O提供了必要的基础。\r\n- 资源复用：资源复用主要有两种方式，一是单例，二是对象池，我们使用的数据库连接池、线程池都是对象池化技术，这是典型的用空间换取时间的策略，另一方面也实现对资源的复用，从而避免了不必要的创建和释放资源所带来的开销。', '', '0', '2017-12-26 20:00:08', '52', '1');
INSERT INTO `topic` VALUES ('5731', '4', '4', '讲一下什么是设计模式？常用的设计模式有哪些？', '881f33fb-4d9f-41f4-aa4d-b68311dff39f.', null, null, null, null, null, null, '设计模式就是经过前人无数次的实践总结出的，设计过程中可以反复使用的、可以解决特定问题的设计方法。\r\n', '', '0', '2017-12-26 20:00:14', '75', '1');
INSERT INTO `topic` VALUES ('5732', '4', '4', '单例(饱汉模式、饥汉模式)', '08a078ad-5fa8-4c94-b6dc-2b455f1e0347.', null, null, null, null, null, null, '1、构造方法私有化，让出了自己类中能创建外其他地方都不能创建\r\n2、在自己的类中创建一个单实例（饱汉模式是一出来就创建创建单实例，而饥汉模式需要的时候才创建）\r\n3、提供一个方法获取该实例对象(创建时需要进行方法同步)\r\n工厂模式:SPRING IOC就是使用了工厂模式.\r\n       对象的创建交给一个工厂去创建。\r\n代理模式:SPRING AOP就是使用的动态代理。\r\n', '', '0', '2017-12-26 20:00:27', '75', '1');
INSERT INTO `topic` VALUES ('5733', '4', '4', 'Struts2中的拦截器，你都用它干什么？', 'ccfb800e-6880-4132-9c04-9b6c9462db69.', null, null, null, null, null, null, 'JAVA里的拦截器是动态拦截ACTION调用的对象。它提供了一种机制可以使开发者可以定义在一个ACTION执行的前后执行的代码，也可以在一个ACTION执行前阻止其执行，同时也提供了一种可以提取ACTION中可重用部分的方式。\r\n在AOP（ASPECT-ORIENTED PROGRAMMING）中拦截器用于在某个方法或字段被访问之前，进行拦截然后在之前或之后加入某些操作。\r\n', '', '0', '2017-12-26 20:00:49', '75', '1');
INSERT INTO `topic` VALUES ('5734', '4', '4', '请描述一下Struts2的值栈结构，以及它是如何工作的?', '29cefb1e-bc82-44b5-9b32-4c0f90dd8ba2.', null, null, null, null, null, null, '值栈 VALUE STACK \r\n值栈是STRUTS2框架的核心概念。所有的核心组件都以某种方式与之进行交互，它提供对上下文信息和执行环境中元素的访问机制。值栈的内容由如下4个层级组成。 \r\n1.临时对象 \r\n这些对象在请求处理中需要临时保存，比如集合中当前正在被迭代的元素。 \r\n2.模型对象 \r\n当ACTION实现了MODELDRIVEN接口，模型对象就会被存放在栈中，在ACTION对象前。如果ACTION没有实现该接口，这个级别的内容将不存在。 \r\n3.ACTION对象 \r\n此对象是当前正在执行的ACTION。 \r\n4.命名对象 即 OGNL上下文环境 \r\n任何对象都可以被赋予一个标识符而成为命名对象。STRUTS2内建的命名对象有：#APPLICATION、#SESSION、#REQUEST、#ATTR、#PARAMETERS \r\n使用值栈不需要压栈和弹栈，可直接使用OGNL表达式来查找或求值。OGNL表达式会在每个层级测试，层级测试的顺序按照层级顺序进行。如果各层级都没有求出结果，那么则返回NULL值。', '', '0', '2017-12-26 20:01:11', '52', '1');
INSERT INTO `topic` VALUES ('5735', '4', '4', 'Struts2里面有什么隐式对象？', 'e5e61ac9-54fc-4cdb-99fc-842ec89443d1.', null, null, null, null, null, null, 'STRUTS 2.1 的隐式对象 \r\n(这些隐式对象都是MAP类型) \r\nPARAMETERS 用于访问请求参数 \r\nREQUEST 用于访问HTTPSERVLETREQUEST的属性 \r\nSESSION 用于访问HTTPSESSION的属性 \r\nAPPLICATION 用于访问SERVLETCONTEXT的属性 \r\nATTR 用于访问各作用域内的属性，将依次搜索 REQUEST > SESSION > APPLICATION', '', '0', '2017-12-26 20:01:33', '52', '1');
INSERT INTO `topic` VALUES ('5736', '4', '4', 'Struts2的Action中获取request对象的几种方式？', '14a3a53e-e473-4aaf-a220-5f276da8ed48.', null, null, null, null, null, null, '1.通过ACTIONCONTEXT.GETSESSION获取 \r\n2.通过SERVLETACTIONCONTEXT.GETREQUEST()获取 \r\n3.通过SESSIONAWARE接口注入 \r\n4.通过SERVLETREQUESTAWARE接口注入', '', '0', '2017-12-26 20:01:45', '52', '1');
INSERT INTO `topic` VALUES ('5737', '4', '4', '说一下Spring中的两大核心？', 'eb290a5a-8fae-47e9-bce9-ba30717aec06.', null, null, null, null, null, null, 'SPRING是什么？\r\nSPRING是J2EE应用程序框架，是轻量级的IOC和AOP的容器框架(相对于重量级的EJB)，主要是针对JAVABEAN的生命周期进行管理的轻量级容器，可以单独使用，也可以和STRUTS框架，IBATIS框架等组合使用。\r\n\r\n1、IOC(INVERSION OF CONTROL )或DI(DEPENDENCY INJECTION)\r\n       IOC控制权反转\r\n          原来：我的SERVICE需要调用DAO，SERVICE就需要创建DAO\r\n          SPRING:SPRING发现你SERVICE依赖于DAO,就给你注入.\r\n       核心原理：就是配置文件+反射(工厂也可以)+容器(MAP)  \r\n2、AOP:面向切面编程\r\n       核心原理：使用动态代理的设计模式在执行方法前后或出现异常做加入相关逻辑。\r\n      我们主要使用AOP来做：\r\n      1、事务处理\r\n      2、权限判断\r\n      3、日志\r\n      4、....\r\n     ', '', '0', '2017-12-26 20:01:45', '75', '1');
INSERT INTO `topic` VALUES ('5738', '4', '4', '请说说你对Struts2的拦截器的理解。 ', 'e5c56b4b-e5a0-4e72-a77e-55895428e4dd.', null, null, null, null, null, null, 'STRUTS2拦截器是在访问某个ACTION或ACTION的某个方法，字段之前或之后实施拦截，并且STRUTS2拦截器是可插拔的，拦截器是AOP的一种实现． \r\n拦截器栈(INTERCEPTOR STACK)类似于过滤器链。拦截器栈就是将拦截器按一定的顺序联结成一条链。在访问被拦截的方法或字段时，拦截器栈的拦截器就会按其之前定义的顺序被调用。 \r\nSTRUTS2的拦截器和FILTER类似。在执行ACTION的EXECUTE方法之前，STRUTS2会首先执行在STRUTS.XML中引用的拦截器，完成一系列的功能，在执行完所有引用的拦截器的INTERCEPT方法后，会执行ACTION的EXECUTE方法。', '', '0', '2017-12-26 20:01:56', '52', '1');
INSERT INTO `topic` VALUES ('5739', '4', '4', 'AOP是什么？你都拿它做什么？	', 'e448274d-bc6d-408e-b812-9d0fd2909911.', null, null, null, null, null, null, 'AOP:面向切面编程\r\n       核心原理：使用动态代理的设计模式在执行方法前后或出现异常做加入相关逻辑。\r\n      我们主要使用AOP来做：\r\n      1、事务处理 执行方法前，开启事务、执行完成后关闭事务、出现异常后回滚事务\r\n      2、权限判断 在执行方法前，判断是否具有权限\r\n      3、日志     在执行前进行日志处理\r\n      4、....', '', '0', '2017-12-26 20:02:04', '75', '1');
INSERT INTO `topic` VALUES ('5740', '4', '4', '什么是ORM思想？常用的基于ORM的框架有哪些？各有什么特点？', 'a60dd01a-eece-48a2-9fbf-7ac1798d7b72.', null, null, null, null, null, null, 'ORM的全称是OBJECT-RELATIONAL MAPPING，即对象关系映射。ORM思想的提出来源于对象与关系之间相悖的特性。我们很难通过对象的继承与聚合关系来描述数据表中一对一、一对多以及多对多的关系。而面向对象思想中有关抽象与多态的原理，也无法通过关系数据库的SQL语句得以彰显。因此，我们需要在面向对象与面向关系之间找到一个平衡点，ORM于是应运而生。\r\n\r\n目前ORM框架的产品非常之多，除了个大公司、组织的产品外，其他一些小团队也在推出自己的ORM框架。目前流行的ORM框架有如下这些产品： \r\n（1）ENITIY EJB：ENITIY EJB实际上也是一种ORM技术，这是一直备受争议的组件技术。事实上，EJB为JAVA EE的蓬勃发展赢得了极高的声誉，EJB作为一种重量级、高花费的ORM技术具有不可比拟的优势。就其他架构设计来讲，依然非常优秀。即使现在十分流行的轻量级JAVA EE架构，其实质是对经典JAVA EE架构的模仿——虽然存在些许的改进。EJB3.1也采取了低侵入式的设计，增加了ANNOTATION，也具有极大的吸引力。 \r\n（2）HIBERNATE：目前最流行的开源ORM框架，已经被选作JBOSS的持久层解决方案。整个HIBERNATE项目也一并投入了JBOSS的怀抱，而JBOSS又加入了REDHAT组织，所以现在HIBERNATE属于REDHAT 的一部分。HIBERNATE 灵巧的设计、优秀的性能，还有其丰富的文档都是其风靡全球的重要因素。 \r\n（3）IBATIS： APACHE软件基金组织的子项目。与其称它为一种ORM框架，不如称它为一中“SQL MAPPING”框架。曾经在J2EE的开发中扮演非常重要的角色，但因为不支持存粹的面向对象操作，因此现在逐渐地被取代。但是在一些公司，依然占有一席之地，特别是一些对数据访问特别灵活的地方，IBATIS更加的灵活，它允许开发人员直接编写SQL语句。 \r\n（4）TOPLINK：ORACLE公司的产品，作为一个遵循OTN协议的商业产品，TOPLINK 在开发过程中可以自由地下载和使用，但是一旦作为商业产品被使用，则需要收取费用。由于这一点，TOPLINK 的市场占有率不高。 \r\n（5）OBJ：APACHE软件基金组织的子项目。另一个开源的ORM框架，可以说是APACHE作为IBATIS之后的取代产品，也是非常优秀的O/R MAPPING框架，但是由于HIBERNATE 的广芒太盛，所以并未有广泛的使用，而且由于OJB的开发文档不是很多，这也影响了OJB的流行。', '', '0', '2017-12-26 20:02:25', '52', '1');
INSERT INTO `topic` VALUES ('5741', '4', '4', '请说说你对Hibernat的理解？JDBC和Hibernate各有什么优势和劣势？ ', '4685a191-ad87-452c-9d10-b6e47ddb072a.', null, null, null, null, null, null, 'HIBERNATE是一个轻量级的持久层开源框架,它是连接JAVA应用程序和关系数据库的中间件,负责JAVA对象和关系数据之间的映射.HIBERNATE内部对JDBC API进行了封装,负责JAVA对象的持久化.因为它封装了所有的数据访问细节,使得业务逻辑层可以专注于实现业务逻辑. \r\n它是一种优秀的ORM映射工具,提供了完善的对象－关系映射服务,开发过程不依赖容器,灵活性非常大,可以无缝集成到任何一个JAVA系统中.', '', '0', '2017-12-26 20:02:37', '52', '1');
INSERT INTO `topic` VALUES ('5742', '4', '4', 'Mybatis比IBatis比较大的几个改进是什么', 'c315d40a-095d-47df-adca-1c000317c668.', null, null, null, null, null, null, 'A.有接口绑定,包括注解绑定SQL和XML绑定SQL ,B.动态SQL由原来的节点配置变成OGNL表达式,C. 在一对一,一对多的时候引进了ASSOCIATION,在一对多的时候引入了COLLECTION节点,不过都是在RESULTMAP里面配置\r\n', '', '0', '2017-12-26 20:02:52', '75', '1');
INSERT INTO `topic` VALUES ('5743', '4', '4', 'JDBC和Hibernate都是用于数据持久化操作的。 ', '787185d0-a472-4f07-a7fc-f38b413e7e72.', null, null, null, null, null, null, 'JDBC: \r\n1.实现业务逻辑的代码和访问数据库的代码混杂在一起,使程序结构不清晰,可读性差. \r\n2.JAVA是面向对象的,SQL是面向关系的.两者混在一起,程序员不能完全的运用面向对象的思维来编写程序. \r\n3.业务逻辑和关系数据模型绑定,如果关系数据模型发生变化(如更改表结构),就必须手动修改程序里所有相关的SQL语句,增加了维护软件的难度.如果SQL语句有语法错误,编译是不能检查这种错误,只有运行时才能发现错误,增加了程序的调试难度. \r\n4.数据库移植困难。 \r\nHIBERNATE： \r\nHIBERNATE是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，使得JAVA程序员可以随心所欲的使用对象编程思维来操纵数据库。', '', '0', '2017-12-26 20:02:56', '52', '1');
INSERT INTO `topic` VALUES ('5744', '3', '4', 'float型float f=3.4是否正确?', '38d27c26-ce91-48af-a001-87450a63a6a0.', null, null, null, null, null, null, '不正确。精度不准确,应该用强制类型转换，如下所示：FLOAT F=(FLOAT)3.4', '', '0', '2017-12-26 20:03:32', '52', '1');
INSERT INTO `topic` VALUES ('5745', '33', '4', 'Jdo是什么?', '610d8836-7157-46bf-844c-3e9e5876d893.', null, null, null, null, null, null, 'JDO是JAVA对象持久化的新的规范，为JAVA DATA OBJECT的简称,也是一个用于存取某种数据仓库中的对象的标准化API。JDO提供了透明的对象存储，因此对开发人员来说，存储数据对象完全不需要额外的代码（如JDBC API的使用）。这些繁琐的例行工作已经转移到JDO产品提供商身上，使开发人员解脱出来，从而集中时间和精力在业务逻辑上。另外，JDO很灵活，因为它可以在任何数据底层上运行。JDBC只是面向关系数据库（RDBMS)JDO更通用，提供到任何数据底层的存储功能，比如关系数据库、文件、XML以及对象数据库（ODBMS）等等，使得应用可移植性更强。', '', '0', '2017-12-26 20:05:20', '52', '1');
INSERT INTO `topic` VALUES ('5746', '4', '4', '开发中主要使用 Spring 的什么技术 ?', '2c6bb1e1-0cc1-476b-90e4-c1916a378a79.', null, null, null, null, null, null, '①. IOC 容器管理各层的组件\r\n  ②. 使用 AOP 配置声明式事务\r\n  ③. 整合其他框架.', '', '0', '2017-12-26 20:05:25', '75', '1');
INSERT INTO `topic` VALUES ('5747', '4', '4', '简述 AOP 和 IOC 概念', 'b25a6106-ac32-4509-8d25-e0a8c530b12e.', null, null, null, null, null, null, ' AOP: ASPECT ORIENTED PROGRAM, 面向(方面)切面的编程;FILTER(过滤器)也是一种   AOP.  AOP  是一种新的方法论 ,  是对传统   OOP(OBJECT-ORIENTED PROGRAMMING, 面向对象编程) 的补充. AOP 的主要编程对像是切面(ASPECT), 而切面模块化横切关注点.可以举例通过事务说明. \r\n  IOC: INVERT OF CONTROL, 控制反转. 也成为 DI(依赖注入)其思想是反转资源获取的方向. 传统的资源查找方式要求组件向容器发起请求查找资源.作为回应, 容器适时的返回资源. 而应用了 IOC 之后, 则是容器主动地将资源推送给它所管理的组件,组件所要做的仅是选择一种合适的方式来接受资源. 这种行为也被称为查找的被动形式.\r\n', '', '0', '2017-12-26 20:05:39', '75', '1');
INSERT INTO `topic` VALUES ('5748', '4', '4', '在 Spring 中如何配置 Bean ?', '12f42a18-9243-44f5-9ec5-950f7346275b.', null, null, null, null, null, null, ' BEAN 的配置方式: 通过全类名 （反射）、 通过工厂方法 （静态工厂方法 & 实例工厂方法）、FACTORYBEAN\r\n', '', '0', '2017-12-26 20:05:52', '75', '1');
INSERT INTO `topic` VALUES ('5749', '4', '4', 'MVC的各个部分都有那些技术来实现?如何实现?', '50c9c190-b70d-4b96-b72d-672dfce509ba.', null, null, null, null, null, null, 'MVC是MODEL－VIEW－CONTROLLER的简写。\"MODEL\" 代表的是应用的业务逻辑（通过JAVABEAN，EJB组件实现）， \"VIEW\" 是应用的表示面（由JSP页面产生），\"CONTROLLER\" 是提供应用的处理过程控制（一般是一个SERVLET），通过这种设计模型把应用逻辑，处理过程和显示逻辑分成不同的组件实现。这些组件可以进行交互和重用。', '', '0', '2017-12-26 20:05:59', '52', '1');
INSERT INTO `topic` VALUES ('5750', '4', '4', ' IOC 容器对 Bean 的生命周期:', '31df6ca3-9c84-4347-84a9-e49651930ed7.', null, null, null, null, null, null, '  ①. 通过构造器或工厂方法创建 BEAN 实例\r\n  ②. 为 BEAN 的属性设置值和对其他 BEAN 的引用\r\n  ③. 将BEAN实例传递给BEAN后置处理器的POSTPROCESSBEFOREINITIALIZATION 方法\r\n  ④. 调用 BEAN 的初始化方法(INIT-METHOD)\r\n  ⑤. 将BEAN实例传递给BEAN后置处理器的POSTPROCESSAFTERINITIALIZATION 方法\r\n  ⑦. BEAN 可以使用了\r\n  ⑧. 当容器关闭时, 调用 BEAN 的销毁方法(DESTROY-METHOD)', '', '0', '2017-12-26 20:06:07', '75', '1');
INSERT INTO `topic` VALUES ('5752', '4', '4', '说一下struts2-hibernate-Spring 的工作流程？', '8edd92a2-4098-43bb-bcb3-9b7bdd1c2cfe.', null, null, null, null, null, null, '1). STRUTS2 负责显示页面和接受请求\r\n  2). SPRING 的 IOC 容器管理各个组件: 整合 STRUTS2，HIBERNATE 和 其他组件，AOP 完成声明式事务\r\n  3). HIBERNATE 提供 DAO 操作.\r\n', '', '0', '2017-12-26 20:06:21', '75', '1');
INSERT INTO `topic` VALUES ('5753', '3', '4', 'UML方面', '03baaa4e-b782-413d-8f81-ca6fa326c6ad.', null, null, null, null, null, null, '标准建模语言UML。用例图,静态图(包括类图、对象图和包图),行为图,交互图(顺序图,合作图),实现图,\r\nJAVASCRIPT方面', '', '0', '2017-12-26 20:06:43', '52', '1');
INSERT INTO `topic` VALUES ('5754', '4', '4', '说出 Spring MVC 常用的 5 个注解:', '235cf29a-2d72-4f0d-89b1-a9c5fb469831.', null, null, null, null, null, null, '@REQUESTMAPPING 、 @PATHVARIABLE 、 @REQUESTPARAM 、 @REQUESTBOY 、@RESPONSEBODY\r\n', '', '0', '2017-12-26 20:07:06', '75', '1');
INSERT INTO `topic` VALUES ('5755', '18', '4', 'LINUX下线程，GDI类的解释。', '288af41d-4342-45ab-b276-a68b9e8198d5.', null, null, null, null, null, null, 'LINUX实现的就是基于核心轻量级进程的\"一对一\"线程模型，一个线程实体对应一个核心轻量级进程，而线程之间的管理在核外函数库中实现。\r\nGDI类为图像设备编程接口类库。', '', '0', '2017-12-26 20:07:18', '52', '1');
INSERT INTO `topic` VALUES ('5756', '4', '4', '如何使用 SpringMVC 完成 JSON 操作：', '744626c4-5904-4671-9ef3-325b2e8eb543.', null, null, null, null, null, null, '①. 配置 MAPPINGJACKSONHTTPMESSAGECONVERTER\r\n  ②. 使用 @REQUESTBODY 注解或 RESPONSEENTITY 作为返回值', '', '0', '2017-12-26 20:07:21', '75', '1');
INSERT INTO `topic` VALUES ('5757', '4', '4', '比较 SpringSecurity 和 Shiro', 'f0f92e12-400c-4f0d-8315-e334b0fc7b04.', null, null, null, null, null, null, ' 相比 SPRING SECURITY, SHIRO 在保持强大功能的同时, 使用简单性和灵活性\r\n    > SPRINGSECURITY: 即使是一个一个简单的请求，最少得经过它的 8 个FILTER\r\n    > SPRINGSECURITY 必须在 SPRING 的环境下使用\r\n    > 初学 SPRING SECURITY, 曲线还是较大, 需要深入学习其源码和框架, 配置起来也较费力.\r\n\r\n', '', '0', '2017-12-26 20:07:39', '75', '1');
INSERT INTO `topic` VALUES ('5758', '4', '4', 'Shiro 的优点', '215e8e18-7c60-4d34-aa3a-334e4dbc6fa6.', null, null, null, null, null, null, ' > 简单的身份认证, 支持多种数据源\r\n  > 对角色的简单的授权, 支持细粒度的授权(方法级)\r\n  > 支持一级缓存，以提升应用程序的性能；\r\n  > 内置的基于 POJO 企业会话管理, 适用于 WEB 以及非 WEB 的环境\r\n  > 非常简单的加密 API\r\n  > 不跟任何的框架或者容器捆绑, 可以独立运行\r\n', '', '0', '2017-12-26 20:07:54', '75', '1');
INSERT INTO `topic` VALUES ('5759', '4', '4', 'Struts2的工作机制', 'f9b61d32-cee6-46cb-a2bc-34eba96ebebf.', null, null, null, null, null, null, '一个请求在STRUTS2框架中的处理大概分为以下几个步骤：\r\n1、客户端初始化一个指向SERVLET容器（例如TOMCAT）的请求；\r\n2、这个请求经过一系列的过滤器（FILTER）（这些过滤器中有一个叫做ACTIONCONTEXTCLEANUP的可选过滤器，这个过滤器对于STRUTS2和其他框架的集成很有帮助，例如：SITEMESH PLUGIN）；\r\n3、接着FILTERDISPATCHER被调用，FILTERDISPATCHER询问ACTIONMAPPER来决定这个请求是否需要调用某个ACTION；\r\n4、如果ACTIONMAPPER决定需要调用某个ACTION，FILTERDISPATCHER把请求的处理交给ACTIONPROXY；\r\n5、ACTIONPROXY通过CONFIGURATIONMANAGER询问框架的配置文件，找到需要调用的ACTION类；\r\n6、ACTIONPROXY创建一个ACTIONINVOCATION的实例。\r\n7、ACTIONINVOCATION实例使用命名模式来调用，在调用ACTION的过程前后，涉及到相关拦截器（INTERCEPTER）的调用。\r\n8、一旦ACTION执行完毕，ACTIONINVOCATION负责根据STRUTS.XML中的配置找到对应的返回结果。返回结果通常是（但不总是，也可能是另外的一个ACTION链）一个需要被表示的JSP或者FREEMARKER的模版。在表示的过程中可以使用STRUTS2框架中继承的标签。在这个过程中需要涉及到ACTIONMAPPER。', '', '0', '2017-12-26 20:07:55', '52', '1');
INSERT INTO `topic` VALUES ('5760', '4', '4', '简述 Shiro 的核心组件', '2a68e0e4-04ea-45e7-a5fc-94f751c72a8e.', null, null, null, null, null, null, ' SHIRO 架构 3 个核心组件:\r\n    > SUBJECT: 正与系统进行交互的人, 或某一个第三方服务. \r\n    所有 SUBJECT 实例都被绑定到（且这是必须的）一个SECURITYMANAGER 上。\r\n    > SECURITYMANAGER: SHIRO 架构的心脏, 用来协调内部各安全组件, 管理内部组件实例, 并通过它来提供安全管理的各种服务. \r\n    当 SHIRO 与一个 SUBJECT 进行交互时, 实质上是幕后的 SECURITYMANAGER 处理所有繁重的 SUBJECT 安全操作。\r\n    > REALMS: 本质上是一个特定安全的 DAO. 当配置 SHIRO 时, 必须指定至少一个 REALM 用来进行身份验证和/或授权. \r\n    SHIRO 提供了多种可用的 REALMS 来获取安全相关的数据. 如关系数据库(JDBC), INI 及属性文件等. \r\n    可以定义自己 REALM 实现来代表自定义的数据源。\r\n', '', '0', '2017-12-26 20:08:10', '75', '1');
INSERT INTO `topic` VALUES ('5761', '4', '4', '在Struts2中怎样把请求分发给方法去处理？', '2ddc391e-1a12-4b94-a568-682fe4869504.', null, null, null, null, null, null, '在STRUTS.XML中就只需要配置一个ACTION，在一个ACTION类中分发ACTION请求调用不同的方法。', '', '0', '2017-12-26 20:08:13', '52', '1');
INSERT INTO `topic` VALUES ('5762', '4', '4', 'Shiro认证过程', '226cbd21-824c-4e52-9b74-ec051ffba503.', null, null, null, null, null, null, '\r\n  ①. 应用程序代码调用 SUBJECT.LOGIN 方法，传递创建好的包含终端用户的 PRINCIPALS(身份)和 CREDENTIALS(凭证)的 AUTHENTICATIONTOKEN 实例\r\n  ②. SUBJECT 实例: 通常为 DELEGATINGSUBJECT(或子类)委托应用程序的 SECURITYMANAGER 通过调用SECURITYMANAGER.LOGIN(TOKEN) 开始真正的验证。\r\n  ③. SUBJECTMANAGER 接收 TOKEN，调用内部的 AUTHENTICATOR 实例调用 AUTHENTICATOR.AUTHENTICATE(TOKEN).AUTHENTICATOR 通常是一个 MODULARREALMAUTHENTICATOR 实例, 支持在身份验证中协调一个或多个REALM 实例\r\n  ④. 如果应用程序中配置了一个以上的 REALM, MODULARREALMAUTHENTICATOR 实例将利用配置好的AUTHENTICATIONSTRATEGY 来启动 MULTI-REALM 认证尝试. 在REALMS 被身份验证调用之前, 期间和以后,AUTHENTICATIONSTRATEGY 被调用使其能够对每个REALM 的结果作出反应.\r\n  ⑤. 每个配置的 REALM 用来帮助看它是否支持提交的 AUTHENTICATIONTOKEN. 如果支持, 那么支持 REALM 的 GETAUTHENTICATIONINFO 方法将会伴随着提交的 TOKEN 被调用. GETAUTHENTICATIONINFO 方法有效地代表一个特定 REALM 的单一的身份验证尝试。\r\nSHIRO认证过程.PNG', '', '0', '2017-12-26 20:08:37', '75', '1');
INSERT INTO `topic` VALUES ('5763', '4', '4', '介绍一下Struts的ActionServlet类', '99e1ed30-1f07-44fd-b53e-6c35d2610963.', null, null, null, null, null, null, 'ACTIONSERVLET继承自JAVAX.SERVLET.HTTP.HTTPSERVLET类，其在STRUTSFRAMEWORK中扮演的角色是中心控制器。它提供一个中心位置来处理全部的终端请求。控制器ACTIONSERVLET主要负责将HTTP的客户请求信息组装后，根据配置文件的指定描述，转发到适当的处理器。\r\n按照SERVELT的标准，所有得SERVLET必须在WEB配置文件（WEB.XML）声明。同样，ACTOINSERVLET必须在WEBAPPLICATION配置文件（WEB.XML）中描述，有关配置信息如下。\r\n<SERVLET>\r\n<SERVLET-NAME>ACTION</SERVLET-NAME>\r\n<SERVLET-CLASS>ORG.APACHE.STRUTS.ACTION.ACTIONSERVLET</SERVLET-CLASS>\r\n</SERVLET>\r\n全部的请求URI以*.DO的模式存在并映射到这个SERVLET，其配置如下：\r\n<SERVLET-MAPPING>\r\n<SERVLET-NAME>ACTION</SERVLET-NAME>\r\n<URL-PATTERN>*.DO</URL-PATTERN>\r\n</SERVLET-MAPPING>\r\n一个该模式的请求URI符合如下格式：HTTP://WWW.MY_SITE_NAME.COM/MYCONTEXT/ACTIONNAME.DO\r\n当用户向服务器端提交请求的时候，实际上信息是首先发送到控制器ACTIONSERVLET，一旦控制器获得了请求，其就会将请求信息传交给一些辅助类（HELP CLASSES）处理。这些辅助类知道如何去处理与请求信息所对应的业务操作。在STRUTS中，这个辅助类就是ORG.APACHE.STRUTS.ACTION.ACTION。通常开发者需要自己继承ACITON类，从而实现自己的ACTION实例。', '', '0', '2017-12-26 20:08:42', '52', '1');
INSERT INTO `topic` VALUES ('5764', '4', '4', 'Struts2中常见的拦截器有哪些？', '56d30bdb-ccd9-40e7-ae73-a934fa566b87.', null, null, null, null, null, null, '上传，重复提交，数字转换，表单认证，国际化，等等', '', '0', '2017-12-26 20:08:53', '52', '1');
INSERT INTO `topic` VALUES ('5765', '4', '4', '请简述Struts2中自定义拦截器的步骤？', 'd925bac0-eabc-41e5-91ae-67c805bf97a1.', null, null, null, null, null, null, '1.首先要实现INTERCEPTOR（拦截器）接口  2.在配置文件中定义自己的拦截器。  3.最后还要把系统提供的默认拦截器加上，否则系统默认拦截器不起作用', '', '0', '2017-12-26 20:09:03', '52', '1');
INSERT INTO `topic` VALUES ('5766', '4', '4', 'Shiro 如何自实现认证', 'ca3f57d8-8728-4fb5-91a5-3a207f0e5211.', null, null, null, null, null, null, ' SHIRO 的认证过程由 REALM 执行, SECURITYMANAGER 会调用 ORG.APACHE.SHIRO.REALM.REALM 的 GETAUTHENTICATIONINFO(AUTHENTICATIONTOKEN TOKEN) 方法. 实际开发中, 通常提供 ORG.APACHE.SHIRO.REALM.AUTHENTICATINGREALM 的实现类, 并在该实现类中提供 DOGETAUTHENTICATIONINFO(AUTHENTICATIONTOKEN TOKEN)方法的具体实现\r\n', '', '0', '2017-12-26 20:09:04', '75', '1');
INSERT INTO `topic` VALUES ('5767', '4', '4', '怎样实现Struts2自定义转换器？ ', 'e9713193-3080-4447-96a8-128416e4f97d.', null, null, null, null, null, null, '实现TYPECOVERTER接口，或者继承DEFAULTTYPECONVERTER实现类（该类实现了TYPECOVERTER接口），通过继承该实现类来实现自己的类型转换器。重写CONVERTVALUE方法即可。', '', '0', '2017-12-26 20:09:15', '52', '1');
INSERT INTO `topic` VALUES ('5768', '4', '4', '如何实现自实现授权', '54ccd4f2-8bd0-4fc1-9e90-02bda6c2214c.', null, null, null, null, null, null, '实际开发中, 通常提供  ORG.APACHE.SHIRO.REALM.AUTHORIZINGREALM 的实现类, \r\n  并提供 DOGETAUTHORIZATIONINFO(PRINCIPALCOLLECTION PRINCIPALS) 方法的具体实现\r\n', '', '0', '2017-12-26 20:09:20', '75', '1');
INSERT INTO `topic` VALUES ('5769', '4', '4', '如何配置在 Spring 中配置使用 Shiro', 'f61d40c6-d64a-44f1-b95e-d5cfe47d5615.', null, null, null, null, null, null, ' ①. 在 WEB.XML 中配置 SHIRO 的 FILTER\r\n  ②. 在 SPRING 的配置文件中配置  SHIRO:\r\n    > 配置自定义 REALM：实现自定义认证和授权\r\n    > 配置 SHIRO 实体类使用的缓存策略\r\n    > 配置 SECURITYMANAGER\r\n    > 配置保证 SHIRO 内部 BEAN 声明周期都得到执行的 LIFECYCLE BEAN 后置处理器\r\n    > 配置AOP 式方法级权限检查 \r\n    > 配置 SHIRO FILTER', '', '0', '2017-12-26 20:09:37', '75', '1');
INSERT INTO `topic` VALUES ('5770', '4', '4', 'Struts2怎样整合spring？', '422f52d0-f5a7-47da-8b99-83eaca8e05e8.', null, null, null, null, null, null, '1.使用向导添加STRUTS2的组件；\r\n    2.使用向导添加SPRING2.5的组件；   \r\n                                               STRUTS.PROPERTIES             --指定有STRUTS2的ACTION由SPRING容器管理\r\n                                             WEB.XML                       --指定SPRING容器配置文件  \r\n                                               GLOBALMESSAGES.PROPERTIES     --非必须有   \r\n                                               STRUTS.XML                    --CLASS属性配置改成SPRING容器内BEAN的ID\r\n                                             APPLICATIONCONTEXT.XML        --ACTION的作用域需要是原型', '', '0', '2017-12-26 20:09:39', '52', '1');
INSERT INTO `topic` VALUES ('5771', '4', '4', 'Spring流程', '13e76337-a9e8-4d43-bd8b-8c5dcb85c38b.', null, null, null, null, null, null, '请求的分发\r\n请求首先到达DISPATCHERSERVLET，应用服务器会根据WEB应用中WEB.XML文件定义的URL映射将相应的请求分发到DISPATCHERSERVLET中\r\n请求的处理\r\nDISPATCHERSERVLET会查找相应的HANDLERMAPPING接口的实现类，调用其中的方法：HANDLEREXECUTIONCHAINGETHANDLER(HTTPSERVLETREQUEST REQUEST) THROWS EXCEPTION，该方法会返回一个HANDLEREXECUTIONCHAIN。返回的HANDLEREXECUTIONCHAIN中包含了零个或者是多个INTERCEPTOR和一个处理请求的HANDLER。DISPATCHERSERVLET会调用INTERCEPTOR中的PREHANDLE() 方法。然后处理HANDLER，这个HANDLER相当于STRUTS中ACTION，在SPRINGMVC中默认的实现是CONTROLLER接口，是具体处理请求的代码所驻留的地方。事实上HANDLEREXECUTIONCHAIN中的GETHANDLER()返回的是一个OBJECT类型。DISPATCHERSERVLET不会直接调用GETHANDLER（）返回对象中的方法，DISPATCHERSERVLET会查找相应的HANDLERADAPTER，然后具体通过HANDLERADAPTER来调用GETHANDLER()返回的HANDLER对象中的方法。就是说我们可以实现自己的HANDLERADAPTER然后通过IOC注入到DISPATCHERSERVLET中，从而可以实现一套自定义的控制器。随后DISPATCHERSERVLET会调用INTERCEPTOR中的POSTHANDLE()方法。', '', '0', '2017-12-26 20:10:05', '52', '1');
INSERT INTO `topic` VALUES ('5772', '4', '4', 'Spring容器基本的接口是什么？', 'aa51de16-e532-4c32-ac58-fad5d084efe1.', null, null, null, null, null, null, 'BEANFACTORY（容器），APPLICATIONCONTEXT(应用上下文)', '', '0', '2017-12-26 20:10:17', '52', '1');
INSERT INTO `topic` VALUES ('5773', '3', '3', 'Java中用于定义小数的关键字有两个：（） 和 （），后者精度高于前者。', 'bd5af84a-292d-421f-817b-bdb7f444db55.', null, null, null, null, null, null, 'FLOAT，DOUBLE', '', '0', '2017-12-26 20:10:32', '53', '1');
INSERT INTO `topic` VALUES ('5774', '3', '3', '导入mypackage包中的所类的命令是（）。', '5e751248-429e-4c55-a461-d4769e09b92b.', null, null, null, null, null, null, ' IMPORT MYPACKAGE.*; \r\n', '', '0', '2017-12-26 20:10:53', '53', '1');
INSERT INTO `topic` VALUES ('5775', '4', '4', '什么是Spring的AOP，它的功能是什么？ ', '51e489ec-99f4-47cd-87ee-d29bee616bc8.', null, null, null, null, null, null, 'AOP是面向方面，相当于拦截器，可以在需要的地方插入逻辑，所谓的面向方面就是把相同的功能抽象出来。', '', '0', '2017-12-26 20:10:59', '52', '1');
INSERT INTO `topic` VALUES ('5776', '3', '4', '异常处理是由（）、（）和finally块三个关键所组成的程序块。\r\n', 'a819dd5f-67d8-4a54-b382-3d0bda387ebb.', null, null, null, null, null, null, 'TRY，CATCH', '', '0', '2017-12-26 20:11:29', '53', '1');
INSERT INTO `topic` VALUES ('5777', '4', '4', 'AOP中的术语', '44c95c5d-e6f5-4665-959d-e1ec785b852f.', null, null, null, null, null, null, '1.通知(ADVICE):\r\n通知定义了切面是什么以及何时使用。描述了切面要完成的工作和何时需要执行这个工作。\r\n2.连接点(JOINPOINT):\r\n程序能够应用通知的一个“时机”，这些“时机”就是连接点，例如方法被调用时、异常被抛出时等等。\r\n3.切入点(POINTCUT)\r\n通知定义了切面要发生的“故事”和时间，那么切入点就定义了“故事”发生的地点，例如某个类或方法的名称，SPRING中允许我们方便的用正则表达式来指定\r\n4.切面(ASPECT)\r\n通知和切入点共同组成了切面：时间、地点和要发生的“故事”\r\n5.引入(INTRODUCTION)\r\n引入允许我们向现有的类添加新的方法和属性(SPRING提供了一个方法注入的功能）\r\n6.目标(TARGET)\r\n即被通知的对象，如果没有AOP,那么它的逻辑将要交叉别的事务逻辑，有了AOP之后它可以只关注自己要做的事（AOP让他做爱做的事）\r\n7.代理(PROXY)\r\n应用通知的对象，详细内容参见设计模式里面的代理模式\r\n8.织入(WEAVING)\r\n把切面应用到目标对象来创建新的代理对象的过程，织入一般发生在如下几个时机:\r\n(1)编译时：当一个类文件被编译时进行织入，这需要特殊的编译器才可以做的到，例如ASPECTJ的织入编译器\r\n(2)类加载时：使用特殊的CLASSLOADER在目标类被加载到程序之前增强类的字节代码\r\n(3)运行时：切面在运行的某个时刻被织入,SPRINGAOP就是以这种方式织入切面的，原理应该是使用了JDK的动态代理技术', '', '0', '2017-12-26 20:11:33', '52', '1');
INSERT INTO `topic` VALUES ('5778', '4', '4', '请阐述Spring的IOC，有几种类型。', '96063c8e-7258-4569-b13e-de2d695ffee5.', null, null, null, null, null, null, '有SETTER注入（即类中设置一个全局属性，并对属性有SETTER方法，以供容器注入），接口注入和 构造器注入', '', '0', '2017-12-26 20:11:49', '52', '1');
INSERT INTO `topic` VALUES ('5779', '3', '3', '如果一个Java源程序文件中定义有4个类，则使用Sun公司的JDK编译器javac编译该源程序文件将产生\r\n      个文件名与类名相同而扩展名为\r\n         的字节码文件。', '51d5966d-0e4f-402b-b9eb-795be4211605.', null, null, null, null, null, null, ' 4，CLASS', '', '0', '2017-12-26 20:11:54', '53', '1');
INSERT INTO `topic` VALUES ('5781', '4', '4', 'Spring 的依赖注入是什么意思? 给一个 Bean 的 message 属性, 字符串类型, 注入值为 \"Hello\" 的 XML 配置文件该怎么写?', '0aeb0ca2-f31c-44fb-9ac4-0d10ddf3c9da.', null, null, null, null, null, null, '依赖注入是SPRING IOC的主要作用，依赖就是指属性，意思就是说将属性利用SPRING注入到程序中，而非NEW。\r\n<BEAN ID=\"MESSAGE\" CLASS=\"MESSAGE所在类的路径名\">\r\n   <PROPERTY NAME=\"MESSAGE\" VALUE=\"HELLO\"$AMP;>AMP;$LT;/PROPERTY>\r\n</BEAN>', '', '0', '2017-12-26 20:12:11', '52', '1');
INSERT INTO `topic` VALUES ('5782', '3', '3', '在Java中变量、常量、类、方法与接口等需要指定名称，这个名称就叫做 \r\n 。 ', '5ff54ae1-ec2d-4c21-a355-6d8abcdf52d4.', null, null, null, null, null, null, ' 标识符', '', '0', '2017-12-26 20:12:19', '53', '1');
INSERT INTO `topic` VALUES ('5783', '4', '4', 'Spring管理事务有哪几种方式？', '63418379-5cde-44c1-86a7-0bcf6a3dad82.', null, null, null, null, null, null, '有两种方式：基于XML配置文件的方式；另一个是在业务方法上进行@TRANSACTIONAL注解，将事务规则应用到业务逻辑中。', '', '0', '2017-12-26 20:12:23', '52', '1');
INSERT INTO `topic` VALUES ('5784', '3', '3', 'Java程序有两种类型，一种是可在Web网页上运行的Applet称为应用小程序，另一种是\r\n  \r\n ，可完成任何计算任务。', 'a4131bbe-c24a-4874-8d72-b2a810dc6c9a.', null, null, null, null, null, null, 'APPLICATION ', '', '0', '2017-12-26 20:12:37', '53', '1');
INSERT INTO `topic` VALUES ('5785', '4', '4', 'Hibernate工作原理流程？', 'd8247122-6f1c-46a1-8f8c-e4efd34125e6.', null, null, null, null, null, null, '原理： 1.读取并解析配置文件 2.读取并解析映射信息，创建SESSIONFACTORY 3.打开SESSION 4.创建事务TRANSATION 5.持久化操作 6.提交事务 7.关闭SESSION 8.关闭SESSTIONFACTORY', '', '0', '2017-12-26 20:12:43', '52', '1');
INSERT INTO `topic` VALUES ('5786', '3', '3', 'Java源程序编译命令是\r\n 。 ', 'eca74bb3-01af-4555-962d-e93f674f64f6.', null, null, null, null, null, null, 'JAVAC', '', '0', '2017-12-26 20:12:53', '53', '1');
INSERT INTO `topic` VALUES ('5787', '4', '4', '为什么要用Hibernate', '698e46e0-9a9d-4436-9dac-4b732973702c.', null, null, null, null, null, null, '为什么要用： 1. 对JDBC访问数据库的代码做了封装，大大简化了数据访问层繁琐的重复性代码。 2. HIBERNATE是一个基于JDBC的主流持久化框架，是一个优秀的ORM（对象关系映射）实现。他很大程度的简化DAO层的编码工作 3. HIBERNATE使用JAVA反射机制，而不是字节码增强程序来实现透明性。 4. HIBERNATE的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。', '', '0', '2017-12-26 20:12:55', '52', '1');
INSERT INTO `topic` VALUES ('5788', '4', '4', '使用Hibernate之前要配置什么', 'ee31f593-0aa9-422c-87ed-ed2ed2fede87.', null, null, null, null, null, null, '.使用HIBERNATE时，先要配置HIBERNATE.CFG.XML文件，其中配置数据库连接信息和方言等，还要为每个实体配置相应的HBM.XML文件，HIBERNATE.CFG.XML文件中需要登记每个HBM.XML文件。', '', '0', '2017-12-26 20:13:07', '52', '1');
INSERT INTO `topic` VALUES ('5789', '4', '4', '使用Hibernate的基本流程是：', '89cc0b9b-d245-46a8-97c6-3d1b9837c1e5.', null, null, null, null, null, null, '配置CONFIGURATION对象、产生SESSIONFACTORY、创建SESSION对象，启动事务，完成CRUD操作，提交事务，关闭SESSION。', '', '0', '2017-12-26 20:13:22', '52', '1');
INSERT INTO `topic` VALUES ('5790', '3', '2', 'short s1= 1; s1 = （s1+1是int类型，而等号左边的是short类型，所以需要强转）1 + 1;有什么错? short s1 = 1; s1 += 1;有什么错?(没有错)', '50901443-9632-4ebe-9422-4c1c30a2cd25.', null, null, null, null, null, null, '正确', ' 对于short s1= 1; s1 = s1 + 1;由于s1+1运算时会自动提升表达式的类型，所以结果是int型，再赋值给short类型s1时，编译器将报告需要强制转换类型的错误。\r\n        对于short s1= 1; s1 += 1;由于 +=是java语言规定的运算符，java编译器会对它进行特殊处理，因此可以正确编译。\r\n', '0', '2017-12-26 20:13:23', '75', '1');
INSERT INTO `topic` VALUES ('5791', '4', '4', '相对于SQL，HQL查询语言有什么特点，什么是方言？ ', '64e6fccf-48ea-4b91-8e5d-d9d862814272.', null, null, null, null, null, null, 'SQL是关系数据库查询语言,面对的数据库;而HQL是HIBERNATE这样的数据库持久化框架提供的内置查询语言,虽然他们的目的都是为了从数据库查询需要的数据,但SQL操作的是数据库表和字段,而作为面向对象的HQL操作的则是持久化类及其属性,', '', '0', '2017-12-26 20:13:33', '52', '1');
INSERT INTO `topic` VALUES ('5792', '3', '4', 'public class Test {     public static void main(String[] args) {       int a[]=new int[5];        for(int i=0;i&lt;5;i++) a[i]=i;       for(int i=a.length-2;i&gt;0;i--)           System.out.println(\"a[\"+i+\"]=\"+a[i]);   } }  运行结果为：', 'fa145005-3322-47dd-81cb-c19fb4e76bb6.', null, null, null, null, null, null, 'A[3]= 3 A[2]= 2 A[1]= 1', '', '0', '2017-12-26 20:13:36', '53', '1');
INSERT INTO `topic` VALUES ('5793', '4', '4', 'Hibernate架构,对象有三种状态，分别是什么，怎样区分？', '15a954b7-7231-4032-8771-61b5f9153a0d.', null, null, null, null, null, null, 'HIBERNATE三种状态的区分，以及SAVE,UPDATE,SAVEORUPDHIBERNATE的对象有3种状态，\r\n分别为：瞬时态(TRANSIENT)、持久态(PERSISTENT)、脱管态(DETACHED)。\r\n1.瞬时对象在内存孤立存在，它是携带信息的载体，不和数据库的数据有任何关联关系，在HIBERNATE中，可通过SESSION的SAVE()或SAVEORUPDATE()方法将瞬时对象与数据库相关联，并将数据对应的插入数据库中，此时该瞬时对象转变成持久化对象。 \r\n2.持久对象具有如下特点： 1. 和SESSION实例关联； 2. 在数据库中有与之关联的记录。 3. 比瞬时对象多了一个数据库记录标识值。\r\n3.托管态，也叫游离态等，持久化对象脱离了SESSION的对象。如SESSION缓存被清空的对象。特点：已经持久化，但不在SESSION缓存中。处于此状态的对象叫游离对象。', '', '0', '2017-12-26 20:13:46', '52', '1');
INSERT INTO `topic` VALUES ('5794', '4', '4', 'Hibernate中什么是延迟加载，延迟的作用是什么？', '8cd52a07-1fab-4c15-aa6b-58d13b1d6e26.', null, null, null, null, null, null, '延迟加载机制是为了避免一些无谓的性能开销而提出来的，所谓延迟加载就是当在真正需要数据的时候，才真正执行数据加载操作。在HIBERNATE中提供了对实体对象的延迟加载以及对集合的延迟加载，另外在HIBERNATE3中还提供了对属性的延迟加载。', '', '0', '2017-12-26 20:13:59', '52', '1');
INSERT INTO `topic` VALUES ('5795', '3', '4', '简述Java中异常处理的机制？ ', 'ac050937-17a8-46a8-8836-7636f8cc55a1.', null, null, null, null, null, null, '首先JAVA的异常是面向对象的。一个JAVA的EXCEPTION是一个描述异常情况的对象.当出现异常情况时，一个EXCEPTION对象就产生了,并放到异常的成员函数里。  JAVA的异常处理是通过5个关键词来实现的：TRY,CATCH,THROW,THROWS和FINALLY。  1.异常处理：在JAVA语言的错误处理结构由TRY，CATCH，FINALLY三个块组成。其中TRY块存放将可能发生异常的JAVA语言，并管理相关的异常指针；CATCH块紧跟在TRY块后面，用来激发被捕获的异常；FINALLY块包含清除程序没有释放的资源，句柄等。不管TRY块中的代码如何退出，都将执行 FINALLY块。 \r\n 23 / 23    2.抛出异常：JAVA语言可以不在方法中直接捕获，而用THROW语句将异常抛给上层的调用者。THROW语句就是来明确地抛出一个异常；首先你必需得到一个THROWABLE的实例句柄，通过参数传到CATCH中，或者采用NEW操作符来创建一个。', '', '0', '2017-12-26 20:14:29', '53', '1');
INSERT INTO `topic` VALUES ('5796', '3', '4', '说下jQuery里面的选择器及其用法', '352b015b-cac9-4008-ad74-655cbecaa433.', null, null, null, null, null, null, ' ID选择器,元素选择器,属性选择器,', '', '0', '2017-12-26 20:14:42', '75', '1');
INSERT INTO `topic` VALUES ('5797', '3', '4', '请简述重载和重写的区别？ ', 'c67e3ac9-7e06-45f5-b021-4f6c8c2b8267.', null, null, null, null, null, null, '方法的重写OVERRIDING和重载OVERLOADING是JAVA多态性的不同表现。  重写OVERRIDING是父类与子类之间多态性的一种表现，重载OVERLOADING是一个类中多态性的一种表现。  如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写 (OVERRIDING)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。  如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(OVERLOADING)。OVERLOADED的方法是可以改变返回值的类型。', '', '0', '2017-12-26 20:14:53', '53', '1');
INSERT INTO `topic` VALUES ('5798', '4', '4', 'hibernate进行多表查询每个表中各取几个字段，也就是说查询出来的结果集没有一个实体类与之对应如何解决；', 'ce11a0ef-5730-49d0-aa7b-22724c22200e.', null, null, null, null, null, null, '解决方案一，按照OBJECT[]数据取出数据，然后自己组BEAN\r\n解决方案二，对每个表的BEAN写构造函数，比如表一要查出FIELD1,FIELD2两个字段，那么有一个构造函数就是BEAN(TYPE1FILED1,TYPE2\r\nFIELD2)，然后在HQL里面就可以直接生成这个BEAN了。\r\n第一个：查询出来的LIST 转换为一个数组   \r\n也就是说 OBJECT[]  OBJECTS=(OBJECT[]) LIST    --  你查询出来的LIST 集合\r\nFOR(OBJECT  ITEM :OBJECTS  ){}进行自行封装处理 \r\n第二个说白了就是写个构造函数让他自己封装省了自己处理过程了 \r\n但是如果是查询出来的多张表数据  还是得按第一种方式自己处理的。。。', '', '0', '2017-12-26 20:15:02', '52', '1');
INSERT INTO `topic` VALUES ('5799', '3', '4', '简单变量、引用变量的拷贝功能分别是如何实现的。', '9888cc4b-71e9-499e-a458-127b9ac9e46e.', null, null, null, null, null, null, '简单变量，必须先对变量赋初值，然后直接通过将这个变量赋给另一个变量实现复制功能； 引用变量，需要为对象编写CLONE函数，并调用CLONE函数来复制一个对象。 ', '', '0', '2017-12-26 20:15:06', '53', '1');
INSERT INTO `topic` VALUES ('5800', '3', '4', '简述抽象类与接口异同点。 ', '8832eb0b-8944-4a18-9e10-95872af02a57.', null, null, null, null, null, null, '共同点：都定义了一组抽象的函数，而没有具体实现 异同点：1.接口不能有任何函数的实现过程，而抽象类可以有2.一个类可以实现很多接口，但只有一个父类3.接口不是类层次关系中的一部分，两个彼此无关的类也可以实现同一个接口 ', '', '0', '2017-12-26 20:15:23', '53', '1');
INSERT INTO `topic` VALUES ('5801', '3', '4', '简述Java小程序的生命同期中的载入、运行、离开、卸载、重载等几个阶段分别调用了哪些方法。', 'f6bf7553-9d08-460a-99f4-25162e301b34.', null, null, null, null, null, null, '载入：PUBLIC VOID INIT();  运行：PUBLIC VOID START();  离开：PUBLIC VOID STOP();  卸载：PUBLIC VOID DESTROY();   重载：DESTROY AND INIT START OR INIT', '', '0', '2017-12-26 20:15:45', '53', '1');
INSERT INTO `topic` VALUES ('5802', '3', '3', '构造函数___有返回值。', '62f09b5e-0a81-4cc7-b80f-d7f9b64c5655.', null, null, null, null, null, null, '没', '', '0', '2017-12-26 20:16:27', '53', '1');
INSERT INTO `topic` VALUES ('5803', '3', '3', ' Java语言中的浮点型数据根据数据存储长度和数值精度的不同，进一步分为float和 ___ _______两种具体类型。', '043ec9a3-dc80-4df2-b7e0-d954ba87dd5a.', null, null, null, null, null, null, 'DOUBLE ', '', '0', '2017-12-26 20:16:38', '53', '1');
INSERT INTO `topic` VALUES ('5804', '3', '3', '创建类对象的运算符是__。  ', 'e4b84283-1bb5-4a49-948c-e197e79b0d10.', null, null, null, null, null, null, 'NEW', '', '0', '2017-12-26 20:16:52', '53', '1');
INSERT INTO `topic` VALUES ('5805', '3', '4', 'jquery中常用的方法 ?', '68f02eda-bca4-4c14-bccd-52b7ef8b7826.PNG', null, null, null, null, null, null, 'HIDE()	隐藏被选元素\r\nSHOW()	显示被选元素\r\nTOGGLE()	切换（在隐藏和与显示之间）被选元素\r\nHTML(CONTENT)	改变被选元素的（内部）HTML\r\nAPPEND(CONTENT)	向被选元素的（内部）追加内容\r\nCSS(NAME,VALUE)	为匹配元素设置样式属性的值\r\nLOAD(URL,DATA,CALLBACK)	把远程数据加载到被选的元素中\r\n', '', '0', '2017-12-26 20:17:02', '75', '1');
INSERT INTO `topic` VALUES ('5806', '3', '3', '定义类就是定义一种抽象的____________，它是所有具有一定共性的对象的抽象描述。', '058cbb66-5d67-457e-8941-e21ae9daa047.', null, null, null, null, null, null, '父类', '', '0', '2017-12-26 20:17:07', '53', '1');
INSERT INTO `topic` VALUES ('5807', '3', '3', '表达式3/6 * 5的计算结果是________ 。 ', 'd24fdc01-a7ff-4f6a-8bb0-7864bd569409.', null, null, null, null, null, null, '0', '', '0', '2017-12-26 20:17:21', '53', '1');
INSERT INTO `topic` VALUES ('5808', '4', '4', '三大框架各起的作用 ', '918b9a6d-880e-4aad-8fb0-511dcff7ee56.', null, null, null, null, null, null, 'STRUTS 在 SSH 框架中起控制的作用 , 其核心是 （控制器）CONTROLLER, 即ACTIONSERVLET, 而 ACTIONSERVLET 的核心就是 STRUTS-CONFIG.XML. 主要控制逻辑关系的处理 .    HIBERNATE 是数据持久化层 , 是一种新的对象、关系的映射工具 , 提供了从 JAVA 类到数据表的映射，也提供了数据查询和恢复等机制 , 大大减少数据访问的复杂度。把对数据库的直接操作 , 转换为对持久对象的操作 .   \r\nSPRING 是一个轻量级的控制反转 (IOC) 和面向切面 (AOP) 的容器框架 , 面向接口的编程 , 由容器控制程序之间的（依赖）关系，而非传统实现中，由程序代码直接操控。这也就是所谓“ 控制反转 ” 的概念所在：（依赖）控制权由应用代码中转到了外部容器，控制权的转移，是所谓反转。依赖注入，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中  起到的主要作用是解耦', '', '0', '2017-12-26 20:17:25', '52', '1');
INSERT INTO `topic` VALUES ('5809', '33', '4', 'j2ee常用的设计模式？说明工厂模式。', 'c2e8b03d-6294-4409-8b42-00d149d03df2.', null, null, null, null, null, null, '总共23种，分为三大类：创建型，结构型，行为型\r\n我只记得其中常用的6、7种，分别是：\r\n创建型（工厂、工厂方法、抽象工厂、单例）\r\n结构型（包装、适配器，组合，代理）\r\n行为（观察者，模版，策略）\r\n然后再针对你熟悉的模式谈谈你的理解即可。\r\n工厂模式：\r\n工厂模式是一种经常被使用到的模式，根据工厂模式实现的类可以根据提供的数据生成一组类中某一个类的实例，通常这一组类有一个公共的抽象父类并且实现了相同的方法，但是这些方法针对不同的数据进行了不同的操作。首先需要定义一个基类，该类的子类通过不同的方法实现了基类中的方法。然后需要定义一个工厂类，工厂类可以根据条件生成不同的子类实例。当得到子类的实例后，开发人员可以调用基类中的方法而不必考虑到底返回的是哪一个子类的实例。\r\n单例模式\r\n在它的核心结构中只包含一个被称为单例类的特殊类。通过单例模式可以保证系统中一个类只有一个实例而且该实例易于外界访问，从而方便对实例个数的控制并节约系统资源。如果希望在系统中某个类的对象只能存在一个，单例模式是最好的解决方案。', '', '0', '2017-12-26 20:17:58', '52', '1');
INSERT INTO `topic` VALUES ('5810', '3', '4', '简单的阐述 js,JQuery 。 ', '326dca22-5b7e-4bf3-ac9d-811380bb2e5c.', null, null, null, null, null, null, 'JAVASCRIPT 是一种由NETSCAPE的LIVESCRIPT 发展而来的原型化继承的基于对象的动态类型的区分大小写的客户端脚本语言，主要目的是为了解决服务端语言，比如PERL，遗留的速度问题，为客户端提供更流畅的浏览效果。 \r\nJQUERY 是继PROTOTYPE之后又一个优秀的JAVASCRIPT框架，它是轻量级的JS库。它的核心理念就是WRITER LESS, DO MORE 。 \r\n', '', '0', '2017-12-26 20:18:13', '75', '1');
INSERT INTO `topic` VALUES ('5811', '3', '4', '简单介绍JQuery的优势。', '5c717ba9-2a19-4d3c-9a9a-e270b9a95583.', null, null, null, null, null, null, '1.	开源的、免费的\r\n2.	轻量级的非常灵巧\r\n3.	拥有强大的选择器\r\n4.	出色的DOM操作的封装\r\n5.	可靠的事件处理机制\r\n6.	完善的AJAX\r\n7.	出色的浏览器兼容性\r\n8.	链式操作方式\r\n9.	隐式迭代\r\n10.	行为层与结构层的分离\r\n11.	丰富的插件支持\r\n12.	完善的文档说明\r\n', '', '0', '2017-12-26 20:18:49', '75', '1');
INSERT INTO `topic` VALUES ('5812', '3', '1', '关于类和对象的叙述正确的是：', 'ab947712-6667-4e7a-b62d-04734a15a6c5.', 'Java的类分为两大部分：系统定义的类和用户自定义的类 ', '类的静态属性和全局变量的概念完全一样，只是表达形式不同 ', '类的成员至少有一个属性和一个方法', '类是对象的实例化 ', '', '', 'A', '', '0', '2017-12-26 20:19:04', '53', '1');
INSERT INTO `topic` VALUES ('5813', '6', '4', 'AJAX执行流程是什么 ？ ', 'ace3a4c1-db77-45fe-a2f3-be8bca278046.', null, null, null, null, null, null, '1.通过JS创建浏览器对象XMLHTTPREQUEST,浏览器分为IE和非IE.\r\n2.设置回调函数 ONREADYSTATECHANGE \r\n3.客户端和服务器建立连接,通过OPEN(\"GET/POST\",URL,TURE/FALSE) 打开请求\r\n4.通过SEND()发送请求\r\n5.服务器调用回调函数,当状态为4则表示发送请求成功\r\n6.处理响应数据：\r\n1）RESPONSETEXT:作为文本串返回\r\n2）RESPONSEXML：作为XML文件返回 \r\n', '', '0', '2017-12-26 20:19:13', '75', '1');
INSERT INTO `topic` VALUES ('5814', '6', '4', '你每次的AJAX的请求都访问数据库吗？有什么坏处？ ', '43c1d6aa-f1fe-4c36-9f54-e03f1687649d.', null, null, null, null, null, null, ' AJAX的一大特点就是我需要这个数据（访问数据库）的时候才给我，异步提交，就是每次提交服务器，特别是跟服务器要数据访问数据库的时候，要先连接数据库再SQL查询处理，再返回到浏览器，这个时候当很多人都访问的时候，就会影响服务器的性能，影响响应的时间。关键要看是否访问频繁,如果很频繁,并且数据不经常变化,那么就可以访问数据库', '', '0', '2017-12-26 20:19:33', '75', '1');
INSERT INTO `topic` VALUES ('5815', '3', '1', '以下有关类的继承的叙述中，正确的是：', '910ac5f2-cc87-4c92-8317-a858ffceaf9f.', '子类能直接继承父类所有的非私有属性，也可通过接口继承父类的私有属性 ', '子类只能继承父类的方法，不能继承父类的属性 ', '子类只能继承父类的非私有属性，不能继承父类的方法', '子类不能继承父类的私有属性 ', '', '', 'D', '', '0', '2017-12-26 20:19:40', '53', '1');
INSERT INTO `topic` VALUES ('5816', '32', '4', '数据的加密模式？加密模式的顺序？', '36e160a4-d89e-4836-a069-09bef90157fc.', null, null, null, null, null, null, '对称式和非对称式,顺序:传输加密,数据存储加密,数据完整型的鉴别,密钥管理;', '', '0', '2017-12-26 20:19:46', '52', '1');
INSERT INTO `topic` VALUES ('5817', '6', '4', '如果不用AJAX怎么实现局部刷新？ ', '3e92b73f-f2f5-4b29-bd2e-9ed17c9f0036.', null, null, null, null, null, null, '1 用JQUERY \r\n  LOAD( URL, [DATA], [CALLBACK] ) ：载入远程 HTML 文件代码并插入至 DOM 中。\r\n  URL (STRING) : 请求的HTML页的URL地址。\r\n  DATA (MAP) : (可选参数) 发送至服务器的 KEY/VALUE 数据。\r\n  CALLBACK (CALLBACK) : (可选参数) 请求完成时(不需要是SUCCESS的)的回调函数。\r\n   这个方法默认使用 GET 方式来传递的，如果[DATA]参数有传递数据进去，就会自动转换为POST方式的。\r\n 2 也可以用IFRAME\r\n这里将显示结果。\r\n', '', '0', '2017-12-26 20:19:55', '75', '1');
INSERT INTO `topic` VALUES ('5818', '3', '1', '以下有关构造方法的说法，正确的是：', 'a0a3f8d0-c790-471f-9ae7-e946606d1d9c.', '一个类的构造方法可以有多个', '构造方法在类定义时被调用', '构造方法只能由对象中的其它方法调用', '构造方法可以和类同名，也可以和类名不同', '', '', 'A', '', '0', '2017-12-26 20:20:11', '53', '1');
INSERT INTO `topic` VALUES ('5819', '33', '4', '如何配置安装jdk？如何判断其配置成功？', 'c4a2d38c-fe1a-480b-b30c-9ebf798f7671.', null, null, null, null, null, null, '(1)首先安装JDK要看你电脑的位数，选择32位或64位的JDK版本，建议使用1.6版本以上，1.7版本一下;\r\n\r\n(2)从ORACLE官网下载JDK安装包。\r\n\r\n(3)安装包下载完成后，双击安装包进行安装，安装路径可以使用默认路径。\r\n\r\n(4)安装完成后，还需要进行环境变量的配置，在系统环境变量的用户变量里面添加一个变量名为 JAVA_HOME环境变量，然后在变量值处填写上JDK安装目录的BIN文件夹的路径，如：C:\\PROGRAMFILES\\JAVA \\JDK1.7.0_79，然后再添加一个变量名为PATH的变量，变量值填写为%JAVA_HOME%\\BIN;即可。\r\n\r\n(5)可以写一个简单的JAVA程序来测试JDK是否已安装成功：PUBLIC CLASS TEST{PUBLIC STATIC VOID MAIN(STRING ARGS[]){SYSTEM.OUT.PRINTLN(\"THIS IS A TEST PROGRAM.\");}}将上面的这段程序保存为文件名为TEST.JAVA的文件。(注意TEST是程序的公共类，必须和文件名一致，包括大小写)然后打开命令提示符窗口，CD到你的TEST.JAVA所在目录，然后键入下面的命令 ：JAVAC TEST.JAVA （回车）JAVA TEST 此时如果看到打印出来THIS IS A TEST PROGRAM.的话说明安装成功了，如果没有打印出这句话，你需要仔细检查一下你的配置情况。', '', '0', '2017-12-26 20:20:15', '52', '1');
INSERT INTO `topic` VALUES ('5820', '3', '1', 'void 的含义：', '41edb3e3-70a0-4f55-b813-c5ac390cbd75.', '方法体为空', '定义的方法没有形参', '定义的方法没有返回值', '方法的返回值不能参加算术运算', '', '', 'C', '', '0', '2017-12-26 20:20:39', '53', '1');
INSERT INTO `topic` VALUES ('5821', '6', '4', 'AJAX有哪些状态 ？', 'eb4c7d03-91c5-4672-945a-049c88afdf43.PNG', null, null, null, null, null, null, '0	请求未初始化（在调用 OPEN() 之前）\r\n1	请求已提出（调用 SEND() 之前）\r\n2	请求已发送（这里通常可以从响应得到内容头部）\r\n3	请求处理中（响应中通常有部分数据可用，但是服务器还没有完成响应）\r\n4	请求已完成（可以访问服务器响应并使用它）\r\n', '', '0', '2017-12-26 20:20:46', '75', '1');
INSERT INTO `topic` VALUES ('5822', '4', '4', 'JQuery中 假设表单域没有id,name 你是如何得到第二个表单的元素 ？ ', 'bf935760-28a1-40ba-852b-a593842394e2.', null, null, null, null, null, null, ' 可以用选择器里面的EQ(1)加上别的选择器判断 ', '', '0', '2017-12-26 20:21:05', '75', '1');
INSERT INTO `topic` VALUES ('5823', '4', '4', '手写单例模式（饿汉和饱汉模式）和工厂模式？', '968ee215-391f-4e89-893d-97cdfcdea7a3.', null, null, null, null, null, null, '(1)单例饿汉模式://饿汉式单例类.在类初始化时，已经自行实例化 \r\n 2 PUBLIC CLASS SINGLETON1 {\r\n 3     //私有的默认构造子\r\n 4     PRIVATE SINGLETON1() {}\r\n 5     //已经自行实例化 \r\n 6     PRIVATE STATIC FINAL SINGLETON1 SINGLE = NEW SINGLETON1();\r\n 7     //静态工厂方法 \r\n 8     PUBLIC STATIC SINGLETON1 GETINSTANCE() {\r\n 9         RETURN SINGLE;\r\n10     }\r\n11 }\r\n\r\n(2)懒汉模式://懒汉式单例类.在第一次调用的时候实例化 \r\n 2 PUBLIC CLASS SINGLETON2 {\r\n 3     //私有的默认构造子\r\n 4     PRIVATE SINGLETON2() {}\r\n 5     //注意，这里没有FINAL    \r\n 6     PRIVATE STATIC SINGLETON2 SINGLE=NULL;\r\n 7     //静态工厂方法 \r\n 8     PUBLIC SYNCHRONIZED  STATIC SINGLETON2 GETINSTANCE() {\r\n 9          IF (SINGLE == NULL) {  \r\n10              SINGLE = NEW SINGLETON2();\r\n11          }  \r\n12         RETURN SINGLE;\r\n13     }\r\n14 }\r\n\r\n(3)工厂模式:\r\n\r\nINTERFACE IFACTORY{\r\n\r\nPUBLIC IPRODUCT CREATEPRODUCT();}\r\n\r\nCLASS FACTORY IMPLEMENTS IFACTORY{\r\n\r\nPUBLIC IPRODUCT CREATEPRODUCT(){RETURN NEW PRODUCT();}}\r\n\r\nPUBLIC CLASS CLIENT{\r\n\r\nPUBLIC STATIC VOID MAIN (STRING [] ARGS){IFACTORY FACTORY=NEW FACTORY();\r\n\r\nIPRODUCT PRODUCT=FACTORY.CREATEPRODUCT();\r\n\r\nPRODUCT.PRODUCTMETHOD();}}', '', '0', '2017-12-26 20:21:05', '52', '1');
INSERT INTO `topic` VALUES ('5824', '3', '1', '关于Java中异常的叙述正确的是：', 'dc696ad1-62c8-4c6c-bb76-405de3a6a61c.', '异常是程序编写过程中代码的语法错误', '异常是程序编写过程中代码的逻辑错误', '异常出现后程序的运行马上中止', '异常是可以捕获和处理的', '', '', 'D', '', '0', '2017-12-26 20:21:08', '53', '1');
INSERT INTO `topic` VALUES ('5825', '3', '4', 'java常见的数据类型是什么和对应的包装类是什么？java的隐式类型？assert什么时候使用？', 'd41b173f-a550-4bdf-bdfd-56dc0871b7a2.', null, null, null, null, null, null, '(1)INT, DOUBLE, FLOAT, LONG, SHORT, BOOLEAN, BYTE, CHAR\r\n\r\n(2)INTEGER.DOUBLE,FLOAT,LONG,SHORT,BOOLEAN,BYTE,CHARACHER.\r\n\r\n(3)JAVA的隐式类型是INT,BYTE,SHORT,CHAR都可以隐含转换为INT ,\r\n\r\n(4)一般来说，ASSERTION用于保证程序最基本、关键的正确性。ASSERTION检查通常在开发和测试时开启。为了提高性能，在软件发布后，ASSERTION检查通常是关闭的;', '', '0', '2017-12-26 20:21:33', '52', '1');
INSERT INTO `topic` VALUES ('5826', '3', '1', '所有的异常类皆继承哪一个类?', '5d3f182e-5a99-4298-9424-a7afa39910d5.', 'java.io.Exception ', 'java.lang.Throwable', 'java.lang.Exception', 'java.lang.Error ', '', '', 'C', '', '0', '2017-12-26 20:21:39', '53', '1');
INSERT INTO `topic` VALUES ('5827', '3', '1', '为实现进程之间的通信，需要使用下列那种流才合适？', 'b0e5452a-e2f4-4395-87ff-b97b38267054.', 'Data stream', 'File stream', 'Buffered stream', 'Piped stream', '', '', 'D', '', '0', '2017-12-26 20:22:14', '53', '1');
INSERT INTO `topic` VALUES ('5828', '4', '4', 'JQuery的事件 ？', 'bbdb3b0f-973a-4001-830f-7b9d36af3033.PNG', null, null, null, null, null, null, '    JQUERY 事件处理方法是 JQUERY 中的核心函数。\r\n      事件处理程序指的是当 HTML 中发生某些事件时所调用的方法。术语由事件\"触发\"（或\"激发\"）经常会被使用。\r\n事件	描述\r\n$(DONCUMENT).READY(FUNCTION)	将函数绑定到文档的就绪事件（当文档完成加载时）\r\n$(SELECTOR).CLIK(FUNCTION)	触发或将函数绑定到被选元素的点击事件\r\n$(SELECTOR).DBLCLICK	触发或将函数绑定到被选元素的双击事件\r\n$(SELECTOR).FOCUS(FUNCTION)	触发或将函数绑定到被选元素的获得焦点事件\r\n$(SELECTOR).MOUSEOVER(FUNCTION)	触发或将函数绑定到被选元素的鼠标悬停事件\r\n', '', '0', '2017-12-26 20:22:30', '75', '1');
INSERT INTO `topic` VALUES ('5829', '3', '4', '谈谈你对面向对象编程的理解？', 'd168b4eb-cb62-443c-9ca2-b864a4f3e7b5.', null, null, null, null, null, null, '(1)JAVA语言是纯粹的面向对象的程序设计语言，这主要表现为JAVA完全支持面向对象的三种基本特征：继承、封装和多态。JAVA语言完全以对象为中心，JAVA程序的最小程序单位是类，整个JAVA程序由一个一个的类组成;JAVA完全支持使用对象、类、继承、封装、消息等基本概念来进行程序设计，允许从现实世界中客观存在的事物（即对象）出发来构造软件系统，在系统构造中 尽可能运用人类的自然思维方式。实际上，这些优势是所有面向对象编程语言的共同特征。而面向对象的方式实际上由OOA（面向对象分析）、OOD（面向对象 设计）和OOP（面向对象编程）三个部分有机组成，其中，OOA和OOD的结构需要使用一种方式来描述并记录，目前业界统一采用UML（统一建模语言）来 描述并记录OOA和OOD的结果。目前UML的最新版是2.0它一共包括13种类型的图形，使用这13种图形中的某些就可以很好地描述并记录软件分析、设 计的结果', '', '0', '2017-12-26 20:22:41', '52', '1');
INSERT INTO `topic` VALUES ('5830', '4', '4', 'js里只允许一个onLoad()，在JQuery里怎么弄两个？ ', '291780c0-767b-4a32-bd0f-ff264e67ef8d.', null, null, null, null, null, null, 'WINDOW.ONLOAD = FUNCTION(){\r\nALERT(\"TEXT1\");\r\n}; \r\nWINDOW.ONLOAD = FUNCTION(){\r\nALERT(\"TEXT2\");\r\n}; \r\n结果只输出第二个 ， 能同时编写多个 。 \r\n', '', '0', '2017-12-26 20:22:52', '75', '1');
INSERT INTO `topic` VALUES ('5831', '3', '4', '重写和重载的区别？', '6dad4df8-be98-4f74-82b4-617cde9021db.', null, null, null, null, null, null, '(1)重载OVERLOAD表示同一个类中可以有多个名称相同的方法，但这些方法的参数列表各不相同（即参数个数或类型不同）;\r\n\r\n(2)重写OVERRIDE表示子类中的方法可以与父类中的某个方法的名称和参数完全相同，通过子类创建的实例对象调用这个方法时，将调用子类中的定义方法，这相当于把父类中定义的那个完全相同的方法给覆盖了，这也是面向对象编程的多态性的一种表现;只能比父类抛出更少的异常，或者是抛出父类抛出的异常的子异常;子类方法的访问权限只能比父类的更大，不能更小。如果父类的方法是PRIVATE类型，那么，子类则不存在覆盖的限制，相当于子类中增加了一个全新的方法;', '', '0', '2017-12-26 20:22:56', '52', '1');
INSERT INTO `topic` VALUES ('5832', '6', '4', 'AJAX的同步与异步 。', '54a0df08-5f41-42cd-b8ad-1e5dfbc387f7.', null, null, null, null, null, null, ' 举个例子：比如你去图书馆借某种书，可惜图书馆此书被借完。这时可以采用两种做法。\r\n    第一种做法：在图书馆一直等待，直到有人还书，然后再去吃饭睡觉。\r\n   第二种做法：直接跟图书馆管理员约定，若是有人还书，直接通知你。你则该忙什么忙什么。到时候会通知你。\r\n   而第一种做法就是同步的表现，必须等待别人还书（等待服务器返回信息）才进行其他事情，至死方休。\r\n   而第二种做法就是异步的表现，不耽误时间，合理利用时间高效率做事。\r\n   AJAX用异步传输的好处是提高效率, 减少用户等待时间, 提高用户体验度. \r\n', '', '0', '2017-12-26 20:23:09', '75', '1');
INSERT INTO `topic` VALUES ('5834', '6', '4', 'AJAX的回调函数 。 ', '3f981e74-f7b1-46d0-b7f0-0a2b394a669f.', null, null, null, null, null, null, ' 回调函数不是由该函数的实现方直接调用，而是在特定的事件或条件发生时由服务器执行完成后调用的，用于对该事件或条件进行响应。', '', '0', '2017-12-26 20:23:23', '75', '1');
INSERT INTO `topic` VALUES ('5835', '3', '4', 'hashmap的数组是hashcode定位的，有很多key得到的hashcode是相同的，这时候如何定位？', '3817e1cf-b745-4a07-964c-ee1c89485af2.', null, null, null, null, null, null, '1)JAVA采用了哈希表的原理。哈希算法也称为散列算法，就是集合首先会调用该对象的HASHCODE方法;是将数据依特定算法直接指定到一个地址上。关于哈希算法，这里就不详细介绍。可以这样简单理解，HASHCODE方法实际上返回的就是对象存储位置的映像;HASHCODE相同但是对象并不同,所有存储位置也不同;对于LIST集合、数组而言，他就是一个累赘，不重要；但是对于HASHMAP、HASHSET、HASHTABLE而言，它变得异常重要。', '', '0', '2017-12-26 20:23:40', '52', '1');
INSERT INTO `topic` VALUES ('5836', '4', '4', 'JQuery是怎么用的 ？主要用到了什么？ ', '88937e5f-f851-44be-89d9-cf7da747d861.', null, null, null, null, null, null, ' 首先要导入JQUERY的包文件（有MIN版和未压缩版），然后在JSP中引入包，接下来再引入自己的JS。 \r\n    主要用到了选择器和事件 和AJAX。 \r\n', '', '0', '2017-12-26 20:23:41', '75', '1');
INSERT INTO `topic` VALUES ('5837', '4', '4', 'DWR是什么 ？ ', 'f75293b3-69ef-4887-a07c-90a43e8f72c6.', null, null, null, null, null, null, 'DWR（DIRECT WEB REMOTING）是一个用于改善WEB页面与JAVA类交互的远程服务器端AJAX开源框架，可以帮助开发人员开发包含AJAX技术的网站。它可以允许在浏览器里的代码使用运行在WEB服务器上的JAVA函数，就像它就在浏览器里一样。可以简单说是JAVA实现的AJAX框架 ', '', '0', '2017-12-26 20:23:59', '75', '1');
INSERT INTO `topic` VALUES ('5838', '3', '4', 'string是否是基本数据类型？int和string是如何转化的？', 'a4d3a0e9-f8a0-438d-a046-0f4dcd555e15.', null, null, null, null, null, null, '(1)基本数据类型包括BYTE、INT、CHAR、LONG、FLOAT、DOUBLE、BOOLEAN和SHORT;JAVA.LANG.STRING类是FINAL类型的，因此不可以继承这个类、不能修改这个类。为了提高效率节省空间，我们应该用STRINGBUFFER类;\r\n\r\n(2)INT I = INTEGER.PARSEINT([STRING]);I = INTEGER.PARSEINT([STRING],[INT RADIX]);或者INT I = INTEGER.VALUEOF(MY_STR).INTVALUE();INT转STRINGSTRING S = STRING.VALUEOF(I);STRING S = INTEGER.TOSTRING(I);STRING S = \"\" + I;', '', '0', '2017-12-26 20:24:06', '52', '1');
INSERT INTO `topic` VALUES ('5839', '4', '4', 'JQuery中背景颜色你是怎么设置的 ？', '16c944a5-04a5-4429-9404-a4c8dd10ce39.', null, null, null, null, null, null, '  $(DOCUMENT.BODY).CSS( \"BACKGROUND\", \"BLACK\" );', '', '0', '2017-12-26 20:24:13', '75', '1');
INSERT INTO `topic` VALUES ('5840', '6', '4', 'AJAX提交数据的时候使用同步还是异步？ ', 'bca795ec-19d9-4c6b-b051-b24d0650582b.', null, null, null, null, null, null, ' 异步。 ', '', '0', '2017-12-26 20:24:33', '75', '1');
INSERT INTO `topic` VALUES ('5841', '6', '4', '你懂AJAX的原理和它的框架吗 ？', '7ca4327f-5865-488f-b9a9-d6ae3fd07274.', null, null, null, null, null, null, ' AJAX的原理简单来说通过XMLHTTPREQUEST对象来向服务器发异步请求，从服务器获得数据，然后用JAVASCRIPT来操作DOM从而更新页面 。 \r\n    AJAX框架主要有AJAX.DLL,AJAXPRO.DLL,MAGICAJAX.DLL 以及微软的ATLAS框架 \r\n', '', '0', '2017-12-26 20:24:49', '75', '1');
INSERT INTO `topic` VALUES ('5842', '4', '4', 'hql语句是如何查询的？hql语句中内切和外切的区别？', 'e26dccfa-58ea-4cb2-9b5e-22a7a19d1d8d.', null, null, null, null, null, null, '(1):HQL是面向对象的类名,属性区分大小写;FROM+你的实体类;\r\n\r\n(2)内切:利用内连接可获取两表的公共部分的记录;采用左外连接查询返回的结果集中包含的是对象数组，对象数组中的每个元素存放了一对相互关联的CUSTOMER对象和ORDER对象，而迫切左外连接会返 回CUSTOMER对象，与CUSTOMER对象相关联的ORDER对象存放在CUSTOMER对象的集合元素对象中，这就是迫切左外连接和左外连接查询 的其中一个区别;另一个区别是当使用左外连接时，对关联对象的检索会依照实体映射配置文件所指定的策略，而不会像迫切左外连接那样忽略它，比如此时对CUSTOMER对象关联的ORDER对象采用延迟加载，那么左外连接检索也会使用延迟加载机制检索 ORDER对象。\r\n\r\n(3)采用迫切内连接检索，对集合元素的检索策略以及返回结果集中的对象类型都采用与迫切左外连接一样的方式，QBC查询不支持迫切内连接检索.', '', '0', '2017-12-26 20:25:04', '52', '1');
INSERT INTO `topic` VALUES ('5843', '4', '4', 'JQuery隐藏一个DIV使用什么方法?，调用什么方法拿到父无素? ', 'b41ec288-596a-48d1-b74e-8c707d6e0628.', null, null, null, null, null, null, '  隐藏一个DIV的方法有：\r\n   HIDE() 隐藏显示的元素 ; 如果选择的元素是隐藏的，这个方法将不会发生任何改变。\r\n     TOGGLE() 如果元素是可见的，切换为隐藏的；如果元素是隐藏的，切换为可见的。 \r\n拿到父元素的方法有：\r\nPARENT()取得一个包含着所有匹配元素的唯一父元素的元素集合。\r\n   PARENTS()取得一个包含着所有匹配元素的祖先元素的元素集合（不包含根元素）。 \r\n', '', '0', '2017-12-26 20:25:07', '75', '1');
INSERT INTO `topic` VALUES ('5844', '4', '4', '做一个鼠标点击DIV动画，变大变小的那种，说一下思路。', 'be3358a3-abcb-41ad-9056-1810712aa890.', null, null, null, null, null, null, '<TD ID=\"TEST\"></TD> 用JQUERY代码替换文字和文字的颜色 。\r\n      文字的替换可以JQUERY对象的TEXT(),文字的颜色ATTR,如果是CSS,我们CSS()\r\n', '', '0', '2017-12-26 20:25:22', '75', '1');
INSERT INTO `topic` VALUES ('5845', '6', '4', 'AJAX()怎么返回后台的值。配置及作用。', '147900b3-2a3b-45f6-ad86-71ddd5efc274.', null, null, null, null, null, null, ' 在回调函数里面返回后台的值,可以用XMLHTTPREQUEST的RESPONSETEXT 或RESPONSEXML获得 ', '', '0', '2017-12-26 20:25:36', '75', '1');
INSERT INTO `topic` VALUES ('5846', '4', '4', 'JQuery如何调用事件,如何获取页面元素，如何抓去样式 ？ ', 'ca7546e6-78c4-4d24-aaff-c3d58ba95f50.', null, null, null, null, null, null, '调用事件：最常用的是为元素添加ONCLICK元素属性的方式来添加事件 ,使用各种选择器来获取元素,使用CSS()来抓取样式', '', '0', '2017-12-26 20:25:54', '75', '1');
INSERT INTO `topic` VALUES ('5847', '4', '4', 'JQuery怎样获取json的数据？ ', 'c4bca0f0-dafd-4d01-86ff-aeaa07803e95.', null, null, null, null, null, null, ' A. 使用了REQUIRE JS 框架\r\n   B. 用JQUERY的两种方法获取后台数据\r\n  1）AJAX 方法，传回的都是JSON数据 \r\n   2）GETJSON, 直接封装了一些参数{COMMAND : GETREGSITERJSONDATA}\r\n', '', '0', '2017-12-26 20:26:12', '75', '1');
INSERT INTO `topic` VALUES ('5848', '4', '4', 'ssh整合步骤', '5136562a-f20d-4847-a162-5efa0545a8ef.', null, null, null, null, null, null, '1.导入STRUTS2的JAR包以及STRUTS2-SPRING-PLUGIN-2.0.11.2.JAR; \r\n\r\n2.在WEB.XML中分别配置STRUTS2与SPRING相关信息;\r\n\r\n3.STRUTS中原有的ACTION需要继承ACTIONSUPPORT;\r\n\r\n4.在SPRING配置ACTION BEAN;\r\n\r\n5.在STRUTS2的配置文件中，调用SPRING中配置的BEAN;\r\n\r\n6.SPRING与HIBERNATE整合，只需要在SPRING配置文件配置SESSIONFACTORY即可', '', '0', '2017-12-26 20:26:17', '52', '1');
INSERT INTO `topic` VALUES ('5849', '6', '4', 'AJAX发送的请求的协议是什么 ？', '4380b20c-d838-4664-8438-04fd2bc43f70.', null, null, null, null, null, null, ' HTTP', '', '0', '2017-12-26 20:26:33', '75', '1');
INSERT INTO `topic` VALUES ('5850', '4', '4', '简述SSH工作流程；', 'd8986448-59db-4e05-a453-56bda0f27022.', null, null, null, null, null, null, '(1)JSP页面发出请求，STRUTS接收页面请求，STRUTS的ACTION调用业务逻辑，业务逻辑调用业务组件（其中使用到SPRING的依赖注入 IOC，或者AOP等）；业务组件根据HIBERNATE的对象/关系数据库的映射关系查询数据库。STRUTS根据结果返回页面。', '', '0', '2017-12-26 20:26:42', '52', '1');
INSERT INTO `topic` VALUES ('5851', '4', '4', 'JQuery的clone方法参数加true和不加true的区别 ？', '2815954a-dc84-4dff-84dc-b563bdaf4adf.', null, null, null, null, null, null, ' CLONE(TRUE)方是复制一个元素及其所有事件，\r\n    CLONE()方法是复制一个元素，不包含其所有事件 \r\n', '', '0', '2017-12-26 20:26:51', '75', '1');
INSERT INTO `topic` VALUES ('5852', '4', '4', 'ssm和ssh的区别？', '1d78f6b9-8f7f-4b7c-a918-1b2f005db30a.', null, null, null, null, null, null, '(1)基于MVC三层架构，使用SSH框架 OR SSM框架 OR SSI框架，采用面向接口的方式编程。\r\n共同点是STRUTS、SPRING，不同点是NIBERNATE和MYBATIS、IBATIS。\r\n\r\n(2)相对HIBERNATE“O/R”而言，IBATIS 是一种“SQL MAPPING”的ORM实现。\r\n\r\n(3)由于HIBERNATE是完全面向对象的编程，在实现DAO中就非常的方便，而且不重复；当MYBATIS在.JAVA代码中也是可以做到不重复，麻烦一点的是，每个映射文件都必须编写几乎相同的配置，除了RESULTTYPE不一样。\r\n\r\n(4)HIBERNATE在实际编程中可以把基础的CRUD封装，比如BASEDAO类。其它类只要去继承BASEDAO就能执行所有的基础的CRUD。这样就非常方便。这个带来的好处还有，可以建立BASESERVICE和BASEACTION。 \r\n\r\n由于MYBATIS的映射文件中，虽然SQL语句中的表名可以通过PARAMETERTYPE指定，但是RESULTTYPE必须定死，不能以参数 的形式给予指定。导致的结果就是所有的DAO类的每个CRUD都必须和指定的映射文件绑定在一起，以至于不可能存在BASEDAO类。当然也就不能建立 BASESERVICE和BASEACTION。', '', '0', '2017-12-26 20:27:00', '52', '1');
INSERT INTO `topic` VALUES ('5853', '4', '4', 'spring核心：aop和ioc的解释？隔离范围？ 3种注入方法？', '60e6093c-55e5-45aa-950f-95175ebe8aff.', null, null, null, null, null, null, '(1)AOP:SPRING提供了对AOP技术的良好封装， AOP称为面向切面编程，就是系统中有很多各不相干的类的方法，在这些众多方法中要加入某种系统功能的代码;例如，加入日志，加入权限判断，加入异常处理，这种应用称为AOP。实现AOP功能采用的是代理技术，客户端程序不再调用目标，而调用代理类，代理类与目标类对外具有相同的方法声明，有两种方式可以实现相同的方法声明，一是实现相同的接口，二是作为目标的子类在，JDK中采用PROXY类产生动态代理的方式为某个接口生成实现类，SPRING提供了这种支持，只需要在SPRING配置文件中配置这两个元素即可实现代理和AOP功能;\r\n\r\n(2)IOC:SPRING提供了对IOC良好支持，IOC是一种编程思想，是一种架构艺术，利用这种思想可以很好地实现模块之间的解耦。IOC也称为DI（DEPENCY INJECTION）;IOC可以理解为‘面向接口编程思想’的一种实现方法，通过IOC实现了强制的‘面向接口编程’。\r\n\r\n(3)隔离范围: SPRING支持JDBC规范定义的四种隔离级别\r\n\r\nDEFAULT默认的事务隔离级别\r\n\r\nREAD_UNCOMMITTED读未提交，一个事务可以操作另外一个未提交的事务，不能避免脏读，不可重复读，幻读，隔离级别最低，并发性 能最高\r\n\r\nREAD_COMMITTED读已提交，一个事务不可以操作另外一个未提交的事务， 能防止脏读，不能避免不可重复读，幻读。\r\n\r\nREPEATABLE_READ能够避免脏读，不可重复读，不能避免幻读\r\n\r\nSERIALIZABLE隔离级别最高，消耗资源最低，代价最高，能够防止脏读， 不可重复读，幻读。\r\n\r\n(4)SPRING的注入和IOC反转控制是一回事;关于GETTER和SETTER方式的注入;\r\n\r\nAUTOWIRE=”DEFUALT”;AUTOWIRE=”BYNAME”;AUTOWIRE=”BYTYPE”;', '', '0', '2017-12-26 20:27:25', '52', '1');
INSERT INTO `topic` VALUES ('5854', '6', '4', 'AJAX的缓存问题怎么解决？', 'b877d9ec-a45a-49a1-87d6-dd7fd8ffebfb.', null, null, null, null, null, null, '方法一： \r\n在AJAX发送请求前加上 ：\r\n     XMLHTTP.SETREQUESTHEADER(\"IF-MODIFIED-SINCE\",\"0\"); \r\n方法二：\r\n服务器端代码加入：\r\n    RESPONSE.SETHEADER(\"CACHE-CONTROL\", \"NO-CACHE, MUST-REVALIDATE\");\r\n方法三：\r\n    用JAVASCRIPT在AJAX提交的时候加入一个随机数作为URL中的一个参数。REQ.OPEN(URL + \"&\" + MATH.RANDOM). \r\n', '', '0', '2017-12-26 20:27:27', '75', '1');
INSERT INTO `topic` VALUES ('5855', '4', '4', 'JQuery怎么拿页面的值、属性。 ', '70d0db13-87fd-4d6a-a6b5-af2059a8b58d.', null, null, null, null, null, null, '  用ATTR函数,VAL', '', '0', '2017-12-26 20:27:42', '75', '1');
INSERT INTO `topic` VALUES ('5856', '3', '3', '面向对象程序设计所具有的基本特征是：______，___，___，___', 'a0463cc4-998e-4618-a8e7-d4af7f7cf68b.', null, null, null, null, null, null, '抽象性,_封装性,继承性,多态性', '', '0', '2017-12-26 20:27:46', '53', '1');
INSERT INTO `topic` VALUES ('5857', '6', '4', 'AJAX怎么用的，怎么把数据提交到后台的？', '7094282f-2fad-4fe3-9ddf-009a9d42063c.', null, null, null, null, null, null, '通过OPEN函数打开连接,通过SEND方法发送数据', '', '0', '2017-12-26 20:27:58', '75', '1');
INSERT INTO `topic` VALUES ('5858', '3', '3', '数组x定义如下     int x[ ][ ]=new int[3][2]      则 x..length 的值为____________，      x[0].length 的值为____________。', '9013e709-f89b-4171-adfe-8999e9a28f5f.', null, null, null, null, null, null, '3,2', '', '0', '2017-12-26 20:28:04', '53', '1');
INSERT INTO `topic` VALUES ('5859', '4', '4', '在写下js和JQuery如何获取页面元素的？', '05acebbb-8473-4e15-8af3-41dbb541674f.', null, null, null, null, null, null, ' JS可以用DOCUMENT.GETELEMENTBYID或者DOCUMENT.GETELEMENTBYNAME,但是JQUERY就是比较强大,可以用各种选择器来获取,最主要的还是ID选择器(\"#ID\");', '', '0', '2017-12-26 20:28:15', '75', '1');
INSERT INTO `topic` VALUES ('5860', '33', '4', '两亿条数据如何同时删除', '65e0de26-bb87-44b3-9be4-1451b28d849e.', null, null, null, null, null, null, 'PUBLIC BOOLEAN DELUSERS(STRING[] USERIDS){  \r\n\r\n·          BOOLEAN FLAG = FALSE;  \r\n\r\n·          CONNECTION CONN = NULL;  \r\n\r\n·          PREPAREDSTATEMENT PSTMT = NULL;    \r\n\r\n·          STRING SQL = \"DELETE FROM T_USER WHERE USER_ID=?\";  \r\n\r\n·          TRY {  \r\n\r\n·              CONN = DBUTIL.GETCONNECTION();  \r\n\r\n·              CONN.SETAUTOCOMMIT(FALSE);  \r\n\r\n·              PSTMT = CONN.PREPARESTATEMENT(SQL);  \r\n\r\n·              FOR(INT I =0 ;I<USERIDS.LENGTH;I++){   \r\n\r\n·                  PSTMT.SETSTRING(1,USERIDS[I].TRIM());  \r\n\r\n·                  PSTMT.ADDBATCH();                 \r\n\r\n·              }   \r\n\r\n·              PSTMT.EXECUTEBATCH(); //批量执行   \r\n\r\n·              CONN.COMMIT();//提交事务  \r\n\r\n·              FLAG = TRUE;  \r\n\r\n·          } CATCH (SQLEXCEPTION E) {  \r\n\r\n·              TRY {  \r\n\r\n·                  CONN.ROLLBACK(); //进行事务回滚  \r\n\r\n·              } CATCH (SQLEXCEPTION EX) {   \r\n\r\n·              }   \r\n\r\n·          }FINALLY {  \r\n\r\n·              DBUTIL.CLOSE(PSTMT);  \r\n\r\n·              DBUTIL.CLOSE(CONN);  \r\n\r\n·          }   \r\n\r\n·          RETURN FLAG;  \r\n\r\n·      }  ', '', '0', '2017-12-26 20:28:18', '52', '1');
INSERT INTO `topic` VALUES ('5861', '6', '4', '讲下JQuery里面的AJAX几种实现和比较方式', '53a840e7-07b4-4d28-8bd2-e16b0ebf000e.', null, null, null, null, null, null, '有LOAD(),POST(),GET(),AJAX(),GETJSON()等,详细说明具体实现,\r\nLOAD是把远程URL地址获取后的HTML代码直接插入到当前元素里面,不需要写回调函数\r\n$.GET()是把远程URL获取的信息通过回调函数来处理,通过GET方式提交 \r\n$.POST()是把远程URL获取的信息通过回调函数来处理,通过POST方式提交\r\n$.AJAX是最复杂的一个AJAX执行函数,它是$.GET和$.POST的基础\r\n', '', '0', '2017-12-26 20:28:34', '75', '1');
INSERT INTO `topic` VALUES ('5862', '3', '4', 'class A{   private int privateVar;  A(int _privateVar){         privateVar=_privateVar;    }     boolean isEqualTo(A anotherA){      if(this.privateVar == anotherA.privateVar)     return true;     else      return false;    }    }   public class B{   public static void main(String args[]){  A a = new A(1);  A b = new A(2);   System.out.println(a.isEqualTo(b));    }    }  程序的输出结果为：', '7229070f-f8cc-48aa-8ca9-7b916421753e.', null, null, null, null, null, null, 'FALSE', '', '0', '2017-12-26 20:28:37', '53', '1');
INSERT INTO `topic` VALUES ('5863', '26', '1', '下面的哪些答案可以用以表示八进制值8?', '57a95967-2e84-4518-ab01-f0307d7d48e6.', '010 ', '0x10', '08', '0x8', '', '', 'A', '', '0', '2017-12-26 20:29:29', '53', '1');
INSERT INTO `topic` VALUES ('5864', '26', '1', '下面哪些不是java的原始数据类型', 'b71efcf9-9cc2-4619-a025-2de8d3aa1bbf.', 'short ', 'Boolean ', 'unit ', 'float ', '', '', 'BC', '', '0', '2017-12-26 20:30:28', '53', '1');
INSERT INTO `topic` VALUES ('5865', '32', '1', '下面的哪些关键字通常用来对对象的加锁，该标记使得对对象的访问是排他的? ', 'dffb50d7-bbfc-49ea-be27-3d5efe7f5f97.', 'transient', 'synchronized ', 'serialize ', 'static ', '', '', 'B', '', '0', '2017-12-26 20:31:02', '53', '1');
INSERT INTO `topic` VALUES ('5866', '3', '1', 'main()方法的返回类型是什么？', '15d0cc87-4408-49d2-a19d-f0253ae73d88.', 'int ', 'void ', 'boolean ', 'static ', '', '', 'B', '', '0', '2017-12-26 20:31:27', '53', '1');
INSERT INTO `topic` VALUES ('5867', '33', '4', '.对WEB标准以及W3C的理解与认识', '3b78a2bd-38c1-4704-ac7a-136d0e0bd0d5.', null, null, null, null, null, null, '标签闭合、标签小写、不乱嵌套、提高搜索机器人搜索几率、使用外 链CSS和JS脚本、结构行为表现的分离、文件下载与页面速度更快、内容能被更多的用户所访问、内容能被更广泛的设备所访问、更少的代码和组件，容易维 护、改版方便，不需要变动页面内容、提供打印版本而不需要复制内容、提高网站易用性；', '', '0', '2017-12-26 20:31:45', '75', '1');
INSERT INTO `topic` VALUES ('5868', '3', '1', '给出以下关于一个使用适当的字符间距的字体的TextField的表达式   TextField t = new TextField(\"they are good\",40);//40指的是像素   哪些叙述是对的？', '3aaecbac-1d0f-407e-a08b-ddca08b91d72.', '被显示的字符串可以使用多种字体', '一行中最大的字符数是40', '显示的宽度正好是40个字符宽。', '用户可以编辑字符', '', '', 'D', '', '0', '2017-12-26 20:31:52', '53', '1');
INSERT INTO `topic` VALUES ('5870', '33', '4', 'xhtml和html有什么区别', '845ac42b-02e7-4587-b686-556b5bfb4b63.', null, null, null, null, null, null, 'HTML是一种基本的WEB网页设计语言，XHTML是一个基于XML的置标语言\r\n最主要的不同：\r\nXHTML 元素必须被正确地嵌套。\r\nXHTML 元素必须被关闭。\r\n标签名必须用小写字母。\r\nXHTML 文档必须拥有根元素。\r\n', '', '0', '2017-12-26 20:32:06', '75', '1');
INSERT INTO `topic` VALUES ('5871', '4', '1', '关于垃圾收集的哪些叙述是对的?', 'da8fc5bb-a1eb-4c48-b53d-3645aed4d323.', '程序开发者必须自己创建一个线程进行内存释放的工作', '垃圾收集将检查并释放不再使用的内存', '垃圾收集允许程序开发者明确指定并立即释放该内存。 ', '垃圾收集能够在期望的时间释放被java对象使用的内存。', '', '', 'B', '', '0', '2017-12-26 20:32:21', '53', '1');
INSERT INTO `topic` VALUES ('5872', '33', '4', '.Doctype? 严格模式与混杂模式-如何触发这两种模式，区分它们有何意义? ', '818d2e88-765a-4e6d-8400-3aad4d92998c.', null, null, null, null, null, null, '用于声明文档使用那种规范（HTML/XHTML）一般为 严格 过度 基于框架的HTML文档\r\n加入XML声明可触发，解析方式更改为IE5.5 拥有IE5.5的BUG\r\n\r\n', '', '0', '2017-12-26 20:32:23', '75', '1');
INSERT INTO `topic` VALUES ('5873', '33', '4', '行内元素有哪些?块级元素有哪些?CSS的盒模型?', '3a793df8-1fe5-4b7e-afc9-3a318743b57f.', null, null, null, null, null, null, '块级元素：DIV P H1 H2 H3 H4 FORM UL\r\n行内元素: A B BR I SPAN INPUT SELECT\r\nCSS盒模型:内容，BORDER ,MARGIN，PADDING\r\n', '', '0', '2017-12-26 20:32:40', '75', '1');
INSERT INTO `topic` VALUES ('5874', '33', '4', 'CSS引入的方式有哪些? link和@import的区别是?', '17b1fba3-49e1-4065-b4f1-5ee5635bcb25.', null, null, null, null, null, null, '内联 内嵌 外链 导入\r\n区别 ：同时加载\r\n前者无兼容性，后者CSS2.1以下浏览器不支持\r\nLINK 支持使用JAVASCRIPT改变样式，后者不可\r\n', '', '0', '2017-12-26 20:32:56', '75', '1');
INSERT INTO `topic` VALUES ('5875', '3', '1', 'Thread的方法resume()负责恢复哪些线程的执行?', '31bfe1dd-4929-42ea-a9d6-718f9811c8f0.', '通过调用stop()方法而停止的线程。', '通过调用sleep()方法而停止运行的线程。', '通过调用wait()方法而停止运行的线程。', '通过调用suspend()方法而停止运行的线程。', '', '', 'D', '', '0', '2017-12-26 20:33:06', '53', '1');
INSERT INTO `topic` VALUES ('5876', '33', '4', 'CSS选择符有哪些?哪些属性可以继承?优先级算法如何计算?内联和important哪个优先级高?', '7ec6d4aa-9d41-4d9d-8c1d-487d1754381e.', null, null, null, null, null, null, '标签选择符 类选择符 ID选择符\r\n继承不如指定 ID>CLASS>标签选择\r\n后者优先级高\r\n', '', '0', '2017-12-26 20:33:11', '75', '1');
INSERT INTO `topic` VALUES ('5877', '26', '4', '什么是 Busy spin？', '2ace3468-52af-465a-bab4-39dc3a0368ca.', null, null, null, null, null, null, 'BUSY SPIN 是一种在不释放 CPU 的基础上等待事件的技术', '', '0', '2017-12-26 20:33:15', '64', '1');
INSERT INTO `topic` VALUES ('5878', '33', '4', '前端页面有哪三层构成，分别是什么?作用是什么?', '117a24e5-cbb6-481d-9b3b-72dc044b318a.', null, null, null, null, null, null, '结构层 HTML 表示层 CSS 行为层 JS', '', '0', '2017-12-26 20:33:27', '75', '1');
INSERT INTO `topic` VALUES ('5879', '33', '4', 'css的基本语句构成是?', '0d391197-af3a-46b0-999a-d5e3e22a3155.', null, null, null, null, null, null, '选择器{属性1:值1;属性2:值2;……}', '', '0', '2017-12-26 20:33:44', '75', '1');
INSERT INTO `topic` VALUES ('5880', '3', '1', '有关线程的哪些叙述是对的?', '6722e155-d00c-4cc1-a7bd-72a5e8963cf7.', '一旦一个线程被创建，它就立即开始运行。', '使用start()方法可以使一个线程成为可运行的，但是它不一定立即开始运行.', '当一个线程因为抢先机制而停止运行，它被放在可运行队列的前面。//比它      优先级高的进程抢占了cpu，它运行的时间根据操作系统而定；', '一个线程可能因为不同的原因停止并进入就绪状态。', '', '', 'BD', '', '0', '2017-12-26 20:33:46', '53', '1');
INSERT INTO `topic` VALUES ('5881', '33', '4', 'Java 中 sleep 方法和 wait 方法的区别？', '103a3579-8482-4268-ab37-afb0bc6e3383.', null, null, null, null, null, null, '虽然两者都是用来暂停当前运行的线程，但是 SLEEP() 实际上只是短暂停顿，因为它不会释放锁，而 WAIT() 意味着条件等待，这就是为什么该方法要释放锁，因为只有这样，其他等待的线程才能在满足条件时获取到该锁。', '', '0', '2017-12-26 20:33:54', '64', '1');
INSERT INTO `topic` VALUES ('5882', '33', '4', '你做的页面在哪些流览器测试过?这些浏览器的内核分别是什么?', 'b79c71e4-aba3-47ed-8095-2aff2362dc66.', null, null, null, null, null, null, 'IE(IE内核) 火狐（GECKO） 谷歌（WEBKIT） OPEAR(PRESTO)', '', '0', '2017-12-26 20:34:03', '75', '1');
INSERT INTO `topic` VALUES ('5883', '4', '4', '说下Struts的设计模式', '7db43df8-eb53-43aa-9c37-ec18ad125663.', null, null, null, null, null, null, 'MVC模式:WEB应用程序启动时就会加载并初始化ACTIONSERVLER。用户提交表单时，一个配置好的ACTIONFORM对象被创建，并被填入表单相应的数据，ACTIONSERVLER根据 STRUTS-CONFIG.XML文件配置好的设置决定是否需要表单验证，如果需要就调用ACTIONFORM的VALIDATE（）验证后选择将请求发送到哪个ACTION，如果ACTION不存在，ACTIONSERVLET会先创建这个对象，然后调用ACTION的EXECUTE（）方法。EXECUTE（）从ACTIONFORM对象中获取数据，完成业务逻辑，返回一个ACTIONFORWARD对象，ACTIONSERVLET再把客户请求转发给ACTIONFORWARD对象指定的JSP组件，ACTIONFORWARD对象指定的JSP生成动态的网页，返回给客户。', '', '0', '2017-12-26 20:34:08', '52', '1');
INSERT INTO `topic` VALUES ('5884', '3', '4', '什么是不可变对象（immutable object）？', 'cdbca5f4-6a61-416f-9e2e-2d7cd1ec8854.', null, null, null, null, null, null, '不可变对象指对象一旦被创建，状态就不能再改变。', '', '0', '2017-12-26 20:34:16', '64', '1');
INSERT INTO `topic` VALUES ('5885', '33', '4', '.写出几种IE6 BUG的解决方法', '736ca5e6-01b3-4de2-8259-1ba60d83ca90.', null, null, null, null, null, null, '1.双边距BUG FLOAT引起的 使用DISPLAY\r\n2.3像素问题 使用FLOAT引起的 使用DISLPAY:INLINE -3PX\r\n3.超链接HOVER 点击后失效 使用正确的书写顺序 LINK VISITED HOVER ACTIVE\r\n4.IE Z-INDEX问题 给父级添加POSITION:RELATIVE\r\n5.PNG 透明 使用JS代码 改\r\n6.MIN-HEIGHT 最小高度 ！IMPORTANT 解决’\r\n7.SELECT 在IE6下遮盖 使用IFRAME嵌套\r\n8.为什么没有办法定义1PX左右的宽度容器（IE6默认的行高造成的，使用OVER:HIDDEN,ZOOM:0.08 LINE-HEIGHT:1PX）\r\n', '', '0', '2017-12-26 20:34:22', '75', '1');
INSERT INTO `topic` VALUES ('5886', '3', '1', '已知TimedOutException 不是一个RuntimeException。下面的哪些声明可以被加入第一行完成此方法的声明', '893fb2dd-fd6d-4712-8399-874e83cbcd4c.', 'public void method() ', 'public void method() throws Exception', 'public void method() throws TimedOutException ', 'public void method() throw TimedOutException ', 'public throw TimedOutException void method()', '', 'BC', '', '0', '2017-12-26 20:34:27', '53', '1');
INSERT INTO `topic` VALUES ('5887', '33', '4', '标签上title与alt属性的区别是什么?', 'fbd20495-6adb-4370-8e6e-ae614bfe27f2.', null, null, null, null, null, null, 'ALT 当图片不显示是 用文字代表。\r\nTITLE 为该属性提供信息\r\n', '', '0', '2017-12-26 20:34:39', '75', '1');
INSERT INTO `topic` VALUES ('5888', '33', '4', '.描述css reset的作用和用途。', '3237085b-0e27-49b1-a846-27547afc7360.', null, null, null, null, null, null, 'RESET重置浏览器的CSS默认属性 浏览器的品种不同，样式不同，然后重置，让他们统一', '', '0', '2017-12-26 20:34:56', '75', '1');
INSERT INTO `topic` VALUES ('5889', '3', '1', '下面关于变量及其范围的陈述哪些是对的?', '9a6b377f-8d4f-4b07-9a68-7901c05ebca5.', '实例变量是类的成员变量', '实例变量用关键字static声明', '在方法中定义的局部变量在该方法被执行时创建', '局部变量在使用前必须被初始化', '', '', 'ACD', '', '0', '2017-12-26 20:35:00', '53', '1');
INSERT INTO `topic` VALUES ('5890', '33', '4', '.解释css sprites，如何使用。', '65fa78ff-239e-467c-9d08-d459a9cb40b2.', null, null, null, null, null, null, 'CSS 精灵 把一堆小的图片整合到一张大的图片上，减轻服务器对图片的请求数量', '', '0', '2017-12-26 20:35:09', '75', '1');
INSERT INTO `topic` VALUES ('5891', '3', '1', '下面中哪两个可以在A的子类中使用：（ ）\r\nclass A {\r\nprotected int method1 (int a, int b) {\r\nreturn 0;\r\n}\r\n}', 'a88aa17b-faa4-4630-a837-fbac66921da1.', ' public int method 1 (int a, int b) { return 0; }', 'private int method1 (int a, int b) { return 0; }', 'private int method1 (int a, long b) { return 0; }', 'public short method1 (int a, int b) { return 0; }', '', '', 'AC', '', '0', '2017-12-26 20:35:25', '64', '1');
INSERT INTO `topic` VALUES ('5892', '4', '4', 'struts2是如何启动的？', '0b1f29e3-bcad-4de7-8ebb-66bae3ae6931.', null, null, null, null, null, null, 'STRUTS2框架是通过FILTER启动的，即STRUTSPREPAREANDEXECUTEFILTER，此过滤器为STRUTS2的核心过滤器；6/40 STRUTSPREPAREANDEXECUTEFILTER的INIT()方法中将会读取类路径下默认的配置文件STRUTS.XML完成初始化操作。STRUTS2读取到STRUTS.XML的内容后，是将内容封装进JAVABEAN对象然后存放在内存中，以后用户的每次请求处理将使用内存中的数据，而不是每次请求都读取STRUTS.XML文件。', '', '0', '2017-12-26 20:35:33', '52', '1');
INSERT INTO `topic` VALUES ('5893', '3', '1', '下面的有关声明的哪些叙述是对的?', '4a119f40-6c8f-4aba-babf-a2c2a53355d3.', '对原始数据类型例如boolean,byte的变量的声明不会为该变量分配内存空间。 ', '对原始数据类型例如boolean,byte的变量的声明将为之分配内存空间。', '非原始数据类型例如String,Vector的变量的声明不会为该对象分配内存', ' 非原始数据类型例如String,Vector的变量的声明会为该对象分配内存。', '', '', 'BC', '', '0', '2017-12-26 20:35:36', '53', '1');
INSERT INTO `topic` VALUES ('5894', '6', '4', 'ajax请求时，如何解释json数据', '7dff9680-47b4-4644-88d9-617c888fc1a3.', null, null, null, null, null, null, '使用EVAL PARSE 鉴于安全性考虑 使用PARSE更靠谱', '', '0', '2017-12-26 20:35:43', '75', '1');
INSERT INTO `topic` VALUES ('5895', '3', '1', '类的设计要求它的某个成员变量不能被外部类直接访问。应该使用下面的哪些修饰符获得需要的访问控制?', 'e7991cd7-fc48-4e86-ae02-c8bffdc62513.', 'public ', '不加修饰符', 'protected ', 'private ', '', '', 'D', '', '0', '2017-12-26 20:36:08', '53', '1');
INSERT INTO `topic` VALUES ('5896', '6', '4', '解释jsonp的原理，以及为什么不是真正的ajax', '8f4bcb32-d58b-4079-834c-a7f33cb7d7a6.', null, null, null, null, null, null, '动态创建SCRIPT标签，回调函数\r\nAJAX是页面无刷新请求数据操作\r\n\r\n', '', '0', '2017-12-26 20:36:12', '75', '1');
INSERT INTO `topic` VALUES ('5897', '4', '4', 'struts2框架的核心控制器是什么？它有什么作用？', '4206c232-7733-49b0-8f68-3fa1b2e8b8f1.', null, null, null, null, null, null, '1）STRUTS2框架的核心控制器是STRUTSPREPAREANDEXECUTEFILTER。2）作用： 负责拦截由<URL-PATTERN>/*</URL-PATTERN>指定的所有用户请求，当用户请求到达时，该FILTER会过滤用户的请求。默认情况下，如果用户请求的路径 不带后缀或者后缀以.ACTION结尾，这时请求将被转入STRUTS2框架处理，否则STRUTS2框架将略过该请求的处理。 可以通过常量\"STRUTS.ACTION.EXTENSION\"修改ACTION的后缀，如： <CONSTANTNAME=\"STRUTS.ACTION.EXTENSION\"VALUE=\"DO\"/> 如果用户需要指定多个请求后缀，则多个后缀之间以英文逗号（,）隔开。<CONSTANTNAME=\"STRUTS.ACTION.EXTENSION\"VALUE=\"DO,GO\"/>', '', '0', '2017-12-26 20:36:16', '52', '1');
INSERT INTO `topic` VALUES ('5898', '3', '1', 'Abstract method cannot be static. True or False ?', 'ca112e3f-e34d-4c37-ad72-713bbcd826b2.', 'True', 'False', 'return', 'continue', '', '', 'A', '抽象方法可以在子类中被重写，但是静态方法不能在子类中被重写，静态方法和静态属性与对象是无关的，只与类有关，这与abstract是矛盾的，所以abstract是不能被修饰为static，否则就失去了abstract的意义了', '0', '2017-12-26 20:36:26', '64', '1');
INSERT INTO `topic` VALUES ('5899', '3', '1', '下面有关java代码安全性的叙述哪些是对的? ', '6217d5bf-fe7f-42a5-b83e-0ddbf55f204b.', '字节码校验器加载查询执行需要的所有类', '运行时解释器执行代码', '在运行时，字节码被加载，验证然后在解释器里面运行。', '类加载器通过分离本机文件系统的类和从网络导入的类增加安全性', '', '', 'BCD', '', '0', '2017-12-26 20:36:39', '53', '1');
INSERT INTO `topic` VALUES ('5900', '4', '4', 'struts2配置文件的加载顺序？', 'c925bdd5-1c45-40a4-8d99-1936ab5dc2dd.', null, null, null, null, null, null, 'STRUTS.XML——>STRUTS.PROPERTIES 常量可以在STRUTS.XML或STRUTS.PROPERTIES中配置，如果在多个文件中配置了同一个常量，则后一个文件中配置的常量值会覆盖前面文件中配置的常量值.STRUTS.XML文件的作用：通知STRUTS2框架加载对应的ACTION资源', '', '0', '2017-12-26 20:36:44', '52', '1');
INSERT INTO `topic` VALUES ('5901', '5', '4', 'javascript的本地对象，内置对象和宿主对象', '5448cf79-1f03-4864-b952-441cc620299e.', null, null, null, null, null, null, '本地对象为ARRAY OBJ REGEXP等可以NEW实例化\r\n内置对象为GLOAD MATH 等不可以实例化的\r\n宿主为浏览器自带的DOCUMENT,WINDOW 等\r\n', '', '0', '2017-12-26 20:36:44', '75', '1');
INSERT INTO `topic` VALUES ('5902', '33', '4', 'document load 和document ready的区别', '4dfebbf5-08f6-4da3-b9fa-033125cd6b79.', null, null, null, null, null, null, 'DOCUMENT.ONLOAD 是在结构和样式加载完才执行JS\r\nDOCUMENT.READY原生种没有这个方法，JQUERY中有 $().READY(FUNCTION)\r\n\r\n', '', '0', '2017-12-26 20:37:08', '75', '1');
INSERT INTO `topic` VALUES ('5903', '4', '4', 'struts2常量的修改方式？', 'ddaa9644-f40c-4caf-a090-60e5852a90e4.', null, null, null, null, null, null, '常量可以在STRUTS.XML或STRUTS.PROPERTIES中配置，两种配置方式如下：1）在STRUTS.XML文件中配置常量 <CONSTANTNAME=\"STRUTS.ACTION.EXTENSION\"VALUE=\"DO\"/>2）在STRUTS.PROPERTIES中配置常量（STRUTS.PROPERTIES文件放置在SRC下）：STRUTS.ACTION.EXTENSION=DO', '', '0', '2017-12-26 20:37:18', '52', '1');
INSERT INTO `topic` VALUES ('5904', '3', '1', '哪些方法可以加入类Child中?', 'ed466460-492f-4411-b755-7e0d19ac5fce.', ' int addValue( int a, int b ){// do something...} ', 'public void addValue (){// do something...}', 'public int addValue( int a ){// do something...}', 'public int addValue( int a, int b )throws Exception {//do something...}', '', '', 'BC', '', '0', '2017-12-26 20:37:18', '53', '1');
INSERT INTO `topic` VALUES ('5905', '5', '4', 'javascript的同源策略', '0d5ef063-b421-4044-a0f5-7ebf1c50957f.', null, null, null, null, null, null, '一段脚本只能读取来自于同一来源的窗口和文档的属性，这里的同一来源指的是主机名、协议和端口号的组合\r\n\r\n', '', '0', '2017-12-26 20:37:25', '75', '1');
INSERT INTO `topic` VALUES ('5906', '3', '1', 'What will be the output when you compile and execute the following program.\r\nclass Base\r\n{\r\nvoid test() {\r\nSystem.out.println(“Base.test()”);\r\n}\r\n}\r\npublic class Child extends Base {\r\nvoid test() {\r\nSystem.out.println(“Child.test()”);\r\n}\r\nstatic public void main(String[] a) {\r\nChild anObj = new Child();\r\nBase baseObj = (Base)anObj;\r\nbaseObj.test();\r\n}\r\n}\r\nSelect most appropriate answer.', 'ccdf9b66-efda-4dba-876c-ef989365465a.', 'Child.test()\r\nBase.test()', 'Base.test()\r\nChild.test()', 'Base.test()', ' Child.test()', '', '', 'D', '测试代码相当于：Base baseObj = new Child();父类的引用指向子类的实例，子类又重写了父类\r\n的test方法，因此调用子类的test方法。', '0', '2017-12-26 20:37:27', '64', '1');
INSERT INTO `topic` VALUES ('5907', '4', '4', 'struts2如何访问HttpServletRequest、HttpSession、ServletContext三个域对象？', 'cebee577-a4bb-48c3-9462-23cb80435f5f.', null, null, null, null, null, null, '方案一： HTTPSERVLETREQUESTREQUEST=SERVLETACTIONCONTEXT.GETREQUEST();HTTPSERVLETRESPONSE RESPONSE=SERVLETACTIONCONTEXT.GETRESPONSE();HTTPSESSIONSESSION=REQUEST.GETSESSION();SERVLETCONTEXT SERVLETCONTEXT=SERVLETACTIONCONTEXT.GETSERVLETCONTEXT(); 方案二： 类IMPLEMENTSSERVLETREQUESTAWARE,SERVLETRESPONSEAWARE，SESSIONAWARE，SERVLETCONTEXTAWARE 注意：框架自动传入对应的域对象', '', '0', '2017-12-26 20:37:35', '52', '1');
INSERT INTO `topic` VALUES ('5908', '3', '1', '公有成员变量MAX_LENGTH是一个int型值，变量的值保持常数值100，定义这个变量的代码为?', '50d7e2db-70ff-4293-b2aa-8ef235cd008b.', 'public int MAX_LENGTH=100; ', 'final int MAX_LENGTH=100;', 'final public int MAX_LENGTH=100; //修饰符的顺序可以交换', 'public final int MAX_LENGTH=100;', '', '', 'CD', '', '0', '2017-12-26 20:37:47', '53', '1');
INSERT INTO `topic` VALUES ('5909', '4', '4', 'struts2是如何管理action的？这种管理方式有什么好处？', 'bcfdcc42-d238-4e87-b86c-c81974fe9917.', null, null, null, null, null, null, 'STRUTS2框架中使用包来管理ACTION，包的作用和JAVA中的类包是非常类似的。主要用于管理一组业务功能相关的ACTION。在实际应用中，我们应该把一组业务功能相关的ACTION放在同一个包下。', '', '0', '2017-12-26 20:38:04', '52', '1');
INSERT INTO `topic` VALUES ('5910', '3', '1', 'What will be the output when you compile and execute the following program.\r\npublic class Base{\r\nprivate void test() {\r\nSystem.out.println(6 + 6 + “(Result)”);\r\n}\r\nstatic public void main(String[] a) {\r\nnew Base().test();\r\n}\r\n}\r\nSelect most appropriate answer.', '4b1d3209-1353-4291-80a6-807bd6c699d0.', '66(Result)', '12(Result)', ' Runtime Error.Incompatible type for +. Can’t convert an int to a string.', 'Compilation Error.Incompatible type for +. Can’t add a string to an int.', '', '', 'B', '字符串与基本数据类型链接的问题,如果第一个是字符串那么后续就都按字符串处理，比如上边例子要是System.out.println(“(Result)”+6 + 6 );那么结果就是(Result)66，如果第一个和第二个。。。第n个都是基本数据第n+1是字符串类型，那么前n个都按加法计算出结果在与字符串连接', '0', '2017-12-26 20:38:21', '64', '1');
INSERT INTO `topic` VALUES ('5911', '3', '1', '下面的哪些java源文件代码片断是对的?', '4b46242a-aa9c-44b8-867c-da1debb75e4c.', 'package testpackage;    public class Test{//do something...}', 'import java.io.*;   package testpackage;    public class Test{// do something...}', 'import java.io.*;    class Person{// do something...}   public class Test{// do something...} ', ' import java.io.*;   import java.awt.*;    public class Test{// do something..}', '', '', 'ACD', '', '0', '2017-12-26 20:38:24', '53', '1');
INSERT INTO `topic` VALUES ('5912', '4', '4', 'struts2中的默认包struts-default有什么作用？', 'e0831074-82a9-49d2-9f0b-67d1e870b2ca.', null, null, null, null, null, null, '1）STRUTS-DEFAULT包是由STRUTS内置的，它定义了STRUTS2内部的众多拦截器和RESULT类型，而STRUTS2很多核心的功能都是通过这些内置的拦截器实现，如：从请求中 把请求参数封装到ACTION、文件上传和数据验证等等都是通过拦截器实现的。当包继承了STRUTS-DEFAULT包才能使用STRUTS2为我们提供的这些功能。2）STRUTS-DEFAULT包是在STRUTS-DEFAULT.XML中定义，STRUTS-DEFAULT.XML也是STRUTS2默认配置文件。STRUTS2每次都会自动加载STRUTS-DEFAULT.XML文件。 3）通常每个包都应该继承STRUTS-DEFAULT包。', '', '0', '2017-12-26 20:38:29', '52', '1');
INSERT INTO `topic` VALUES ('5913', '4', '4', '8/40 struts2如何对指定的方法进行验证？', '0b49cd85-a595-4e9d-9a9c-33ec3a7cff59.', null, null, null, null, null, null, '1）VALIDATE()方法会校验ACTION中所有与EXECUTE方法签名相同的方法；2）要校验指定的方法通过重写VALIDATEXXX()方法实现，VALIDATEXXX()只会校验ACTION中方法名为XXX的方法。其中XXX的第一个字母要大写； 3）当某个数据校验失败时，调用ADDFIELDERROR()方法往系统的FIELDERRORS添加校验失败信息（为了使用ADDFIELDERROR()方法，ACTION可以继承 ACTIONSUPPORT），如果系统的FIELDERRORS包含失败信息，STRUTS2会将请求转发到名为INPUT的RESULT； 4）在INPUT视图中可以通过<S:FIELDERROR/>显示失败信息。5）先执行VALIDATEXXXX()->VALIDATE()->如果出错了，会转发<RESULTNAME=\"INPUT\"/>所指定的页面，如果不出错，会直接进行ACTION::EXECUTE()方法', '', '0', '2017-12-26 20:38:52', '52', '1');
INSERT INTO `topic` VALUES ('5914', '4', '4', 'struts2默认能解决get和post提交方式的乱码问题吗？', '17834b8d-3e84-41c0-aa49-71b37b8b02bb.', null, null, null, null, null, null, '不能。STRUTS.I18N.ENCODING=UTF-8属性值只能解析POST提交下的乱码问题。', '', '0', '2017-12-26 20:39:08', '52', '1');
INSERT INTO `topic` VALUES ('5915', '3', '1', 'What will be the output when you compile and execute the following program. The symbol ’ ?’ means space.\r\n1:public class Base{\r\n2:\r\n3: private void test() {\r\n4:\r\n5: String aStr = “?One?”;\r\n6: String bStr = aStr;\r\n7: aStr.toUpperCase();\r\n8: aStr.trim();\r\n9: System.out.println(“[\" + aStr + \",\" + bStr + \"]“);\r\n7: }\r\n8:\r\n9: static public void main(String[] a) {\r\n10: new Base().test();\r\n11: }\r\n12: }\r\nSelect most appropriate answer.', '5e4c15f5-2836-4eae-b2fd-143a97861e33.', '[ONE,?One?]', '[?One?,One]', ' [ONE,One]', ' [ONE,ONE]', '[?One?,?One?]', '', 'E', '通过String bStr = aStr;这句代码使bStr和aStr指向同一个地址空间，所以最后aStr和bStr的结果应该是一样，String类是定长字符串，调用一个字符串的方法以后会形成一个新的字符串。', '0', '2017-12-26 20:39:10', '64', '1');
INSERT INTO `topic` VALUES ('5916', '4', '1', '给出下面有关java.awt.List的表达式    List l = new List(6,true);//第二个参数是false的话只能选一个   其中哪些叙述是正确的?', '0737a39b-d058-4246-a2a5-235258d00731.', '在没有其它的约束的条件下该列表将有6行可见。', '一行的最大字符数是6 ', '列表将允许用户多选', '列表只能有一项被选中', '', '', 'AC', '', '0', '2017-12-26 20:39:22', '53', '1');
INSERT INTO `topic` VALUES ('5917', '3', '1', '应用程序的main方法中有以下语句，则输出的结果是 (   )。 String s1=\"0.5\",s2=\"12\";           double x=Double.parseDouble(s1);          int    y=Integer.parseInt(s2);  System.out.println(x+y); ', 'e6229cb2-ef82-41a4-8ff3-12e7ce4bb7e0.', '12.5', '120.5', '12', '\"12.5\"', '', '', 'A', '', '0', '2017-12-26 20:40:10', '53', '1');
INSERT INTO `topic` VALUES ('5918', '4', '4', '请你写出struts2中至少5个的默认拦截器？', '2625d982-94ed-4ede-865a-1097dcb36726.', null, null, null, null, null, null, 'FILEUPLOAD提供文件上传功能I18N记录用户选择的LOCALECOOKIES使用配置的NAME,VALUE来是指COOKIESCHECKBOX添加了CHECKBOX自动处理代码，将没有选中的CHECKBOX的内容设定为FALSE，而HTML默认情况下不提交没有选中的CHECKBOX。CHAIN让前一个ACTION的属性可以被后一个ACTION访问，现在和CHAIN类型的RESULT（）结合使用。ALIAS在不同请求之间将请求参数在不同名字件转换，请求内容不变', '', '0', '2017-12-26 20:40:13', '52', '1');
INSERT INTO `topic` VALUES ('5919', '3', '1', '下列关于修饰符混用的说法，错误的是（）', '3bddaf0a-cbc6-4cdd-9614-729b12132124.', 'abstract不能与final并列修饰同一个类', 'abstract类中可以有private的成员', 'abstract方法必须在abstract类中', 'static方法中能处理非static的属性', '', '', ' D', '', '0', '2017-12-26 20:40:14', '64', '1');
INSERT INTO `topic` VALUES ('5920', '26', '1', '执行完以下代码int [ ] x = new int[25]；后，以下哪项说明是正确的（ ）：', '827ad8ea-af19-410a-b150-9978f335c9b0.', 'x[24]为0', ' x[24]未定义', ' x[25]为0', ' x[0]为空', '', '', 'A', '', '0', '2017-12-26 20:40:54', '64', '1');
INSERT INTO `topic` VALUES ('5921', '4', '4', '值栈ValueStack的原理与生命周期？', 'e9b5b789-41c5-424c-8b51-e32c1894fc38.', null, null, null, null, null, null, '1）VALUESTACK贯穿整个ACTION的生命周期，保存在REQUEST域中，所以VALUESTACK和REQUEST的生命周期一样。当STRUTS2接受一个请求时，会迅速创建ACTIONCONTEXT，VALUESTACK，ACTION。然后把ACTION存放进VALUESTACK，所以ACTION的实例变量可以被OGNL访问。请求来的时候，ACTION、VALUESTACK的生命开始，请求结束，ACTION、VALUESTACK的生命结束； 2）ACTION是多例的，和SERVLET不一样，SERVELT是单例的； 3）每个ACTION的都有一个对应的值栈，值栈存放的数据类型是该ACTION的实例，以及该ACTION中的实例变量，ACTION对象默认保存在栈顶；4）VALUESTACK本质上就是一个ARRAYLIST； 5）关于CONTEXTMAP，STRUTS会把下面这些映射压入CONTEXTMAP中：PARAMETERS:该MAP中包含当前请求的请求参数REQUEST:该MAP中包含当前REQUEST对象中的所有属性SESSION:该MAP中包含当前SESSION对象中的所有属性 APPLICATION:该MAP中包含当前APPLICATION对象中的所有属性ATTR:该MAP按如下顺序来检索某个属性:REQUEST,SESSION,APPLICATION 6）使用OGNL访问值栈的内容时，不需要#号，而访问REQUEST、SESSION、APPLICATION、ATTR时，需要加#号； 7）注意：STRUTS2中，OGNL表达式需要配合STRUTS标签才可以使用。如：<S:PROPERTYVALUE=\"NAME\"/> 8）在STRUTS2配置文件中引用OGNL表达式,引用值栈的值，此时使用的\"$\"，而不是#或者%;', '', '0', '2017-12-26 20:41:02', '52', '1');
INSERT INTO `topic` VALUES ('5922', '4', '4', 'ActionContext、ServletContext、pageContext的区别？', '4aa680dd-e8cb-4752-a98a-1ec3663b4ef0.', null, null, null, null, null, null, '1）ACTIONCONTEXT是当前的ACTION的上下文环境，通过ACTIONCONTEXT可以获取到REQUEST、SESSION、SERVLETCONTEXT等与ACTION有关的对象的引用；2）SERVLETCONTEXT是域对象，一个WEB应用中只有一个SERVLETCONTEXT，生命周期伴随整个WEB应用； 3）PAGECONTEXT是JSP中的最重要的一个内置对象，可以通过PAGECONTEXT获取其他域对象的应用，同时它是一个域对象，作用范围只针对当前页面，当前页面结束时，PAGECONTEXT销毁， 生命周期是JSP四个域对象中最小的。', '', '0', '2017-12-26 20:41:18', '52', '1');
INSERT INTO `topic` VALUES ('5923', '3', '1', '编译运行以下程序后，关于输出结果的说明正确的是 （ ）：\r\npublic class Conditional{\r\npublic static void main(String args[ ]){\r\nint x=4;\r\nSystem.out.println(“value is “+ ((x&gt;4) ? 99.9 :9));\r\n}\r\n}', '8cac6520-b164-40f1-ad45-061e4d636c7b.', '输出结果为：value is 99.99', '输出结果为：value is 9', '输出结果为：value is 9.0', '编译错误', '', '', 'C', '', '0', '2017-12-26 20:41:42', '64', '1');
INSERT INTO `topic` VALUES ('5924', '4', '4', 'result的type属性中有哪几种结果类型？', '49358403-7493-4b9c-87ac-0fcd71dbd388.', null, null, null, null, null, null, '一共10种：DISPATCHER STRUTS默认的结果类型，把控制权转发给应用程序里的某个资源不能把控制权转发给一个外部资源，若需要把控制权重定向到一个外部资源,应该使用REDIRECT结果类型REDIRECT把响应重定向到另一个资源（包括一个外部资源）\r\n10/40 REDIRECTACTION把响应重定向到另一个ACTION FREEMARKER、VELOCITY、CHAIN、HTTPHEADER、XSLT、PLAINTEXT、STREAM', '', '0', '2017-12-26 20:41:52', '52', '1');
INSERT INTO `topic` VALUES ('5925', '4', '4', '拦截器的生命周期与工作过程？', 'd555ceed-7be5-493e-beb2-7e1bf81dcc3e.', null, null, null, null, null, null, '1）每个拦截器都是实现了INTERCEPTOR接口的JAVA类； 2）INIT():该方法将在拦截器被创建后立即被调用,它在拦截器的生命周期内只被调用一次.可以在该方法中对相关资源进行必要的初始化； 3）INTERCEPT(ACTIONINVOCATIONINVOCATION):每拦截一个动作请求,该方法就会被调用一次； 4）DESTROY:该方法将在拦截器被销毁之前被调用,它在拦截器的生命周期内也只被调用一次； 5）STRUTS2中有内置了18个拦截器。', '', '0', '2017-12-26 20:42:13', '52', '1');
INSERT INTO `topic` VALUES ('5926', '4', '4', 'struts2如何完成文件的上传？', 'a1cb65cb-68cc-48cf-9ecc-96ea0e628501.', null, null, null, null, null, null, '1、JSP页面： 1）JSP页面的上传文件的组件：<S:FILENAME=”UPLOAD”/>，如果需要一次上传多个文件,就必须使用多个FILE标签,但它们的名字必须是相同的，即： NAME=“XXX”的值必须一样； 2）必须把表单的ENCTYPE属性设置为：MULTIPART/FORM-DATA；3）表单的方法必须为POST，因为POST提交的数据在消息体中，而无大小限制。2、对应的ACTION： 1）在ACTION中新添加3个和文件上传相关的属性； 2）如果是上传单个文件,UPLOADIMAGE属性的类型就是JAVA.IO.FILE,它代表被上传的文件,第二个和第三个属性的类型是STRING,它们分别代表上传文件的文件名和文件类型，定义方式是分别是：JSP页面FILE组件的名称+CONTENTTYPE,JSP页面FILE组件的名称+FILENAME 3）如果上上传多个文件,可以使用数组或LIST', '', '0', '2017-12-26 20:42:32', '52', '1');
INSERT INTO `topic` VALUES ('5927', '3', '1', '关于以下application的说明，正确的是（ ）：\r\n1． class StaticStuff\r\n2． {\r\n3． static int x=10；\r\n4． static { x+=5；}\r\n5． public static void main（String args[ ]）\r\n6． {\r\n7． System.out.println(“x=” + x);\r\n8． }\r\n9． static { x/=3;}\r\n10. }', '84d84e61-fc14-475e-b8c7-0453a911cfec.', '4行与9行不能通过编译，因为缺少方法名和返回类型', '9行不能通过编译，因为只能有一个静态初始化器', '编译通过，执行结果为：x=5', '编译通过，执行结果为：x=3', '', '', 'C', '', '0', '2017-12-26 20:42:35', '64', '1');
INSERT INTO `topic` VALUES ('5928', '3', '1', '关于以下程序代码的说明正确的是（ ）：\r\n1．class HasStatic{\r\n2． private static int x=100；\r\n3． public static void main(String args[ ]){\r\n4． HasStatic hs1=new HasStatic( );\r\n5． hs1.x++;\r\n6． HasStatic hs2=new HasStatic( );\r\n7． hs2.x++;\r\n8． hs1=new HasStatic( );\r\n9． hs1.x++;\r\n10． HasStatic.x–;\r\n11． System.out.println(“x=”+x);\r\n12． }\r\n13．}', 'c4e7a57e-e6a2-488a-8774-3e6690c824ae.', '5行不能通过编译，因为引用了私有静态变量', '10行不能通过编译，因为x是私有静态变量', '程序通过编译，输出结果为：x=102', '程序通过编译，输出结果为：x=103', '', '', 'C', '', '0', '2017-12-26 20:43:09', '64', '1');
INSERT INTO `topic` VALUES ('5929', '3', '2', 'Java语言具有较好的安全性和可移植性及与平台无关等特性。', 'c75b1b64-d7e4-46a7-9f5c-01170fdf0c9d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 20:43:26', '53', '1');
INSERT INTO `topic` VALUES ('5930', '3', '2', 'Java语言的基本数据类型有4种：整型、浮点型、字符型和布尔型。', 'b3256196-0479-4520-9788-cf363949d49d.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 20:43:45', '53', '1');
INSERT INTO `topic` VALUES ('5931', '3', '1', '正确的有（）', '17225d1a-230c-4900-91bb-33dce43b3591.', 'class中的constructor不可省略', 'constructor必须与class同名，但方法不能与class同名', ' constructor在一个对象被new时执行', '一个class只能定义一个constructor', '', '', 'C', '', '0', '2017-12-26 20:43:53', '64', '1');
INSERT INTO `topic` VALUES ('5932', '3', '2', '组成Java Application的若干类中，有且仅有一个主类，只有主类中含有主方法main。', 'e216ad52-5ef5-483c-b9a8-8b49596e52c0.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 20:43:54', '53', '1');
INSERT INTO `topic` VALUES ('5933', '3', '2', '数据由高类型转换到低类型时候，采用强制转换，数据精度要受到损失。', 'e719f12d-171e-406e-bdc4-0b738ca2fe02.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 20:44:07', '53', '1');
INSERT INTO `topic` VALUES ('5934', '3', '2', '静态方法只能处理静态变量。', '83a35262-ebf1-44fb-8723-88ca9e0284b9.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 20:44:20', '53', '1');
INSERT INTO `topic` VALUES ('5935', '4', '4', '切入点(Pointcut)', '1c5cfd14-ec58-4844-a662-54b1fbb0bddc.', null, null, null, null, null, null, '匹配连接点（JOINPOINT）的断言。通知和一个切入点表达式关联，并在满足这个切入点的连接点上运行（例如，当执行某个特定名称的方法时）。切入点表达式如何和连接点匹配是AOP的核心：SPRING缺省使用ASPECTJ切入点语法。', '', '0', '2017-12-26 20:44:28', '52', '1');
INSERT INTO `topic` VALUES ('5936', '3', '1', '哪种说法是正确的（）', '0a7a018a-a6ce-42e1-b8e9-97876067a942.', '实例方法可直接调用超类的实例方法', '实例方法可直接调用超类的类方法', '实例方法可直接调用其他类的实例方法', '实例方法可直接调用本类的类方法', '', '', 'D', '', '0', '2017-12-26 20:44:30', '64', '1');
INSERT INTO `topic` VALUES ('5937', '4', '4', '通知(Advice)', '3f18c43a-e31e-463d-82d6-0236fde6e182.', null, null, null, null, null, null, '在切面的某个特定的连接点（JOINPOINT）上执行的动作。通知有各种类型，其中包括“AROUND”、“BEFORE”和“AFTER”等通知。通知的类型将在后面部分进行讨论。许多AOP框架，包括SPRING，都是以拦截器做通知模型，并维护一个以连接点为中心的拦截器链。', '', '0', '2017-12-26 20:44:48', '52', '1');
INSERT INTO `topic` VALUES ('5938', '4', '4', '引入(Introduction)', '39460fad-d7ee-4a5e-a129-215d32bf7fec.', null, null, null, null, null, null, '也被称为内部类型声明（INTER-TYPEDECLARATION））。声明额外的方法或者某个类型的字段。SPRING允许引入新的接口（以及一个对应的实现）到任何被代理的对象。例如，你可以使用一个引入来使BEAN实现ISMODIFIED接口，以便简化缓存机制。', '', '0', '2017-12-26 20:45:04', '52', '1');
INSERT INTO `topic` VALUES ('5939', '3', '1', '哪个叙述是正确的（ ）', '8f4b690a-1d16-4228-9e2a-e9e831a30e5d.', 'abstract修饰符可修饰字段、方法和类', ' 抽象方法的body部分必须用一对大括号{ }包住', '声明抽象方法，大括号可有可无', '声明抽象方法不可写出大括号', '', '', 'D', '', '0', '2017-12-26 20:45:09', '64', '1');
INSERT INTO `topic` VALUES ('5940', '3', '1', '在下列概念中，Java语言只保留了', '80bd0967-4361-4185-8af2-ca8379dbe628.', '运算符重载', '结构和联合', '指针', '方法重载', '', '', 'D', '', '0', '2017-12-26 20:45:17', '53', '1');
INSERT INTO `topic` VALUES ('5941', '4', '4', '目标对象(TargetObject)', '47c41e89-606d-4b08-8da2-d256fd82b714.', null, null, null, null, null, null, '被一个或者多个切面（ASPECT）所通知（ADVISE）的对象。也有人把它叫做被通知（ADVISED）对象。既然SPRINGAOP是通过运行时代理实现的，这个对象永远是一个被代理(PROXIED)对象。', '', '0', '2017-12-26 20:45:25', '52', '1');
INSERT INTO `topic` VALUES ('5942', '4', '4', 'AOP代理(AOPProxy)', '332c03bf-ff2b-4d2c-bba5-6d716152695c.', null, null, null, null, null, null, 'AOP框架创建的对象，用来实现切面契约（ASPECTCONTRACT）（包括通知方法执行等功能）。在SPRING中，AOP代理可以是JDK动态代理或者CGLIB代理。注意：SPRING2.0最新引入的基于模式（SCHEMA-BASED）风格和@ASPECTJ注解风格的切面声明，对于使用这些风格的用户来说，代理的创建是透明的。', '', '0', '2017-12-26 20:45:42', '52', '1');
INSERT INTO `topic` VALUES ('5943', '3', '1', '下列类定义中，不正确的是', '341a06c7-df7b-4c2b-b38d-ad3f9c943e6e.', 'class x { .... }  ', 'static class x implements y1,y2 { .... } ', 'public class x extends Applet { .... } ', 'class x extends y { .... }', '', '', 'B', '', '0', '2017-12-26 20:45:50', '53', '1');
INSERT INTO `topic` VALUES ('5944', '4', '4', '织入(Weaving)', 'e28d6780-d828-45ad-8534-242953013953.', null, null, null, null, null, null, '把切面（ASPECT）连接到其它的应用程序类型或者对象上，并创建一个被通知（ADVISED）的对象。这些可以在编译时（例如使用ASPECTJ编译器），类加载时和运行时完成。SPRING和其它纯JAVAAOP框架一样，在运行时完成织入。', '', '0', '2017-12-26 20:46:00', '52', '1');
INSERT INTO `topic` VALUES ('5945', '3', '1', '设i、j为int型变量名，a为int型数组名，以下选项中，正确的赋值语句是', '2f02d2b3-b816-4aa0-8e88-74beca642dbf.', 'a[0] = 7;', 'i = i + 2 ', 'i++ - --j;', 'a(0) = 66; ', '', '', 'A', '', '0', '2017-12-26 20:46:26', '53', '1');
INSERT INTO `topic` VALUES ('5946', '3', '1', 'Java语言的类间的继承关系是', '41e8d826-15fe-43a4-ac9a-2ef50f6ed2b2.', '多重的', '单重的', '线程的', '不能继承', '', '', 'B', '', '0', '2017-12-26 20:46:49', '53', '1');
INSERT INTO `topic` VALUES ('5947', '4', '4', 'Hibernate有哪几种查询数据的方式', 'b8470638-6994-4167-b775-de7fabaad9de.', null, null, null, null, null, null, '3种：HQL、条件查询QBC(QUERYBYCRITERIA)、原生SQL（通过CREATESQLQUERY建立）', '', '0', '2017-12-26 20:46:54', '52', '1');
INSERT INTO `topic` VALUES ('5948', '3', '1', '设有定义 float x=3.5f, y=4.6f, z=5.7f；则以下的表达式中，值为true的是', 'd832b3b2-fedd-4111-adb4-5b4ce028dbc1.', 'x > y || x > z ', 'z > ( y + x ) ', 'x != y', 'x < y & ! ( x < z ) ', '', '', 'C', '', '0', '2017-12-26 20:47:30', '53', '1');
INSERT INTO `topic` VALUES ('5949', '4', '4', 'JDBChibernate和ibatis的区别', 'cc5c7b3d-4725-4ead-9399-f5a97c7d7ac7.', null, null, null, null, null, null, 'JDBC:手动 手动写SQL DELETE、INSERT、UPDATE要将对象的值一个一个取出传到SQL中,不能直接传入一个对象。 SELECT:返回的是一个\r\nRESULTSET，要从RESULTSET中一行一行、一个字段一个字段的取出，然后封装到一个对象中，不直接返回一个对象。IBATIS的特点:半自动化SQL\r\n要手动写 DELETE、INSERT、UPDATE:直接传入一个对象SELECT:直接返回一个对象HIBERNATE:全自动不写SQL,自动封装 DELETE、INSERT、UPDATE:直接传入一个对象SELECT:直接返回一个对象', '', '0', '2017-12-26 20:47:34', '52', '1');
INSERT INTO `topic` VALUES ('5950', '3', '1', '下列修饰符中，定义类头时能使用的修饰符是', '41093886-1883-486a-bb85-8be31b40ef84.', 'private ', 'static ', 'abstract ', 'protected ', '', '', 'C', '', '0', '2017-12-26 20:47:49', '53', '1');
INSERT INTO `topic` VALUES ('5951', '3', '1', '设i、j、k为类x中定义的int型变量名，下列类x的构造函数中不正确的是', 'ad65066d-956b-4be8-a85a-66adec8db6e4.', 'x( int m){ ... }', 'void x( int m){ ... } ', 'x( int m, int n){ ... }', 'x( int h,int m,int n){ ... }', '', '', 'B', '', '0', '2017-12-26 20:48:21', '53', '1');
INSERT INTO `topic` VALUES ('5952', '3', '1', '下列对封装性的描述中，错误的是', 'b9968a1c-1d62-4299-a088-92efa230574f.', '封装体包含了属性和行为', '封装使得抽象的数据类型提高了可重用性', '被封装的某些信息在封装体外是不可见的', '封装体中的属性和行为的访问权限是相同的', '', '', 'D', '', '0', '2017-12-26 20:48:44', '53', '1');
INSERT INTO `topic` VALUES ('5953', '4', '4', 'hibernate怎么实现类之间的关系', '35932b0d-4d9f-44fc-9b29-50ec81a821f2.', null, null, null, null, null, null, '类与类之间的关系主要体现在表与表之间的关系进行操作，它们都是对对象进行操作，我们程序中把所有的表与类都映射在一起，它们通过配置文件中的MANY-TO-ONE、ONE-TO-MANY、MANY-TO-MANY、', '', '0', '2017-12-26 20:48:55', '52', '1');
INSERT INTO `topic` VALUES ('5954', '3', '1', '下列关于Applet程序的描述中，错误的是 ', '8954336a-a24c-4ec7-aac7-1eb435998a9c.', 'Applet程序的主类必须是Applet类得子类', 'Applet不是完整的独立程序', 'Applet程序的主类中应有一个main（）方法', 'Applet的字节码文件必须嵌套在一个HTML文件中', '', '', 'C', '', '0', '2017-12-26 20:49:33', '53', '1');
INSERT INTO `topic` VALUES ('5955', '3', '1', '以下方法不属于迭代器（Iterator）接口所定义的方法的是', '97603a23-ee2d-4ec4-bfe4-498ba097d441.', 'hasNext（）', 'next（）', 'remove（）', 'nextElement（）', '', '', 'D', '', '0', '2017-12-26 20:50:05', '53', '1');
INSERT INTO `topic` VALUES ('5956', '3', '4', '面向对象编程（OOP）', 'c8cd0ce0-ec82-4541-bc4e-d6adb9809d0e.', null, null, null, null, null, null, 'JAVA是一个支持并发、基于类和面向对象的计算机编程语言。下面列出了面向对象软件开发的优点：\r\n\r\n代码开发模块化，更易维护和修改。\r\n\r\n代码复用。\r\n\r\n增强代码的可靠性和灵活性。\r\n\r\n增加代码的可理解性。', '', '0', '2017-12-26 20:50:08', '52', '1');
INSERT INTO `topic` VALUES ('5957', '3', '4', '多态', '3ce83cc1-cc80-4b0c-a07d-e2d74929caa2.', null, null, null, null, null, null, '多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面。', '', '0', '2017-12-26 20:50:35', '52', '1');
INSERT INTO `topic` VALUES ('5958', '3', '4', '抽象', '14825dfd-ddf7-4ead-984a-7639680aefaf.', null, null, null, null, null, null, '抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。JAVA支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。', '', '0', '2017-12-26 20:50:55', '52', '1');
INSERT INTO `topic` VALUES ('5959', '3', '3', '形式参数指的是方法被__定义____ 时的参数行，实际参数是方法被_____ 时所传递进去的变量或值。', '8870af2b-1051-4cff-907a-e40a8ea07d98.', null, null, null, null, null, null, '调用', '', '0', '2017-12-26 20:52:12', '53', '1');
INSERT INTO `topic` VALUES ('5960', '3', '3', '如果想把一个对象写入一个流，那么这个类就必须实现             \r\n 接口 。', '109a2c8b-f6f9-4949-80ba-6ec115e271fb.', null, null, null, null, null, null, 'SERALIZABLE', '', '0', '2017-12-26 20:52:26', '53', '1');
INSERT INTO `topic` VALUES ('5961', '3', '3', '程序中实现多线程的方法有两种:继承Thread类和实现___ _    \r\n 接\r\n口。', 'a97f8e38-b8ce-454c-becf-9e4119a3d0f9.', null, null, null, null, null, null, 'RUNABLE', '', '0', '2017-12-26 20:52:40', '53', '1');
INSERT INTO `topic` VALUES ('5962', '3', '3', '多线程中，可以通过调用相应的     \r\n   方法来修改一个线程的相对优先级。 ', '87a6f44c-53bb-474e-a365-0ea82d4133ab.', null, null, null, null, null, null, 'SETPRIORITY() ', '', '0', '2017-12-26 20:53:02', '53', '1');
INSERT INTO `topic` VALUES ('5963', '4', '3', '通过Ajax，客户端获取的数据主要有两种类型：文本型和   \r\n      ', '9d1d17f4-095a-478a-a8ca-d893f55945be.', null, null, null, null, null, null, 'XML', '', '0', '2017-12-26 20:53:16', '53', '1');
INSERT INTO `topic` VALUES ('5964', '33', '3', ' Socket通常也称为套接字 ，用于描述 __     和 _ _', '8a0b6f2e-98c7-49b4-b275-83a5715f01e5.', null, null, null, null, null, null, 'IP，接口 ', '', '0', '2017-12-26 20:53:32', '53', '1');
INSERT INTO `topic` VALUES ('5965', '3', '1', '在JAVA中，如果父类中某些方法不包含任何逻辑，并且需要由子类重写.应该使用(  )关键字来声明父类的这些方法:', '3d3f0307-f27f-425b-8f1a-5e6db733d398.', 'final ', 'static ', 'abstract', 'void ', '', '', 'C', '', '0', '2017-12-26 20:53:56', '53', '1');
INSERT INTO `topic` VALUES ('5967', '3', '1', '在JAVA中，已定义两个接口B和C,要定义一个实现这两个接口的类，以下语句正确的是（ ）。', '4f4e20a0-34f7-4b35-bd15-73adbc108290.', 'interface A extend B,C ', 'interface A implements B,C', 'class A implements B,C ', 'class A implements B, implements C', '', '', 'C', '', '0', '2017-12-26 20:54:28', '53', '1');
INSERT INTO `topic` VALUES ('5969', '4', '1', '在java中.在使用JDBC时。对于多次调用同一条SQL语句的情况,  使用(  )通常会提高效。', 'f70bf87a-cc67-4c43-9c5e-400cd17aacc6.', 'Statement', 'CallableStatement ', 'PreparedStatement ', 'PrarmeterStatement ', '', '', 'C', '', '0', '2017-12-26 20:55:04', '53', '1');
INSERT INTO `topic` VALUES ('5970', '4', '1', '下列不能控制一个Servlet的生命周期方的法是：', 'e08d877b-47e3-4838-980b-aa3644ce7e2d.', 'service', 'destroy ', 'doPost ', 'init ', '', '', 'C', '', '0', '2017-12-26 20:55:26', '53', '1');
INSERT INTO `topic` VALUES ('5971', '3', '1', '.java语言中int类型数据占用多少位?(   )。', '452efceb-b4a4-4856-bfbf-525b8dcfdc0e.', '32', '64', '16', '20', '', '', 'A', '', '0', '2017-12-26 20:55:53', '53', '1');
INSERT INTO `topic` VALUES ('5972', '3', '4', '什么是Applet？', '39e4463d-9e84-44e2-b6e8-ae19ec094a77.', null, null, null, null, null, null, 'JAVA APPLET是能够被包含在HTML页面中并且能被启用了JAVA的客户端浏览器执行的程序。APPLET主要用来创建动态交互的WEB应用程序。', '', '0', '2017-12-26 20:56:39', '52', '1');
INSERT INTO `topic` VALUES ('5973', '4', '1', ' ServletContext对象是如何创建的?(   )。', '99356863-5c1e-48ef-94e6-ac313cf0c794.', '由 Servlet容器创建，对于每个HTTP请求.Servlet容器都会创建     一个ServletContext对象', '由JavaWeb 应用本身为自己创建一个ServletContext对象', '由Servlet容器创建，对于每个JaveWeb应用，在启动时，Servlet容器都会创建一个ServletContext对象', '由 Servlet容器创建，对于所有HTTP请求.Servlet容器都只会创建一个ServletContext对象', '', '', 'C', '', '0', '2017-12-26 20:57:31', '53', '1');
INSERT INTO `topic` VALUES ('5974', '4', '1', '在JSP中不能在不同用户之间共享数据的方法是(   )。', '727ae6f7-9b6b-482c-abce-27670bd6ad6e.', '通过cookie ', '利用文件系统', '利用数据库', '通过ServletContext对象', '', '', 'A', '', '0', '2017-12-26 20:57:57', '53', '1');
INSERT INTO `topic` VALUES ('5975', '4', '1', '以下哪个不是Collection的子接口?(    )。', 'ac7cae3f-bc5c-45d6-a024-e2679a1a22e7.', 'List ', 'Set ', 'Map ', 'SortedSet ', '', '', 'C', '', '0', '2017-12-26 20:58:17', '53', '1');
INSERT INTO `topic` VALUES ('5976', '33', '1', '下面正确的创建 Socket 的语句是(    )。', 'b5ec1965-880d-455f-a336-6471b6a08a1b.', 'Socket a  =  new Soeket(80): ', 'Socket b  =  new Socket(\"130. 3. 4. 5\", 80):', 'ServerSocket c  =  new Socket(80) ', 'ServerSocket d =  new Socket (\"130. 3. 4, 5\", 80)', '', '', 'C', '', '0', '2017-12-26 20:58:45', '53', '1');
INSERT INTO `topic` VALUES ('5977', '3', '1', '为了区分重载多态中同名的不同方法,要求:(   )。', 'a28b9dbd-6dba-4d2a-a21b-e239a8f918bc.', '参数名不同', '采用不同的形式参数列表', '返回值类型不同', '选项A, B, C都对', '', '', 'B', '', '0', '2017-12-26 20:59:21', '53', '1');
INSERT INTO `topic` VALUES ('5978', '4', '4', 'BeanFactory的作用是什么？ ', '451b6c6e-58e3-4505-af72-866d1b3e1d08.', null, null, null, null, null, null, 'BEANFACTORY是配置、创建、管理BEAN的容器，有时候也称为BEAN上下文。BEAN与BEAN的依赖关系，也是由BEANFACTORY负责维护的。 ', '', '0', '2017-12-26 20:59:35', '52', '1');
INSERT INTO `topic` VALUES ('5979', '3', '1', '下面是有关子类调用父类构造函数的描述正确的是:(    )', 'ff11c9bd-f8ac-434b-b36a-9a1480add264.', '子类定义了自己的构造函数.就不会调用父类的构造函数 ', '子类必须通过Super关键字调用父类有参数的构造函数 ', '如果子类的构造没有通过super调用父类构造函数，那么子类会 先调用子类自己的构造函数，再调用父类不含参数的构造函数。', '创建子类的对象时，先调用子类自己的构造函数，然后调用父      类的构造函数', '', '', 'B', '', '0', '2017-12-26 20:59:53', '53', '1');
INSERT INTO `topic` VALUES ('5980', '4', '4', 'bean在spring的容器中两种基本行为是什么? ', '1a03d343-761c-42a2-aab9-64f1f0c8f1e9.', null, null, null, null, null, null, 'SINGLETON:单态   \r\nNON-SINGLETON或PROTOTYPE:原型   ', '', '0', '2017-12-26 20:59:57', '52', '1');
INSERT INTO `topic` VALUES ('5981', '4', '4', 'spring配置文件中的ref元素的作用是什么?它的两个基本属性是什么? ', 'c2e41a8f-cd11-4b81-800c-fb75ab7dadbf.', null, null, null, null, null, null, '用于指定属性值为SPRING容器中的其它BEAN.两个基本属性是BEAN和LOCAL   ', '', '0', '2017-12-26 21:00:09', '52', '1');
INSERT INTO `topic` VALUES ('5982', '3', '1', '在Java中，负责对字节代码解释执行的是(    )。', 'd5923e0c-3f57-4e34-93cb-fd24be548e90.', '垃圾回收器', '虚拟机', '编译器', '多线程机制', '', '', 'C', '', '0', '2017-12-26 21:00:13', '53', '1');
INSERT INTO `topic` VALUES ('5983', '4', '4', '什么是DWR?它有哪些功能？', '6bff7f4f-e77e-4d03-bb07-e7fa859dfeae.', null, null, null, null, null, null, 'DWR(DIRECT WEB REMOTING)是一个WEB远程调用框架.   可以在客户端利用JAVASCRIPT直接调用服务端的JAVA方法并返回值给JAVASCRIPT   DWR根据JAVA类来动态生成JAVASCRIP代码.   \r\n支持DOM TREES,支持SPRING,支持COMMONS-LOGGING  ', '', '0', '2017-12-26 21:00:24', '52', '1');
INSERT INTO `topic` VALUES ('5984', '6', '4', 'Ajax的工作原理 ？', '8d37d40b-ba86-4bfc-9002-7c5f43f3b993.', null, null, null, null, null, null, '在会话的开始，浏览器加载AJAX引擎   \r\n请求动作通过JAVASCRIPT调用AJAX引擎来代替.    \r\n引擎负责绘制用户界面以及与服务器端通讯。   \r\nAJAX引擎采用异步交互过程－－不用等待服务器的通讯。 ', '', '0', '2017-12-26 21:00:35', '52', '1');
INSERT INTO `topic` VALUES ('5985', '4', '4', 'XMLHttpRequest对象是什么，它有哪些常用方法？', '5e9e031f-fa91-4da1-a674-248e9502d44e.', null, null, null, null, null, null, '一个 JAVASCRIPT 对象。是AJAX 的核心。   \r\n该对象的方法和属性。   \r\n    OPEN()：建立到服务器的新请求。    \r\n    SEND()：向服务器发送请求。    \r\n    ABORT()：退出当前请求。    \r\n    READYSTATE：提供当前 HTML 的就绪状态。    \r\n    RESPONSETEXT：服务器返回的请求响应文本。', '', '0', '2017-12-26 21:01:00', '52', '1');
INSERT INTO `topic` VALUES ('5986', '3', '1', '一个java程序运行从上到下的环境次序是(    )。', '857fb4e2-c36b-42b7-b40a-374fdcaefe7f.', '操作系统、Java程序、jre/jvm、硬件 ', 'jre/jvm、Java程序、硬件、操作系统', 'java程序、jre/jvm、操作系统、硬件', 'java程序、操作系统、jre/jvm、硬件', '', '', 'B', '', '0', '2017-12-26 21:01:02', '53', '1');
INSERT INTO `topic` VALUES ('5987', '6', '4', '什么是Ajax?', 'c13fe476-a8a9-4c07-b20d-3cde078a8767.', null, null, null, null, null, null, 'AJAX（ASYNCHRONOUS JAVASCRIPT AND XML），它不是一门新的语言或技术，而是多种技术的综合，包括：   \r\nJAVASCRIPT   \r\nXHTML   \r\nCSS   \r\nDOM   \r\nXML   \r\nXSTL   \r\nXMLHTTPREQUEST   ', '', '0', '2017-12-26 21:01:17', '52', '1');
INSERT INTO `topic` VALUES ('5988', '6', '4', ' 同步与异步的区别？', '6d3cd059-aa05-494d-968a-52ae38431b07.', null, null, null, null, null, null, '普通B/S模式（同步）AJAX技术（异步）   \r\n同步：提交请求->等待服务器处理->处理完毕返回 这个期间客户端浏览器不能干任何事，而异步则是 请求通过事件触发->服务器处理->处理完毕   \r\n同步是阻塞模式，异步是非阻塞模式。     \r\n同步(发送方发出数据后，等接收方发回) 异步(发送方发出数据后，不等接收方发回响应)', '', '0', '2017-12-26 21:01:38', '52', '1');
INSERT INTO `topic` VALUES ('5989', '4', '4', 'Struts+Hibernate+Spring开发模式中Hibernate扮演的角色', '12e15c6b-a3a1-4f75-a757-d73de5791847.', null, null, null, null, null, null, 'HIBERNATE扮演的是数据持久层 它的作用是实现持久化对象和数据库表   \r\n之间的映射，形成持久化对象和数据库表中数据的一个转换平台  ', '', '0', '2017-12-26 21:01:52', '52', '1');
INSERT INTO `topic` VALUES ('5990', '4', '4', '什么是Hibernate 的抓取策略', 'b6c91b98-50be-4cb2-8c7b-4be14639d33c.', null, null, null, null, null, null, '抓取策略是指当应用程序需要利用关联关系进行对象获取的时候。', '', '0', '2017-12-26 21:02:05', '52', '1');
INSERT INTO `topic` VALUES ('5991', '4', '4', '何为容器', '444d97b7-554f-4938-a86f-956eaddaf3f5.', null, null, null, null, null, null, '容器就是符合某种规范的能够提供一系列服务的管理器。', '', '0', '2017-12-26 21:02:16', '52', '1');
INSERT INTO `topic` VALUES ('5992', '4', '4', 'Spring实现了那几种模式', '5cd9d1c7-f6b2-43a6-8f78-bbd42ade95b6.', null, null, null, null, null, null, '工厂模式 和 单例模式  ', '', '0', '2017-12-26 21:02:30', '52', '1');
INSERT INTO `topic` VALUES ('5993', '4', '4', 'Hibernate实体对象生命周期的三种状态', '6097c030-fda3-47a6-bdd8-493bac4ac34e.', null, null, null, null, null, null, 'TRANSIENT(瞬态) ，PERSISTENT(持久态)和DETACHED(游历态) ', '', '0', '2017-12-26 21:02:45', '52', '1');
INSERT INTO `topic` VALUES ('5994', '4', '4', 'HQL查询参数的处理方法', 'eb333203-faca-406c-8931-5b997fa7de7b.', null, null, null, null, null, null, '直接将参数拼写为HQL语句   \r\n通过参数名称来标识参数 ', '', '0', '2017-12-26 21:02:57', '52', '1');
INSERT INTO `topic` VALUES ('5995', '4', '4', 'Hibernate实体之间的关联关系的三种形式 ', 'c7c655ae-9410-4c10-beac-a81dbf28b09e.', null, null, null, null, null, null, '一对一关联   \r\n       一对多关联   \r\n       多对多关联  ', '', '0', '2017-12-26 21:03:11', '52', '1');
INSERT INTO `topic` VALUES ('5996', '4', '4', 'Hibernate具用的三种检索方式', 'c46a228c-4487-4de0-8ede-52d69f982b90.', null, null, null, null, null, null, 'HQL检索方式   \r\n    QBC检索方式   \r\n    SQL检索方式', '', '0', '2017-12-26 21:03:25', '52', '1');
INSERT INTO `topic` VALUES ('5997', '4', '4', 'spring 中&lt;Bean&gt;的depends-on属性是什么 ', 'ebc0f1b7-27d8-4968-a288-43c6a832603a.', null, null, null, null, null, null, 'DEPENDS-ON用于当前BEAN初始化之前显示的强制一个或多个BEAN被初始化   ', '', '0', '2017-12-26 21:03:40', '52', '1');
INSERT INTO `topic` VALUES ('5998', '4', '4', 'spring 中的BeanWrapper类是什么', '9a42f924-6004-41c3-a2ff-ffe8950acf30.', null, null, null, null, null, null, 'BEANWRAPPER类是一个对JAVABEAN进行各种操作的工具类   \r\nBEANWRAPPER本身是一个接口BEANWRAPPERIMPL实现了BEANWRAPPER', '', '0', '2017-12-26 21:03:55', '52', '1');
INSERT INTO `topic` VALUES ('5999', '4', '4', '&lt;set&gt;元素有一个cascade属性，如果希望Hibernate级联保存集合中的对象，casecade属性应该取什么值？', 'dbcc26cd-ad2d-4616-9366-b4c3df8b9675.', null, null, null, null, null, null, 'SAVE-UPDATE   ', '', '0', '2017-12-26 21:04:10', '52', '1');
INSERT INTO `topic` VALUES ('6000', '4', '4', 'Hibernate中session什么时候是游离态', '23276e78-1cbf-4b9d-b3e1-8384cbcddc80.', null, null, null, null, null, null, 'SESSION.CLOSE();方法后 ', '', '0', '2017-12-26 21:04:23', '52', '1');
INSERT INTO `topic` VALUES ('6001', '4', '4', 'Hibernate中映射文件&lt;hibernate-mapping&gt; inverse属性和cascade属性的区别 ', '02e473eb-c888-4da3-abd2-e5dcce860545.', null, null, null, null, null, null, 'INVERSE属性只存在于集合标记的元素中集合元素包括<SET/>,<MAP/>,<LIST/>,<ARRAY/>,<BAG/>   \r\n  INVERSE属性的作用是是否将对集合对象的修改反射到数据库中 INVERSE=”FALSE”时修改反射到数据库中 INVERSE=”TRUE” 时修改不反射到数据库中   \r\n  CASCADE属性的作用是描述关联对象进行操作时的级联特性，因此只有涉及到关系的元素才有CASCADE属性   ', '', '0', '2017-12-26 21:04:37', '52', '1');
INSERT INTO `topic` VALUES ('6002', '4', '4', 'Hibernate中HQL属于什么语言', '3d030b7e-07fe-4faa-af2c-12013f4ecafa.', null, null, null, null, null, null, 'HQL是面向对象的查询语言，它可以查询以对象形式存在的数据。', '', '0', '2017-12-26 21:05:07', '52', '1');
INSERT INTO `topic` VALUES ('6003', '4', '4', 'Hibernate简介以及主要功能', 'd630c90b-2697-4ce6-a1a2-4a718b5582f5.', null, null, null, null, null, null, 'HIBERNATE是采用ORM模式实现数据持久层的一个优秀的JAVA组件，它提供了   \r\n强大，高效的将JAVA对象进行持久化操作的服务 ', '', '0', '2017-12-26 21:05:20', '52', '1');
INSERT INTO `topic` VALUES ('6004', '4', '4', '怎样构建SessionFactory', '13a4151d-3346-466f-be50-9f913ccc1bb8.', null, null, null, null, null, null, 'HIBERNATE的SESSIONFACTORY接口提供SESSION类的实例，SESSION类用于完成对数据库的操作。   \r\n由于SESSIONFACTORY实例是线程安全的（而SESSION实例不是线程安全的），所以每个操作都可以共用同一个SESSIONFACTORY来获取SESSION。HIBERNATE配置文件分为两种格式，一种是XML格式的配置文件，另一种是JAVA属性文件格式的配置文件 ', '', '0', '2017-12-26 21:05:39', '52', '1');
INSERT INTO `topic` VALUES ('6005', '4', '4', '从XML文件读取配置信息构建SessionFactory的具体步骤如下', 'fc03824c-a50f-445d-80e5-1688c28659f1.', null, null, null, null, null, null, '（1）创建一个CONFIGURATION对象，并通过该对象的CONFIGURA()方法加载HIBERNATE配置文件，代码如下。   \r\nCONFIGURATION CONFIG = NEW CONFIGURATION().CONFIGURE();   \r\nCONFIGURA()方法：用于告诉HIBERNATE加载HIBERNATE.CFG.XML文件。CONFIGURATION在实例化时默认加载CLASSPATH中的HIBERNATE.CFG.XML，当然也可以加载名称不是HIBERNATE.CFG.XML的配置文件，例如WGHHIBERNATE.CFG.XML，可以通过以下代码实现。   \r\nCONFIGURATION CONFIG = NEW CONFIGURATION().CONFIGURE(\"WGHHIBERNATE.CFG.XML\");   \r\n（2）完成配置文件和映射文件的加载后，将得到一个包括所有HIBERNATE运行期参数的CONFIGURATION实例，通过CONFIGURATION实例的BUILDSESSIONFACTORY()方法可以构建一个惟一的SESSIONFACTORY，代码如下:   \r\nSESSIONFACTORY SESSIONFACTORY = CONFIG.BUILDSESSIONFACTORY();   \r\n构建SESSIONFACTORY要放在静态代码块中，因为它只在该类被加载时执行一次。  ', '', '0', '2017-12-26 21:05:57', '52', '1');
INSERT INTO `topic` VALUES ('6006', '4', '4', '写出使用构造方法进行注入的关键代码', 'df3e2a47-7731-4707-b16f-60dcfba8c1ed.', null, null, null, null, null, null, '<BEAN ID=”CONSTRUCTBEAN” CLASS=”COM.HUANG.CONSTRUCTBEAN”>   \r\n <CONSTRUCTOR-ARG><REF  BEAN=”BEAN_1”/></ CONSTRUCTOR-ARG >   \r\n<CONSTRUCTOR-ARG><REF  BEAN=”BEAN_2”/></ CONSTRUCTOR-ARG >   \r\n<CONSTRUCTOR-ARG><REF  BEAN=”BEAN_3”/></ CONSTRUCTOR-ARG >   \r\n</BEAN> ', '', '0', '2017-12-26 21:06:13', '52', '1');
INSERT INTO `topic` VALUES ('6007', '4', '4', '什么是IOC？', '0a37a332-b98f-47d9-b48e-2e6741e217e5.', null, null, null, null, null, null, '不创建对象，但是描述创建它们的方式。在代码中不直接与对象和服务连接，但在配置文件中描述哪一个组件需要哪一项服务。容器（在SPRING 框架中是 IOC 容器） 负责将这些联系在一起。    \r\n就是由容器控制程序之间的关系，而非传统实现中，由程序代码直接操控，控制权由应用代码中转到了外部容器，控制权的转移，就是所谓的反转。 ', '', '0', '2017-12-26 21:06:51', '52', '1');
INSERT INTO `topic` VALUES ('6008', '3', '4', '2EE是技术还是平台还是框架？', '5410296b-545c-43b3-9abf-c2f262a8fef2.', null, null, null, null, null, null, ' J2EE本身是一个标准，一个为企业分布式应用的开发提供的标准平台。   \r\n    J2EE也是一个框架，包括JDBC、JNDI、RMI、JMS、EJB、JTA等技术。', '', '0', '2017-12-26 21:07:15', '52', '1');
INSERT INTO `topic` VALUES ('6009', '4', '4', 'spring框架的7个模块是什么？', 'b8bf482a-358f-4ca8-9583-0d855907fdcf.', null, null, null, null, null, null, '(1) SPRING  AOP  --面象切面编程   \r\n   (2)SPRING  DAO  --数据访问对象   \r\n   (3)SPRING ORM   --对象关系影射   \r\n(4)SPRING CONTECT  -- 上下文配置，向SPRING框架提供上下文信息   \r\n(5)SPRING WEB  - -WEB上下文模块   \r\n(6)\\SPRING WEB-MVC  --实现了MVC   \r\n(7)SPRING CORE –核心容器提供SPRING框架基本功能', '', '0', '2017-12-26 21:07:40', '52', '1');
INSERT INTO `topic` VALUES ('6010', '4', '4', '什么是AOP 请祥述', 'b828d7e3-9dcb-4fb5-bbef-e57955f1ae07.', null, null, null, null, null, null, '是面向切面编程    \r\n     AOP 把软件系统分为两个部分：核心关注点和横切关注点。所谓的核心关注点，是业务处理的主要流程，也就是说这个解决方案要做的事。所谓横切关注点，是与核心业务无关的部分，它把常发生在核心关注点的多处，而各处基本相似，如日志，事务，权限等 。', '', '0', '2017-12-26 21:08:07', '52', '1');
INSERT INTO `topic` VALUES ('6011', '4', '4', 'Hinbernate和EJB的区别', 'ff3d4dc8-2c3b-4195-b88f-f5825a99e492.', null, null, null, null, null, null, 'HIBERNATE可以用在任何JDBC使用的场合，例如JAVA应用程序的数据库访问代码，DAO接口的实现类，甚至可以是BMP里面的访问数据库的代码。从这个意义上来说，HIBERNATE和EB不是一个范畴的东西，也不存在非此即彼的关系。', '', '0', '2017-12-26 21:08:19', '52', '1');
INSERT INTO `topic` VALUES ('6012', '4', '4', ' 一般情况下，关系数据模型与对象模型之间有哪些匹配关系', 'cc332b24-ba0d-42ea-a106-73f649a62f1d.', null, null, null, null, null, null, '表对应类   \r\n记录对应表的对象   \r\n表的字段对应类的属性  ', '', '0', '2017-12-26 21:08:32', '52', '1');
INSERT INTO `topic` VALUES ('6013', '32', '4', '事务隔离级别是由谁实现的？', '8e437e8c-f920-4158-8fbc-ac57b5e483d4.', null, null, null, null, null, null, '数据库系统', '', '0', '2017-12-26 21:08:46', '52', '1');
INSERT INTO `topic` VALUES ('6014', '4', '4', '在Spring说说Bean的alias元素和name属性有什么区别 ', '49ca5d56-d141-43db-8b68-1c384283f481.', null, null, null, null, null, null, '<BEAN>元素NAME属性可以一次为<BEAN>定义多个别名   \r\n       例：<BEAN ID=”BEANNAME” NAME=”ALIAS_1,ALIAS_2”/>   \r\n       <ALIAS>元素一次只能定义一个别名   \r\n         例：<ALIAS NAME=”BEANNAME” ALIAS=”TONAME”/>   \r\n      注意: ALIAS元素NAME属性是BEAN实例名   ', '', '0', '2017-12-26 21:09:07', '52', '1');
INSERT INTO `topic` VALUES ('6015', '4', '4', 'Bean 的作用域用几种，请祥叙', '0f078172-8cc5-438a-bf3b-4732da6d6ad5.', null, null, null, null, null, null, '用5种    \r\n分别是:    \r\n1. SINGLETON  IOC容器只会创建一个BEAN的唯一的实例   \r\n2. PROTOTYPE  IOC容器在每次请求该BEAN的时候都创建一个新的实例   \r\n3. REQUEST 在一次HTTP请求中 IOC容器会返回该BEAN的同一个实例，而对于不同的用户请求，则会返回不同的实例   \r\n4. SESSION 在一次HTTP请求SESSION 中 IOC容器会返回该BEAN的同一个实例，而对于不同的用户SESSION，则会返回不同的实例   \r\n5. GLOBAL SESSION在一个全局HTTP请求SESSION 中', '', '0', '2017-12-26 21:09:23', '52', '1');
INSERT INTO `topic` VALUES ('6016', '4', '4', '简述什么是ORM', '47c6a71f-11cd-4336-ae48-0a42d41da29b.', null, null, null, null, null, null, 'ORM的全称是OBJECT-RELATIONAL MAPPING 翻译成中文就是“对象－关系映射”   \r\nORM组件的主要功能就是实现实体域对象的持久化并封装数据库访问的细节   \r\n   ORM本身并不是一个组件，它是具用某种功能的组件的总称，也可以说是一种框   \r\n架结构   ', '', '0', '2017-12-26 21:10:29', '52', '1');
INSERT INTO `topic` VALUES ('6017', '4', '4', 'struts中的几个关键对象的作用(说说几个关键对象的作用)', '1047f8ee-888a-443f-a576-29db2fc3aa33.', null, null, null, null, null, null, 'STRUTS中的几个关键对象:ACTION GLOBAL(设置语言靠它了) MODULECONFIG(获取MAPPING)', '', '0', '2017-12-26 21:10:43', '52', '1');
INSERT INTO `topic` VALUES ('6018', '4', '4', 'Action的作用', '86c8adb6-a3c6-4c89-944e-a8821c2f4fad.', null, null, null, null, null, null, 'ACTION的作用是接受用户的请求，通过调用业务方法实现业务处理的功能。', '', '0', '2017-12-26 21:10:57', '52', '1');
INSERT INTO `topic` VALUES ('6019', '4', '4', '在通常情况下软件系统由表示层，业务层，持久层和数据库层组成，Struts属于哪一层？', '237d7751-8326-4a11-bbd6-4ca5d6812fe1.', null, null, null, null, null, null, 'STRUTS属于表示层组件，它的作用主要体现在以下几个方面：   \r\n1)     输出用户界面和接收用户的输入，实现与用户的交互。   \r\n2) 调用业务方法，完成业务处理，还要包括处理后的显示工作。', '', '0', '2017-12-26 21:11:15', '52', '1');
INSERT INTO `topic` VALUES ('6020', '4', '4', 'Struts标签库由哪些组件组成？', '8b05e197-dd64-4f7e-83ad-cff18d921a8e.', null, null, null, null, null, null, '标签库是组合在一起的一组JSP自定义标签。   \r\n     标签库由以下组件组成：   \r\n1) 标签处理程序   \r\n2) 标签库描述符(TLD)文件   \r\n3) 应用程序部署描述符(WEB.XML)文件   \r\n4) JSP页面中标签库的声明   ', '', '0', '2017-12-26 21:11:31', '52', '1');
INSERT INTO `topic` VALUES ('6021', '26', '4', '简述CC攻击原理？如何防止CC 攻击？受到CC攻击如何处理？', '46280e04-ae4f-4eac-9d0b-a30653df5aae.', null, null, null, null, null, null, 'CC攻击的原理就是攻击者\r\n\r\n控制某些主机\r\n\r\n不停地发大量数据包\r\n\r\n给对方服务器造成服务器资源耗尽，一直到宕机崩溃。CC主要是用来攻击页面的，每个人都有这样的体验：当一个网页访问的人数特别多的时候，打开网页就慢了，CC就是模拟多个用户（多少线程就是多少用户）不停地进行访问那些需要大量数据操作（就是需要大量CPU时间）的页面，造成服务器资源的浪费，CPU长时间处于100%，永远都有处理不完的连接直至就网络拥塞，正常的访问被中止。', '', '0', '2017-12-26 21:11:51', '43', '1');
INSERT INTO `topic` VALUES ('6022', '4', '4', '说说struts框架,的方法的工作原理或流程', 'bf79e5b7-dda2-4fa7-9ece-34a366b6ce71.', null, null, null, null, null, null, '对于采用STRUTS框架的WEB应用， 在WEB应用启动时会加载并初始化ACTIONSERVLET，ACTIONSERVLET从STRUTS-CONFIG.XML中读取配置信息，   \r\n 把它们存放到各种配置对象中，例如把ACTION的映射信息存放在ACTIONMAPPING对象中。   \r\n 当ACTIONSERVLET接收到客户请求时，执行以下流程：      \r\n    1.检索和用户请求匹配的ACTIONMAPPING实例，如果不存在，就返回用户请求路径无效信息；        \r\n     2.如果ACTIONFORM实例不存在，就创建一个ACTIONFORM对象并在其中保存客户提交的表单内容；        \r\n     3.根据配置信息决定是否调用ACTIONFORM的VALIDATE()方法；      \r\n     4.如果ACTIONFORM的VALIDATE()方法返回NULL或返回一个不包含ACTIONMESSAGE的ACTIONERRORS对象，就表示表单验证成功；      \r\n     5.ACTIONSERVLET根据ACTIONMAPPING实例包含的映射信息将请求转发给ACTION（如果ACTION实例不存在，就先创建ACTION实例），然后调用ACTION的EXCUTE()方法；        \r\n   6.ACTION的EXCUTE()方法返回一个ACTIONFORWARD对象，ACTIONSERVLET再把客户请求转发给ACTIONFORWARD对象指向的JSP组件；    \r\n7.ACTIONFORWARD对象指向的JSP组件生成动态网页，返回给客户。', '', '0', '2017-12-26 21:11:53', '52', '1');
INSERT INTO `topic` VALUES ('6023', '26', '4', '如何防止DDOS 攻击？如提供足够资源给你，要保证用户访问不影响。', '92f4872b-f95a-4cc9-bb5a-4e4fad205ade.', null, null, null, null, null, null, '首先确定攻击源范围，如果是处于公司内部，那么暂时性的将这一区域的内部网络封掉，如果是外部IP 那么通过防火墙或者软件进行IP过滤，这样能够一定程度上减缓承受的攻击压力。其次，开启备用服务器，如果攻击流量过大，限制大流量访问，保证大多数用户的正常使用。', '', '0', '2017-12-26 21:12:11', '43', '1');
INSERT INTO `topic` VALUES ('6024', '4', '4', ' strust的Action是不是线程安全的？', 'd0e9bae7-a243-4e9b-836e-804e991ca744.', null, null, null, null, null, null, '线程安全就是你可以在多线程环境下使用它，而不需要你来对它进行特殊的处理。ACTION都是继承至SERVLET的，由于SERVLET就是线程不安全的（指多个线程共享一个SERVLET对象，所以），所以不要再ACTION中定义类变量和实例变量，否则其他线程改变了这些值，可本线程还在使用', '', '0', '2017-12-26 21:12:14', '52', '1');
INSERT INTO `topic` VALUES ('6025', '26', '4', '你用过那些LVS ,并讲述LVS各个模式的特点和区别', 'e6670b70-c25f-48b3-986b-feed04718430.', null, null, null, null, null, null, 'LVS/DR模式用得比较多吧，这个模式效率最好。因为他的原理是把收到的包改了下MAC地址就丢给交换机了这样就造成两个大缺点1是所有负载机器都要在同一个IP段才能响应，所以在IDC上架的时候，为了方便扩容一开始就要预留好同IP段的IP，留IP是要钱的2所有用户发过来的包交换机都要处理2次，加大了前端交换机的压力3这种模式对收包少，回包多的应用（HTTP常规应用）非常有效，但是如果是注册、登录之类（POST大数据）的应用服务器，由于收包较多，LVS的服务器压力还是很大的（所以大量注册登录数据L的VS服务器的前面还是需要DNS轮询来分流LVS服务器的），但是好歹把应用的计算压力给分担掉了NAT模式效率惨，原理和IPTABLE做网关上网差不多，LVS服务器压力最大最大的好处是只需要一个对外IP就可以了，内网IP随便配置，但是压力摆在那里，能配多少IP都么用另外一个模式用的少也不怎么有兴趣了解', '', '0', '2017-12-26 21:12:31', '43', '1');
INSERT INTO `topic` VALUES ('6026', '4', '4', 'MVC，分析一下struts是如何实现MVC的', '69901fb9-3237-412f-98a6-26a7c75da567.', null, null, null, null, null, null, '从MVC角度来看看STRUTS的体系结构（MODEL 2）与工作原理：   \r\n　　1）模型（MODEL）   \r\n　　在STRUTS的体系结构中，模型分为两个部分：系统的内部状态和可以改变状态的操作（事务逻辑）。内部状态通常由一组ACTINFORM BEAN表示。根据设计或应用程序复杂度的不同，这些BEAN可以是自包含的并具有持续的状态，或只在需要时才获得数据（从某个数据库）。大型应用程序通常在方法内部封装事务逻辑（操作），这些方法可以被拥有状态信息的BEAN调用。比如购物车BEAN，它拥有用户购买商品的信息，可能还有CHECKOUT()方法用来检查用户的信用卡，并向仓库发定货信息。 小型程序中，操作可能会被内嵌在ACTION类，它是STRUTS框架中控制器角色的一部分。当逻辑简单时这个方法很适合。 建议用户将事务逻辑（要做什么）与ACTION类所扮演的角色（决定做什么）分开。   \r\n2）视图（VIEW）   \r\n　　视图主要由JSP建立，STRUTS包含扩展自定义标签库（TAGLIB），可以简化创建完全国际化用户界面的过程。目前的标签库包括：BEAN TAGS、HTML TAGS、LOGIC TAGS、NESTED TAGS 以及TEMPLATE TAGS等。   \r\n　3）控制器（CONTROLLER）   \r\n  \r\n　　在STRUTS中，基本的控制器组件是ACTIONSERVLET类中的实例SERVELT，实际使用的SERVLET在配置文件中由一组映射（由ACTIONMAPPING类进行描述）进行定义。对于业务逻辑的操作则主要由ACTION、ACTIONMAPPING、ACTIONFORWARD这几个组件协调完成的，其中ACTION扮演了真正的业务逻辑的实现者，ACTIONMAPPING与ACTIONFORWARD则指定了不同业务逻辑或流程的运行方向。STRUTS-CONFIG.XML 文件配置控制器。', '', '0', '2017-12-26 21:12:52', '52', '1');
INSERT INTO `topic` VALUES ('6027', '26', '4', '面对大并发，如何 MySQL 优化？', '490a2bef-9872-47cc-8c66-14085a4fcf05.', null, null, null, null, null, null, '数据库方面双主带多从，读写分离罗改应用代码，把不常修改的数据全部读入MEMCACHE中（比如用户登录用的帐号数据），这样基本把MYSQL的读压力分担走优化MYSQL语句，该用MYIASM表的用MYIASM表（比如不太太重要的用户帐号数据表），数据库设置CONCURRENT_INSERT直接从表尾并发插入，这样可以有效降低大量注册与登录的锁竞争​', '', '0', '2017-12-26 21:12:53', '43', '1');
INSERT INTO `topic` VALUES ('6028', '18', '4', '讲术 Memecahe 工作原理和优缺？', '7da59ab9-8b16-4866-a226-950b69c0ede4.', null, null, null, null, null, null, 'MEMCACHE就是一个KEY-VALUE的～～怎么说呢，NOSQL内存数据库？反正就是KEY-VALUE形式把数据存放在内存的一个程序优点速度快，部署方便缺点吃内存，掉电就没数据了。基本还是做MYSQL前端缓存或者存放诸如SESSION之类丢掉后可以随时取回来的数据大部分应用实现都需要修改代码，新项目随便弄，一开始设计好就行，旧项目得改代码，大型点的项目以前没上，现在我估计没人愿意去改代码上​', '', '0', '2017-12-26 21:13:11', '43', '1');
INSERT INTO `topic` VALUES ('6029', '4', '4', '简述什么是Struts', 'c05504a0-ef5f-4675-bc1c-8283e0be3a4f.', null, null, null, null, null, null, ' STRUTS只是一个MVC框架（FRAMEWORK）,用于快速开发JAVA WEB应用。STRUTS实现的重点在C(CONTROLLER)，包括ACTIONSERVLET/REQUESTPROCESSOR和我们定制的ACTION,也为V(VIEW)提供了一系列定制标签（CUSTOM TAG）。但STRUTS几乎没有涉及M(MODEL),所以STRUTS可以采用JAVA实现的任何形式的商业逻辑。    \r\nSPRING是一个轻型容器(LIGHT-WEIGHT CONTAINER)，其核心是BEAN工厂(BEAN FACTORY)，用以构造我们所需要的M(MODEL)。在此基础之上，SPRING提供了AOP（ASPECT-ORIENTED PROGRAMMING, 面向层面的编程）的实现，用它来提供非管理环境下申明方式的事务、安全等服务；对BEAN工厂的扩展APPLICATIONCONTEXT更加方便我们实现J2EE的应用；DAO/ORM的实现方便我们进行数据库的开发；WEB MVC和SPRING WEB提供了JAVA WEB应用的框架或与其他流行的WEB框架进行集成。    \r\n就是说可将两者一起使用，达到将两者自身的特点进行互补。', '', '0', '2017-12-26 21:13:16', '52', '1');
INSERT INTO `topic` VALUES ('6030', '18', '4', '讲术CDN工作原理和优缺？', '2cd2ee6d-3928-4da4-a214-6de155fd39dd.', null, null, null, null, null, null, '优点就是分流罗，可以有效分担静态资源的压力最大缺点是各地数据同步需要一段时间，更新一个重要静态文件的话，生效时间急死人，而且价格也不便宜​', '', '0', '2017-12-26 21:13:27', '43', '1');
INSERT INTO `topic` VALUES ('6031', '3', '4', '类和对象的区别?', 'fda875ee-3fe2-4b2e-997d-972e30d63ed9.', null, null, null, null, null, null, '类是对象的抽象,是模型概念,而对象是实实在在存在的事物,是现实中存在的实体 ', '', '0', '2017-12-26 21:13:39', '52', '1');
INSERT INTO `topic` VALUES ('6032', '18', '4', '你如何监视服务器质量和网络质量？用个哪些工具及优缺点？', '08f2de02-7d47-4985-af70-2177fa7dd38e.', null, null, null, null, null, null, 'CACTI绘图漂亮，查看以往数据非常方便，但是报警功能弱我觉得最大的缺点还是RRDTOOL上，CACTI + RRDTOOL暂时没有把旧数据写到数据库的插件，导致做数据处理会很麻烦取数据方便有SNMP，能写各种脚本想要什么数据就有什么数据.​', '', '0', '2017-12-26 21:13:41', '43', '1');
INSERT INTO `topic` VALUES ('6033', '3', '4', 'Java类库中八个标准包分别是什么?', '94e48f71-db10-4d15-98f9-4403f396d8a5.', null, null, null, null, null, null, 'JAVA.LANG    提供常用的类、接口、一般异常、系统等编程语言的核心内容。    \r\nJAVA.UTIL    包含日期、日历、向量、堆栈等实用工具。    \r\nJAVA.IO      包含输入输出流类、文件类等与输入输出I/O有关的类。        \r\nJAVA.AWT     包含窗口和屏幕元素类，事件处理接口等与图形用户界面有关的内容。       \r\nJAVA.APPLET  提供为编写APPLET小程序所需要的类。    \r\nJAVA.TEXT    提供与文本有关的类。    \r\nJAVA.NET     包含URL类等与网络传输有关的东西。        \r\nJAVA.SQL     提供与数据库应用相关的类和接口。', '', '0', '2017-12-26 21:13:53', '52', '1');
INSERT INTO `topic` VALUES ('6034', '3', '4', '接口和抽象类有什么区别?', '4205d7d9-3f50-43e3-ae92-75c992999511.', null, null, null, null, null, null, '接口是公开的，不能包含私有的方法或变量，而抽象类是可以有私有方法或私有变量的，    \r\n实现接口的一定要实现接口里定义的所有方法，而实现抽象类可以有选择地重写需要用到的方法，   \r\n接口可以实现多重继承，而一个类只能继承一个超类，但可以通过继承多个接口实现多重继承，   \r\n接口还有标识（里面没有任何方法，如REMOTE接口）和数据共享（里面的变量全是常量）的作用.   \r\n一般的应用里，最顶级的是接口，然后是抽象类实现接口，最后才到具体类实现。', '', '0', '2017-12-26 21:14:17', '52', '1');
INSERT INTO `topic` VALUES ('6035', '3', '4', '说说java中的内存分配?', '50e51968-552f-4c14-bdc4-663d140dbbb7.', null, null, null, null, null, null, 'AVA把内存分成两种，一种叫做栈内存，一种叫做堆内存   \r\n在函数中定义的一些基本类型的变量和对象的引用变量都是在函数的栈内存中分配。当在一段代码块中定义一个变量时，JAVA就在栈中为这个变量分配内存空间，当超过变量的作用域后，JAVA会自动释放掉为该变量分配的内存空间，该内存空间可以立刻被另作他用。    \r\n  \r\n堆内存用于存放由NEW创建的对象和数组。在堆中分配的内存，由JAVA虚拟机自动垃圾回收器来管理。在堆中产生了一个数组或者对象后，还可以在栈中定义一个特殊的变量，这个变量的取值等于数组或者对象在堆内存中的首地址，在栈中的这个特殊的变量就变成了数组或者对象的引用变量，以后就可以在程序中使用栈内存中的引用变量来访问堆中的数组或者对象，引用变量相当于为数组或者对象起的一个别名，或者代号。    \r\n  \r\n引用变量是普通变量，定义时在栈中分配内存，引用变量在程序运行到作用域外释放。而数组＆对象本身在堆中分配，即使程序运行到使用NEW产生数组和对象的语句所在地代码块之外，数组和对象本身占用的堆内存也不会被释放，数组和对象在没有引用变量指向它的时候，才变成垃圾，不能再被使用，但是仍然占着内存，在随后的一个不确定的时间被垃圾回收器释放掉。这个也是JAVA比较占内存的主要原因。但是在写程序的时候，可以人为的控制  ', '', '0', '2017-12-26 21:14:36', '52', '1');
INSERT INTO `topic` VALUES ('6036', '3', '4', 'Character类有哪些常用方法?', '8b85f606-5efa-4bca-9f0e-9d7bc57d7f61.', null, null, null, null, null, null, 'CHARVALUE()    \r\n返回字符对象对应的值。    \r\nDIGIT(CHAR, INT)    \r\n以指定基数返回字符 CH 对应的数值。    \r\nEQUALS(OBJECT)    \r\n比较该对象和指定对象。    \r\nFORDIGIT(INT, INT)    \r\n确定以指定基数指定的数对应的字符。    \r\nGETNUMERICVALUE(CHAR)    \r\n返回此字符对应的 UNICODE 的非负整型值。    \r\nGETTYPE(CHAR)    \r\n返回一个表示字符种类的值。    \r\nHASHCODE()    \r\n返回此字符对应的哈希码。    \r\nISDEFINED(CHAR)    \r\n判定一个字符在 UNICODE 中是否有定义。    \r\nISDIGIT(CHAR)    \r\n判定指定字符是否为数字。    \r\nISIDENTIFIERIGNORABLE(CHAR)    \r\n判定指定字符在 JAVA 标识符中或 UNICODE 标识符中是否应看作是一个可忽略字符。    \r\nISISOCONTROL(CHAR)    \r\n判定指定字符是否为 ISO 控制字符。    \r\nISJAVAIDENTIFIERPART(CHAR)    \r\n判定指定字符是否为 JAVA 标识符中除首字符外的字符。    \r\nISJAVAIDENTIFIERSTART(CHAR)    \r\n判定指定字符是否可作为 JAVA 标识符的首字符。    \r\nISJAVALETTER(CHAR)    \r\n判定指定字符是否为 JAVA 字母，若是，它可作为 JAVA 语言中一个标识符的首字符。 不推荐使用该方法。    \r\nISJAVALETTERORDIGIT(CHAR)    \r\n判定指定字符是否为 JAVA 字母或数字，若是，它可作为 JAVA 语言中的一个标识符除首字符外的字符。 不推荐使用该方法。    \r\nISLETTER(CHAR)    \r\n判定指定字符是否为字母。    \r\nISLETTERORDIGIT(CHAR)    \r\n判定指定字符是否为字母或数字。    \r\nISLOWERCASE(CHAR)    \r\n判定指定字符是否为小写字符。    \r\nISSPACE(CHAR)    \r\n判定指定字符是否为 ISO-LATIN-1 空格。 不推荐使用该方法。    \r\nISSPACECHAR(CHAR)    \r\n判定指定字符是否为 UNICODE 空白字符。    \r\nISTITLECASE(CHAR)    \r\n判定指定字符是否为标题字符。    \r\nISUNICODEIDENTIFIERPART(CHAR)    \r\n判定指定字符是否为 UNICODE 标识符中除首字符外的字符。    \r\nISUNICODEIDENTIFIERSTART(CHAR)    \r\n判定指定字符是否可作为 UNICODE 标识符首字符。    \r\nISUPPERCASE(CHAR)    \r\n判定指定字符是否为大写字符。    \r\nISWHITESPACE(CHAR)    \r\n据 JAVA 语言，判定指定字符是否为空格。    \r\nTOLOWERCASE(CHAR)    \r\n将给定字符映射为对应的小写字符，若没有对应的小写字符，返回此字符本身。    \r\nTOSTRING()    \r\n返回表示此字符值的串对象。    \r\nTOTITLECASE(CHAR)    \r\n将字符参数转换为标题字符。    \r\nTOUPPERCASE(CHAR)    \r\n将字符参数转换为大写字符。    \r\n5.BOOLEAN类有哪些方法?   \r\nBOOLEANVALUE()    \r\n返回 BOOLEAN 对象对应的布尔值。    \r\nEQUALS(OBJECT)    \r\n当且仅当参数非空，且是包含与此对象相同的布尔值的布尔对象时，返回 TRUE。    \r\nGETBOOLEAN(STRING)    \r\n当且仅当以参数命名的系统属性存在，且等于 \"TRUE\" 时，返回为 TRUE。    \r\nHASHCODE()    \r\n返回此布尔值对应的哈希码。    \r\nTOSTRING()    \r\n返回表示当前布尔值的一个串对象。    \r\nVALUEOF(STRING)    \r\n返回表示指定串的布尔值。', '', '0', '2017-12-26 21:15:10', '52', '1');
INSERT INTO `topic` VALUES ('6037', '3', '4', ' GC是什么? 为什么要有GC? ', '6da29d63-1110-417f-b5de-c2ea0b98c218.', null, null, null, null, null, null, 'GC是垃圾收集的意思（GABAGE COLLECTION）   \r\nJAVA提供的GC功能可以自动监测对象是否超过作用域从而达到自动回收内存的目的，   \r\nJAVA语言没有提供释放已分配内存的显示操作方法。', '', '0', '2017-12-26 21:16:14', '52', '1');
INSERT INTO `topic` VALUES ('6038', '3', '4', '什么叫方法重载', '5abf536c-4952-48c2-955a-3f138807de14.', null, null, null, null, null, null, '方法重载就是一个同名方法，有多种不同的签名    \r\n说白了就是一个同名方法可以传入不同个数或类型的参数    \r\n之间可以互相调用   ', '', '0', '2017-12-26 21:16:27', '52', '1');
INSERT INTO `topic` VALUES ('6039', '26', '1', '在STP协议中，当网桥优先级一致的时候，以下（） ', 'de072858-8959-4016-8d22-8cb52d9509a2.', '端口优先级数值最低的网桥', '端口优先级数值最高的网桥', '拥有最大MAC地址的网桥', '拥有最小MAC地址的网桥', '', '', 'D', '', '0', '2017-12-26 21:16:35', '43', '1');
INSERT INTO `topic` VALUES ('6040', '3', '4', '什么是抽象类抽象类', '1966f41f-71d5-465c-b425-0a85a24ac4cc.', null, null, null, null, null, null, '仅提供一个类型的部分实现。抽象类可以有实例变量，以及一个或多个构造函数。抽象类可以同时有抽象方法和具体方法。一个抽象类不会有实例，这些构造函数不能被客户端调用来创建实例。一个抽象类的构造函数可以被其子类调用，从而使一个抽象类的所有子类都可以有一些共同的实现，而不同的子类可以在此基础上有其自己的实现。', '', '0', '2017-12-26 21:16:45', '52', '1');
INSERT INTO `topic` VALUES ('6041', '3', '4', '抽象类的用途', '284979ee-a873-4980-9d9c-7d0ba0a30304.', null, null, null, null, null, null, '1）  具体类不是用来继承的。 SCOTT MEYERS曾指出，只要有可能，不要丛具体类继承。2）  假设有2个具体类，类A和类B，类B是类A 的子类，那么一个最简单的修改方案是应当建立一个抽象类（或JAVA接口）C，然后让类A和类B成为抽象类C的子类。3）  抽象类应当拥有尽可能多的共同代码。以提高代码的复用率。4）  抽象类应当拥有尽可能少的数据。', '', '0', '2017-12-26 21:17:06', '52', '1');
INSERT INTO `topic` VALUES ('6042', '26', '1', '在以太网交换中哪种转发方法延迟较小（ ）', '26551ba2-5c5b-47cc-a3b3-39d11b4726f2.', '半双工', '存储转发', '直通转发Cut‐through ', '全双工', '', '', 'C', '', '0', '2017-12-26 21:17:16', '43', '1');
INSERT INTO `topic` VALUES ('6043', '3', '4', '.java中接口有什么用?', '579ecbe9-70bf-486c-a850-e40c7dbe536e.', null, null, null, null, null, null, 'JAVA不允许多重继承，也就是说一个子类只能有一个父类，SON EXTENDS FATHERA,FATHERB 是错误的    \r\n为了弥补这点不足，JAVA允许实现多个接口，SON EXTENDS FATHERA IMPLEMENTS ANOTHERFATHERA,ANOTHERFATHERB是允许的    \r\n接口中的方法没有实体，就这一点而言就相当于ABSTACT CLASS，如：    \r\nINTERFACE AINTER{    \r\nVOID DOSTH(INT I);    \r\n}    \r\nAINTER是一个接口，它仅仅声明了一个方法DOSTH，而没有具体实现它    \r\nCLASS ACLASS IMPLEMENTS AINTER    \r\n{    \r\nPUBLIC VOID DOSTH(INT I) {    \r\n  \r\n//在这里你可以不作任何处理，但是必须实现方法体    \r\n}    \r\n}    \r\nACLASS实现了AINTER这个接口，因此它必须实现AINTER中的方法DOSTH ', '', '0', '2017-12-26 21:17:27', '52', '1');
INSERT INTO `topic` VALUES ('6044', '3', '4', '垃圾回收机制的原理？', '32252d44-6364-44cc-848c-a9f096d50e5d.', null, null, null, null, null, null, '在JAVA中 ,JAVA VM 每隔一段时间就会查看每一块由NEW分配的内存空间,看指向它的有效引用是否存在,如果这个引用不存在,系统会自动将这块空间归入空闲内存区.这个过程被称为 垃圾收集. ', '', '0', '2017-12-26 21:17:47', '52', '1');
INSERT INTO `topic` VALUES ('6045', '3', '4', '在静态方法里可以访问非静态变量吗?', '45934bce-06f8-47db-a7a1-f827d54723ac.', null, null, null, null, null, null, 'JAVA 中的 STATIC 变量归相应的类所有，它的值对于类的所有实例都是相同的。STATIC 变量是在 JVM 加载类的时候初始化的。如果代码试图访问非静态的变量，而且不是通过类的实例去访问，编译器会报错，因为这些非静态变量还没有被创建呢，并且它们没有与实例相关联。', '', '0', '2017-12-26 21:17:57', '53', '1');
INSERT INTO `topic` VALUES ('6046', '3', '4', '什么叫面向对象?', '814ca4c4-d5ca-4042-a091-f9be037e6311.', null, null, null, null, null, null, '面向对象是一种新兴的程序设计方法,或者是一种新的程序设计规范(PARADIGM),其基本思想是使用对象、类、继承、封装、消息等基本概念来进行程序设计。从现实世界中客观存在的事物（即对象）出发来构造软件系统，并且在系统构造中尽可能运用人类的自然思维方式。开发一个软件是为了解决某些问题，这些问题所涉及的业务范围称作该软件的问题域。其应用领域不仅仅是软件，还有计算机体系结构和人工智能等。', '', '0', '2017-12-26 21:17:58', '52', '1');
INSERT INTO `topic` VALUES ('6047', '3', '4', '“static” 关键字是什么意思？在Java里可以 override private 或 static 的方法吗？  keyword mean ? Can you override private or static method in Java ?', '5d9d0574-0880-4639-91c4-ce3d78c5a302.', null, null, null, null, null, null, 'STATIC 关键字表示，访问这个成员变量或方法时，不必获取它属于的类的实例。  JAVA 里的 STATIC 方法不能被 OVERRIDE，因为  OVERRIDE 的机制是运行时(RUNTIME)的动态绑定，而 STATIC 方法是在编译时静态绑定的。STATIC 方法并不与任何类的具体实例有关，因此无法应用继承的概念。', '', '0', '2017-12-26 21:18:12', '53', '1');
INSERT INTO `topic` VALUES ('6048', '3', '4', '面向对象的涉及方法有哪些?', '13127082-18a4-40ff-8166-62472ff32f11.', null, null, null, null, null, null, 'OOA－OBJECT ORIENTED ANALYSIS 　　　　面向对象的分析   \r\n　　   \r\n　　OOD－OBJECT ORIENTED DESIGN 　　　　　面向对象的设计   \r\n　　   \r\nOOI－OBJECT ORIENTED IMPLEMENTATION 　面向对象的实现 ', '', '0', '2017-12-26 21:18:20', '52', '1');
INSERT INTO `topic` VALUES ('6049', '3', '4', 'jvm工作原理', 'b934fd23-3776-4334-923b-79a4feaa53b5.', null, null, null, null, null, null, '运行JVM 字符码的工作是由解释器来完成的。解释执行过程分三步进行：   \r\n  \r\n代码的装入、代码的校验、和代码的执行。   \r\n装入代码的工作由“类装载器CLASS LOADER”完成。类装载器负责装入运   \r\n  \r\n行一个程序需要的所有代码，这也包括程序代码中的类所继承的类和被调   \r\n  \r\n用的类。当类装载器装入一个类时，该类被放在自己的名字空间中。除了   \r\n  \r\n通过符号引用自己名字空间以外的类，类之间没有其他办法可以影响其他   \r\n  \r\n类。在本台计算机的所有类都在同一地址空间中，而所有从外部引进的类   \r\n  \r\n，都有一个自己独立的名字空间。这使得本地类通过共享相同的名字空间   \r\n  \r\n获得较高的运行效率，同时又保证它们与从外部引进的类不会相互影响。   \r\n  \r\n当装入了运行程序需要的所有类后，解释器便可确定整个可执行程序的内   \r\n  \r\n存布局。解释器为符号引用与特定的地址空间建立对应关系及查询表。通   \r\n  \r\n过在这一阶段确定代码的内布局，JAVA很好地解决了由超类改变而使子类   \r\n  \r\n崩溃的问题，同时也防止了代码的非法访问。   \r\n随后，被装入的代码由字节码校验器进行检查。校验器可以发现操作数栈   \r\n  \r\n益处、非法数据类型转化等多种错误。通过校验后，代码便开始执行了。   \r\nJAVA字节码的执行有两种方式：   \r\n1） 即时编译方式：解释器先将字节编译成机器码，然后再执行该机器码   \r\n。   \r\n2）解释执行方式：解释器通过每次解释并执行一小段代码来完成JAVA字节   \r\n  \r\n码程序的所有操作。', '', '0', '2017-12-26 21:18:45', '52', '1');
INSERT INTO `topic` VALUES ('6050', '26', '1', 'VLAN在现代组网技术中占有重要地位，同一个VLAN中的两台主机（ ）。', 'c59665b0-0fc1-4099-a34c-ccc4b5ae3e8f.', '可以跨越多台路由器', '必须连接在同一集线器上 ', '可以跨越多台交换机上 ', '必须连接在同一交换机上', '', '', 'C', '', '0', '2017-12-26 21:18:47', '43', '1');
INSERT INTO `topic` VALUES ('6051', '3', '4', 'Java中构造函数、构造函数重载的概念和拷贝构造函数', 'c35ff73b-e5e3-4efe-9a5c-7270662df4b0.', null, null, null, null, null, null, '当类的对象被创建的时候，调用它的构造函数。每个类都有一个构造函数。如果程序员没有为类编写构造函数，JAVA编译器自动为类创建一个缺省的构造函数。   构造函数重载和JAVA中函数重载类似，可以为同一个类创建不同的构造函数，每个构造函数必须拥有唯一的参数列表。   JAVA与C++不同，它不支持拷贝构造函数，但是区别仅仅是，如果你没有编写类的拷贝构造函数，JAVA不会自动创建它。', '', '0', '2017-12-26 21:19:00', '53', '1');
INSERT INTO `topic` VALUES ('6052', '26', '1', '某企业只有一个公网地址，内部有email、dns、web等主机需要对外提供服务，应该如何解决（ ）', '77653f22-8ece-455a-ab9e-5ebc004becfc.', '基于端口的动态NAT', '基于ip的动态NAT  ', '静态端口NAT', '静态NAT', '', '', 'C', '', '0', '2017-12-26 21:19:25', '43', '1');
INSERT INTO `topic` VALUES ('6053', '3', '4', '说下创建线程的不同方式. 你倾向于哪种方式并说明原因 ?', 'b0b8f3b6-d571-4786-868f-0d8a4206eff0.', null, null, null, null, null, null, '有三种创建线程的方式:  继承THREAD类.  实现RUNNABLE接口.  通过EXECUTOR框架创建线程池.  首选方式是实现RUNNABLE接口, 因为它不需要继承THREAD类. 当你的程序设计需要多继承时, 使用接口会有所帮助. 另外, 线程池效率是很高的, 并且实施起来也很简单.', '', '0', '2017-12-26 21:19:25', '53', '1');
INSERT INTO `topic` VALUES ('6054', '3', '4', 'JAVA反射机制作用是什么? ', '5cf80eb6-e382-4e1c-a7f6-12879b2dd6bf.', null, null, null, null, null, null, '可以于运行时加载、探知、使用编译期间完全未知的    \r\nCLASSES。换句话说，JAVA程序可以加载一个运行时才得知名称    \r\n的CLASS，获悉其完整构造（但不包括METHODS定义），并生成其    \r\n对象实体、或对其FIELDS设值、或唤起其METHODS1。', '', '0', '2017-12-26 21:19:36', '52', '1');
INSERT INTO `topic` VALUES ('6055', '3', '4', '解释下可用的线程状态.', '92603e26-bf4e-45e8-b9e2-a2e435786d17.', null, null, null, null, null, null, '在执行期间, 线程会处于以下状态中的一种:  RUNNABLE: 线程已准备就绪, 但没有立即运行.  RUNNING: 处理器正在执行的线程代码.  WAITING: 处于阻塞状态的线程, 等待外部某种 处理的结束.  SLEEPING: 被强制休眠的线程.  BLOCKED ON I/O: 等待I/O操作的完成.  BLOCKED ON SYNCHRONIZATION: 等待取得线 程锁.  DEAD: 线程已经执行结束.', '', '0', '2017-12-26 21:19:40', '53', '1');
INSERT INTO `topic` VALUES ('6056', '3', '4', 'web应用程序体系结构是怎样的?', '2cd75adc-deb9-4a80-8f68-fb62357d9cf8.', null, null, null, null, null, null, '一般分为表示层、业务层、数据存取层', '', '0', '2017-12-26 21:19:50', '52', '1');
INSERT INTO `topic` VALUES ('6057', '3', '4', '.GET和POST有什么区别？', '4055d11c-876f-4d67-8b0f-e60e0831b47b.', null, null, null, null, null, null, 'GET是明码传递，POST是暗码传递', '', '0', '2017-12-26 21:20:03', '52', '1');
INSERT INTO `topic` VALUES ('6058', '3', '4', '同步方法与同步块的区别 ?', '6b2ac760-4b62-44d1-8ec4-0b239ba323d0.', null, null, null, null, null, null, 'JAVA程序中, 每个对象都拥有一个锁. 线程可以通过使用SYNCHRONIZED关键字来获取一个对象上的锁.  SYNCHRONIZED关键字可以用于方法级别(粗粒度锁)或代码块级别(细粒度锁). ', '', '0', '2017-12-26 21:20:05', '53', '1');
INSERT INTO `topic` VALUES ('6059', '26', '1', '在mpls vpn 技术中，下列关于ce说法不正确的有（ ）', 'a57c12c6-0346-4349-9c33-6e6b7248fe5f.', '需要支持mpls ', 'ce感知不到vpn的存在 ', 'ce可以是路由器或交换机，也可以是一台主机 ', '用户网络边缘设备，有接口直接与服务提供商sp网络相连 ', '', '', 'A', '', '0', '2017-12-26 21:20:11', '43', '1');
INSERT INTO `topic` VALUES ('6060', '3', '4', 'HTTP协议的特点？', '6f43e53f-c463-4be9-8d56-0163e8c777f3.', null, null, null, null, null, null, '使用端口发送和接受消息 。端口是协议发送和接收数据的信道或机制 ，80是默认端口   \r\n通过这种协议传递数据服务器不会保存连接信息，因此又称为连接信息。', '', '0', '2017-12-26 21:20:15', '52', '1');
INSERT INTO `topic` VALUES ('6061', '4', '4', '在监视器中的线程同步是怎样发生的? 你可以使用哪些级别的同步 ?', '82fa3f4b-006b-438b-acc0-127e22be94d2.', null, null, null, null, null, null, 'JVM使用结合了监视器的锁. 监视器是一个守护者, 它看管一个同步代码的序列, 并且确保在一个时刻只能有一个线程执行同步代码片段. 每个监视器关联着一个对象引用. 只能得到锁的线程才可以执行同步代码.', '', '0', '2017-12-26 21:20:19', '53', '1');
INSERT INTO `topic` VALUES ('6062', '4', '4', '什么是死锁 ? ', 'f2403d5d-2549-4421-90ad-a5193af385ec.', null, null, null, null, null, null, '当两个进程相互等待对方执行完毕时, 其结果是它们会永远等待下去.', '', '0', '2017-12-26 21:20:31', '53', '1');
INSERT INTO `topic` VALUES ('6063', '3', '4', ' 静态方法有什么好处?', '94781811-f20e-494c-8cdb-cf941a26c611.', null, null, null, null, null, null, '（1）在JAVA里，可以定义一个不需要创建对象的方法，这种方法就是静态方法。要实现这样的效果，只需要在类中定义的方法前加上STATIC关键字。例如：PUBLIC STATIC INT MAXIMUM(INT N1,INT N2)   \r\n使用类的静态方法时，注意：   \r\nA）           在静态方法里只能直接调用同类中其他的静态成员（包括变量和方法），而不能直接访问类中的非静态成员。这是因为，对于非静态的方法和变量，需要先创建类的实例对象后才可使用，而静态方法在使用前不用创建任何对象。   \r\nB）          静态方法不能以任何方式引用THIS和SUPER关键字，因为静态方法在使用前不用创建任何实例对象，当静态方法调用时，THIS所引用的对象根本没有产生。   \r\n（2）静态变量是属于整个类的变量而不是属于某个对象的。注意不能把任何方法体内的变量声明为静态，例如：   \r\nFUN()   \r\n{   \r\n   STATIC INT I=0;//非法。   \r\n}   \r\n（3）一个类可以使用不包含在任何方法体中的静态代码块，当类被载入时，静态代码块被执行，且之被执行一次，静态块常用来执行类属性的初始化。例如：   \r\nSTATIC  \r\n{   \r\n}   ', '', '0', '2017-12-26 21:20:40', '52', '1');
INSERT INTO `topic` VALUES ('6064', '4', '4', '怎样确保N个线程访问N个资源时不会发生死锁 ?', '390904aa-84e8-47bb-8f2d-db970e89bc25.', null, null, null, null, null, null, '使用N个线程时一个非常简单的避免死锁的方法是为所有的锁排序, 并强制每个线程也按那种方式排序. 这样, 如果所有线程以相同的顺序锁定和解锁互斥资源就不会发生死锁了', '', '0', '2017-12-26 21:20:44', '53', '1');
INSERT INTO `topic` VALUES ('6065', '3', '4', 'Java Collections框架的基本接口 ? ', '654847d0-d840-47ee-983f-a5a47fa1d0da.', null, null, null, null, null, null, 'JAVA COLLECTIONS 框架 提供了一系列支持对象集合操作的设计良好的接口和类. JAVA COLLECTIONS框架中最基础的接口是:  COLLECTION, 表示一组对象(元素).  SET, 包含非重复元素的集合.  LIST, 包含非重复元素的有序集合.  MAP, 包含非重复键的键值对的对象.', '', '0', '2017-12-26 21:21:00', '53', '1');
INSERT INTO `topic` VALUES ('6066', '3', '4', 'JAVA中的静态方法有什么理解?', '0e7283d3-a2c9-4e55-bec3-0b03116eede7.', null, null, null, null, null, null, '在JAVA里，可以定义一个不需要创建对象的方法，这种方法就是静态方法。要实现这样的效果，只需要在类中定义的方法前加上STATIC关键字。例如：PUBLIC STATIC INT MAXIMUM(INT N1,INT N2)   \r\n使用类的静态方法时，注意：   \r\nA）           在静态方法里只能直接调用同类中其他的静态成员（包括变量和方法），而不能直接访问类中的非静态成员。这是因为，对于非静态的方法和变量，需要先创建类的实例对象后才可使用，而静态方法在使用前不用创建任何对象。   \r\nB）          静态方法不能以任何方式引用THIS和SUPER关键字，因为静态方法在使用前不用创建任何实例对象，当静态方法调用时，THIS所引用的对象根本没有产生。   \r\n（2）静态变量是属于整个类的变量而不是属于某个对象的。注意不能把任何方法体内的变量声明为静态，例如：   \r\nFUN()   \r\n{   \r\n   STATIC INT I=0;//非法。   \r\n}   \r\n（3）一个类可以使用不包含在任何方法体中的静态代码块，当类被载入时，静态代码块被执行，且之被执行一次，静态块常用来执行类属性的初始化。例如：   \r\nSTATIC  \r\n{   \r\n}   ', '', '0', '2017-12-26 21:21:03', '52', '1');
INSERT INTO `topic` VALUES ('6067', '18', '1', '决定网络跟桥的是（ ）', 'f7c7c66d-9e5a-421d-8921-4e701321f227.', '桥ID', 'MAC地址', '接入交换机的链路成本', '优先权', '', '', 'A', '', '0', '2017-12-26 21:21:10', '43', '1');
INSERT INTO `topic` VALUES ('6068', '3', '4', 'HashMap与HashTable之间有哪些不同？', '781b1ad4-2378-4670-a81a-4ec75420070f.', null, null, null, null, null, null, 'HASHMAP、HASHTABLE这两个类都实现了MAP接口， 因此有些非常相似的特征，但他们在以下特性中又有所不同：    HASHMAP的KEY与VALUE都允许NULL值的存在，而HASHTABLE则既不允许KEY为NULL，也不允许VALUE为NULL。   HASHTABLE是线程同步的，而HASHMAP则不是。因此，在单线程环境下HASHMAP是首选，而HASHTABLE更适合在多线程环境下使用。   HASHMAP提供了它键的SET集合，因此JAVA程序可以通过SET进行迭代。因此，HASHMAP是快速失败的。另一方面，HASHTABLE提供了它键的枚举。   HASHTABLE类被当做遗留类（译者注：JAVA遗留类说明）', '', '0', '2017-12-26 21:21:47', '53', '1');
INSERT INTO `topic` VALUES ('6069', '3', '4', 'Array与ArrayList间有什么不同？与ArrayList相比你什么时候会用Array？', '3a092017-51fb-4c69-a0b8-7c78ab74d721.', null, null, null, null, null, null, 'ARRAY与ARRAYLIST类在以下特性中有所区别：  ARRAYS可以包含基础数据类型或者对象，而ARRAYLIST只能包含对象。   ARRAYS有固定长度，而ARRAYLIST长度则是动态的。  ARRAYLIST类提供了更多的方法和特性，比如ADDALL,REMOVEALL,ITERATOR,等等    对于一个基础数据类型的LIST，集合框架使用了自动装箱去减少编码的工作。但针对固定长度的的基础数据类型，这种方法会使得它们变得更慢。', '', '0', '2017-12-26 21:22:01', '53', '1');
INSERT INTO `topic` VALUES ('6070', '3', '4', 'Java中的线程有四种状态分别是是什么？', '3cd801fd-6417-4f89-aae1-ada20e17cae7.', null, null, null, null, null, null, '运行、就绪、挂起、结束。 ', '', '0', '2017-12-26 21:22:06', '52', '1');
INSERT INTO `topic` VALUES ('6071', '26', '1', '在TCP/IP的协议栈中，下面哪个能够唯一的确定一个tcp连接（ ）', '71a704e6-488f-4b3a-9602-5e2da10737fc.', '源地址、目的地址、源端口号和目的端口号 ', '目的地址和源端口号', '源IP地址和目的端口号', '源ip地址和源端口号 ', '', '', 'A', '', '0', '2017-12-26 21:22:16', '43', '1');
INSERT INTO `topic` VALUES ('6072', '33', '4', 'Java Priority Queue是什么?', 'a15ad098-4bd1-4081-bace-c26519d135f9.', null, null, null, null, null, null, 'PRIORITYQUEUE是一个基于优先级堆的无界队列，它的元素都以他们的自然顺序有序排列。在它创建的时候，我们可以可以提供一个比较器(COMPARATOR)来负责 PRIORITYQUEUE中元素的排序。PRIORITYQUEUE不允许NULL元素，不允许不提供自然排序的对象，也不允许没有任何关联COMPARATOR的对象。最后，PRIORITYQUEUE不是线程安全的，在执行入队和出队操作它需要O(LOG(N))的时间复杂度。', '', '0', '2017-12-26 21:22:29', '53', '1');
INSERT INTO `topic` VALUES ('6073', '3', '4', '关于Big-O符号你了解些什么？你能针对不同数据结构举些例子吗？', '21ac90df-dd26-4583-bc8f-7f76f7a2cc54.', null, null, null, null, null, null, 'BIG-O符号简单描述了，在一种数据结构中随着元素的不断增加，在最坏的情况下，一个算法的扩展或者执行能有多好。BIG-O符号还可以用来描述其他的行为，比如内存消耗。由于COLLECTION集合下的类实际上都是数据结构，我们通常用BIG-O符号来选择基于时间、内存、性能前提下的最好实现去使用。BIG-O符号能就大量数据的性能给出一个很好的指示。', '', '0', '2017-12-26 21:22:42', '53', '1');
INSERT INTO `topic` VALUES ('6074', '26', '1', '一下协议中支持可变长子网掩码和路由汇聚功能的是（  ）', 'a553933b-dfb7-4e57-8c18-f8f5ac79bc33.', 'RIPV1', 'VTP ', 'OSPF ', 'IGRP', '', '', 'C', '', '0', '2017-12-26 21:22:49', '43', '1');
INSERT INTO `topic` VALUES ('6075', '3', '4', '如何权衡有序数组和无序数组 ?', '040deb47-8492-4482-aa55-c32c82a5af5d.', null, null, null, null, null, null, '有序数组最关键的优势在于搜索的时间复杂度为 O(LOG  N)，而无序数组的时间复杂度是 O (N)。有序数组的劣势就在于插入操作的时间复杂度为 O(N)，因为较高值的元素需要挪动位置腾出空间给新元素。与之不同的是，无序数组的插入操作的时间复杂度为 O(1)。', '', '0', '2017-12-26 21:22:53', '53', '1');
INSERT INTO `topic` VALUES ('6076', '26', '4', '请写出查看 iptables 当前所有规则的命令。', 'eaf55b1a-22dd-4432-93c8-db0806a5a806.', null, null, null, null, null, null, 'IPTABLES -NL [ --LINE-NUM ]\r\n【】表示可选项', '', '0', '2017-12-26 21:22:58', '48', '1');
INSERT INTO `topic` VALUES ('6077', '4', '4', '有哪些关于 Java 集合框架的最佳实践？', '89a606c8-8bdc-4d02-8936-56297617ccb5.', null, null, null, null, null, null, '基于应用的需求来选择使用正确类型的集合，这 对性能来说是非常重要的。例如，如果元素的大小是固定的，并且知道优先级，我们将会使用一个 ARRAY，而不是 ARRAYLIST。  一些集合类允许我们指定他们的初始容量。因此， 如果我们知道存储数据的大概数值，就可以避免重散列或者大小的调整。  总是使用泛型来保证类型安全，可靠性和健壮性。 同时，使用泛型还可以避免运行时的 CLASSCASTEXCEPTION。  在 MAP 中使用 JAVA DEVELOPMENT KIT  (JDK) 提供的不可变类作为一个 KEY，这样可以避免 HASHCODE 的实现和我们自定义类的 EQUALS 方法。  应该依照接口而不是实现来编程。  返回零长度的集合或者数组，而不是返回一个  NULL ，这样可以防止底层集合是空的。', '', '0', '2017-12-26 21:23:08', '53', '1');
INSERT INTO `topic` VALUES ('6078', '4', '4', 'Java中垃圾回收的目的是什么, 它什么时候被使用 ? ', 'c81a6845-9557-457a-9254-227cfc9b76b4.', null, null, null, null, null, null, '垃圾回收用于识别和丢弃程序不再需要的对象, 以便回收和复用资源.', '', '0', '2017-12-26 21:23:33', '53', '1');
INSERT INTO `topic` VALUES ('6079', '24', '4', '禁止来自 10.0.0.188 ip 地址访问 80 端口的请求', '01e7aa12-86db-474c-95df-f84e4843bce5.', null, null, null, null, null, null, 'IPTABLES -I INPUT -P TCP -S 10.0.0.188 --DPORT 80 -J DROP', '', '0', '2017-12-26 21:23:35', '48', '1');
INSERT INTO `topic` VALUES ('6080', '18', '1', '在tcp/ip协议中，A类地址第一个字节的范围是（ ） 。', '51654768-17ee-453b-8647-6b0441a8a2d4.', '1‐127', '1‐126', '0‐127', '0‐126', '', '', 'B', '注解：A类地址1‐126，B类地址128‐191，C类地址192‐223，D类地址224‐239，E类240‐255.其中E类是保留地址，用于测试，D类是组播通信地址。', '0', '2017-12-26 21:23:37', '43', '1');
INSERT INTO `topic` VALUES ('6081', '4', '4', ' finalize()什么时候被调用 ? 它的目的是什么 ?', '5356fec9-ffec-431a-bcbf-351ea5bdf426.', null, null, null, null, null, null, 'FINALLIZE方法是在释放该对象内存前由GC(垃圾回收器)调用. 通常建议在这个方法中释放该对象持有的资源.', '', '0', '2017-12-26 21:23:52', '53', '1');
INSERT INTO `topic` VALUES ('6082', '33', '4', '四种会话跟踪技术是什么？(jsp)', 'a74a7576-4aad-472f-b798-965796e54131.', null, null, null, null, null, null, 'COOKIE,URL重写,SESSION,隐藏表单域。', '', '0', '2017-12-26 21:23:58', '52', '1');
INSERT INTO `topic` VALUES ('6083', '24', '4', ' 如何使在命令行执行的 iptables 规则永久生效？', '1e150d9d-9b1e-4025-8cc6-0bcd76f302ac.', null, null, null, null, null, null, '1.          /ETC/INIT.D/IPTABLES SAVE\r\n2.          写入配置文件/ETC/SYSCONFIG/IPTABLES\r\n            并重启服务 /ETC/INIT.D/IPTABLES RELOAD', '', '0', '2017-12-26 21:24:00', '48', '1');
INSERT INTO `topic` VALUES ('6084', '4', '4', 'java堆的结构是什么 ? 堆中的Perm Gen(全称 是Permanent Generation)空间是什么 ?', 'e173ccf4-2146-46ef-912a-376d80a206df.', null, null, null, null, null, null, 'JVM有一个运行时数据区,即堆(HEAP).所有的类实例和数组的内存都是从堆中分配的. 它在JVM启动时被创建. 对象所占用的堆内存会被一个称为垃圾回收器的自动内存管理系统收回.  堆内存中包含活的和死的对象. 活的对象可以被程序访问并且不会被垃圾回收. 死的对象是那些不会被程序访问的, 但还没有被垃圾回收器收回的对象. 这种对象会占用堆内存空间直到最终被垃圾回收器收回. ', '', '0', '2017-12-26 21:24:18', '53', '1');
INSERT INTO `topic` VALUES ('6085', '24', '4', '实现把访问 10.0.0.8:80 的请求转到 172.16.1.17:80', '439a6195-590d-42ce-8469-65298547972f.', null, null, null, null, null, null, 'IPTABLES -T NAT -A PREROUTING -D 10.0.0.8 -P TCP --DPORT 80 -J DNAT --TO-DESTINATION 172.16.1.17:80', '', '0', '2017-12-26 21:24:24', '48', '1');
INSERT INTO `topic` VALUES ('6086', '33', '4', '不同客户端可不可以共享Session?', 'c977ec51-da35-455d-b928-2884249115d4.', null, null, null, null, null, null, '不可以', '', '0', '2017-12-26 21:24:37', '52', '1');
INSERT INTO `topic` VALUES ('6087', '4', '4', 'Serial 垃圾回收器与 Throughput 垃圾回收器区别 ? ', '595655d6-1156-4830-8e11-d1280e778282.', null, null, null, null, null, null, 'THROUGHPUT垃圾回收器使用并行版本的新生代回收器, 它用于中到大型数据集的应用. 另一方面, SERIAL回收器通常足以应对大多数的小应用(在现代处理器上不会超过  \r\n约100MB的堆内存).', '', '0', '2017-12-26 21:24:38', '53', '1');
INSERT INTO `topic` VALUES ('6088', '24', '4', ' 实现 172.16.1.0/24 段所有主机通过 10.0.0.8 外网 IP 共享上网。', '34836545-e1d4-4463-8281-bf49b079f437.', null, null, null, null, null, null, 'IPTABLES -T NAT -A POSTROUTING -S 172.16.1.0/24 -O ETH0 -J SNAT --TO-SOURCE 10.0.0.8', '', '0', '2017-12-26 21:24:43', '48', '1');
INSERT INTO `topic` VALUES ('6089', '4', '4', '什么时候对象会被回收 ?', '27d2e08d-db40-493a-8d94-cac378a1e785.', null, null, null, null, null, null, '当前程序无法访问到某个对象时，该对象将被回收. ', '', '0', '2017-12-26 21:24:52', '53', '1');
INSERT INTO `topic` VALUES ('6090', '33', '4', 'Jps和Servlet之间可不可以用session传值?', '0033cb7c-7603-42c3-8278-5ed1ff80d1c5.', null, null, null, null, null, null, '可以   ', '', '0', '2017-12-26 21:24:52', '52', '1');
INSERT INTO `topic` VALUES ('6091', '4', '4', '垃圾回收发生在指定的JVM区域 ? ', '7f5a84f5-6a17-42bc-bd5e-9e0832ca7214.', null, null, null, null, null, null, '垃圾回收在 PERMGEN 里发生。如果 PERMGEN满了或是到了瓶颈，就会触发完全回收。如果仔细 观察垃圾回收过程，会发现PERMGEN最后也被回收了. 这就是为什么要设置合理的PERMGEN大小以避免完全垃圾回收.', '', '0', '2017-12-26 21:25:06', '53', '1');
INSERT INTO `topic` VALUES ('6092', '18', '4', '详细描述 HTTP 工作原理？', '3da585d6-17a8-4dc7-b8d7-10b1d1568ca2.', null, null, null, null, null, null, '用户访问网站流程\r\n三次握手\r\n请求报文\r\n响应报文\r\n四次挥手', '', '0', '2017-12-26 21:25:10', '48', '1');
INSERT INTO `topic` VALUES ('6093', '33', '4', '如何实现购物车添加新项,又不使购物车中原有项目被取消?', '50bc2c6f-7cbb-434d-baa6-aaac22dc0162.', null, null, null, null, null, null, '可以将购物车存放在SESSION当中', '', '0', '2017-12-26 21:25:12', '52', '1');
INSERT INTO `topic` VALUES ('6094', '26', '1', '当BGP路由器从EBGP邻居收到一条新路由时，下列说法正确的是（ ）。', 'f1d1b9be-9e79-4659-8a52-1cd12842fbaf.', '与保存的已发送的路由信息比较，如果已发送，则不发送 ', '与保存的已发送的路由信息比较，如果未发送，则向bgp邻居发送 ', '查看路由表中有无该路由的记录，如果没有，则向bgp邻居发送该路由', '立即发送给bgp邻居 ', '', '', 'B', '', '0', '2017-12-26 21:25:23', '43', '1');
INSERT INTO `topic` VALUES ('6095', '33', '4', 'Cookie的过期时间如何设置?', '55b6d374-827d-4e12-ae3e-a5b85b3335a8.', null, null, null, null, null, null, '使用SETMAXAGE(INT EXP)方法', '', '0', '2017-12-26 21:25:24', '52', '1');
INSERT INTO `topic` VALUES ('6096', '4', '4', ' Java中异常与错误的区别? ', 'c13aef03-7603-4383-907f-ba147b506991.', null, null, null, null, null, null, 'EXCEPTION和ERROR都是THROWABLE类的子类. EXCEPTION用于用户程序需要捕获的异常条件. ERROR定义了用户程序不可预见的异常', '', '0', '2017-12-26 21:25:27', '53', '1');
INSERT INTO `topic` VALUES ('6097', '33', '4', '如果BROWSER已关闭了cookies,在JSP中我如何打开session?', 'e4c28292-d7e6-45da-a61b-e94b4e14fb96.', null, null, null, null, null, null, '如果COOKIE被禁用，SESSION将通过URL重写的方式来传送，所以不会影响SESSION的使用 ', '', '0', '2017-12-26 21:25:37', '52', '1');
INSERT INTO `topic` VALUES ('6098', '18', '4', ' 请描述 iptables 的常见生产应用场景。', '33b53bb9-2a09-40ce-be05-245ab174ffb3.', null, null, null, null, null, null, '主机防火墙（FILTER表的INPUT链）\r\n局域网共享上网（NAT表的POSTROUTING链），半个路由器，NAT功能\r\n端口及IP（一对一）映射（NAT表的PRETOUTING链），硬件防火墙的NAT功能。', '', '0', '2017-12-26 21:25:44', '48', '1');
INSERT INTO `topic` VALUES ('6099', '4', '4', '异常处理中finally语句块的重要性? ', 'fc73b409-1909-43b8-bf52-d528df688bca.', null, null, null, null, null, null, '不管程序是否发生了异常, FINALLY语句块都会被执行. 甚至当没有CATCH声明但抛出了一个异常时, FINALLY语句块也会被执行. 最后要说一点: FINALLY语句块通常用于释放资源, 如I/O缓冲区, 数据库连接等等.', '', '0', '2017-12-26 21:25:44', '53', '1');
INSERT INTO `topic` VALUES ('6100', '4', '4', '异常被处理后异常对象会发生什么? ', '7369aea7-867b-4878-96b8-c40084eb92b5.', null, null, null, null, null, null, '异常对象会在下次GC执行时被回收. ', '', '0', '2017-12-26 21:25:56', '53', '1');
INSERT INTO `topic` VALUES ('6101', '33', '4', 'Jsp有哪些常用动作?作用分别是什么?(jsp)', 'b0514d33-7750-405f-95ae-0f0e1a5b1144.', null, null, null, null, null, null, 'JSP有6种常用基本动作 JSP:INCLUDE：在页面被请求的时候引入一个文件。    \r\nJSP:USEBEAN：寻找或者实例化一个JAVABEAN。    \r\nJSP:SETPROPERTY：设置JAVABEAN的属性。    \r\nJSP:GETPROPERTY：输出某个JAVABEAN的属性。    \r\nJSP:FORWARD：把请求转到一个新的页面。    \r\nJSP:PLUGIN：根据浏览器类型为JAVA插件生成OBJECT或EMBED标记。', '', '0', '2017-12-26 21:26:01', '52', '1');
INSERT INTO `topic` VALUES ('6102', '26', '1', '两台设备之间通过多条ppp链路互联的组网中，应该使用何种技术（  ）', '93b16ad2-8dbb-4fca-8736-d5a0388d82f1.', '等价路由转发', 'link aggregation', 'trunk', ' multilink ppp', '', '', 'D', '', '0', '2017-12-26 21:26:12', '43', '1');
INSERT INTO `topic` VALUES ('6103', '4', '4', '怎样区分finally语句块与finalize()方法?', '98afc4a0-d170-4fed-b889-fa4d72642b21.', null, null, null, null, null, null, '不管是否抛出异常FINALLY语句块都会被执行, 它通常用于释放程序持有的资源. FINALIZE是OBJECT类中的一个PROTECTED方法, 当一个对象被GC回收前它会被JVM调用.', '', '0', '2017-12-26 21:26:16', '53', '1');
INSERT INTO `topic` VALUES ('6104', '24', '4', '请描述下面 iptables 命令的作用------&gt;自定义链', '304309f4-6d2b-4498-b01e-30d22c14569a.', null, null, null, null, null, null, 'IPTABLES -N SYN-FLOOD\r\nIPTABLES -A INPUT -I ETH0 -SYN -J SYN-FLOOD\r\nIPTABLES -A SYN-FLOOD -M LIMIT -LIMIT 5000/S -LIMIT-BURST 200 -J RETURN\r\nIPTABLES -A SYN-FLOOD -J DROP\r\nIPTABLES -N SYN-FLOOD            # 自定义链\r\nIPTABLES -A INPUT -I ETH0 -SYN -J SYN-FLOOD                               # \r\nIPTABLES -A SYN-FLOOD -M LIMIT -LIMIT 5000/S -LIMIT-BURST 200 -J RETURN   #\r\nIPTABLES -A SYN-FLOOD -J DROP', '', '0', '2017-12-26 21:26:36', '48', '1');
INSERT INTO `topic` VALUES ('6105', '33', '4', '什么是web容器？', '58cb3c4c-6557-42ff-b622-be5ffb4dc3a8.', null, null, null, null, null, null, '给处于其中的应用程序组件（JSP，SERVLET）提供一个环境，使JSP,SERVLET直接更容器中的环境变量接口交互，不必关注其它系统问题。主要有WEB服务器来实现。例如：TOMCAT,WEBLOGIC,WEBSPHERE等。该容器提供的接口严格遵守J2EE规范中的WEB APPLICATION 标准。我们把遵守以上标准的WEB服务器就叫做J2EE中的WEB容器。', '', '0', '2017-12-26 21:26:50', '52', '1');
INSERT INTO `topic` VALUES ('6106', '33', '4', '当 applet 加载的时候会发生什么？', '7d8d8f1e-2985-439f-a526-2ce579fa3d55.', null, null, null, null, null, null, '首先，会创建一个 APPLET 的控制类的实例。然后，APPLET 初始化，最后 APPLET 开始运行。', '', '0', '2017-12-26 21:26:50', '53', '1');
INSERT INTO `topic` VALUES ('6107', '18', '1', '局域网需要MPLS VPN的主要原因是（  ）', '951726fc-0e9e-4fa6-919e-93af46551405.', '降低网络管理复杂度', '实现VPN加密', '实现基于网络层的访问控制隔离', '为提高交换速度', '', '', 'C', '', '0', '2017-12-26 21:26:55', '43', '1');
INSERT INTO `topic` VALUES ('6108', '33', '4', 'Applet和Java应用程序有什么不同? ', '211fb0a2-d3fb-4648-ae38-3552a6a66cec.', null, null, null, null, null, null, 'APPLETS需要一个支持JAVA的浏览器, 但是JAVA应用程序可以被单独执行。但是，他们都需要一个JAVA虚拟机，JVM。  还有, 一个JAVA应用程序需要一个MAIN方法与特定的签名，来确保启动. JAVA APPLETS并不需要这样一些东西。  最后, JAVA APPLET通常使用严格的安全策略，而JAVA应用程序通常使用较宽松的安全策略。', '', '0', '2017-12-26 21:27:03', '53', '1');
INSERT INTO `topic` VALUES ('6109', '33', '4', '应用服务器有那些？', '2e477740-6064-4c29-88b5-1a892c4d99d8.', null, null, null, null, null, null, 'BEA WEBLOGIC SERVER，IBM WEBSPHERE APPLICATION SERVER，ORACLE9I APPLICATION SERVER，JBOSS，TOMCAT。\"   ', '', '0', '2017-12-26 21:27:09', '52', '1');
INSERT INTO `topic` VALUES ('6110', '24', '4', ' 写一个防火墙配置脚本，只允许远程主机访问本机的 80 端口', '34866a44-2689-4bf4-b822-b034d4b526cd.', null, null, null, null, null, null, 'IPTABLES -A INPUT -P TCP --DPORT 80 -J ACCEPT         #允许80端口访问\r\nIPTABLES -P INPUT DROP                           #默认拒绝所有服务、端口访问', '', '0', '2017-12-26 21:27:17', '48', '1');
INSERT INTO `topic` VALUES ('6111', '18', '1', '在RIP中metric等于（  ）为不可达 ', '847b4a12-fc6e-4c0a-9885-961c0d14847c.', '16', '15', '10', '8 ', '', '', 'A', '', '0', '2017-12-26 21:27:33', '43', '1');
INSERT INTO `topic` VALUES ('6112', '4', '4', '解释JDBC中驱动的作用。', '0bc8dabf-db46-4fbd-8cff-4e06cf6b9997.', null, null, null, null, null, null, 'JDBC驱动提供了 对 JDBC API 所提供的抽象类 的 数据库供应商的特定实现。每个驱动必须提供JAVA.SQL包的以下的类实现： CONNECTION,STATEMENT,PREPAREDSTATEMENT,CALLABLESTATEMENT,RESULTSET 和 DRIVER。 ', '', '0', '2017-12-26 21:27:34', '53', '1');
INSERT INTO `topic` VALUES ('6113', '24', '4', ' 请描述如何配置一个 linux 上网网关？', '8ece2530-2a67-4d81-ad23-ef8d0500f8cc.', null, null, null, null, null, null, 'IPTABLES -T NAT -A POSTROUTING -O ETH0 -S 172.16.1.0/24 -J SNAT --TO-SOURCE 10.0.0.8', '', '0', '2017-12-26 21:27:38', '48', '1');
INSERT INTO `topic` VALUES ('6114', '33', '4', 'B/S与C/S的联系与区别。', '4cc7c0fe-e3cf-4760-bcfb-92a294de2524.', null, null, null, null, null, null, 'C/S是CLIENT/SERVER的缩写。服务器通常采用高性能的PC、工作站或小型机，并采用大型数据库系统，如ORACLE、SYBASE、INFORMIX或    \r\nSQL SERVER。客户端需要安装专用的客户端软件。   \r\nB/Ｓ是BROWER/SERVER的缩写，客户机上只要安装一个浏览器（BROWSER），如NETSCAPE    \r\nNAVIGATOR或INTERNET EXPLORER，服务器安装ORACLE、SYBASE、INFORMIX或 SQL    \r\nSERVER等数据库。在这种结构下，用户界面完全通过WWW浏览器实现，一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现。浏览器通过ＷEB    \r\nSERVER 同数据库进行数据交互。   \r\nC/S 与 B/S 区别：   \r\n１）．硬件环境不同:   \r\n　　C/S 一般建立在专用的网络上, 小范围里的网络环境,    \r\n局域网之间再通过专门服务器提供连接和数据交换服务.   \r\n　　B/S 建立在广域网之上的, 不必是专门的网络硬件环境,例与电话上网, 租用设备.    \r\n信息自己管理. 有比C/S更强的适应范围, 一般只要有操作系统和浏览器就行   \r\n２）．对安全要求不同   \r\n　　C/S 一般面向相对固定的用户群, 对信息安全的控制能力很强.    \r\n一般高度机密的信息系统采用C/S 结构适宜. 可以通过B/S发布部分可公开信息.   \r\n　　B/S 建立在广域网之上, 对安全的控制能力相对弱, 可能面向不可知的用户。   \r\n３）．对程序架构不同   \r\n　　C/S 程序可以更加注重流程, 可以对权限多层次校验,    \r\n对系统运行速度可以较少考虑.   \r\n　　B/S 对安全以及访问速度的多重的考虑, 建立在需要更加优化的基础之上.    \r\n比C/S有更高的要求 B/S结构的程序架构是发展的趋势, 从MS的.NET系列的BIZTALK    \r\n2000 EXCHANGE 2000等, 全面支持网络的构件搭建的系统. SUN 和IBM推的JAVABEAN    \r\n构件技术等,使 B/S更加成熟.   \r\n４）．软件重用不同   \r\n　　C/S 程序可以不可避免的整体性考虑,    \r\n构件的</ DIV <> ', '', '0', '2017-12-26 21:28:02', '52', '1');
INSERT INTO `topic` VALUES ('6115', '32', '4', '在RMI中远程接口的作用是什么？', 'd898441c-77b5-4e1d-8778-be6a9131c4f3.', null, null, null, null, null, null, '远程接口用于识别那些不是来自本地机子接口但可以被调用的方法。所有对象都是必须直接或间接实现该接口的远程对象。实现该远程接口之前应该声明其远程接口，为每个远程对象定义构造方法，并在所有远程接口中为每个远程方法提供实现。', '', '0', '2017-12-26 21:28:17', '53', '1');
INSERT INTO `topic` VALUES ('6116', '26', '1', 'tftp 服务默认端口号（  ）', '98e429e1-356a-411c-9aeb-1bd69f2f3bff.', '69', '53    DNS端口号 ', '48', '23    TELNET端口号', '', '', 'A', '', '0', '2017-12-26 21:28:29', '43', '1');
INSERT INTO `topic` VALUES ('6117', '4', '4', '一个 Applet 和 一个 Servlet 区别是什么 ?', '7b3ef4b3-8e8e-47b9-ad4e-d6d0012b3ff3.', null, null, null, null, null, null, '一个 APPLET 是一个跑在客户机器的 网页浏览器 里面的 客户端JAVA程序。相反，一个 SERVLET 是跑在网页服务器的服务的容器。一个 APPLET 能使用用户界面CLASS， 而一个 SERVLET 不能够有一个用户界面。相反，一个SERVLET 等待客户端的 HTTP 请求并为每一个请求生成一个响应。', '', '0', '2017-12-26 21:28:48', '53', '1');
INSERT INTO `topic` VALUES ('6118', '26', '4', '详述 iptales 工作流程以及规则过滤顺序？', 'e65bf3d5-d9f3-43dd-8e97-1ddfecb9696e.', null, null, null, null, null, null, '1.防火墙是一层层过滤的。实际是按照配置规则的顺序从上到下，从前到后进行过滤的。\r\n2.如果匹配上了规则，即明确表明是阻止还是通过，此时数据包就不能向下匹配新规则了。\r\n3.如果所有规则中没有明确表明是阻止还是通过这个数据包，也就是没有匹配上规则，向下进行匹配，直到匹配默认规则得到明确的阻止还是通过。\r\n4.防火墙的默认规则是对应链的所有的规则执行完才会执行的，（最后执行的规则）', '', '0', '2017-12-26 21:28:55', '46', '1');
INSERT INTO `topic` VALUES ('6119', '26', '1', '从整个internet的观点出发，如何有效的减少路由表的规模（ ）', 'e6f5f36e-e295-4ed6-ae65-634b009a71a8.', '路由聚合', '划分vlan', '使用路由过滤策略', '增加动态路由的更新频率', '', '', 'A', '', '0', '2017-12-26 21:29:15', '43', '1');
INSERT INTO `topic` VALUES ('6120', '4', '4', 'doGet()和doPost()之间的区别是什么？', '1be15926-88e0-4d91-8900-7c6fbe65d146.', null, null, null, null, null, null, 'DOGET ： GET方法附加请求的URL的名称 - 值对。因此，存在客户端的请求字符数量的限制。此外，该请求的参数值为可见，因此，如果有敏感信息不能采用这种方式。    \r\n   \r\nDOPOST： POST方法克服了GET请求的限制，将发送请求的值置于BODY里。此外，发送值的数量没有限制。最后，通过POST请求传递的敏感信息是不可见的 ', '', '0', '2017-12-26 21:29:17', '53', '1');
INSERT INTO `topic` VALUES ('6121', '33', '4', '什么是服务端包含 (SSI) ? ', 'dd1c73dd-d84b-492a-b2ce-24742525d873.', null, null, null, null, null, null, '服务端包含是服务端的一种简单脚本语言,主要应用在WEB方面，置于SERVLET标签中. 最常用的地方就是在网页中引入一个或多个文件. 当浏览器加载页面时，使用SERVLET产生的超文本替换其标签.', '', '0', '2017-12-26 21:29:30', '53', '1');
INSERT INTO `topic` VALUES ('6122', '33', '4', 'web应用是什么 ? ', 'fddf9d7b-dc41-4bfe-bfa5-0ddc9bb0cada.', null, null, null, null, null, null, 'WEB应用是WEB服务的延伸. 主要有两种类型：面向视 觉的和面向服务的. 面向视觉型的应用通过编辑语言来动态展示交互页面. 面向应用的则提供了后端的SERVICE.总的来说，就是一堆置于 SERVER\'S URL明明空间下的SERVLETS. ', '', '0', '2017-12-26 21:29:39', '53', '1');
INSERT INTO `topic` VALUES ('6123', '26', '1', '目前使最广泛的IGP协议是（  ）', 'c3e28d31-bf4b-4a48-9a44-bc1243c5ee7d.', 'ospf', 'is‐is', ' bgp', ' rip', '', '', 'A', '', '0', '2017-12-26 21:29:58', '43', '1');
INSERT INTO `topic` VALUES ('6124', '4', '4', '如何知道请求 servlet的客户端信息 ?', 'fe40ae9d-fe49-4e95-b970-16c4cf53ff5b.', null, null, null, null, null, null, 'SERVLETREQUEST类可以获取客户端的IP地址或主机名. GETREMOTEADDR()获取IP GETREMOTEHOST()获取主机名.', '', '0', '2017-12-26 21:30:06', '53', '1');
INSERT INTO `topic` VALUES ('6125', '4', '4', 'Http response的结构是什么 ?', '771f71c8-75e8-4444-9db5-6ffff75c2796.', null, null, null, null, null, null, 'HTTP RESPONSE 包括了三个部分:   STATUS CODE: 描述了这次回应的状况. 它可 以用来检查这次请求是否成功完成. 一旦请求失败了, 这个STATUS CODE可以用来寻找原因. 如果你的 SERVLET 没有返回一个STATUS CODE, 默认就会返回成功的STATUS CODE,  HTTPSERVLETRESPONSE.SC_OK.    HTTP HEADERS: 它包含了RESPONSE的更多信息.举个例子，HEADERS可以反应RESPONSE的访问DATE/TIME, 或者是用于将实体安全地传送到用户的编码形式。可以阅读 HOW TO RETRIEVE HEADERS IN  SERVLET HERE.  BODY: 它是RESPONSE的具体内容. 可能包括 HTML内容,比如图片。BODY包括了紧接HEADER发送的HTTP事务消息数据字节。', '', '0', '2017-12-26 21:30:33', '53', '1');
INSERT INTO `topic` VALUES ('6126', '26', '1', '根据MAC地址划分VLAN的方法属于（  ）', '21d0d124-b37d-4441-bc02-a958073aa658.', '垂直划分', '水平划分', '动态划分', '静态划分', '', '', 'C', '', '0', '2017-12-26 21:30:37', '43', '1');
INSERT INTO `topic` VALUES ('6127', '26', '4', '什么是iptables？', '0e44fb0d-cc13-439f-a755-131b87a23992.', null, null, null, null, null, null, 'IPTABLES 是与最新的 3.5 版本 LINUX 内核集成的 IP 信息包过滤系统。如果 LINUX 系统连接到因特网或 LAN、服务器或连接 LAN 和因特网的代理服务器， 则该系统有利于在 LINUX 系统上更好地控制 IP 信息包过滤和防火墙配置。', '', '0', '2017-12-26 21:31:02', '46', '1');
INSERT INTO `topic` VALUES ('6128', '26', '1', 'SNMPv2 弥补了snmp的（  ）弱点', '5f27f5d5-4913-499a-9bcf-dac8c83897d3.', '安全性和数据组织', '性能管理', '数据组织', '安全性', '', '', 'A', '', '0', '2017-12-26 21:31:12', '43', '1');
INSERT INTO `topic` VALUES ('6129', '3', '4', ' JSP的优势所在？', '9794f22a-f797-4bd6-a961-e84f3a48297d.', null, null, null, null, null, null, '使用JSP技术有以下优势：    JSP网页被动态的编译，因此开发者很容易更新当前代码。    \r\n   \r\n JSP网页可预编译。   JSP网页能容易的组合成静态模版，包括HTML XML片段，且代码可形成动态内容。   开发者能提供自定义的JSP标签库，且使用类XML语法访问。    开发者可以在组件级别做逻辑上的改变，但是不能使用程序逻辑编辑个别的网页。', '', '0', '2017-12-26 21:31:25', '53', '1');
INSERT INTO `topic` VALUES ('6130', '3', '4', '什么是指令？在JSP中， 包括哪些不同类型的指令？', '7e6893d4-c77b-449d-8373-fe16ff1ee984.', null, null, null, null, null, null, '指令是JSP引擎所处理的命令，当网页被编译成小程序时，指令用于去设置页面级别的命令，从外部文件插入数据，指定自定义的标签库。指令被包括在<%@ 和%>内。指令的类型分为：   包含指令：用于包含文件，和当用页面合并文件内容。   页面指令：用于定义JSP页面的具体属性，比如错误页面和缓冲池。    标签库：用于声明页面中使用到的自定义标签库。', '', '0', '2017-12-26 21:31:40', '53', '1');
INSERT INTO `topic` VALUES ('6131', '26', '1', 'RIP协议的路由项在多少时间内没有更新会变为不可达（  )', '31cc8a40-b11f-47ff-acba-1d86e9b34a5a.', '90s', '180s', '120s', '240s ', '', '', 'B', 'RIP路由协议有3个计时器，更新计时器、超时计时器、刷新计时器。更新路由信息为30S，180S后路由更新超时，即路由无效，变为不可达，路由更新超时后启动路由刷新计时器，时间为90S；270S后仍未收到路由更新，则移除该路由(180S+90S刷新)  ', '0', '2017-12-26 21:32:03', '43', '1');
INSERT INTO `topic` VALUES ('6132', '26', '1', '关于AD Hoc 网络的描述中，错误的是（  )', 'cf32a5c6-80d1-448e-94dd-3e50d0eae8f1.', '是一种对等式的无线移动网络', '在WLAN的基础上发展起来', '采用无基站的通信模式', '在军事领域广泛应用', '', '', 'B', '', '0', '2017-12-26 21:32:39', '43', '1');
INSERT INTO `topic` VALUES ('6133', '3', '4', '求质数的多种优化方式', 'df271547-8703-419b-b57b-974c76ecc1e7.', null, null, null, null, null, null, '一般我们求质数时都会去计算小于某一个数N的质数而不会不加限定，现在我们以求小于N的质数来说一说优化方式。在我们求质数的过程中一般会用到两种方法试除法和筛选法两种，现在下来说一下试除法：  ①.判断小于N的数X是否是质数，就是从2一直尝试到X-1，这种做法效率最差，并不可取----->②如果X是质数，那么它如果不能被小于X/2的数整除即可，这样算法效率提高一些---->③除了2以外，所有的质数都只能是奇数，所以我们可以将数X先试除2，然后尝试从3一直到X/2的所有奇数----->④其实判断一个数是否是质数，只需判断一个数能不能被除了1\r\n之外小于X的数整除即可，----->⑤最后，我们可以利用前面求出来的质数来判断，我们只需判断X能不能\r\n被小于X的质数整除即可，这样效率是不是更高。  再说筛选法：对于使用筛选法的优化主要是从空间上考虑  ①定义一个容器，将数据放入容器中，然后遍历其中的数据，将是合数的数据删除，最后剩余的就是质数了------>②我们可以定义一个布尔类型的数组容器，将其中的值都赋值为TRUE，在筛选的过程中将不是质数的数作为数组的下标将对应元素的值改为FALSE，最后取出值为TRUE的元素的下标即可----->③构造定长的BYTE数组，数组的每个BYTE存储8个布尔值，这样性能是不是又有了提\r\n    高呢。', '', '0', '2017-12-26 21:32:51', '53', '1');
INSERT INTO `topic` VALUES ('6134', '3', '4', '简述值类型和引用类型的区别', '47bfa8c3-1f95-4179-a91c-43d509b772f0.', null, null, null, null, null, null, '值类型包括简单 类型、结构体类型和枚举类型,引用类型包括自定义类、数组、 接口、委托等  他们两在内存中存储的方式不同，值类型以栈的方式存储的，引用类型以堆的方式；前者是真实的存储空间，后者只是存储地址的引用！', '', '0', '2017-12-26 21:33:11', '53', '1');
INSERT INTO `topic` VALUES ('6135', '3', '4', '简述类中的静态成员和非静态成员的区别 ', '3da6e8ea-a280-43ac-a749-6a6fc26d548a.', null, null, null, null, null, null, '静态变量使用 STATIC 修饰符进行声明，在类被实例化时创建，通过类进行访问。不带有 STATIC 修饰符声明的变量称做非静态变量，在对象被实例化时创建，通过对象进行访问。一个类的所有实例的同一静态变量都是同一个值，同一个类的不同实例的同一非静态变量可以是不同的值。静态函数的实现里不能使用非静态成员，如非静态变量、非静态函数等。', '', '0', '2017-12-26 21:33:23', '53', '1');
INSERT INTO `topic` VALUES ('6136', '26', '1', '下面有关BGP协议描述，错误的是（  ）', '354d1091-256a-4824-9078-db12949ce5e3.', 'bgp是一个很健壮的路由协议', 'bgp无法聚合同类路由 ', 'bgp可以用来检测路由环路 ', 'bgp是由egp继承而来的', '', '', 'B', '', '0', '2017-12-26 21:33:31', '43', '1');
INSERT INTO `topic` VALUES ('6137', '4', '4', '什么是单例？', 'fc5db833-61b9-49eb-9d87-c202b2c69e07.', null, null, null, null, null, null, '一个类中只有一个实例并且自行化向整个系统提供这个实例叫单例', '', '0', '2017-12-26 21:33:34', '53', '1');
INSERT INTO `topic` VALUES ('6138', '4', '4', 'super()和this()的区别', '966d7dcd-6fb1-48ac-9c6b-578181b3ff0d.', null, null, null, null, null, null, 'SUPER()指父类的无参构造方法，THIS()指当前类的无参构造方法，两者都必须写在构造方法的第一句', '', '0', '2017-12-26 21:33:50', '53', '1');
INSERT INTO `topic` VALUES ('6139', '4', '4', '过滤器Filter和struts2拦截器的区别\r\n ', 'dd597493-42f0-4cdd-91fd-fb7af23dd3d2.', null, null, null, null, null, null, '1、拦截器是基于JAVA反射机制的，而过滤器是基于函数回调的。\r\n 2、过滤器依赖于SERVLET容器，而拦截器不依赖于\r\nSERVLET容器。\r\n 3、拦截器只能对ACTION请求起作用，而过滤器则可以对几乎所有请求起作用。\r\n 4、拦截器可以访问ACTION上下文、值栈里的对象，而过滤器不能。', '', '0', '2017-12-26 21:33:58', '52', '1');
INSERT INTO `topic` VALUES ('6140', '3', '4', '多线程有几种实现方式，同步有几种实现方式，stop()和suspend()方法为什么不推荐使用', '4640ad5a-6e27-4b56-8ad4-abdd5c882afb.', null, null, null, null, null, null, '多线程有两种实现方法，分别是继承THREAD类与实现RUNNABLE接口    同步的实现方面有两种，分别是SYNCHRONIZED,WAIT与NOTIFY\"    反对使用STOP()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。SUSPEND()方法容易发生死锁。 调用SUSPEND()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被\"挂起\"的线程恢复 运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成\r\n    死锁。所以不应该使用SUSPEND()，而应在自己的 THREAD类中置入一个标志，', '', '0', '2017-12-26 21:34:38', '53', '1');
INSERT INTO `topic` VALUES ('6141', '26', '1', '下面（  ）是ospf协议的特点', '8470bc1a-ce8b-4ed9-af67-ed5b8a7ad5c7.', '支持非区域划分', '无路由自环', '支持身份验证', '路由自动聚合', '', '', 'B', '', '0', '2017-12-26 21:34:42', '43', '1');
INSERT INTO `topic` VALUES ('6142', '4', '4', '请阐述一下你对Java多线程中同步的几种使用方式，区别，以及其重要性。 ', 'c61b4cc0-b2a9-4559-83bc-3d1fa662fc57.', null, null, null, null, null, null, '同步有两种实现方式  1.同步方法   2.同步代码块  多线程的同步时为了能够保证关键数据在单位时间能只能有一个线程操作，保证数据的同步性，安全性', '', '0', '2017-12-26 21:34:56', '53', '1');
INSERT INTO `topic` VALUES ('6143', '26', '1', '提供可靠数据传输、流控的是osi的（  )', 'c43cae7c-1280-4301-8805-ff5157b7c09e.', '表示层', '传输层', '网络层', '会话层', '', '', 'B', '', '0', '2017-12-26 21:35:27', '43', '1');
INSERT INTO `topic` VALUES ('6144', '26', '4', '你的系统目前有许多正在运行的任务，在不重启机器的条件下，有什么方法可以把所有正在运行的进程移除呢？', '021d43f4-e5a1-433b-8c9f-1612c8a1fa86.', null, null, null, null, null, null, ' 使用LINUX命令 ’DISOWN -R ’可以将所有正在运行的进程移除。\r\n', '', '0', '2017-12-26 21:36:27', '46', '1');
INSERT INTO `topic` VALUES ('6145', '3', '4', '如何对Object的list排序？', '3b7ca97a-d3dc-441f-be2b-ffbea3cb5748.', null, null, null, null, null, null, '对OBJECTS数组进行排序，我们可以用ARRAYS.SORT()方法\r\n如果要对OBJECTS的集合进行排序，需要使用COLLECTIONS.SORT()方法', '', '0', '2017-12-26 21:36:28', '52', '1');
INSERT INTO `topic` VALUES ('6146', '33', '4', 'comparable 和 comparator的不同之处？', 'a8460834-4596-4371-849e-a78c610b8f95.', null, null, null, null, null, null, 'COMPARABLE接口实际上是出自JAVA.LANG包\r\n它有一个 COMPARETO(OBJECT OBJ)方法来将OBJECTS排序\r\nCOMPARATOR接口实际上是出自 JAVA.UTIL 包\r\n它有一个COMPARE(OBJECT OBJ1, OBJECT OBJ2)方法来将OBJECTS排序', '', '0', '2017-12-26 21:36:44', '52', '1');
INSERT INTO `topic` VALUES ('6147', '33', '4', 'Iterator、ListIterator 和 Enumeration的区别？', '4ca062f3-c056-4ec1-a35d-ae042f0a9d61.', null, null, null, null, null, null, 'ENUMERATION接口在JAVA1.2版本开始有，所以ENUMERATION是合法规范的接口\r\nENUMERATION使用ELEMENTS()方法\r\nITERATOR对所有JAVA集合类都有实现\r\nITERATOR使用ITERATOR方法\r\nITERATOR只能往一个方向前进\r\nLISTITERATOR仅仅对LIST类型的类实现了\r\nLISTITERATOR使用LISTITERATOR（）方法', '', '0', '2017-12-26 21:37:06', '52', '1');
INSERT INTO `topic` VALUES ('6148', '3', '4', 'Java 中 Set 与 List 有什么不同?', '6dcb3f0a-0e71-424c-a1ba-ee7379b46938.', null, null, null, null, null, null, 'SET是一个不允许重复元素存在的集合\r\nSET没有索引\r\nSET仅仅允许一个NULL值\r\nSET有类：HASHSET、LINKEDHASHMAP、TREESET\r\nLIST有索引\r\nLIST允许N个NULL值\r\nLIST可以按插入顺序显示\r\nLIST有类：VECTOR、ARRAYLIST、LINKEDLIST', '', '0', '2017-12-26 21:37:42', '52', '1');
INSERT INTO `topic` VALUES ('6149', '3', '4', 'arraylist 与 vector 的区别?', '0c2f431f-c9ad-4847-84d3-0e7b15720dba.', null, null, null, null, null, null, 'VECTOR 在JAVA的第一个版本就引入了，也就是说VECTOR是一个合法规范的类\r\nARRAYLIST在JAVA1.2版本引入的，是JAVA 集合框架的组成部分\r\nVECTOR是同步的\r\nARRAYLIST是不同步的', '', '0', '2017-12-26 21:37:56', '52', '1');
INSERT INTO `topic` VALUES ('6150', '3', '4', '什么类实现了List接口？', '1bc205a6-6438-4eb5-ac73-ebbfb847256b.', null, null, null, null, null, null, 'ARRAYLIST\r\nLINKEDLIST\r\nVECTOR', '', '0', '2017-12-26 21:38:13', '52', '1');
INSERT INTO `topic` VALUES ('6151', '26', '1', '802.1d中规定了disabled端口状态，此状态端口具有的功能是（  ）', 'f931e538-dd12-4eb1-8bf9-23490816698e.', '不收发任何报文', '不接受或转发数据，接受并发送BPDU，不进行地址学习 ', '不接受或转发数据，接受但不发送BPDU，不进行地址学习 ', '不接受或转发数据，接受并发送BPDU，开始地址学习 ', '', '', 'A', '', '0', '2017-12-26 21:38:13', '43', '1');
INSERT INTO `topic` VALUES ('6152', '26', '1', '建立数据字典的阶段是（ ） ', '9ed5c26c-8463-4f8e-bbd6-32125b53e39f.', '系统规划', '系统分析', '系统设计', '系统实施', '', '', 'B', '数据字典（Data dictionary）是一种用户可以访问的记录数据库和应用程序元数据的目录。主动数据字典是指在对数据库或应用程序结构进行修改时，其内容可以由DBMS自动更新的数据字典。被动数据字典是指修改时必须手工更新其内容的数据字典。', '0', '2017-12-26 21:38:22', '46', '1');
INSERT INTO `topic` VALUES ('6153', '25', '4', '脚本会复制文件(arg1) 到目标地址(arg2)', 'eb736fa9-9415-4882-8a68-968153cbee3d.', null, null, null, null, null, null, './COPY.SH FILE1.TXT /TMP/\r\nCAT COPY.SH\r\n#!/BIN/BASH\r\nCP $1 $2', '', '0', '2017-12-26 21:38:27', '48', '1');
INSERT INTO `topic` VALUES ('6154', '33', '4', '如何保证一个集合线程安全？', '88821f52-90cf-45df-950e-616d0328640c.', null, null, null, null, null, null, 'VECTOR, HASHTABLE, PROPERTIES 和 STACK 都是同步的类，所以它们都线程安全的，可以被使用在多线程环境中\r\n使用COLLECTIONS.SYNCHRONIZEDLIST(LIST)) 方法，可以保证LIST类是线程安全的\r\n使用JAVA.UTIL.COLLECTIONS.SYNCHRONIZEDSET()方法可以保证SET类是线程安全的', '', '0', '2017-12-26 21:38:30', '52', '1');
INSERT INTO `topic` VALUES ('6155', '3', '4', '是否可以往 TreeSet 或者 HashSet 中添加 null 元素？', 'cff28219-e1dd-48ca-8aa4-31241df42e86.', null, null, null, null, null, null, '可以往 HASHSET 中添加一个 NULL\r\nTREESET 也允许一个 NULL值', '', '0', '2017-12-26 21:38:44', '52', '1');
INSERT INTO `topic` VALUES ('6156', '33', '4', 'Iterator符合哪个设计模式？', 'a0889805-ab91-4b24-8b63-e04b686eb66d.', null, null, null, null, null, null, 'ITERATOR 设计模式', '', '0', '2017-12-26 21:39:00', '52', '1');
INSERT INTO `topic` VALUES ('6157', '3', '4', 'HashSet 实现了哪个数据结构？', 'd211a29c-83f5-4b9a-be6f-80a6af907b44.', null, null, null, null, null, null, 'HASHSET 内部实现了HASHMAP', '', '0', '2017-12-26 21:39:10', '52', '1');
INSERT INTO `topic` VALUES ('6158', '3', '4', 'hashCode() 和 equals() 方法的重要性？如何在Java中使用它们？', '467ac860-5802-41ad-8fe9-d8ee25411772.', null, null, null, null, null, null, 'HASHCODE() 和 EQUALS() 方法定义在”OBJECT”类中\r\n如果EQUALS() 方法在比较2个对象时返回TRUE，那么HASHCODE()的返回值必须得一样', '', '0', '2017-12-26 21:39:32', '52', '1');
INSERT INTO `topic` VALUES ('6159', '3', '4', 'array 和 arraylist 的区别？', '1a58a7e8-dd52-4e92-a5d8-86f6c8fe97a7.', null, null, null, null, null, null, 'ARRAY类似OBJECT集合类型，大小固定\r\nARRAYLIST是同质和异质元素的集合', '', '0', '2017-12-26 21:39:48', '52', '1');
INSERT INTO `topic` VALUES ('6160', '33', '4', '什么是 Properties 类？', '46ae1851-85b6-42fd-bdb5-b85a1b1ed21f.', null, null, null, null, null, null, 'PROPERTIES 是HASHTABLE的子类。它被用于维护值的LIST，其中它们的键、值都是STRING类型', '', '0', '2017-12-26 21:40:00', '52', '1');
INSERT INTO `topic` VALUES ('6161', '25', '4', '查找/root/目录下是否存在该文件?', '2d2af308-87ae-4035-930f-7d8bae9cd0b0.', null, null, null, null, null, null, '#/BIN/BASH  // 以BASH SHELL来解释\r\nECHO \"ENTER A FILE NAME:\"\r\nREAD A      // 读取用户输入的信息并向右侧变量分配用户输入的值\r\nIF TEST  -E /ROOT/$A   //  TEST检查文件和比较值，注意变量引用时用$\r\nTHEN ECHO \"THE FILE IS EXIST!\"\r\nELSE ECHO \"THE FILE IS NOT EXIST!\"\r\nFI', '', '0', '2017-12-26 21:40:13', '48', '1');
INSERT INTO `topic` VALUES ('6162', '3', '4', '如何将一个字符串转换为arraylist?', '6b4fda1b-0c87-48e6-bbdb-47bab9e18e79.', null, null, null, null, null, null, '使用 ARRAYLIST.TOARRAY() 方法', '', '0', '2017-12-26 21:40:17', '52', '1');
INSERT INTO `topic` VALUES ('6164', '3', '4', '重载（Overload）和重写（Override）的区别。重载的方法能否根据返回类型进行区分？ ', '984b7621-fdad-4c0b-b4bd-d57688c5a11d.', null, null, null, null, null, null, '方法的重载和重写都是实现多态的方式，区别在于前者实现的是编译时的多态性，而后者实现的是运行时的多态性。重载发生在一个类中，同名的方法如果有不同的参数列表（参数类型不同、参数个数不同或者二者都不同）则视为重载；重写发生在子类与父类之间，重写要求子类被重写方法与父类被重写方法有相同的返回类型，比父类被重写方法更好访问，不能比父类被重写方法声明更多的异常（里氏代换原则）。重载对返回类型没有特殊的要求。', '', '0', '2017-12-26 21:44:36', '52', '1');
INSERT INTO `topic` VALUES ('6165', '26', '2', 'Linux 以太网络卡的默认代号为 eth1, eth2 等等, 无线网卡则为 wlan0, ra0 等等；', '3fa50600-dde6-464c-b696-fe176eed3f1d.', null, null, null, null, null, null, '错误', 'Linux 以太网络卡的默认代号为 eth0, eth1 等等, 无线网卡则为 wlan0, ra0 等等；', '0', '2017-12-26 21:45:11', '29', '1');
INSERT INTO `topic` VALUES ('6166', '26', '2', '若需要自行编译网卡驱动程序时，则你必须要先安装 gcc, make, kernel-header 等软件。', 'fc841c78-9b61-4852-b4d6-e43121376b77.', null, null, null, null, null, null, '正确', '', '0', '2017-12-26 21:45:34', '29', '1');
INSERT INTO `topic` VALUES ('6167', '3', '4', 'String s = new String(\"xyz\");创建了几个字符串对象？', '1fd75541-d9a4-48fe-8bc6-8f0ec56cfec1.', null, null, null, null, null, null, '两个对象，一个是静态区的\"XYZ\"，一个是用NEW创建在堆上的对象。', '', '0', '2017-12-26 21:46:10', '52', '1');
INSERT INTO `topic` VALUES ('6168', '26', '1', 'lan在基于广播的以太网中，所有的工作站都可以接收到发送到网上的（ ）', 'd5a751aa-4038-463a-96f4-282a0cd4a4c2.', '电信号', '广播帧', '比特流', '数据包', '', '', 'B', '', '0', '2017-12-26 21:46:18', '43', '1');
INSERT INTO `topic` VALUES ('6169', '3', '4', '数据类型之间的转换： \r\n- 如何将字符串转换为基本数据类型？ \r\n- 如何将基本数据类型转换为字符串？', 'a6b123c0-6e0d-47eb-9a65-3e5848f61a97.', null, null, null, null, null, null, '- 调用基本数据类型对应的包装类中的方法PARSEXXX(STRING)或VALUEOF(STRING)即可返回相应基本类型； \r\n- 一种方法是将基本数据类型与空字符串（\"\"）连接（+）即可获得其所对应的字符串；另一种方法是调用STRING 类中的VALUEOF()方法返回相应字符串', '', '0', '2017-12-26 21:47:02', '52', '1');
INSERT INTO `topic` VALUES ('6170', '3', '4', '怎样将GB2312编码的字符串转换为ISO-8859-1编码的字符串？ ', 'ba149111-b74b-4831-819d-ec6beecc3347.', null, null, null, null, null, null, '代码如下所示：\r\n\r\nSTRING S1 = \"你好\";\r\nSTRING S2 = NEW STRING(S1.GETBYTES(\"GB2312\"), \"ISO-8859-1\");', '', '0', '2017-12-26 21:47:24', '52', '1');
INSERT INTO `topic` VALUES ('6171', '18', '4', 'FIQ比IRQ快的原因：', 'b696cdd3-66ee-47a8-bf34-e3f0bd1b0cc3.', null, null, null, null, null, null, 'FIQ模式的R8--R14寄存器是独有的，FIQ处理程序可以不必执行保存和恢复中断', '', '0', '2017-12-26 21:47:28', '48', '1');
INSERT INTO `topic` VALUES ('6172', '18', '4', '在ARM系统中，在函数调用的时候，参数是通过哪种方式传递的', 'd8b97dcb-0c61-470a-b288-633f4c7d164d.', null, null, null, null, null, null, '当参数小于等于4的时候是通过R0-R3寄存器来进行传递的，当参数大于4的时候是通过压栈的方式进行传递。', '', '0', '2017-12-26 21:48:19', '48', '1');
INSERT INTO `topic` VALUES ('6173', '3', '4', 'Java语言如何进行异常处理，关键字：throws、throw、try、catch、finally分别如何使用？ ', 'c625ac05-5115-4495-b7b4-30004bee4976.', null, null, null, null, null, null, 'JAVA通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在JAVA中，每个异常都是一个对象，它是THROWABLE类或其子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并可以对其进行处理。JAVA的异常处理是通过5个关键词来实现的：TRY、CATCH、THROW、THROWS和FINALLY。一般情况下是用TRY来执行一段程序，如果系统会抛出（THROW）一个异常对象，可以通过它的类型来捕获（CATCH）它，或通过总是执行代码块（FINALLY）来处理；TRY用来指定一块预防所有异常的程序；CATCH子句紧跟在TRY块后面，用来指定你想要捕获的异常的类型；THROW语句用来明确地抛出一个异常；THROWS用来声明一个方法可能抛出的各种异常（当然声明异常时允许无病呻吟）；FINALLY为确保一段代码不管发生什么异常状况都要被执行；TRY语句可以嵌套，每当遇到一个TRY语句，异常的结构就会被放入异常栈中，直到所有的TRY语句都完成。如果下一级的TRY语句没有对某种异常进行处理，异常栈就会执行出栈操作，直到遇到有处理这种异常的TRY语句或者最终将异常抛给JVM。', '', '0', '2017-12-26 21:48:22', '52', '1');
INSERT INTO `topic` VALUES ('6174', '18', '3', '在ARM的汇编程序中，有如下几种伪指令：_____、______、______、______、______。', '8f82dde3-8049-46ab-a97e-fdaa8fe0237e.', null, null, null, null, null, null, ' 答案：符号定义伪指令、数据定义伪指令、汇编控制伪指令、宏指令、其他伪指令', '', '0', '2017-12-26 21:49:14', '48', '1');
INSERT INTO `topic` VALUES ('6175', '33', '4', '线程的sleep()方法和yield()方法有什么区别？  ', 'aecc7155-a7cf-4e23-b56e-edc51f8eee0d.', null, null, null, null, null, null, '① SLEEP()方法给其他线程运行机会时不考虑线程的优先级，因此会给低优先级的线程以运行的机会；YIELD()方法只会给相同优先级或更高优先级的线程以运行的机会； \r\n② 线程执行SLEEP()方法后转入阻塞（BLOCKED）状态，而执行YIELD()方法后转入就绪（READY）状态； \r\n③ SLEEP()方法声明抛出INTERRUPTEDEXCEPTION，而YIELD()方法没有声明任何异常； \r\n④ SLEEP()方法比YIELD()方法（跟操作系统CPU调度相关）具有更好的可移植性。', '', '0', '2017-12-26 21:49:25', '52', '1');
INSERT INTO `topic` VALUES ('6176', '33', '4', '请说出与线程同步以及线程调度相关的方法。 ', '2b154154-ad86-409d-98e1-e0c8351ca779.', null, null, null, null, null, null, '- WAIT()：使一个线程处于等待（阻塞）状态，并且释放所持有的对象的锁； \r\n- SLEEP()：使一个正在运行的线程处于睡眠状态，是一个静态方法，调用此方法要处理INTERRUPTEDEXCEPTION异常； \r\n- NOTIFY()：唤醒一个处于等待状态的线程，当然在调用此方法的时候，并不能确切的唤醒某一个等待状态的线程，而是由JVM确定唤醒哪个线程，而且与优先级无关； \r\n- NOTITYALL()：唤醒所有处于等待状态的线程，该方法并不是将对象的锁给所有线程，而是让它们竞争，只有获得锁的线程才能进入就绪状态；', '', '0', '2017-12-26 21:51:26', '52', '1');
INSERT INTO `topic` VALUES ('6177', '18', '3', '协处理器主要控制：______、______、______。', 'c6972bf4-1a35-44e2-804a-f48aa34d44ca.', null, null, null, null, null, null, '答案：片内的MMU、指令和数据缓存（IDC）、写缓冲（WRITE BUFFER）', '', '0', '2017-12-26 21:51:33', '48', '1');
INSERT INTO `topic` VALUES ('6178', '33', '4', '简述synchronized 和java.util.concurrent.locks.Lock的异同？ ', 'abb58f1c-3129-45fc-9590-aa9aaf1bebf9.', null, null, null, null, null, null, 'LOCK是JAVA 5以后引入的新的API，和关键字SYNCHRONIZED相比主要相同点：LOCK 能完成SYNCHRONIZED所实现的所有功能；主要不同点：LOCK有比SYNCHRONIZED更精确的线程语义和更好的性能，而且不强制性的要求一定要获得锁。SYNCHRONIZED会自动释放锁，而LOCK一定要求程序员手工释放，并且最好在FINALLY 块中释放（这是释放外部资源的最好的地方）。', '', '0', '2017-12-26 21:52:22', '52', '1');
INSERT INTO `topic` VALUES ('6179', '18', '3', 'ARM微处理器在较新的体系结构中支持两种指令集：______、______。', 'aedf0229-df50-4699-8b52-b0b3670c0dcb.', null, null, null, null, null, null, '答案：ARM指令集、THUMB指令集', '', '0', '2017-12-26 21:52:33', '48', '1');
INSERT INTO `topic` VALUES ('6180', '18', '3', 'ARM处理器有9种基本寻址方式，分别是：______、______、______、______、______、______、______、______、______。', '9828b77a-cdaf-4ef2-a38b-1233ebc6bc06.', null, null, null, null, null, null, '答案：寄存器寻址、立即寻址、寄存器偏移寻址、寄存器间接寻址、基址寻址、多寄存器寻址、堆栈寻址、块拷贝寻址、相对寻址', '', '0', '2017-12-26 21:53:08', '48', '1');
INSERT INTO `topic` VALUES ('6181', '33', '4', '你在项目中哪些地方用到了XML？ ', 'c49e78f9-a37e-44d3-a4fe-7941b936b17f.', null, null, null, null, null, null, 'XML的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML将数据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再从XML文件中还原相关信息进行处理，XML曾经是异构系统间交换数据的事实标准，但此项功能几乎已经被JSON（JAVASCRIPT OBJECT NOTATION）取而代之。当然，目前很多软件仍然使用XML来存储配置信息，我们在很多项目中通常也会将作为配置信息的硬代码写在XML文件中，JAVA的很多框架也是这么做的，而且这些框架都选择了DOM4J作为处理XML的工具，因为SUN公司的官方API实在不怎么好用。', '', '0', '2017-12-26 21:53:17', '52', '1');
INSERT INTO `topic` VALUES ('6182', '18', '3', 'ARM指令集可以分为6类，分别是：______、______、______、______、______、______。', '78c2e9d7-3d94-4ba8-bdcc-3b1f25fba40e.', null, null, null, null, null, null, '答案：跳转指令、数据处理指令、程序状态寄存器（PSR）传输指令、LOAD/STORE指令、协处理器指令、异常中断产生指令', '', '0', '2017-12-26 21:53:39', '48', '1');
INSERT INTO `topic` VALUES ('6183', '32', '4', '使用JDBC操作数据库时，如何提升读取数据的性能？如何提升更新数据的性能？', '8b0eb81c-8365-4048-b712-a9e535651fd3.', null, null, null, null, null, null, '要提升读取数据的性能，可以指定通过结果集（RESULTSET）对象的SETFETCHSIZE()方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能可以使用PREPAREDSTATEMENT语句构建批处理，将若干SQL语句置于一个批处理中执行。', '', '0', '2017-12-26 21:53:44', '52', '1');
INSERT INTO `topic` VALUES ('6184', '32', '4', '在进行数据库编程时，连接池有什么作用？ ', '3298fce0-f813-4d67-b5fa-16ea611d98c8.', null, null, null, null, null, null, '由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行TCP的三次握手，释放连接需要进行TCP四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中，需要时直接从连接池获取，使用结束时归还连接池而不必关闭连接，从而避免频繁创建和释放连接所造成的开销，这是典型的用空间换取时间的策略（浪费了空间存储连接，但节省了创建和释放连接的时间）。池化技术在JAVA开发中是很常见的，在使用线程时创建线程池的道理与此相同。基于JAVA的开源数据库连接池主要有：C3P0、PROXOOL、DBCP、BONECP、DRUID等。', '', '0', '2017-12-26 21:53:59', '52', '1');
INSERT INTO `topic` VALUES ('6185', '18', '4', '表示递增和递减的满堆栈和空堆栈有哪几种组合，请比较它们的特点。', 'e4183c6d-17f5-47f6-a761-46cb668644ad.', null, null, null, null, null, null, '答：有4种类型的堆栈，表示递增和递减的满堆栈和空堆栈的各种组合。\r\n    满递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向内含有效数据项的最高地址。指令如LDMFA，STMFA等。\r\n    空递增：堆栈通过增大存储器的地址向上增长，堆栈指针指向堆栈上的第一个空地址。指令如LDMEA，STMEA等。\r\n    满递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向内含有效数据项的最低地址。指令如LDMFD，STMFD等。\r\n    空递减：堆栈通过减小存储器的地址向下增长，堆栈指针指向堆栈下的第一个空地址。指令如LDMED，STMED等。', '', '0', '2017-12-26 21:54:14', '48', '1');
INSERT INTO `topic` VALUES ('6186', '18', '4', 'ARM协处理器指令包括哪3类，请描述它们的功能。', '6bae8a08-648b-4797-8b5f-2554ac6251c1.', null, null, null, null, null, null, '答：ARM协处理器指令包括以下3类：\r\n    用于ARM处理器初始化ARM协处理器的数据处理操作。\r\n    用于ARM处理器的寄存器和ARM协处理器的寄存器间的数据传送操作。\r\n    用于在ARM协处理器的寄存器和内存单元之间传送数据。', '', '0', '2017-12-26 21:54:41', '48', '1');
INSERT INTO `topic` VALUES ('6187', '3', '4', '获得一个类的类对象有哪些方式？ ', '1774e71b-8634-476f-8aa2-bb116bcd855d.', null, null, null, null, null, null, '- 方法1：类型.CLASS，例如：STRING.CLASS \r\n- 方法2：对象.GETCLASS()，例如：\"HELLO\".GETCLASS() \r\n- 方法3：CLASS.FORNAME()，例如：CLASS.FORNAME(\"JAVA.LANG.STRING\")', '', '0', '2017-12-26 21:54:52', '52', '1');
INSERT INTO `topic` VALUES ('6188', '18', '3', 'ARM嵌入式系统主要由______、______和______构成。', 'a91a7b00-619d-4f8a-8a51-f912662a6a81.', null, null, null, null, null, null, '答案：嵌入式处理器、相关支撑硬件、嵌入式软件系统', '', '0', '2017-12-26 21:55:06', '48', '1');
INSERT INTO `topic` VALUES ('6189', '18', '3', '总线通常包括______、______和______。', '6c41ed1e-6499-49df-a2a7-a3bc4f41123a.', null, null, null, null, null, null, '答案：数据总线、地址总线、控制总线', '', '0', '2017-12-26 21:55:25', '48', '1');
INSERT INTO `topic` VALUES ('6190', '33', '4', 'Servlet接口中有哪些方法？ ', 'cfb2c71b-86b0-4a6d-b2f8-424ff8d65a66.', null, null, null, null, null, null, 'SERVLET接口定义了5个方法，其中前三个方法与SERVLET生命周期相关： \r\n- VOID INIT(SERVLETCONFIG CONFIG) THROWS SERVLETEXCEPTION \r\n- VOID SERVICE(SERVLETREQUEST REQ, SERVLETRESPONSE RESP) THROWS SERVLETEXCEPTION, JAVA.IO.IOEXCEPTION \r\n- VOID DESTORY() \r\n- JAVA.LANG.STRING GETSERVLETINFO() \r\n- SERVLETCONFIG GETSERVLETCONFIG()', '', '0', '2017-12-26 21:57:01', '52', '1');
INSERT INTO `topic` VALUES ('6191', '18', '1', '复位后，ARM处理器处于（）模式，（）状态', 'bd13549f-e80b-4b89-9921-7b36d719029e.', 'user', 'SVC', 'system', 'ARM', 'Thumb', '', 'B,D', '', '0', '2017-12-26 21:57:11', '48', '1');
INSERT INTO `topic` VALUES ('6192', '33', '4', 'get和post请求的区别？ ', 'b2d4beec-be98-491d-bc65-5c93d9ea90dc.', null, null, null, null, null, null, '①GET请求用来从服务器上获得资源，而POST是用来向服务器提交数据； \r\n②GET将表单中数据按照NAME=VALUE的形式，添加到ACTION 所指向的URL 后面，并且两者使用\"?\"连接，而各个变量之间使用\"&\"连接；POST是将表单中的数据放在HTTP协议的请求头或消息体中，传递到ACTION所指向URL； \r\n③GET传输的数据要受到URL长度限制（1024字节）；而POST可以传输大量的数据，上传文件通常要使用POST方式； \r\n④使用GET时参数会显示在地址栏上，如果这些数据不是敏感数据，那么可以使用GET；对于敏感数据还是应用使用POST； \r\n⑤GET使用MIME类型APPLICATION/X-WWW-FORM-URLENCODED的URL编码（也叫百分号编码）文本的格式传递参数，保证被传送的参数由遵循规范的文本组成，例如一个空格的编码是\"%20\"。', '', '0', '2017-12-26 21:57:35', '52', '1');
INSERT INTO `topic` VALUES ('6193', '33', '4', 'JSP和Servlet是什么关系？ ', '7e1484d1-80c6-4998-83eb-b1b701660bf2.', null, null, null, null, null, null, 'SERVLET是一个特殊的JAVA程序，它运行于服务器的JVM中，能够依靠服务器的支持向浏览器提供显示内容。JSP本质上是SERVLET的一种简易形式，JSP会被服务器处理成一个类似于SERVLET的JAVA程序，可以简化页面内容的生成。SERVLET和JSP最主要的不同点在于，SERVLET的应用逻辑是在JAVA文件中，并且完全从表示层中的HTML分离开来。而JSP的情况是JAVA和HTML可以组合成一个扩展名为.JSP的文件。有人说，SERVLET就是在JAVA中写HTML，而JSP就是在HTML中写JAVA代码，当然这个说法是很片面且不够准确的。JSP侧重于视图，SERVLET更侧重于控制逻辑，在MVC架构模式中，JSP适合充当视图（VIEW）而SERVLET适合充当控制器（CONTROLLER）。', '', '0', '2017-12-26 21:57:56', '52', '1');
INSERT INTO `topic` VALUES ('6194', '26', '1', '将多路基带信号调制到不同频率载波上再进行叠加形成一个复合信号的多路复用技术，通常称这种服用技术（  ）', '1db1231d-a65c-4c76-83e0-a48abd7de751.', '空分多路复用技术', '频分多路复用技术', '同步时分多路复用技术', '异步时分多路复用技术', '', '', 'B', '', '0', '2017-12-26 21:58:09', '43', '1');
INSERT INTO `topic` VALUES ('6195', '33', '4', '讲解JSP中的四种作用域。 ', '33875bb9-53cd-4723-af6f-e98411c57577.', null, null, null, null, null, null, 'JSP中的四种作用域包括PAGE、REQUEST、SESSION和APPLICATION，具体来说： \r\n- PAGE代表与一个页面相关的对象和属性。 \r\n- REQUEST代表与WEB客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个WEB组件；需要在页面显示的临时数据可以置于此作用域。 \r\n- SESSION代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的SESSION中。 \r\n- APPLICATION代表与整个WEB应用程序相关的对象和属性，它实质上是跨越整个WEB应用程序，包括多个页面、请求和会话的一个全局作用域。', '', '0', '2017-12-26 21:58:09', '52', '1');
INSERT INTO `topic` VALUES ('6196', '33', '4', '你的项目中使用过哪些JSTL标签？ ', 'ad9ae833-8417-4e5b-bfa9-2793759485b2.', null, null, null, null, null, null, '项目中主要使用了JSTL的核心标签库，包括<C:IF>、<C:CHOOSE>、<C: WHEN>、<C: OTHERWISE>、<C:FOREACH>等，主要用于构造循环和分支结构以控制显示逻辑。', '', '0', '2017-12-26 21:59:02', '52', '1');
INSERT INTO `topic` VALUES ('6197', '18', '1', 'ARM9 处理器总共有（）个寄存器，system模式下使用（）个寄存器，SVC模式下使用（）个寄存器', '35c502e7-cea6-445e-ac86-568f025af2f4.', '17', '18', '32', '36', '37', '', 'E,A,B', '', '0', '2017-12-26 21:59:05', '48', '1');
INSERT INTO `topic` VALUES ('6198', '33', '4', '说一下表达式语言（EL）的隐式对象及其作用。 ', '36714844-762f-4eac-ad9e-78f21e79dde6.', null, null, null, null, null, null, 'EL的隐式对象包括：PAGECONTEXT、INITPARAM（访问上下文参数）、PARAM（访问请求参数）、PARAMVALUES、HEADER（访问请求头）、HEADERVALUES、COOKIE（访问COOKIE）、APPLICATIONSCOPE（访问APPLICATION作用域）、SESSIONSCOPE（访问SESSION作用域）、REQUESTSCOPE（访问REQUEST作用域）、PAGESCOPE（访问PAGE作用域）。', '', '0', '2017-12-26 21:59:40', '52', '1');
INSERT INTO `topic` VALUES ('6199', '18', '1', 'ARM处理器中优先级别最高的异常为（）', 'ce246b2d-3cb8-4cbe-a1c4-d4e1f459075c.', 'FIQ', 'SWI', 'IRQ', 'SVC', 'RESET', '', 'E', '', '0', '2017-12-26 22:00:11', '48', '1');
INSERT INTO `topic` VALUES ('6200', '33', '4', '解释一下网络应用的模式及其特点。 ', '53e6c925-1707-4df4-a47d-803546091936.', null, null, null, null, null, null, '典型的网络应用模式大致有三类：B/S、C/S、P2P。其中B代表浏览器（BROWSER）、C代表客户端（CLIENT）、S代表服务器（SERVER），P2P是对等模式，不区分客户端和服务器。B/S应用模式中可以视为特殊的C/S应用模式，只是将C/S应用模式中的特殊的客户端换成了浏览器，因为几乎所有的系统上都有浏览器，那么只要打开浏览器就可以使用应用，没有安装、配置、升级客户端所带来的各种开销。P2P应用模式中，成千上万台彼此连接的计算机都处于对等的地位，整个网络一般来说不依赖专用的集中服务器。网络中的每一台计算机既能充当网络服务的请求者，又对其它计算机的请求作出响应，提供资源和服务。通常这些资源和服务包括：信息的共享和交换、计算资源（如CPU的共享）、存储共享（如缓存和磁盘空间的使用）等，这种应用模式最大的阻力安全性、版本等问题，目前有很多应用都混合使用了多种应用模型，最常见的网络视频应用，它几乎把三种模式都用上了。', '', '0', '2017-12-26 22:00:27', '52', '1');
INSERT INTO `topic` VALUES ('6201', '33', '4', 'Java规范中和Web Service相关的规范有哪些？ ', 'e4ca4ce6-7d5a-4c99-b6a6-0695a95fb142.', null, null, null, null, null, null, 'JAVA规范中和WEB SERVICE相关的有三个： \r\n- JAX-WS(JSR 224)：这个规范是早期的基于SOAP的WEB SERVICE规范JAX-RPC的替代版本，它并不提供向下兼容性，因为RPC样式的WSDL以及相关的API已经在JAVA EE5中被移除了。WS-METADATA是JAX-WS的依赖规范，提供了基于注解配置WEB SERVICE和SOAP消息的相关API。 \r\n- JAXM(JSR 67)：定义了发送和接收消息所需的API,相当于WEB SERVICE的服务器端。 \r\n- JAX-RS(JSR 311 & JSR 339 & JSR 370)：是JAVA针对REST（REPRESENTATION STATE TRANSFER）架构风格制定的一套WEB SERVICE规范。REST是一种软件架构模式，是一种风格，它不像SOAP那样本身承载着一种消息协议， (两种风格的WEB SERVICE均采用了HTTP做传输协议，因为HTTP协议能穿越防火墙，JAVA的远程方法调用（RMI）等是重量级协议，通常不能穿越防火墙），因此可以将REST视为基于HTTP协议的软件架构。REST中最重要的两个概念是资源定位和资源操作，而HTTP协议恰好完整的提供了这两个点。HTTP协议中的URI可以完成资源定位，而GET、POST、OPTION、DELETE方法可以完成资源操作。因此REST完全依赖HTTP协议就可以完成WEB SERVICE，而不像SOAP协议那样只利用了HTTP的传输特性，定位和操作都是由SOAP协议自身完成的，也正是由于SOAP消息的存在使得基于SOAP的WEB SERVICE显得笨重而逐渐被淘汰。', '', '0', '2017-12-26 22:00:50', '52', '1');
INSERT INTO `topic` VALUES ('6202', '26', '1', '下列有关缺省路由的说法正确是（ ）', '116345da-9d5a-4f38-97db-1665b7cd1c8f.', '缺省路由的目的地址和掩码分别为：0.0.0.0 和0.0.0.0', '缺省路由的目的地址和掩码分别为: 255.255.255.255和255.255.255.255', '缺省路由的目的地址和掩码分别为：0.0.0.0 和 255.255.255.255 ', '缺省路由一定是静态路由', '', '', 'A', '', '0', '2017-12-26 22:00:52', '43', '1');
INSERT INTO `topic` VALUES ('6203', '33', '4', '介绍一下你了解的Java领域的Web Service框架', '1148c834-ec1b-4192-b577-aecbac087eea.', null, null, null, null, null, null, 'JAVA领域的WEB SERVICE框架很多，包括AXIS2（AXIS的升级版本）、JERSEY（RESTFUL的WEB SERVICE框架）、CXF（XFIRE的延续版本）、HESSIAN、TURMERIC、JBOSS SOA等，其中绝大多数都是开源框架。', '', '0', '2017-12-26 22:01:03', '52', '1');
INSERT INTO `topic` VALUES ('6204', '18', '1', 'ATPCS规定中，推荐子函数参数最大为（）个', '792c9997-3caf-4635-b712-63e8a1faad59.', '1', '2', '3', '4', '', '', 'D', '', '0', '2017-12-26 22:01:31', '48', '1');
INSERT INTO `topic` VALUES ('6205', '18', '1', 'ATPCS规定中，栈是（）', 'cfd89f23-cf1f-4c82-98db-a74c399510c4.', '满加', '满减', '空加', '空减', '', '', 'B', '', '0', '2017-12-26 22:02:20', '48', '1');
INSERT INTO `topic` VALUES ('6206', '3', '1', '下列程序编译或运行的结果是。（   ）    D   public static void main(String args[]){  int a = 10;  int b,c;  if(a&gt;50){   b=9;  }   c = b + a;   System.out.println(c);', '4ac26c08-5efe-477e-8321-d95c158f8e6f.', '10', '19 ', '9', '编译错误', '', '', 'D', '', '0', '2017-12-26 22:02:48', '58', '1');
INSERT INTO `topic` VALUES ('6207', '26', '1', '一台交换机具有48个10/100MB/S端口和2个1000mb/S端口，如果所有端口都工作在全双工状态，那么交换机总带宽应为（  ） ', '2f2dc1dc-52b0-4f1a-acd9-43f9e9e8cc4f.', '4.4gb/S', '13.6gb/S', '6.4GB/s', '8GB/S', '', '', 'B', '', '0', '2017-12-26 22:03:14', '43', '1');
INSERT INTO `topic` VALUES ('6208', '26', '1', '下列语句片段中，four的值为  ()    D  int three = 3;  char one = ‘1’;   char four = (char)(three+one); ', '2bd53a7a-a49e-4051-88f6-77aadb057cde.', '3', '1', '31', '4', '', '', 'D', '', '0', '2017-12-26 22:03:21', '58', '1');
INSERT INTO `topic` VALUES ('6209', '18', '1', 'ARM汇编编程中，通常PC是指（），LR是指（），SP是指（）', '1217b0e4-e48b-4ec1-90a6-4e3ef16e5510.', 'R12', 'R13', 'R14', 'R15', '', '', 'D,C,B', '', '0', '2017-12-26 22:03:29', '48', '1');
INSERT INTO `topic` VALUES ('6210', '26', '1', '网络层、数据链路层和物理层传输的数据单位分别为（  ）', '998749fe-7ea1-4121-aae8-69def33cbfea.', '报文、帧、比特', '包、帧、比特', '包、报文、比特', '数据块、分组、比特', '', '', 'B', '', '0', '2017-12-26 22:03:55', '43', '1');
INSERT INTO `topic` VALUES ('6211', '18', '1', 'CPU复位后执行MOV R0，PC指令后，R0寄存器的值为（）', 'e201f496-cf5c-4aa4-b6ba-cded5579ee60.', '0x0', '0x4', '0x8 ', '0xC', '', '', 'C', '', '0', '2017-12-26 22:04:06', '48', '1');
INSERT INTO `topic` VALUES ('6212', '26', '1', 'rip协议引入路由保持机制的作用是（  ）', 'eb5290e4-f39d-46ec-b11a-cd613d3b12c1.', '节省网络带宽', '将路由不可达信息在全网扩散', '防止网络形成路由环路', '通知邻居路由器哪些路由是从其他处得到 ', '', '', 'C', '', '0', '2017-12-26 22:04:39', '43', '1');
INSERT INTO `topic` VALUES ('6214', '26', '1', 'ARM中可以访问状态寄存器的指令是（），能够访问内存的指令是（）', '109184dc-a7c1-4544-9cfd-31ddebee0d22.', 'MOV ', 'LDR', 'MCR', 'MRS', '', '', 'D,B', '', '0', '2017-12-26 22:05:09', '48', '1');
INSERT INTO `topic` VALUES ('6215', '26', '4', 'makefile文件的作用是什么？', 'b900ba6b-386b-424d-a96f-2e6ba19bb14d.', null, null, null, null, null, null, '一个工程中的源文件不计数，其按类型、功能、模块分别放在若干个目录中，MAKEFILE定义了一系列的规则来指定，哪些文件需要先编译，哪些文件需要后编译，哪些文件需要重新编译，甚至于进行更复杂的功能操作，因为MAKEFILE就像一个SHELL脚本一样，其中也可以执行操作系统的命令。\r\n    MAKEFILE带来的好处就是——“自动化编译”，一旦写好，只需要一个MAKE命令，整个工程完全自动编译，极大的提高了软件开发的效率。MAKE是一个命令工具，是一个解释MAKEFILE中指令的命令工具，一般来说，大多数的IDE都有这个命令，比如：DELPHI的MAKE，VISUAL C++的NMAKE，LINUX下GNU的MAKE，可见，MAKEFILE都成为一种在工程方面的编译方法。', '', '0', '2017-12-26 22:05:13', '18', '1');
INSERT INTO `topic` VALUES ('6216', '26', '1', '下面哪一项正确描述了路由协议（  ）', '44d0dfbb-4fcf-4df5-a94f-1106054888a0.', '允许数据包在主机间传送的一种协议 ', '通过执行一个算法来完成路由选择的一种协', '定义数据包中域的格式和用法的一种方式 ', '指定MAC地址和IP地址捆绑的方式和时间的一种协议', '', '', 'B', '', '0', '2017-12-26 22:05:15', '43', '1');
INSERT INTO `topic` VALUES ('6217', '18', '3', 'ARM7TDMI使用3级流水线，分3个阶段，分别为:', '85918b28-6ee9-4b7c-8f35-e37a81f7a6d4.', null, null, null, null, null, null, '取指、译码和 执行', '', '0', '2017-12-26 22:05:56', '48', '1');
INSERT INTO `topic` VALUES ('6218', '33', '4', '为何我们在开发中要使用到序列号和反序列号，你都知道哪些序列化工具，并描述各自的优缺点', 'a6cb8743-955f-4280-8b18-bcf434356113.', null, null, null, null, null, null, '序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。要实现序列化，需要让一个类实现SERIALIZABLE接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过WRITEOBJECT(OBJECT OBJ)方法就可以将实现对象写出(即保存其状态)；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过READOBJECT方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度克隆', '', '0', '2017-12-26 22:06:06', '52', '1');
INSERT INTO `topic` VALUES ('6219', '4', '1', '下面不属于持久化的是（）。', '36b2e1e1-77c4-47ed-bd25-29c82438211b.', '把对象转换为字符串的形式通过网络传输，在另一端接收到这个字符串后能把 对象还原出来', '把程序数据从数据库中读出来', '从XML配置文件中读取程序的配置信息', '把程序数据保存为文件 ', '', '', 'A', '', '0', '2017-12-26 22:06:12', '58', '1');
INSERT INTO `topic` VALUES ('6220', '4', '1', '下面（）不属于关系—对象映射的映射信息。', 'cef6cb88-817e-4548-a230-bb5e144f7a2f.', '程序包名到数据库库名的映射', '程序类名到数据库表名的映射 ', '实体属性名到数据库表字段的映射', '实体属性类型到数据库表字段类型的映射', '', '', 'A', '', '0', '2017-12-26 22:06:44', '58', '1');
INSERT INTO `topic` VALUES ('6221', '18', '3', ' ARM9的五级流水线分别是:____,_____,_____,_____,_____', '22982473-56fb-44dd-a153-0c7969bcc6dd.', null, null, null, null, null, null, '取指、译码、执行、缓冲数据、回写', '', '0', '2017-12-26 22:06:48', '48', '1');
INSERT INTO `topic` VALUES ('6222', '32', '4', '你们的项目业务量有多大？如果某张表数据量越来越大，查询会越来越慢，你会怎么处理', '9f8fd46d-f236-4500-8170-ff971d2b9e8e.', null, null, null, null, null, null, '写SQL的时候 注意优化 不用这么多的JOIN ，做分区做索引', '', '0', '2017-12-26 22:07:12', '52', '1');
INSERT INTO `topic` VALUES ('6223', '4', '1', '下面（ ）不是Hibernate 映射文件中包含的内容。（选两项）', '7146ea54-423a-48ef-af05-f86e8e866501.', '数据库连接信息', 'Hibernate 属性参数', '主键生成策略', '属性数据类型', '', '', 'AB', '', '0', '2017-12-26 22:07:21', '58', '1');
INSERT INTO `topic` VALUES ('6224', '18', '4', 'ARM的异常类型有', 'e534fdbc-33ba-4a1e-ac2d-47d25957e7e0.', null, null, null, null, null, null, '复位异常、未定义指令异常、软件中断、指令预取中止、数据中止异常、IRQ、FIQ', '', '0', '2017-12-26 22:07:34', '48', '1');
INSERT INTO `topic` VALUES ('6225', '32', '4', '在项目中可能碰到这种情况，公司要出报表了，但是后台业务还在跑，这会导致报表查询会被死锁，你有什么好的解决办法吗？', '0429ce8d-673d-43e7-8dfc-dab22cf5564f.', null, null, null, null, null, null, '做后台业务的方法和出报表的方法做线程同步\r\n\r\n或者后台业务处理完给个标示  然后才可以出报表', '', '0', '2017-12-26 22:07:50', '52', '1');
INSERT INTO `topic` VALUES ('6226', '26', '1', 'Linux系统中DNS服务进程名为：（）', '28756e1a-0d61-48ac-81e3-686ac3c86f2e.', 'named  ', 'httpd', 'ftpd', 'SysLog', '', '', 'A ', '暂无解析', '0', '2017-12-26 22:08:04', '46', '1');
INSERT INTO `topic` VALUES ('6227', '4', '1', '下面的程序执行后没有报错，但数据总保存不到数据库，最可能的原因是（d ）。  public static void main(String[] args) {  SessionFactory sf =  new Configuration().configure().buildSessionFactory(); Session session = sf.openSession(); Medal medal = new Medal();  medal.setOwner(\"Shen Baozhi\");  medal.setSport(\"Table Tennis-Women\'s Singles\"); medal.setType(\"Gold Medal\"); session.save(user); session.close();}', 'bf520b4c-0c07-4cc2-be20-09aa07631b75.', '配置文件配置有误', '没有在配置文件中包含对映射文件的声明', '映射文件配置有误', '没有开启事务', '', '', 'D', '', '0', '2017-12-26 22:08:09', '58', '1');
INSERT INTO `topic` VALUES ('6228', '33', '4', '某个账户表中有N个账户，每个账户在记账的时候都会被不同的记账流程所操作进行余额更新，你是如何避免数据不一致以及死锁的？', '6de5de70-e8d4-4529-85a4-05868d9d7326.', null, null, null, null, null, null, '余额更新的方法加锁', '', '0', '2017-12-26 22:08:17', '52', '1');
INSERT INTO `topic` VALUES ('6229', '18', '4', '嵌入式操作系统和通用操作系统有什么差别？', '1edae426-0b21-41ca-9f3f-54f874da6819.', null, null, null, null, null, null, '答案：多优先级，抢占型，实时操作系统。嵌入式操作系统一般没有UI，体积小，实时性强，对稳定性要求更高。嵌入式操作系统强调实时性，并且可裁减。要求系统资源的消耗要尽可能的小。', '', '0', '2017-12-26 22:08:23', '48', '1');
INSERT INTO `topic` VALUES ('6230', '33', '4', '你了解过restful吧，你能说说它吗？它和webservice有什么异同', '95577ef9-2c2e-4416-b3c2-5470da18bd96.', null, null, null, null, null, null, ' 协议不一样，\r\n如果数据类型比较复杂 用WEBSERVICE', '', '0', '2017-12-26 22:08:48', '52', '1');
INSERT INTO `topic` VALUES ('6231', '4', '1', '下列属于多对一关系的是（ ）。（选两项）', '541504d6-6d09-4eb2-b70c-e1014b88bc33.', '书和作者', '手机和生产厂家 ', '用户和发布的出租信息 ', '士兵和班长', '', '', 'BD', '', '0', '2017-12-26 22:08:52', '58', '1');
INSERT INTO `topic` VALUES ('6232', '4', '1', '下面是某系统中的两个实体类，依此可以得知（b ）。  public class Wage{ //月工资实体类 private Long wid;  private String empName; //雇员姓名 private String month; //月份 //Getter & Setter „„  }  public class WageItem{ //工资项  private Wage wage; private Long iid;  private String itemName; //项目名称,如基本工资、职位津贴等 private String amount; //数额 //Getter & Setter „„ }', 'b20ce44a-eabf-4258-b166-b92df1258d6e.', 'Wage 和WageItem 间存在单向一对多的关联', 'Wage 和WageItem 间存在单向多对一的关联', 'Wage 和WageItem间存在双向一对多的关联', 'Wage 和WageItem间存在双向多对一的关联', '', '', 'B', '', '0', '2017-12-26 22:09:34', '58', '1');
INSERT INTO `topic` VALUES ('6233', '26', '1', '在ARM体系结构中，要从主动用户模式（User）切换到超级用户模式（Supervisor），应采用何种方法？()', 'f72edcdc-1a38-4eab-ad89-208c74200209.', '直接修改CPU状态寄存器（CPSR）对应的模式', '先修改程序状态备份寄存器（SPSR）到对应的模式，再更新CPU状态', '使用软件中断指令（SWI）', '让处理器执行未定义指令', '', '', 'C', '', '0', '2017-12-26 22:09:36', '48', '1');
INSERT INTO `topic` VALUES ('6234', '3', '1', '下面代码的执行结果是？\r\nimport Java.util.*;\r\npublic class ShortSet{\r\npublic static void main(String args[])\r\n{\r\nSet&lt;Short&gt; s=new HashSet&lt;Short&gt;();\r\nfor(Short i=0;i&lt;100;i++)\r\n{\r\ns.add(i);\r\ns.remove(i-1);\r\n}\r\nSystem.out.println(s.size());\r\n}\r\n}', 'd817afed-4d49-4fa0-9c0e-1a68e7dde5d0.', '1', '100', 'Throws Exception', 'None of the Above', '', '', 'B', '', '0', '2017-12-26 22:10:21', '64', '1');
INSERT INTO `topic` VALUES ('6235', '26', '1', '在ARM Linux体系中，用来处理外设中断的异常模式是______', '2ee1b01a-d745-42de-a14e-d37e09a93bac.', '软件中断（SWI） ', '未定义的指令异常', '中断请求（IRQ）', '快速中断请求（FIQ）', '', '', 'C', '', '0', '2017-12-26 22:10:25', '48', '1');
INSERT INTO `topic` VALUES ('6236', '3', '1', '链表具有的特点是：', '4e4147cb-107b-4d09-9f9c-aa592ef75210.', '不必事先估计存储空间', '可随机访问任一元素', '插入删除不需要移动元素', '所需空间与线性表长度成正比', '', '', 'ACD', '', '0', '2017-12-26 22:11:07', '64', '1');
INSERT INTO `topic` VALUES ('6237', '26', '1', '在ARM Linux系统中，中断处理程序进入C代码以后，ARM的处于____工作模式', 'a17b6ee9-a6c4-4d99-83ce-90b2a914a592.', '超级用户（SVC）', '中断(IRQ)', '快速中断（IRQ）', '和进入中断之前的状态有关系', '', '', 'A', '', '0', '2017-12-26 22:11:13', '48', '1');
INSERT INTO `topic` VALUES ('6238', '4', '1', '两实体类代码如下：  public class Wage{ //月工资实体类 private Long wid;  private String empName; //雇员姓名 private String month; //月份 //Getter & Setter „„  }  public class WageItem{ //工资项 private Wage wage;  private Long iid;  private String itemName; //项目名称,如基本工资、职位津贴等 private String amount; //数额 //Getter & Setter „„ }  其中的WageItem 实体类有如下配置，其中空白处应填入的代码是（ ）。&lt;class name=\"WageItem\" table=\"fin_wage_item\"  &lt;id name=\"iid\" column=\"wi_id\" type=\"java.lang.Long\"&gt; &lt;generator class=\"native\" /&gt;  &lt;/id&gt;  &lt;property name=\"itemName\" column=\"wi_name\" type=\"java.lang.String\" /&gt;  &lt;property name=\"amount\" column=\"wi_amount\" type=\"java.lang.Double\" /&gt;  &lt;!--配置wage 属性--&gt; ______________________ &lt;/class&gt;', '4bb8a8ba-89a0-4768-aa3f-5cece11605ce.', '<many-to-one name=\"wage\" column=\"wi_wage_id\" class=\"Wage\" />', '<one-to-many name=\"wage\" column=\"wi_wage_id\" class=\"Wage\" />', '<set name=\"wage\">  <key column=\"wi_wage_id\" /> <one-to-many class=\"Wage\" /> </set>', '<set name=\"wage\">  <key column=\" wi_wage_id\" /> <many-to-one class=\"Wage\" /> </set>', '', '', 'A', '', '0', '2017-12-26 22:11:20', '58', '1');
INSERT INTO `topic` VALUES ('6239', '3', '1', 'Java语言中，String类的IndexOf()方法返回的类型是？', 'b08fda17-a840-4b32-be49-4d123f003cae.', 'Int16', 'Int32', 'int', 'long', '', '', 'C', '', '0', '2017-12-26 22:11:44', '64', '1');
INSERT INTO `topic` VALUES ('6240', '26', '1', '在ARM体系构建的嵌入式系统中，由电平模式触发的中断，其对应的中断标准应该在何时被清除？()', 'f7568162-8074-41fc-9d4a-36d4fb965a87.', '当中断处理程序结束以后，才可以清除', '进入相应的中断处理程序，即可以清除', '产生IRQ中断的时候，处理器自动清除', '任何时候都可以清除', '', '', 'A', '', '0', '2017-12-26 22:11:58', '48', '1');
INSERT INTO `topic` VALUES ('6241', '24', '1', '在UINX/Linux中，系统Root用户口令信息一半保存的文件夹是（）', '5c526caf-adab-4a03-9cd4-dc3d62a43c8f.', 'autobat', 'service.conf', 'inetd.conf', 'shadow', '', '', 'D', '用户帐号   /etc/passwd\r\n用户密码   /etc/shadow\r\nautobat让冲浪痕迹自动抹除：每次冲浪过后，系统都会“自做主张”地记录下上网的痕迹，其他人很容易通过这些痕迹，偷窥到自己的上网隐私。', '0', '2017-12-26 22:12:20', '46', '1');
INSERT INTO `topic` VALUES ('6242', '4', '1', '已知系统中TBL_USER 表对应的实体类是TblUser，下列HQL 语句中正确的是 （ ）。', '1e7077a0-0840-4868-9030-3e55ce08d64b.', 'from Tbl_User', 'select * from tbluser', 'select TblUser from TblUser ', 'from TblUser t where t.age= 15', '', '', 'A', '', '0', '2017-12-26 22:12:23', '58', '1');
INSERT INTO `topic` VALUES ('6243', '3', '1', '以下关于面向对象概念的描述中，不正确的一项是（）。', '3191b8d2-aef8-4664-9704-457f5fdab947.', 's[9] 为 null;', 's[10] 为 “”;', ' s[0] 为 未定义', ' s.length 为10', '', '', 'AD', '', '0', '2017-12-26 22:12:27', '64', '1');
INSERT INTO `topic` VALUES ('6244', '3', '1', '属性的可见性有。', '25a445e6-7dc1-4299-9b3f-545105907126.', '公有的', '私有的', '私有保护的', '保护的', '', '', 'ABD', '', '0', '2017-12-26 22:12:56', '64', '1');
INSERT INTO `topic` VALUES ('6245', '4', '1', '对下面代码中存在的错误，说法不正确的是（d ）。  String hql = \"from TblUser u where u.status = @status \";//&lt;1&gt;  Query query = session.createQuery();//&lt;2&gt; query.setNamedParameter(\":status\",\"\");//&lt;3&gt; return query.executeQuery(hql);//&lt;4&gt;', 'd331ad5b-b2c8-4906-ba96-d89eb38e7cd6.', '第一行中的命名参数“@status”应该是“:status”', '第二行createQuery 函数应该传入hql 作为参数 ', '第三行命名参数名称“:status”应该是“status”', '第四行应该是“return query.list(hql);” ', '', '', 'D', '', '0', '2017-12-26 22:13:04', '58', '1');
INSERT INTO `topic` VALUES ('6246', '3', '1', '在字符串前面加上_____符号，则字符串中的转义字符将不被处理。', '7a6997c3-f794-4961-a2e5-5cb360a1418f.', '@', ' \\', '#', '%', '', '', 'B', '', '0', '2017-12-26 22:13:23', '64', '1');
INSERT INTO `topic` VALUES ('6247', '4', '4', 'servlet执行流程', 'f8d8136e-13e3-4b33-a67d-534b04708d9f.', null, null, null, null, null, null, '客户端发出HTTP请求，WEB服务器将请求转发到SERVLET容器，SERVLET容器解析URL并根据WEB.XML找到相对应的SERVLET，并将REQUEST、RESPONSE对象传递给找到的SERVLET，SERVLET根据REQUEST就可以知道是谁发出的请求，请求信息及其他信息，当SERVLET处理完业务逻辑后会将信息放入到RESPONSE并响应到客户端。', '', '0', '2017-12-26 22:13:29', '52', '1');
INSERT INTO `topic` VALUES ('6248', '26', '1', '在下列ARM处理器的各种模式中，只有_____模式不可以自由地改变处理器的工作模式。', 'ddc7d5ed-5802-4686-8ac7-343a31bd41ce.', '用户模式（User） ', '系统模式(System)', '终止模式(Abort)', '中断模式(IRQ)', '', '', 'A', '', '0', '2017-12-26 22:13:31', '48', '1');
INSERT INTO `topic` VALUES ('6249', '4', '1', '下面代码的执行效果是（）。  String hql = \"from TblStudent s order by s.score asc\";  Query query = session.createQuery(hql); query.setFirstResult(0); query.setMaxResults(5); return query.list();', 'c68ec202-ccf0-4645-9806-552893543b4c.', '返回分数最高的五个学生', '返回分数最高的六个学生', '返回分数最低的五个学生', '返回分数最低的六个学生 ', '', '', 'C', '', '0', '2017-12-26 22:13:39', '58', '1');
INSERT INTO `topic` VALUES ('6250', '33', '4', '给定一个txt文件，如何得到某字符串出现的次数', '76472ffa-52d0-434f-98cc-f194195ac8c2.', null, null, null, null, null, null, 'FILE FILE = NEW FILE(\"E://TEST.TXT\");\r\nINPUTSTREAM IS = NEW FILEINPUTSTREAM(FILE);\r\nBYTE B[] = NEW BYTE[1024];\r\nINT A = IS.READ(B);\r\nSTRING STR[] = NEW STRING(B,0,A).SPLIT(\"\");\r\nINT COUNT = 0;\r\nFOR(INT I = 0;I<STR.LENGTH;I++){\r\nIF(\"A\".EQUALS(STR[I]))COUNT++;\r\n}\r\nSYSTEM.OUT.PRINTLN(COUNT);', '', '0', '2017-12-26 22:13:49', '52', '1');
INSERT INTO `topic` VALUES ('6251', '3', '1', '下列代码哪行会出错\r\n1) public void modify() { 2) int I, j, k; 3) I = 100; 4) while ( I &gt; 0 ) { 5) j = I * 2; 6) System.out.println (” The value of j is ” + j ); 7) k = k + 1; 8) I–; 9) } 10) }', 'ff9175e8-5a32-44a1-ba0c-9a4b7ae5cdf3.', '4', '6', '7', '8', '', '', 'C', '', '0', '2017-12-26 22:13:55', '64', '1');
INSERT INTO `topic` VALUES ('6252', '26', '1', 'ARM嵌入式系统中，PC指向的是正在（  ）的指令地址', 'de3d16d0-0a55-4b0b-92fe-c949f0d956fa.', '执行', '译码', '取指', '都不是', '', '', 'C', '', '0', '2017-12-26 22:14:10', '48', '1');
INSERT INTO `topic` VALUES ('6253', '3', '1', '对记录序列{314，298，508，123，486，145}按从小到大的顺序进行插入排序，经过两趟排序后的结果为', 'e1fce950-ed13-4179-be56-98e18917e1d3.', '{314，298，508，123，145，486}', '{298，314，508，123，486，145}', '{298，123，314，508，486，145}', '{298，123，314，508，486，145}', '', '', 'B', '', '0', '2017-12-26 22:14:22', '64', '1');
INSERT INTO `topic` VALUES ('6254', '4', '1', '下面HQL语句的含义是（ ）\r\n\r\nselect stu  from TblStudent stu  where stu.score &gt; ( select avg(score) from TblStudent ) ', 'ba3bdbf0-d7f7-4e7d-bde2-6b5f1ef528d5.', '查询所有学生的平均分 ', '查询得分大于平均分的学生的成绩', '查询得分最高的学生 ', '查询得分大于平均分的学生 ', '', '', 'D', '', '0', '2017-12-26 22:14:24', '58', '1');
INSERT INTO `topic` VALUES ('6255', '33', '4', '冒泡排序、二分查找', '0ecd3116-a973-4cb7-be37-05504249c7cb.', null, null, null, null, null, null, 'A) 冒泡\r\n  PUBLIC STATIC VOID MP(INT A[]) {\r\n \r\nINT SWAP = 0;\r\nFOR (INT I = 0; I < A.LENGTH; I++) {\r\n \r\nFOR (INT J = I; J < A.LENGTH; J++) {\r\nIF (A[J] > A[I]) {\r\nSWAP = A[I];\r\nA[I] = A[J];\r\nA[J] = SWAP;\r\n}\r\n}\r\n}\r\n \r\nSYSTEM.OUT.PRINTLN(ARRAYS.TOSTRING(A));\r\n}\r\n \r\nB)二分查找PUBLIC STATIC INT EF(INT A[], INT TAG) {\r\n \r\nINT FIRST = 0;\r\nINT END = A.LENGTH;\r\nFOR (INT I = 0; I < A.LENGTH; I++) {\r\nINT MIDDLE = (FIRST + END) / 2;\r\n \r\nIF (TAG == A[MIDDLE]) {\r\nRETURN MIDDLE;\r\n}\r\nIF (TAG > A[MIDDLE]) {\r\nFIRST = MIDDLE + 1;\r\n}\r\nIF (TAG < A[MIDDLE]) {\r\nEND = MIDDLE - 1;\r\n}\r\n \r\n}\r\nRETURN 0;\r\n}', '', '0', '2017-12-26 22:14:51', '52', '1');
INSERT INTO `topic` VALUES ('6256', '33', '1', '栈是一种', '788032de-d753-4d55-a0de-ee0c7a664cb0.', '存取受限的线性结构', '存取不受限的线性结构', '存取受限的非线性结构', '存取不受限的非线性结构', '', '', 'A', '', '0', '2017-12-26 22:14:55', '64', '1');
INSERT INTO `topic` VALUES ('6257', '18', '1', '同CISC相比，下面哪一项不属于RISC处理器的特征___', '1dcbafc7-2d2e-4490-8755-a509c183a841.', '采用固定长度的指令格式，指令规整、简单、基本寻址方式有2～3种', '减少指令数和寻址方式，使控制部件简化，加快执行速度', '数据处理指令只对寄存器进行操作，只有加载/存储指令可以访问存储器，以提高指令的执行效率，同时简化处理器的设计', 'RISC处理器都采用哈佛结构', '', '', 'D', '', '0', '2017-12-26 22:15:02', '48', '1');
INSERT INTO `topic` VALUES ('6258', '4', '1', '.假设对Customer 类的orders 集合采用延迟检索策略，编译或运行以下程序，会出现 （ ）\r\nSession session=sessionFactory.openSession();  Customer customer=(Customer)session.get(Customer.class,new Long(1)); session.close();  Iterator orderIterator=customer.getOrders().iterator(); ', '9e3d0584-13df-41ca-bd82-d939291f9834.', '编译出错', '编译通过，并正常运行', '编译通过，但运行时抛出异常 ', '运行时输出“session.open”', '', '', 'D', '', '0', '2017-12-26 22:15:05', '58', '1');
INSERT INTO `topic` VALUES ('6259', '6', '4', '对ajax的理解', '2d6a2d9f-35af-4274-9543-e7322fa017d3.', null, null, null, null, null, null, 'A) AJAX为异步请求，即局部刷新技术，在传统的页面中，用户需要点击按钮或者事件触发请求，到刷新页面，而异步技术为不需要点击即可触发事件，这样使得用户体验感增强，比如商城购物车的异步加载，当你点击商品时无需请求后台而直接动态修改参数。', '', '0', '2017-12-26 22:15:06', '52', '1');
INSERT INTO `topic` VALUES ('6260', '33', '4', '父类与子类之间的调用顺序（打印结果）', '18c49c33-687a-4820-8395-0d8029938d26.', null, null, null, null, null, null, 'A) 父类静态代码块\r\nB) 子类静态代码块\r\nC) 父类构造方法\r\nD) 子类构造方法\r\nE) 子类普通方法\r\nF) 重写父类的方法，则打印重写后的方法', '', '0', '2017-12-26 22:15:22', '52', '1');
INSERT INTO `topic` VALUES ('6261', '33', '1', '下列哪些语句关于内存回收的说明是正确的', '1d11054e-44ed-4df4-9c5b-8e60ca70af38.', '程序员必须创建一个线程来释放内存', '内存回收程序负责释放无用内存', '内存回收程序允许程序员直接释放内存', '内存回收程序可以在指定的时间释放内存对象', '', '', 'B', '', '0', '2017-12-26 22:15:31', '64', '1');
INSERT INTO `topic` VALUES ('6262', '3', '4', '内部类与外部类的调用', '8f29c5bd-c861-44ad-bd4f-c9461e0fbd55.', null, null, null, null, null, null, 'A) 内部类可以直接调用外部类包括PRIVATE的成员变量，使用外部类引用的THIS.关键字调用即可\r\nB) 而外部类调用内部类需要建立内部类对象', '', '0', '2017-12-26 22:15:33', '52', '1');
INSERT INTO `topic` VALUES ('6263', '3', '4', '多线程', '0945a8f5-3764-4de5-bf56-b42374b5b6a5.', null, null, null, null, null, null, 'A)一个进程是一个独立的运行环境，可以看做是一个程序，而线程可以看做是进程的一个任务，比如QQ是一个进程，而一个QQ窗口是一个线程。\r\nB)在多线程程序中，多线程并发可以提高程序的效率，CPU不会因为某个线程等待资源而进入空闲状态，它会把资源让给其他的线程。\r\nC)用户线程就是我们开发程序是创建的线程，而守护线程为系统线程，如JVM虚拟中的GC\r\nD)线程的优先级别：每一个线程都有优先级别，有限级别高的可以先获取CPU资源使该线程从就绪状态转为运行状态。也可以自定义线程的有限级别\r\nE)死锁：至少两个以上线程争取两个以上CPU资源，避免死锁就避免使用嵌套锁，只需要在他们需要同步的地方加锁和避免无限等待', '', '0', '2017-12-26 22:15:48', '52', '1');
INSERT INTO `topic` VALUES ('6264', '33', '1', 'Which method must be defined by a class implementing the java.lang.Runnable interface?', 'f1ef7bc8-fb18-45ff-816e-029288e9dcd0.', 'void run()', 'public void run()', 'public void start()', 'void run(int priority)', '', '', 'B', '', '0', '2017-12-26 22:15:58', '64', '1');
INSERT INTO `topic` VALUES ('6265', '4', '4', 'AOP与IOC的概念（即spring的核心）', '59e8ce18-3bb1-4c63-b15e-3b8275d33473.', null, null, null, null, null, null, 'A) IOC：SPRING是开源框架，使用框架可以使我们减少工作量，提高工作效率并且它是分层结构，即相对应的层处理对应的业务逻辑，减少代码的耦合度。而SPRING的核心是IOC控制反转和AOP面向切面编程。IOC控制反转主要强调的是程序之间的关系是由容器控制的，容器控制对象，控制了对外部资源的获取。而反转即为，在传统的编程中都是由我们创建对象获取依赖对象，而在IOC中是容器帮我们创建对象并注入依赖对象，正是容器帮我们查找和注入对象，对象是被获取，所以叫反转。\r\nB) AOP：面向切面编程，主要是管理系统层的业务，比如日志，权限，事物等。AOP是将封装好的对象剖开，找出其中对多个对象产生影响的公共行为，并将其封装为一个可重用的模块，这个模块被命名为切面（ASPECT），切面将那些与业务逻辑无关，却被业务模块共同调用的逻辑提取并封装起来，减少了系统中的重复代码，降低了模块间的耦合度，同时提高了系统的可维护性。', '', '0', '2017-12-26 22:16:03', '52', '1');
INSERT INTO `topic` VALUES ('6266', '26', '1', '在ARM系统结构中，MMU映射最小的单元空间是__', '2dc8dc68-5550-4525-82f7-bde663eb47df.', '64KB', '16KB', '4KB', '1KB', '', '', 'D', '', '0', '2017-12-26 22:16:09', '48', '1');
INSERT INTO `topic` VALUES ('6267', '4', '4', 'hibernate的核心思想', 'd909c8ee-9ee4-45b9-8e9d-4f17c25d5a93.', null, null, null, null, null, null, 'A) HIBERNATE的核心思想是ROM对象关系映射机制。它是将表与表之间的操作映射成对象与对象之间的操作。也就是从数据库中提取的信息会自动按照你设置的映射要求封装成特定的对象。所以HIBERNATE就是通过将数据表实体类的映射，使得对对象的修改对应数据行的修改。', '', '0', '2017-12-26 22:16:21', '52', '1');
INSERT INTO `topic` VALUES ('6268', '33', '1', 'Given:\r\npublic static void main(String[] args) {\r\nObject obj = new Object() {\r\npublic int hashCode() {\r\nreturn 42;\r\n}\r\n};\r\nSystem.out.println(obj.hashCode());\r\n}\r\nWhat is the result?', '363241a7-31ef-4858-8114-bdf785586f71.', '42', 'An exception is thrown at runtime.', 'Compilation fails because of an error on line 12.', 'Compilation fails because of an error on line 16.', '', '', 'A', '', '0', '2017-12-26 22:16:27', '64', '1');
INSERT INTO `topic` VALUES ('6270', '33', '1', 'Which two are reserved words in the Java programming language? ', '6412d7d3-7cbb-465b-a34b-8d033b3cae7a.', ' run', 'import', 'default', ' implements', '', '', 'BD', '', '0', '2017-12-26 22:16:50', '64', '1');
INSERT INTO `topic` VALUES ('6271', '33', '4', 'Tomcat服务器优化（内存，并发连接数，缓存）', 'd73f5a44-a041-4ec6-b879-a68a45bd253f.', null, null, null, null, null, null, 'A) 内存优化：主要是对TOMCAT启动参数进行优化，我们可以在TOMCAT启动脚本中修改它的最大内存数等等。\r\nB) 线程数优化：TOMCAT的并发连接参数，主要在TOMCAT配置文件中SERVER.XML中配置，比如修改最小空闲连接线程数，用于提高系统处理性能等等。\r\nC) 优化缓存：打开压缩功能，修改参数，比如压缩的输出内容大小默认为2KB，可以适当的修改。', '', '0', '2017-12-26 22:17:00', '52', '1');
INSERT INTO `topic` VALUES ('6272', '4', '1', '选出不是Expression方法的选项（', 'adf4400a-72b6-4c41-8a67-c1cd875d54a2.', 'eq()', 'gt()', 'like() ', 'isNULL()', '', '', 'D', '', '0', '2017-12-26 22:17:05', '58', '1');
INSERT INTO `topic` VALUES ('6273', '26', '1', '在ARM Linux启动的过程中，开启MMU的时候，如何实现从实地址空间到虚拟地址空间的过度？()', 'b453d4bb-7426-4d58-bb3a-466024317946.', '开启MMU，在内存中创建页表（映射内核到3G以上的虚拟地址空间）并继续运行。', '开启MMU，在内存中创建页表（映射内核到3G以上的虚拟地址空间），跳转到虚拟地址空间继续运行', '在内存中创建页表（映射内核到3G以上的虚拟地址空间），开启MMU，跳转到虚拟地址空间继续运行', '在内存中创建页表（映射内核到3G以上的虚拟地址空间，同时把内核所在的前1MB空间到和其实地址相同的虚拟地址空间），开启MMU，跳转到虚拟地址空间继续运行。', '', '', 'D', '', '0', '2017-12-26 22:17:06', '48', '1');
INSERT INTO `topic` VALUES ('6274', '33', '4', 'HTTP协议', '8e704890-9e14-4f5b-bfcb-396d9f555d3b.', null, null, null, null, null, null, 'A) 常用的请求方法有GET、POST\r\nB) GET与POST的区别：传送数据，GET携带参数与访问地址传送，用户可以看见，这的话信息会不安全，导致信息泄露。而POST则将字段与对应值封装在实体中传送，这个过程用户是不可见的。GET传递参数有限制，而POST无限制。', '', '0', '2017-12-26 22:17:16', '52', '1');
INSERT INTO `topic` VALUES ('6275', '33', '1', ' What is the numerical range of a char?', '1c947e10-afc1-4979-a0a0-c44248c1e036.', ' 0 … 32767', '0 … 65535', '–256 … 255', '–32768 … 32767', 'Range is platform dependent.', '', 'B', '', '0', '2017-12-26 22:17:30', '64', '1');
INSERT INTO `topic` VALUES ('6276', '33', '4', '类加载的过程', '0e43eba0-01cf-496b-9916-87327f3b004a.', null, null, null, null, null, null, 'A) 遇到一个新的类时，首先会到方法区去找CLASS文件，如果没有找到就会去硬盘中找CLASS文件，找到后会返回，将CLASS文件加载到方法区中，在类加载的时候，静态成员变量会被分配到方法区的静态区域，非静态成员变量分配到非静态区域，然后开始给静态成员变量初始化，赋默认值，赋完默认值后，会根据静态成员变量书写的位置赋显示值，然后执行静态代码。当所有的静态代码执行完，类加载才算完成。', '', '0', '2017-12-26 22:17:57', '52', '1');
INSERT INTO `topic` VALUES ('6277', '26', '1', '下面为java关键字的选项是：', '88b15d61-1b21-45ea-9be9-74b0c7753192.', 'goto ', 'malloc ', 'extends', 'false', '', '', 'C', '', '0', '2017-12-26 22:18:01', '65', '1');
INSERT INTO `topic` VALUES ('6278', '3', '4', '对象的创建', 'af27083a-cb06-4113-a018-3540152b1de2.', null, null, null, null, null, null, 'A) 遇到一个新类时，会进行类的加载，定位到CLASS文件\r\nB) 对所有静态成员变量初始化，静态代码块也会执行，而且只在类加载的时候执行一次\r\nC) NEW 对象时，JVM会在堆中分配一个足够大的存储空间\r\nD) 存储空间清空，为所有的变量赋默认值，所有的对象引用赋值为NULL\r\nE) 根据书写的位置给字段一些初始化操作\r\nF) 调用构造器方法（没有继承）', '', '0', '2017-12-26 22:18:10', '52', '1');
INSERT INTO `topic` VALUES ('6279', '26', '1', '指令ADD R2,R1,R1,LSR #2中，LSR的含义是（）', 'c33a0087-d344-4bf2-a954-206a344b5725.', '逻辑左移', '逻辑右移', '算术右移 ', '循环右移', '', '', 'B', '', '0', '2017-12-26 22:18:12', '48', '1');
INSERT INTO `topic` VALUES ('6280', '33', '4', 'jvm的优化', '0aa85fa6-1b14-4294-b0a8-ecb3112e6466.', null, null, null, null, null, null, 'A) 设置参数，设置JVM的最大内存数\r\nB) 垃圾回收器的选择', '', '0', '2017-12-26 22:18:22', '52', '1');
INSERT INTO `topic` VALUES ('6281', '33', '4', '高并发处理', '976dc05a-4559-4905-9b6f-4742356c384d.', null, null, null, null, null, null, 'A) 了解一点高并发性问题，比如一W人抢一张票时，如何保证票在没买走的情况下所有人都能看见这张票，显然是不能用同步机制，因为SYNCHRONIZE是锁同步一次只能一个人进行。这时候可以用到锁机制，采用乐观锁可以解决这个问题。乐观锁的简单意思是在不锁定表的情况下，利用业务的控制来解决并发问题，这样即保证数据的可读性，又保证保存数据的排他性，保证性能的同时解决了并发带来的脏读数据问题。', '', '0', '2017-12-26 22:18:36', '52', '1');
INSERT INTO `topic` VALUES ('6282', '3', '1', '下面关于import, class和package的声明顺序哪个正确？( )', 'fd3bf11c-a29f-4618-a5c4-33a169cf5074.', 'package, import, class', 'class, import, package', 'import, package, class', 'package, class, import', '', '', 'A', '', '0', '2017-12-26 22:18:43', '64', '1');
INSERT INTO `topic` VALUES ('6283', '26', '1', '哈佛结构和冯诺依曼结构的区别是( )', 'f916f003-3e41-4715-b549-7d3f88011098.', '指令和数据分开存储', '不需要程序计数器', '统一编址 ', '单一数据总线', '', '', 'A', '', '0', '2017-12-26 22:18:48', '48', '1');
INSERT INTO `topic` VALUES ('6284', '3', '4', '事物的理解', '5a590e43-5e3c-467d-a382-27c943905978.', null, null, null, null, null, null, 'A) 事物具有原子性，一致性，持久性，隔离性\r\nB) 原子性：是指在一个事物中，要么全部执行成功，要么全部失败回滚。\r\nC) 一致性：事物执行之前和执行之后都处于一致性状态\r\nD) 持久性：事物多数据的操作是永久性\r\nE) 隔离性：当一个事物正在对数据进行操作时，另一个事物不可以对数据进行操作，也就是多个并发事物之间相互隔离。', '', '0', '2017-12-26 22:18:51', '52', '1');
INSERT INTO `topic` VALUES ('6285', '18', '4', '说明下述Linux系统命令的主要功能是什么？', 'e39eb095-9c56-462d-a34b-6f01ea82ff88.', null, null, null, null, null, null, '显示文件目录命令LS\r\n改变当前目录命令CD，如CD/HOME\r\n建立子目录MKDIR，MKDIR XIONG\r\n删除子目录命令MKDIR，如MKDIR/MNT/CDROM\r\n删除文件命令RM，如RM/UCDOS.BAT\r\n文件复制命令CP，如CP/UCDOS/*/FOX\r\n获取帮助信息命令MAN，如MAN LS\r\n显示文件的内容CAT MORE LESS', '', '0', '2017-12-26 22:19:09', '18', '1');
INSERT INTO `topic` VALUES ('6286', '26', '1', '哪个正确？', 'ba5019ea-4370-438c-9c8a-f701f764ac3a.', 'String temp [] = new String {“a” “b” “c”};', ' String temp [] = {“a” “b” “c”}', 'String temp = {“a”, “b”, “c”}', 'String temp [] = {“a”, “b”, “c”}', '', '', 'D', '', '0', '2017-12-26 22:19:19', '64', '1');
INSERT INTO `topic` VALUES ('6287', '26', '1', 'ARM9和ARM7的重要区别是( )', '3b6d2270-0c34-47b0-b43d-6e7c6bcf8f58.', 'ARM9带有MMU功能', 'ARM9支持Thumb指令集  ', 'ARM9带有Cache功能', 'ARM9是哈佛结构', '', '', 'A', '', '0', '2017-12-26 22:19:23', '48', '1');
INSERT INTO `topic` VALUES ('6288', '3', '1', '关于java.lang.String类，以下描述正确的一项是（ ）', 'f8da4809-1969-46ed-b076-217446d3a9ed.', ' String类是final类故不可以继承；', 'String类是final类故可以继承；', 'String类不是final类故不可以继承；', 'String类不是final类故可以继承；', '', '', 'A', '', '0', '2017-12-26 22:19:46', '64', '1');
INSERT INTO `topic` VALUES ('6289', '3', '1', '关于实例方法和类方法，以下描述正确的是：( )', '729ce2b2-96ac-4157-a5a0-549e470a7f11.', '实例方法只能访问实例变量', ' 类方法既可以访问类变量，也可以访问实例变量', '类方法只能通过类名来调用', ' 实例方法只能通过对象来调用', '', '', 'D', '', '0', '2017-12-26 22:20:08', '64', '1');
INSERT INTO `topic` VALUES ('6290', '3', '4', '多态的好处', '6ac1bf38-bc1d-48d3-8d96-0a081e0fb4d3.', null, null, null, null, null, null, '允许不同类对象对同一消息做出响应,即同一消息可以根据发送对象的不同而采用多种不同的行为方式(发送消息就是函数调用).主要有以下优点:\r\n\r\n可替换性:多态对已存在代码具有可替换性.\r\n\r\n可扩充性:增加新的子类不影响已经存在的类结构.\r\n\r\n接口性:多态是超累通过方法签名,想子类提供一个公共接口,由子类来完善或者重写它来实现的.\r\n\r\n灵活性:\r\n\r\n简化性: ', '', '0', '2017-12-26 22:20:14', '52', '1');
INSERT INTO `topic` VALUES ('6291', '3', '1', '接口是Java面向对象的实现机制之一，以下说法正确的是：( )', '0fc81945-9168-4136-8d78-3c1af9a76ef4.', ' Java支持多重继承，一个类可以实现多个接口；', 'Java只支持单重继承，一个类可以实现多个接口；', 'Java只支持单重继承，一个类只可以实现一个接口；', ' Java支持多重继承，但一个类只可以实现一个接口。', '', '', 'B', '', '0', '2017-12-26 22:20:32', '64', '1');
INSERT INTO `topic` VALUES ('6292', '26', '1', '当系统工作负载增加时，CPU的 () 将占很大比重', '98c0bac5-8fdb-49cc-81c2-98dc02a92323.', '用户时间', '系统时间', '空闲时间', '进程时间', '', '', 'A', '', '0', '2017-12-26 22:20:34', '48', '1');
INSERT INTO `topic` VALUES ('6293', '3', '4', '代码中如何实现多态', 'fb830119-5cb7-4584-a0ac-319b3149a9c5.', null, null, null, null, null, null, '实现多态主要有以下三种方式:\r\n\r\n1. 接口实现\r\n\r\n2. 继承父类重写方法\r\n\r\n3. 同一类中进行方法重载', '', '0', '2017-12-26 22:20:35', '52', '1');
INSERT INTO `topic` VALUES ('6294', '33', '4', '虚拟机是如何实现多态的', '153c10b9-3df9-49cc-9a23-b44f536bb2ae.', null, null, null, null, null, null, '动态绑定技术(DYNAMIC BINDING),执行期间判断所引用对象的实际类型,根据实际类型调用对应的方法。', '', '0', '2017-12-26 22:20:46', '52', '1');
INSERT INTO `topic` VALUES ('6295', '33', '4', '接口的意义', '3db8f1a2-8241-4349-9696-019b71171940.', null, null, null, null, null, null, '接口的意义用三个词就可以概括:规范,扩展,回调。', '', '0', '2017-12-26 22:21:00', '52', '1');
INSERT INTO `topic` VALUES ('6296', '3', '1', '下列关于interface的说法正确的是：( )', '6c3d93d5-8e68-419e-81c7-6d982417d187.', 'interface中可以有private方法', 'interface中可以有final方法', 'interface中可以有function实现', 'interface可以继承其他interface', '', '', 'D', '', '0', '2017-12-26 22:21:04', '64', '1');
INSERT INTO `topic` VALUES ('6297', '33', '4', '抽象类的意义', 'a2e73f7c-f3e4-4b07-8800-3bdcbbae7e30.', null, null, null, null, null, null, '抽象类的意义可以用三句话来概括:\r\n\r\n为其他子类提供一个公共的类型\r\n\r\n封装子类中重复定义的内容\r\n\r\n定义抽象方法,子类虽然有不同的实现,但是定义时一致的', '', '0', '2017-12-26 22:21:14', '52', '1');
INSERT INTO `topic` VALUES ('6298', '3', '4', '父类的静态方法能否被子类重写', '34f4db08-60b1-4217-9036-f96955381dd1.', null, null, null, null, null, null, '不能.子类继承父类后,有相同的静态方法和非静态,这是非静态方法覆盖父类中的方法(即方法重写),父类的该静态方法被隐藏(如果对象是父类则调用该隐藏的方法),另外子类可集成父类的静态与非静态方法,至于方法重载我觉得它其中一要素就是在同一类中,不能说父类中的什么方法与子类里的什么方法是方法重载的体现。', '', '0', '2017-12-26 22:21:29', '52', '1');
INSERT INTO `topic` VALUES ('6299', '3', '1', '已知A类被打包在packageA , B类被打包在packageB ，且B类被声明为public ，且有一个成员变量x被声明为, protected控制方式 。C类也位于packageA包，且继承了B类 。则以下说话正确的是（ ）', 'bcc8e099-ad41-42e0-8349-ef8234f5f199.', 'A类的实例不能访问到B类的实例', 'A类的实例能够访问到B类一个实例的x成员', 'C类的实例可以访问到B类一个实例的x成员', 'C类的实例不能访问到B类的实例', '', '', 'C', '', '0', '2017-12-26 22:21:32', '64', '1');
INSERT INTO `topic` VALUES ('6300', '4', '1', '将某个对象从Session的一级缓存中清除的方法是( )。', '4c8a0192-5309-41e1-b145-f99810bf7ce6.', ' close()', 'clear()', ' evict() ', ' flush()', '', '', 'C', '', '0', '2017-12-26 22:21:35', '58', '1');
INSERT INTO `topic` VALUES ('6301', '26', '1', '嵌入式微控制器相比嵌入式微处理器的的最大特点（ ）', 'e76176a6-2974-46ef-b274-55eccd5e65f9.', '体积大大减小', '单片化', '功耗低 ', '成本高', '', '', 'B', '', '0', '2017-12-26 22:21:41', '48', '1');
INSERT INTO `topic` VALUES ('6302', '3', '4', '什么是不可变对象', '72147357-d5ef-4c1b-bb04-06924df6a31f.', null, null, null, null, null, null, '不可变对象指对象一旦被创建，状态就不能再改变。任何修改都会创建一个新的对象，如 STRING、INTEGER及其它包装类。', '', '0', '2017-12-26 22:21:41', '52', '1');
INSERT INTO `topic` VALUES ('6304', '3', '4', 'java 创建对象的几种方式', 'b7eac218-e864-49c7-bc80-5b67a1584479.', null, null, null, null, null, null, '采用NEW\r\n通过反射\r\n采用CLONE\r\n通过序列化机制\r\n前2者都需要显式地调用构造方法. 造成耦合性最高的恰好是第一种,因此你发现无论什么框架,只要涉及到解耦必先减少new的使用。', '', '0', '2017-12-26 22:22:00', '52', '1');
INSERT INTO `topic` VALUES ('6305', '4', '1', '在set节点中设置\"outer-join=\"true\"\"，当调用Session的find方法时采用( )。', '365522a2-1dcf-4916-819f-2bbc5b5b4d88.', '立即检索', '延迟检索', '迫切左外连接检索', '批量检索', '', '', 'C', '', '0', '2017-12-26 22:22:05', '58', '1');
INSERT INTO `topic` VALUES ('6306', '3', '1', '以下程序正确的输出是（ ）\r\npackage test;\r\npublic class FatherClass {\r\npublic FatherClass() {\r\nSystem.out.println(“FatherClass Create”);\r\n}\r\n}\r\npackage test;\r\nimport test.FatherClass;\r\npublic class ChildClass extends FatherClass {\r\npublic ChildClass() {\r\nSystem.out.println(“ChildClass Create”);\r\n}\r\npublic static void main(String[] args) {\r\nFatherClass fc = new FatherClass();\r\nChildClass cc = new ChildClass();\r\n}\r\n}', '214db142-8ef1-496c-85e9-50ccec2bc95e.', 'FatherClass Create\r\nFatherClass Create\r\nChildClass Create', 'FatherClass Create\r\nChildClass Create\r\nFatherClass Create', 'ChildClass Create\r\nChildClass Create\r\nFatherClass Create', 'ChildClass Create\r\nFatherClass Create\r\nFatherClass Create', '', '', 'A', '', '0', '2017-12-26 22:22:06', '64', '1');
INSERT INTO `topic` VALUES ('6307', '3', '1', '给定如下代码，下面哪个可以作为该类的构造函数 ( )\r\npublic class Test {\r\n}', '1980d6f7-9d63-4170-baf1-679844623a07.', ' public void Test() {?}', 'public Test() {?}', 'public static Test() {?}', 'public static void Test() {?}', '', '', 'B', '', '0', '2017-12-26 22:22:31', '64', '1');
INSERT INTO `topic` VALUES ('6308', '3', '1', '题目:\r\n1. public class test (\r\n2. public static void main (String args[]) {\r\n3. int i = 0xFFFFFFF1;\r\n4. int j = ~i;\r\n5.\r\n6. }\r\n7. )\r\n程序运行到第5行时,j的值为多少?( )', '2bd0a221-2303-4463-b91f-d160f0c2fca9.', '–15', '0', '1', '14', '', '', 'D', '', '0', '2017-12-26 22:22:58', '64', '1');
INSERT INTO `topic` VALUES ('6309', '26', '1', '延迟检索返回代理类的实例不具备的特征有()。', '47f61406-1a50-4f7e-9358-07abc382ae5b.', ' 在Hibernate运行时动态生成', ' 当Hibernate创建代理类实例时，仅初始化OID属性，其他属性均为null，占用内存空间较少', '当应用程序第一次访问代理类实例时， Hibernate将初始化代理类的实例，在初始化的过程中执行select语句并从数据库中加载对象的所有数据。', '当访问getId访法时，Hibernate会初始化代理类的实例，在初始化的过程中执行select语句，并从数据为中加载对象的所有数据。', '', '', ' D', '', '0', '2017-12-26 22:23:01', '58', '1');
INSERT INTO `topic` VALUES ('6310', '3', '1', '关于sleep()和wait()，以下描述错误的一项是（ ）', '89355913-0168-466a-b1a4-e4ea2feb001c.', 'sleep是线程类（Thread）的方法，wait是Object类的方法；', ' sleep不释放对象锁，wait放弃对象锁；', 'sleep暂停线程、但监控状态仍然保持，结束后会自动恢复；', 'wait后进入等待锁定池，只有针对此对象发出notify方法后获得对象锁进入运行状态。', '', '', 'D', '', '0', '2017-12-26 22:23:22', '64', '1');
INSERT INTO `topic` VALUES ('6311', '4', '1', '由持久化状态向游离状态转变的方法不包括( )', '7a9f5277-86c7-4ca7-af3f-fde573042016.', 'close() ', 'clear() ', 'lock() ', 'evict()', '', '', 'C', '', '0', '2017-12-26 22:23:33', '58', '1');
INSERT INTO `topic` VALUES ('6312', '33', '4', 'java当中的四种引用', 'a5b777b9-3c46-4c76-89de-b1c995534b36.', null, null, null, null, null, null, '强引用,软引用,弱引用,虚引用.不同的引用类型主要体现在GC上:\r\n强引用：如果一个对象具有强引用，它就不会被垃圾回收器回收。即使当前内存空间不足，JVM也不会回收它，而是抛出 OUTOFMEMORYERROR 错误，使程序异常终止。如果想中断强引用和某个对象之间的关联，可以显式地将引用赋值为NULL，这样一来的话，JVM在合适的时间就会回收该对象\r\n软引用：在使用软引用时，如果内存的空间足够，软引用就能继续被使用，而不会被垃圾回收器回收，只有在内存不足时，软引用才会被垃圾回收器回收。\r\n弱引用：具有弱引用的对象拥有的生命周期更短暂。因为当 JVM 进行垃圾回收，一旦发现弱引用对象，无论当前内存空间是否充足，都会将弱引用回收。不过由于垃圾回收器是一个优先级较低的线程，所以并不一定能迅速发现弱引用对象\r\n虚引用：顾名思义，就是形同虚设，如果一个对象仅持有虚引用，那么它相当于没有引用，在任何时候都可能被垃圾回收器回收。\r\n更多了解参见深入对象引用', '', '0', '2017-12-26 22:23:36', '52', '1');
INSERT INTO `topic` VALUES ('6313', '3', '4', 'java中==和 eqauls() 的区别, equals() 和`hashcode的区别', '57375685-f3d7-4667-b03e-58ff114882c1.', null, null, null, null, null, null, '==是运算符,用于比较两个变量是否相等,而EQUALS是OBJECT类的方法,用于比较两个对象是否相等.默认OBJECT类的EQUALS方法是比较两个对象的地址,此时和==的结果一样.换句话说:基本类型比较用==,比较的是他们的值.默认下,对象用==比较时,比较的是内存地址,如果需要比较对象内容,需要重写EQUAL方法。', '', '0', '2017-12-26 22:23:55', '52', '1');
INSERT INTO `topic` VALUES ('6314', '3', '4', '“a==b”与a.equals(b)有什么区别', 'ab0c76f7-8601-43d3-9b1e-24122362d1da.', null, null, null, null, null, null, '如果A 和B 都是对象，则 A==B 是比较两个对象的引用，只有当 A 和 B 指向的是堆中的同一个对象才会返回 TRUE，而 A.EQUALS(B) 是进行逻辑比较，所以通常需要重写该方法来提供逻辑一致性的比较。例如，STRING 类重写 EQUALS() 方法，所以可以用于两个不同对象，但是包含的字母相同的比较。', '', '0', '2017-12-26 22:24:12', '52', '1');
INSERT INTO `topic` VALUES ('6315', '26', '1', '中断向量是指（　）', '0e8444a9-3d79-4bea-a1f1-053c9c2533df.', '中断断点的地址', '中断向量表起始地址', '中断处理程序入口地址', '中断返回地址', '', '', 'C', '', '0', '2017-12-26 22:24:14', '48', '1');
INSERT INTO `topic` VALUES ('6317', '3', '4', '3*0.1==0.3 返回值是什么', '4002f119-6ced-46eb-bc95-85351ab8b947.', null, null, null, null, null, null, 'FALSE，因为有些浮点数不能完全精确的表示出来。', '', '0', '2017-12-26 22:24:30', '52', '1');
INSERT INTO `topic` VALUES ('6318', '33', '4', '内部类的作用', '28ed55e8-2edf-4539-95f3-2d512914a1e4.', null, null, null, null, null, null, '内部类可以用多个实例,每个实例都有自己的状态信息,并且与其他外围对象的信息相互独立.在单个外围类当中,可以让多个内部类以不同的方式实现同一接口,或者继承同一个类.创建内部类对象的时刻病不依赖于外部类对象的创建.内部类并没有令人疑惑的”IS-A”关系,它就像是一个独立的实体，\r\n\r\n内部类提供了更好的封装,除了该外围类,其他类都不能访问。', '', '0', '2017-12-26 22:24:45', '52', '1');
INSERT INTO `topic` VALUES ('6319', '33', '4', '深拷贝和浅拷贝的区别是什么?', '3df5e9c7-212c-4a6f-b70f-8803d6d692a7.', null, null, null, null, null, null, '浅拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而所有的对其他对象的引用仍然指向原来的对象。换言之，浅拷贝仅仅复制所考虑的对象，而不复制它所引用的对象。\r\n\r\n深拷贝：被复制对象的所有变量都含有与原来的对象相同的值，而那些引用其他对象的变量将指向被复制过的新对象，而不再是原有的那些被引用的对象。换言之，深拷贝把要复制的对象所引用的对象都复制了一遍。', '', '0', '2017-12-26 22:25:02', '52', '1');
INSERT INTO `topic` VALUES ('6320', '3', '1', '下面能让线程停止执行的有( )', 'ed57c4b2-58da-4e8a-b8db-d562e7498ba7.', 'sleep();', 'stop();', 'notify();', 'synchronized();', 'yield();', 'wait();', 'ABDEF', '', '0', '2017-12-26 22:25:17', '64', '1');
INSERT INTO `topic` VALUES ('6321', '4', '1', '于以下程序，Customer对象在第几行变为游离状态？( D)  Session session1=sessionFactory.openSession();   Transaction tx1 = session1.beginTransaction();   Customer customer=new Customer();    //1 customer.setName(\\\"Tom\\\");  session1.save(customer);       //2 tx1.commit();         //3 session1.close();        //4', '6e21ca65-0ee2-4167-9662-57c19e16aed3.', '第(1)行', '第(2)行', '第(3)行', '第(4)行', '', '', 'D', '', '0', '2017-12-26 22:25:33', '58', '1');
INSERT INTO `topic` VALUES ('6322', '3', '1', '下面哪个可以改变容器的布局？( )', '2c749c05-297f-46e6-a7b7-0a37e7d5523e.', ' setLayout(aLayoutManager);', ' addLayout(aLayoutManager);', ' layout(aLayoutManager);', 'setLayoutManager(aLayoutManager);', '', '', 'A', '', '0', '2017-12-26 22:25:41', '64', '1');
INSERT INTO `topic` VALUES ('6323', '33', '4', 'jsp应用的范围？？', '230aa974-f7eb-42bd-bfee-a3a7dbd17c77.', null, null, null, null, null, null, 'JSP是SERVLET技术的扩展，本质上就是SERVLET的简易方式。JSP编译后是“类SERVLET”。SERVLET和JSP最主要的不同点在于，SERVLET的应用逻辑是在JAVA文件中，并且完全从表示层中的HTML里分离开来。而JSP的情况是JAVA和HTML可以组合成一个扩展名为.JSP的文件。JSP侧重于视图，SERVLET主要用于控制逻辑。在STRUTS框架中,JSP位于MVC设计模式的视图层,而SERVLET位于控制层.', '', '0', '2017-12-26 22:25:43', '65', '1');
INSERT INTO `topic` VALUES ('6324', '3', '4', 'java当中使用什么类型表示价格比较好?', 'dd1277db-3a2e-4470-a35f-7e532c45bc2a.', null, null, null, null, null, null, '如果不是特别关心内存和性能的话，使用BIGDECIMAL，否则使用预定义精度的 DOUBLE 类型。', '', '0', '2017-12-26 22:25:46', '52', '1');
INSERT INTO `topic` VALUES ('6325', '4', '1', '关于HQL与SQL，以下哪些说法正确？()。', 'f36e5cf0-ccb3-427a-874c-2115cfd0910f.', ' HQL与SQL没什么差别', 'HQL面向对象，而SQL操纵关系数据库', 'HQL与SQL中，都包含select,insert,update,delete语句', ' HQL仅用于查询和删除数据，不支持insert,update语句 ', '', '', 'B', '', '0', '2017-12-26 22:26:03', '58', '1');
INSERT INTO `topic` VALUES ('6326', '3', '1', '下面哪个是applet传递参数的正确方式？（ ）', '45c55767-4d78-4ad9-b7ee-8d739ef3170a.', '<applet code=Test.class age=33 width=1 height=1>', ' <param name=age value=33>', '<applet code=Test.class name=age value=33 width=1 height=1>', '<applet Test 33>', '', '', 'B', '', '0', '2017-12-26 22:26:06', '64', '1');
INSERT INTO `topic` VALUES ('6327', '3', '4', '如何判断一个对象是否应该被回收', '2ab27926-67e4-43f3-be6c-b03e56c1a9ee.', null, null, null, null, null, null, '这就是所谓的对象存活性判断,常用的方法有两种:1.引用计数法;2:对象可达性分析.由于引用计数法存在互相引用导致无法进行GC的问题,所以目前JVM虚拟机多使用对象可达性分析算法。', '', '0', '2017-12-26 22:26:08', '52', '1');
INSERT INTO `topic` VALUES ('6328', '18', '4', '简述嵌入式Linux系统开发流程。', '3956d08d-eeca-420c-b276-3c62cc27cc68.', null, null, null, null, null, null, '嵌入式系统平台移植主要包括以下几部分\r\n1）交叉编译器的制作和安装\r\n2）BOOTLOADER开发和移植\r\n3）嵌入式操作系统开发和移植\r\n4）根文件系统制作和移植\r\n5）应用程序开发\r\n6）系统集成和测试', '', '0', '2017-12-26 22:26:19', '18', '1');
INSERT INTO `topic` VALUES ('6329', '33', '4', '调用System.gc()会发生什么?', '4b930ac6-935c-41fb-9b25-8c2246a46ecd.', null, null, null, null, null, null, '通知GC开始工作,但是GC真正开始的时间不确定。', '', '0', '2017-12-26 22:26:27', '52', '1');
INSERT INTO `topic` VALUES ('6330', '4', '1', '下面关于hibernate核心接口说明错误的是？()', '8fde10a2-7db1-48a2-867f-2ba4d2e1b3b8.', 'Configuration 接口：配置Hibernate，根据其启动hibernate，创建SessionFactory 对象', 'SessionFactory 接口：负责保存、更新、删除、加载和查询对象，是线程不安全的 ', ' Query 和Criteria 接口：执行数据库的查询', 'Transaction 接口：管理事务', '', '', 'B', '', '0', '2017-12-26 22:26:31', '58', '1');
INSERT INTO `topic` VALUES ('6331', '33', '4', '说说进程,线程,协程之间的区别', 'cf157b57-01e0-4b09-b41c-2b5e75c0b69c.', null, null, null, null, null, null, '简而言之,进程是程序运行和资源分配的基本单位,一个程序至少有一个进程,一个进程至少有一个线程.进程在执行过程中拥有独立的内存单元,而多个线程共享内存资源,减少切换次数,从而效率更高.线程是进程的一个实体,是CPU调度和分派的基本单位,是比程序更小的能独立运行的基本单位.同一进程中的多个线程之间可以并发执行。', '', '0', '2017-12-26 22:26:39', '52', '1');
INSERT INTO `topic` VALUES ('6332', '3', '1', '不能用来修饰interface的有（）', '000605d9-f292-4621-a36c-f98400b1d78c.', 'private', 'public', 'protected', 'static', '', '', 'ADC', '', '0', '2017-12-26 22:26:40', '64', '1');
INSERT INTO `topic` VALUES ('6333', '33', '4', 'cookie应用范围工作原理？？？', '2214b067-39e8-447b-b753-9a8a3efce570.', null, null, null, null, null, null, 'COOKIE:主要用在保存客户端，其值在客户端与服务端之间传送，不安全，存储的数据量有限。\r\nSESSION:保存在服务端，每一个SESSION在服务端有一个SESSIONID作一个标识。存储的数据量大，安全性高。占用服务端的内存资源。', '', '0', '2017-12-26 22:26:40', '65', '1');
INSERT INTO `topic` VALUES ('6334', '33', '4', '你了解守护线程吗?它和非守护线程有什么区别', 'da74a53d-ec8f-42fe-8ce7-1ec6f68d3c1f.', null, null, null, null, null, null, '程序运行完毕,JVM会等待非守护线程完成后关闭,但是JVM不会等待守护线程.守护线程最典型的例子就是GC线程。', '', '0', '2017-12-26 22:26:50', '52', '1');
INSERT INTO `topic` VALUES ('6335', '33', '4', '什么是多线程上下文切换', 'ca87ffb1-9a41-45c1-8f1a-f44733c087f4.', null, null, null, null, null, null, '多线程的上下文切换是指CPU控制权由一个已经正在运行的线程切换到另外一个就绪并等待获取CPU执行权的线程的过程。', '', '0', '2017-12-26 22:27:02', '52', '1');
INSERT INTO `topic` VALUES ('6336', '3', '1', '说法错误的有（）', '95ea3fd0-8396-4172-b2c3-7827a6762743.', ' 在类方法中可用this来调用本类的类方法', '在类方法中调用本类的类方法时可直接调用', '在类方法中只能调用本类中的类方法', '在类方法中绝对不能调用实例方法', '', '', 'ACD', '', '0', '2017-12-26 22:27:10', '64', '1');
INSERT INTO `topic` VALUES ('6337', '18', '4', '动态链接库加载的两种方式？', 'd24f4472-8d07-4936-ac89-3fa1c8342e22.', null, null, null, null, null, null, '一种是编译的时候，指明所依赖的动态链接库，这样LOADER可以在程序启动的时候，来所有的动态链接映射到内存中；一种是在运行过程中，通过DLOPEN和DLFREE的方式加载动态链接库，动态将动态链接库加载到内存中。\r\n\r\n这两种方式，从编程角度来讲，第一种是最方便的，效率上影响也不大，在内存使用上有些差别。', '', '0', '2017-12-26 22:27:14', '48', '1');
INSERT INTO `topic` VALUES ('6338', '33', '4', '创建两种线程的方式?他们有什么区别?', '2856c612-8733-4b2e-9a2c-021a7ae35af9.', null, null, null, null, null, null, '通过实现JAVA.LANG.RUNNABLE或者通过扩展JAVA.LANG.THREAD类.相比扩展THREAD,实现RUNNABLE接口可能更优.原因有二:\r\n\r\n1.JAVA不支持多继承.因此扩展THREAD类就代表这个子类不能扩展其他类.而实现RUNNABLE接口的类还可能扩展另一个类。\r\n\r\n2.类可能只要求可执行即可,因此集成整个THREAD类的开销过大。', '', '0', '2017-12-26 22:27:14', '52', '1');
INSERT INTO `topic` VALUES ('6339', '3', '1', '从下面四段（A，B，C，D）代码中选择出正确的代码段（）', 'cd27b487-f494-482b-b108-42a9815fa744.', 'public class Something {\r\nvoid doSomething () {\r\nprivate String s = ”;\r\nint l = s.length();\r\n}\r\n}', 'abstract class Name {\r\nprivate String name;\r\npublic abstract boolean isStupidName(String name) {}\r\n}', 'public class Something {\r\npublic static void main(String[] args) {\r\nOther o = new Other();\r\nnew Something().addOne(o);\r\n}\r\npublic void addOne(final Other o) {\r\no.i++;\r\n}\r\n}\r\nclass Other {\r\npublic int i;\r\n}', 'public class Something {\r\npublic int addOne(final int x) {\r\nreturn ++x; }\r\n}', '', '', 'C', '', '0', '2017-12-26 22:27:56', '64', '1');
INSERT INTO `topic` VALUES ('6340', '33', '4', '你有哪些多线程开发良好的实践?', 'df3195c5-835e-4e97-8e9b-dfd02760e6a3.', null, null, null, null, null, null, '给线程命名\r\n最小化同步范围\r\n优先使用VOLATILE\r\n尽可能使用更高层次的并发工具而非WAIT和NOTIFY()来实现线程通信,如BLOCKINGQUEUE,SEMEAPHORE\r\n优先使用并发容器而非同步容器.\r\n考虑使用线程池', '', '0', '2017-12-26 22:27:59', '52', '1');
INSERT INTO `topic` VALUES ('6341', '4', '1', ' 从SessionFactory中得到Session的方法是()。', '258010ea-de90-4cd8-b0bc-af926b211da9.', 'getSession', 'openSession ', ' currentSession', ' createSession', '', '', 'A', '', '0', '2017-12-26 22:28:09', '58', '1');
INSERT INTO `topic` VALUES ('6342', '3', '1', '选择下面代码的运行结果：（）。\r\npublic class Test{\r\npublic void method()\r\n{\r\nfor(int i = ; i &lt; 3; i++)\r\n{\r\nSystem.out.print(i);\r\n}\r\nSystem.out.print(i);\r\n}\r\n}', 'c195b1e8-7755-4d4c-9353-93e5ac94b043.', '122', '133', '编译错误', '没有任何输出', '', '', 'C', '', '0', '2017-12-26 22:28:23', '64', '1');
INSERT INTO `topic` VALUES ('6343', '4', '1', '关于Hibernate中关系的说话正确的是()。', '0c786414-7e47-48fe-989b-838b6d1d202e.', ' 一对多必须用Set来映射 ', ' 多对一必须用Set来映射', ' 一对多可以用Set来映射,也可以用List、Map来映射', ' 多对一可以用Set来映射,也可以用List、Map来映射', '', '', 'A', '', '0', '2017-12-26 22:28:50', '58', '1');
INSERT INTO `topic` VALUES ('6344', '3', '1', '下面那几个函数是public void method(){̷}的重载函数？（）', '97e9915a-3bcb-46d2-9dfc-0afb2e78960f.', 'public void method( int m){̷}', 'public int method(){̷}', 'public void method2(){̷}', 'public int method(int m，float f ){̷}', '', '', 'A', '', '0', '2017-12-26 22:29:07', '64', '1');
INSERT INTO `topic` VALUES ('6345', '26', '4', ' AMBA代表什么？', '03af9944-2a84-4109-a5b4-ce48670c817b.', null, null, null, null, null, null, ' 答：翻译过来的名称是“先进的微处理器总线架构”，是ARM公司基于ARM处理器的一种总线架构；由AMBA又延伸出两套总线，分别为AHB和APB；\r\n                  AHB：先进的高性能总线，类似于X86的北桥，主要作用是连接高速外设；\r\n                  APB：先进的外设总线，类似于X86的南桥，主要作用是连接低速外设；', '', '0', '2017-12-26 22:29:16', '48', '1');
INSERT INTO `topic` VALUES ('6346', '4', '1', '下面关于数据持久化概念的描述，错误的是()。', 'eb762715-9dc8-4e5d-85a0-5c9854ae362a.', ' 保存在内存中数据的状态是临时状态', '持久状态的数据在关机后数据依然存在 ', '数据可以由持久状态转换为临时状态', '将数据转换为持久状态的机制称为数据持久化 ', '', '', 'A', '', '0', '2017-12-26 22:29:17', '58', '1');
INSERT INTO `topic` VALUES ('6347', '33', '1', '给出如下声明：\r\nString s = “Example”;\r\n合法的代码由哪些？', '3f1f922e-20f3-43b0-b663-4c58f12c7e84.', 's>>>=3', 's[3]= “X”', 'int i = s.iength() ', 's = s +1', '', '', 'D', '', '0', '2017-12-26 22:29:43', '64', '1');
INSERT INTO `topic` VALUES ('6348', '26', '4', ' 怎么去区分“冯氏架构”和“哈佛架构”？', '01c284b6-1e30-482a-b6c6-cf5cc8026b53.', null, null, null, null, null, null, ' 答：要想区分两者，就看指令和数据是否在同一个储存器中，而且要注意，这个储存器不是别的，而是特指CACHE（高速缓存）；\r\n                 “冯氏架构”指令与数据共存于CACHE中，而“哈佛架构”指令与数据存在于不同的CACHE中，有专门的指令CACHE和数据CACHE；\r\n                  也正是因为这样，“哈佛架构”中指令的执行与数据的存取是可以同时进行的，而“冯氏架构”就不行了；', '', '0', '2017-12-26 22:29:45', '48', '1');
INSERT INTO `topic` VALUES ('6349', '18', '4', '中断与异常有何区别？', '1598628e-fcdc-4b42-ad4a-bfa33abcf582.', null, null, null, null, null, null, '异常在处理的时候必须考虑与处理器的时钟同步，实际上异常也称为同步中断，在处理器执行到因编译错误而导致的错误指令时，或者在执行期间出现特殊错误，必须靠内核处理的时候，处理器就会产生一个异常；所谓中断是指外部硬件产生的一个电信号从CPU的中断引脚进入，打断CPU的运行。所谓异常是指软件运行过程中发生了一些必须作出处理的事件，CPU自动产生一个陷入来打断CPU的运行。', '', '0', '2017-12-26 22:29:48', '18', '1');
INSERT INTO `topic` VALUES ('6350', '4', '1', '在使用了Hibernate的系统中，要想在删除某个客户数据的同时删除该客户对应的所有订单数据，下面方法可行的是()。', '2c6ad8e4-a639-4fb3-b2c1-46abf30b4bee.', '配置客户和订单关联的cascade属性为save-update', ' 配置客户和订单关联的cascade属性为all', '设置多对一关联的inverse属性为true', '设置多对一关联的inverse属性为false', '', '', 'A', '', '0', '2017-12-26 22:30:00', '58', '1');
INSERT INTO `topic` VALUES ('6351', '3', '1', '如下哪些不是java的关键字？（ ）', '2df472cc-7c20-4ed3-9171-b94640462125.', 'const', 'NULL', 'false', '.this', '', '', 'BC', '', '0', '2017-12-26 22:30:10', '64', '1');
INSERT INTO `topic` VALUES ('6352', '26', '4', ' FIQ的什么特点使得它处理的速度比IRQ快？', '79e673f5-c0f2-4df2-b168-465c89431004.', null, null, null, null, null, null, '答：一，FIQ向量位于异常向量表的末尾，不需要跳转指令，异常处理程序可以从异常向量处连续执行；\r\n                二，中断处理需要保护其使用的非私有寄存器，而FIQ有5个额外的私有寄存器；', '', '0', '2017-12-26 22:30:25', '48', '1');
INSERT INTO `topic` VALUES ('6353', '33', '4', 'java里jstl什么？优点有哪些？？', '82015e6a-bf3d-4231-86bc-fd00a9aea8b6.', null, null, null, null, null, null, 'JSTL（JSP STANDARD　TAG　LIBRARY　，JSP标准标签库)是一个不断完善的开放源代码的JSP标签库，由四个定制标记库（CORE、FORMAT、XML 和 SQL）和一对通用标记库验证器（SCRIPTFREETLV 和 PERMITTEDTAGLIBSTLV）组成。优点有：\r\n1、 在应用程序服务器之间提供了一致的接口，最大程序地提高了WEB应用在各应用服务器之间的移植。', '', '0', '2017-12-26 22:30:29', '65', '1');
INSERT INTO `topic` VALUES ('6354', '4', '1', '以下关于SessionFactory的说法哪些正确？( )。', '8ca87d50-dc2f-4fbe-8a92-81401206e07f.', '对于每个数据库事务，应该创建一个SessionFactory对象', '一个SessionFactory对象对应多个数据库存储源 ', ' SessionFactory是重量级的对象，不应该随意创建。如果系统中只有一个数据库存储源，只需要创建一个', ' SessionFactory的load()方法用于加载持久化对象', '', '', 'C', '', '0', '2017-12-26 22:30:45', '58', '1');
INSERT INTO `topic` VALUES ('6355', '18', '4', '简述SPI,UART,I2C三种传输方式', '1b6af9d6-778c-4a80-8cc9-03124abcce90.', null, null, null, null, null, null, ' SPI：高速同步串行口，首发独立，可同步进行\r\n    SPI接口主要应用在EEPROM，FLASH，实时时钟，A/D转化器，数字信号处理，是一种全双工同步通讯总线，该接口一般使用四条线：串行时钟线（SCK），主出从入线，主入从出线，低电平有效地的从机选择线。\r\n    I2C协议：是单片机与其他芯片进行通讯的协议：\r\nA、只要求两条总线线路，一条是串行时钟线，一条是串行数据线； \r\nB、通过软件设定地址  \r\nC、是一个多主机总线，如果两个或更多主机同时初始化数据传送可通过冲突检测和仲裁防止数据破坏； \r\nD、I2C总线传输的是数据的总高位\r\n    UART：主要是由一个MODEM（调制解调器），可以将模拟信号量转化成数字信号量。', '', '0', '2017-12-26 22:30:46', '18', '1');
INSERT INTO `topic` VALUES ('6356', '33', '4', 'j2ee的优越性主要表现在哪些方面？MVC模式', 'f8ab3ef4-3c23-4ce7-9f8b-298548b3bd44.', null, null, null, null, null, null, '、 J2EE基于JAVA 技术，与平台无关\r\nB、 J2EE拥有开放标准，许多大型公司实现了对该规范支持的应用服务器。如BEA ,IBM,ORACLE等。', '', '0', '2017-12-26 22:31:13', '65', '1');
INSERT INTO `topic` VALUES ('6357', '3', '1', '已知如下代码：（ ）\r\npublic class Test\r\n{\r\npublic static void main(String arg[] )\r\n{\r\nint i = 5;\r\ndo{\r\nSystem.out.print(i);\r\n}while(–i&gt;5)\r\nSystem.out.print(“finished”);\r\n}\r\n}\r\n执行后的输出是什么？', '2f2aa09b-714f-4bfd-b9cd-953f2a0c9756.', '5', '4', '6', 'finished', '', '', 'AD', '', '0', '2017-12-26 22:31:25', '64', '1');
INSERT INTO `topic` VALUES ('6358', '4', '1', '在Hibernate关系映射配置中，inverse属性的含义是( )。', '6ac1a67c-28b6-4ccb-9a8f-32e43dfe4dc0.', '定义在<one-to-many>节点上，声明要负责关联的维护      ', ' B.  声明在<set>节点上，声明要对方负责关联的维护', 'C.  定义在<one-to-many>节点上，声明对方要负责关联的维护  ', '  声明在<set>节点上，声明要负责关联的维护 ', '', '', 'A', '', '0', '2017-12-26 22:31:31', '58', '1');
INSERT INTO `topic` VALUES ('6359', '26', '4', ' volatile关键字的作用（必考）', 'bfa8a03d-15d8-403f-b421-e1ee5bf704e8.', null, null, null, null, null, null, 'VOLATILE的本意是“易变的” 因为访问寄存器要比访问内存单元快的多,所以编译器一般都会作减少存取内存的优化，但有可能会读脏数据。当要求使用VOLATILE声明变值的时候，系统总是重新从它所在的内存读取数据，即使它前面的指令刚刚从该处读取过数据。精确地说就是，遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问；如果不使用VALATILE，则编译器将对所声明的语句进行优化。（简洁的说就是：VOLATILE关键词影响编译器编译的结果，用VOLATILE声明的变量表示该变量随时可能发生变化，与该变量有关的运算，不要进行编译优化，以免出错', '', '0', '2017-12-26 22:31:33', '48', '1');
INSERT INTO `topic` VALUES ('6360', '33', '4', 'Sturt1的核心类、核心标签库？', '043e8dcd-162d-4af5-87af-9ff114d89c08.', null, null, null, null, null, null, 'ACTIONSERVLET 控制器、ACTIONMAPPING状态改变事件 、 ACTION控制器的一部分、ACTIONFORWARD用户指向、ACTIONFORM状态改变的数据', '', '0', '2017-12-26 22:31:38', '65', '1');
INSERT INTO `topic` VALUES ('6361', '26', '4', ' SWP的优势是什么？', '77df8be6-1677-4c0b-9fe8-6f7cf9254973.', null, null, null, null, null, null, ' 答：SWP是存储器的一次读与写的原子操作，中断不会打断SWP的执行，通常用作操作信号量。', '', '0', '2017-12-26 22:31:49', '48', '1');
INSERT INTO `topic` VALUES ('6362', '3', '1', '下面的哪些声明是合法的？（ ）', '3974a969-74fe-4181-9968-c529a8780a5b.', 'long 1 = 499', 'int i = 4L', 'float f =1.1', 'double d = 34.4', '', '', 'AD', '', '0', '2017-12-26 22:31:49', '64', '1');
INSERT INTO `topic` VALUES ('6363', '4', '1', ' Hibernate对象从临时状态到持久状态转换的方式有？( )。', 'b6faec0a-3f27-40fb-948b-019c860dc8a4.', ' 调用session的save方法   ', ' B.  调用session的close方法   ', ' C.  调用session的clear方法', 'D.  调用session的evict方法', '', '', 'A', '', '0', '2017-12-26 22:32:01', '58', '1');
INSERT INTO `topic` VALUES ('6364', '26', '4', '当一个异常出现以后，ARM微处理器会执行哪几步操作？', 'fc1c6d70-31db-42c8-83e1-11995c36cb2a.', null, null, null, null, null, null, '当一个异常出现以后，ARM微处理器会执行以下几步操作。\r\n    A、将下一条指令的地址存入相应连接寄存器LR，以便程序在处理异常返回时能从正确的位置重新开始执行。若异常是从ARM状态进入，则LR寄存器中保存 的是下一条指令的地址（当前PC＋4或PC＋8，与异常的类型有关）；若异常是从THUMB状态进入，则在LR寄存器中保存当前PC的偏移量，这样，异常 处理程序就不需要确定异常是从何种状态进入的。例如：在软件中断异常SWI，指令 MOV PC，R14_SVC总是返回到下一条指令，不管SWI是在ARM状态执行，还是在THUMB状态执行。\r\n    B、将CPSR复制到相应的SPSR中。\r\n    C、根据异常类型，强制设置CPSR的运行模式位。\r\n    D、强制PC从相关的异常向量地址取下一条指令执行，从而跳转到相应的异常处理程序处。', '', '0', '2017-12-26 22:32:09', '18', '1');
INSERT INTO `topic` VALUES ('6366', '3', '1', '.给出如下代码：（ ）\r\nclass Test{\r\nprivate int m;\r\npublic static void fun() {\r\n//some code„\r\n}\r\n}\r\n如何使成员变量m被函数fun()直接访问？（）', '9e56f615-8314-402c-b46a-21a07de0d6d2.', '将private int m改为 protected int m', '将private int m改为 public int m', '将private int m改为 static int m', '将private int m改为int m', '', '', 'C', '', '0', '2017-12-26 22:32:16', '64', '1');
INSERT INTO `topic` VALUES ('6367', '33', '4', 'struts1与sturts2的区别（struts2是struts1和webwork的结合体）', '97eca75b-c53d-4f54-b3fe-c477e0765f76.', null, null, null, null, null, null, 'TRUTS1要求ACTION类继承一个抽象基类，而不是接口。', '', '0', '2017-12-26 22:32:39', '65', '1');
INSERT INTO `topic` VALUES ('6368', '3', '1', '以下哪个方法用于定义线程的执行体？（）', '611f5c93-1456-4923-99b2-e1f81261f2f1.', 'start()', 'init()', 'run()', 'main()', 'synchronized()', '', 'C', '', '0', '2017-12-26 22:32:58', '64', '1');
INSERT INTO `topic` VALUES ('6369', '33', '4', '过滤器和拦截器的区别', 'ff6ecd06-4d16-46a8-839f-3a3e2d77c56f.', null, null, null, null, null, null, '截器是基于JAVA的反射机制的，而过滤器是基于函数回调\r\n2、过滤器依赖于SERVLET容器，而拦截器不依赖于SERVLET容器', '', '0', '2017-12-26 22:33:08', '65', '1');
INSERT INTO `topic` VALUES ('6370', '3', '1', '给出下面的代码段：（ ）\r\npublic class Base{\r\nint w， x， y， z;\r\npublic Base(int a， int b)\r\n{x=a; y=b;\r\n}\r\npublic Base(int a， int b， int c， int d)\r\n{\r\n//assignment x=a， y=b\r\nw=d;z=c;\r\n}}\r\n在代码说明//assignment x=a， y=b处写下如下哪几个代码是正确的？（）', 'e73dccfe-0f89-4513-ae97-3057488832c1.', 'Base(a， b)；', 'x=a， y=b；', 'x=a； y=b；', 'this(a，b)；', '', '', 'CD', '', '0', '2017-12-26 22:33:37', '64', '1');
INSERT INTO `topic` VALUES ('6372', '33', '4', 'Hibernate是一个开放源代码的对象关系映射框架，它对JDBC进行了非常轻量级的对象封装，使得java程序员可以随心所欲的使用对象编程思维来操纵数据库。', '45b70323-d165-44da-8ce7-96a174b34c66.', null, null, null, null, null, null, '.读取并解析配置文件2.读取并解析映射信息，创建SESSIONFACTORY 3.打开SESSSION 4.创建事务TRANSATION 5.持久化操作6.提交事务7.关闭SESSION 8.关闭SESSTIONFACTORY', '', '0', '2017-12-26 22:33:50', '65', '1');
INSERT INTO `topic` VALUES ('6373', '33', '4', 'hibernate的核心类是什么？？重要方法是什么？？', '1b2e4ae1-3c1c-44cd-864a-af27128b3172.', null, null, null, null, null, null, 'CONFIGURATION、SESSIONFACTORY\r\nSESSION如下方法 SAVE、 LOAD、 UPDATE、DELETE\r\nQUERY Q=CREATEQUERY(“FROM CUSTOMER WHERE CUSTOMERNAME=:CUSTOMERNAME”)\r\nBEGINTRANSACTION、CLOSE、TRANSACTION、COMMIT()', '', '0', '2017-12-26 22:34:10', '65', '1');
INSERT INTO `topic` VALUES ('6374', '3', '1', '关于运算符&gt;&gt;和&gt;&gt;&gt;描述正确的是', '06ecb327-1f02-4519-94da-3796d60cb111.', '.>>执行移动', '.>>执行翻转', '.>>执行有符号左移，>>>执行无符号左移', '.>>执行无符号左移，>>>执行有符号左移', '', '', 'C', '', '0', '2017-12-26 22:34:11', '64', '1');
INSERT INTO `topic` VALUES ('6375', '4', '4', 'Hibernatehuancun存机制 a', '42dd7c64-1f0b-4c93-8bb8-38a550ef7442.', null, null, null, null, null, null, '1.内部缓存存在HIBERNATE中又叫一级缓存，属于应用事物级缓存 2. 二级缓存： A) 应用及缓存 B) 分布式缓存  条件：数据不会被第三方修改、数据大小在可接受范围、数据更新频率低、同一数据被系统频繁使用、非 关键数据 C) 第三方缓存的实现 ', '', '0', '2017-12-26 22:34:29', '58', '1');
INSERT INTO `topic` VALUES ('6376', '33', '4', 'session.load()和session.get()的区别', 'bd057294-e2b5-4555-979a-ca8108b08a16.', null, null, null, null, null, null, 'SESSION.LOAD/GET方法均可以根据指定的实体类和ID从数据库读取记录，并返回与之对应的实体对象。其区别在于：\r\n如果未能发现符合条件的记录，GET方法返回NULL，而LOAD方法会抛出一个OBJECTNOTFOUNDEXCEPTION。', '', '0', '2017-12-26 22:34:36', '65', '1');
INSERT INTO `topic` VALUES ('6377', '3', '1', '从下列选项中选择正确的Java表达式', 'e7181843-904a-4fb5-90b2-6bbddd45531b.', 'int k=new String(“aa”)', 'String str=String(“bb”)', 'char c=74;', 'long j=8888;', '', '', 'BCD', '', '0', '2017-12-26 22:34:51', '64', '1');
INSERT INTO `topic` VALUES ('6378', '4', '4', 'Hibernate的查询方式', '5862bb28-8f16-4ff4-9539-e1a92a89575a.', null, null, null, null, null, null, 'SQL、CRITERIA,OBJECT COMPTOSITION HQL：  1、 属性查询  2、 参数查询、命名参数查询 3、 关联查询 4、 分页查询 5、 统计函数', '', '0', '2017-12-26 22:34:58', '58', '1');
INSERT INTO `topic` VALUES ('6380', '18', '4', '什么是嵌入式系统？', '5a9cfd60-5979-4694-aee8-02292a56d634.', null, null, null, null, null, null, '广义上讲，凡是带有微处理器的专用软硬件系统都可称为嵌入式系统。\r\n一般定义：以应用为中心，以计算机技术为基础，软硬件可裁剪，适应应用系统，对功能、可靠性、成本、体积、功耗严格要求的专用计算机系统。', '', '0', '2017-12-26 22:35:17', '18', '1');
INSERT INTO `topic` VALUES ('6381', '4', '4', ' ruheyouhua!!Hibernate？', '2425b45d-0414-46bd-8db2-0ede95c4d66a.', null, null, null, null, null, null, '\r\n3. HIBERNATE使用JAVA反射机制，而不是字节码增强程序来实现透明性。  4. HIBERNATE的性能非常好，因为它是个轻量级框架。映射的灵活性很出色。它支持各种关系数据库，从一对一到多对多的各种复杂关系。 2，HIBERNATE是如何延迟加载?  1. HIBERNATE2延迟加载实现：A)实体对象 B)集合（COLLECTION） 2. HIBERNATE3 提供了属性的延迟加载功能  当HIBERNATE在查询数据的时候，数据并没有存在与内存中，当程序真正对数据的操作时，对象才存在与内存中，就实现了延迟加载，他节省了服务器的内存开销，从而提高了服务器的性能。  3．HIBERNATE中怎样实现类之间的关系?(如：一对多、多对多的关系) 类与类之间的关系主要体现在表与表之间的关系进行操作，它们都市对对象进行操作，我们程序中把所有的表与类都映射在一起，它们通过配置文件中的MANY-TO-ONE、ONE-TO-MANY、MANY-TO-MANY、   4． 说下HIBERNATE的缓存机制  1. 内部缓存存在HIBERNATE中又叫一级缓存，属于应用事物级缓存 2. 二级缓存： A) 应用及缓存 B) 分布式缓存  条件：数据不会被第三方修改、数据大小在可接受范围、数据更新频率低、同一数据被系统频繁使用、非 关键数据 C) 第三方缓存的实现  5． HIBERNATE的查询方式  SQL、CRITERIA,OBJECT COMPTOSITION HQL：  1、 属性查询  2、 参数查询、命名参数查询 3、 关联查询 4、 分页查询 5、 统计函数  6． 如何优化HIBERNATE？  1.使用双向一对多关联，不使用单向一对多 2.灵活使用单向一对多关联 3.不用一对一，用多对一取代  4.配置对象缓存，不使用集合缓存  5.一对多集合使用BAG,多对多集合使用SET 6. 继承类使用显式多态  7. 表字段要少，表关联不要怕多，有二级缓存撑腰', '', '0', '2017-12-26 22:35:27', '58', '1');
INSERT INTO `topic` VALUES ('6382', '3', '1', 'Java I/O程序设计中，下列描述正确的是', '934f1a1d-9674-4973-8bd7-d06834bf89eb.', 'OutputStream用于写操作', 'InputStream用于写操作', 'I/O库不支持对文件可读可写API', '以上全错', '', '', 'A', '', '0', '2017-12-26 22:35:47', '64', '1');
INSERT INTO `topic` VALUES ('6383', '26', '4', '嵌入式中为什么要用linux?', '2b17adee-fdbb-453f-9da0-f3026a1d6318.', null, null, null, null, null, null, '(1).功能齐全，对于很多硬件设备都有丰富的驱动程序，只需要移植一下，不需要改动太多(2).稳定，这个用过LINUX做服务器的人都知道，WINDOWS越来越慢，产生的垃圾会很多。\r\n(3).对于大多数芯片，都有裁剪的配置文件，在LINUX内核源代码下，ARCH/ARM/CONFIGS中有许多芯片的配置文件，比如笔者用的是AT91的芯片，里面有个文件叫做 AT91SAM9260EK_DEFCONFIG，那我如果不想裁剪的话，就只要在内核源代码下执行MAKE AT91SAM9260EK_DEFCONFIG，就可以，然后编译出来的内核就可以直接用了。\r\n(4).LINUX分而治之的思想，可以使得驱动和应用程序并行开发，加快开发速度', '', '0', '2017-12-26 22:35:57', '18', '1');
INSERT INTO `topic` VALUES ('6384', '33', '4', 'java里面Hiberna的缓存机制', '8f64d470-4ce4-495f-9619-78b46965b8b8.', null, null, null, null, null, null, '1. 内部缓存存在HIBERNATE中又叫一级缓存，属于应用事物级缓存\r\n　　2. 二级缓存：\r\n　　A) 应用及缓存\r\n　　B) 分布式缓存', '', '0', '2017-12-26 22:36:10', '65', '1');
INSERT INTO `topic` VALUES ('6385', '26', '4', '哈b内特有哪几种查询数据的方式 ', '5292080e-c254-4e56-9f66-7208a25a2400.', null, null, null, null, null, null, '3种：HQL、条件查询QBC(QUERY BY CRITERIA)、原生SQL （通过CREATESQLQUERY建立', '', '0', '2017-12-26 22:36:14', '58', '1');
INSERT INTO `topic` VALUES ('6386', '4', '4', '谈谈Hibernate中inverse的作用', 'fe4d7908-128f-4a50-a752-0bd9b0ca262a.', null, null, null, null, null, null, 'INVERSE属性默认是FALSE,就是说关系的两端都来维护关系。  比如STUDENT和TEACHER是多对多关系，用一个中间表TEACHERSTUDENT维护。GP)I  如果STUDENT这边INVERSE=”TRUE”, 那么关系由另一端TEACHER维护，就是说当插入STUDENT时，不会\r\n操作TEACHERSTUDENT表（中间表）。只有TEACHER插入或删除时才会触发对中间表的操作。所以两边都INVERSE=”TRUE”是不对的，会导致任何操作都不触发对中间表的影响；当两边都INVERSE=”FALSE” 或默认时，会导致在中间表中插入两次关系。', '', '0', '2017-12-26 22:36:37', '58', '1');
INSERT INTO `topic` VALUES ('6387', '3', '1', 'Which two demonstrate a has a” relationship', '82cc8cf0-094f-4ba4-9275-27af4c72d3e6.', 'public interface Person { }\r\npublic class Employee extends Person{ }', 'public interface Shape { }\r\npublic interface Rectandle extends Shape { }', 'public interface Colorable { }\r\npublic class Shape implements Colorable\r\n{ }', 'public class Species{ }\r\npublic class Animal{private Species species;}\r\nE. interface Component{ }\r\nclass Container implements Component{\r\nprivate Component[] children;\r\n}', '', '', 'D', '', '0', '2017-12-26 22:37:21', '64', '1');
INSERT INTO `topic` VALUES ('6388', '4', '4', '说说哈b内特中的update()和保存Or修改()的区别，session的load()和get()的区别。', '38bdcc43-78b1-4b0f-bb81-bc39917bf139.', null, null, null, null, null, null, 'SAVEORUPDATE()方法可以实现UPDATE()的功能，但会多些步骤，具体如下：  如果对象在该SESSION中已经被持久化，不进行操作；对象的标识符属性(IDENTIFIER PROPERTY)在数据库中不存在或者是个暂时的值，调用SAVE()方法保存它；如果SESSION中的另一个对象有相同的标识符抛出一个异常；以上皆不符合则调用UPDATE()更新之。  SESSION.LOAD/GET方法均可以根据指定的实体类和ID从数据库读取记录，并返回与之对应的实体对象。SESSION的GET()和LOAD()其区别在于：  如果未能发现符合条件的记录，GET方法返回NULL，而LOAD方法会抛出一个OBJECTNOTFOUNDEXCEPTION；LOAD方法可返回实体的代理类实例，而GET方法永远直接返回实体类；LOAD方法可以充分利用内部缓存和二级缓存中的现有数据，而GET方法则仅仅在内部缓存中进行数据查找，如没有发现对应数据，将越过二级缓存，直接调用SQL完成数据读取', '', '0', '2017-12-26 22:37:23', '58', '1');
INSERT INTO `topic` VALUES ('6389', '33', '4', 'pring工作机制及为什么要用?【spring是一个轻量的控制反转和面向切面的容器框架】', '61537b5d-870e-417c-af25-061415a1b2fc.', null, null, null, null, null, null, '　1.SPRINGMVC把所有的请求都提交给DISPATCHERSERVLET,它会委托应用系统的其他模块负责对请求进行真正的处理工作。\r\n　　2.DISPATCHERSERVLET查询一个或多个HANDLERMAPPING,找到处理请求的CONTROLLER.\r\n　　3.DISPATCHERSERVLET把请求提交到目标CONTROLLER', '', '0', '2017-12-26 22:37:44', '65', '1');
INSERT INTO `topic` VALUES ('6390', '3', '1', '指出下列程序运行的结果 public class Example{ String str=new String(̶good”); char[]ch={‘a’，\'b’，\'c’};\r\npublic static void main(String args[]){ Example ex=new Example(); ex.change(ex.str，ex.ch); System.out.print(ex.str+” and ); System.out.print(ex.ch); } public void change(String str，char ch[]){ str=”test ok”; ch[]=’g\'; } }', '21e4b3f1-f46e-4376-8df5-1f8c5d526e72.', 'good and abc', 'good and gbc', 'test ok and abc', 'test ok and gbc', '', '', 'B', '', '0', '2017-12-26 22:38:18', '64', '1');
INSERT INTO `topic` VALUES ('6391', '32', '4', '下面哪一个不是JSP本身已加载的基本类？', '93e6d7ad-b176-4ad9-a5f0-01428302fdbd.', null, null, null, null, null, null, 'JAVA.LANG.*    B、JAVA.IO.* C、JAVAX.SERVLET.* D、JAVAX.SERVLET.JSP.*', '', '0', '2017-12-26 22:38:27', '65', '1');
INSERT INTO `topic` VALUES ('6392', '4', '4', '三种状态hearnate', 'b6cf5077-ebd6-46d2-861e-5cdb13542dc8.', null, null, null, null, null, null, '瞬时态  由NEW命令开辟内存空间的JAVA对象，  EG. PERSON PERSON = NEW PERSON(”AMIGO”, “女”); 如果没有变量对该对象进行引用，它将被JAVA虚拟机回收。  瞬时对象在内存孤立存在，它是携带信息的载体，不和数据库的数据有任何关联关系，在HIBERNATE中，可通过SESSION的SAVE()或 SAVEORUPDATE()方法将瞬时对象与数据库相关联，并将数据对应的插入数据库中，此时该瞬时对象转变成持久化对象。', '持久态  处于该状态的对象在数据库中具有对应的记录，并拥有一个持久化标识。如果是用hibernate的delete()方法，对应的持久对象就变成瞬时对象，因数据库中的对应数据已被删除，该对象不再与数据库的记录关联。\r\n操作TeacherStudent表（中间表）。只有Teacher插入或删除时才会触发对中间表的操作。所以两边都inverse=”true”是不对的，会导致任何操作都不触发对中间表的影响；当两边都inverse=”false” 或默认时，会导致在中间表中插入两次关系。  9. 说说Hibernate中的update()和saveOrUpdate()的区别，session的load()和get()的区别。  saveOrUpdate()方法可以实现update()的功能，但会多些步骤，具体如下：  如果对象在该session中已经被持久化，不进行操作；对象的标识符属性(identifier property)在数据库中不存在或者是个暂时的值，调用save()方法保存它；如果session中的另一个对象有相同的标识符抛出一个异常；以上皆不符合则调用update()更新之。  Session.load/get方法均可以根据指定的实体类和id从数据库读取记录，并返回与之对应的实体对象。session的get()和load()其区别在于：  如果未能发现符合条件的记录，get方法返回null，而load方法会抛出一个ObjectNotFoundException；load方法可返回实体的代理类实例，而get方法永远直接返回实体类；load方法可以充分利用内部缓存和二级缓存中的现有数据，而get方法则仅仅在内部缓存中进行数据查找，如没有发现对应数据，将越过二级缓存，直接调用SQL完成数据读取。  10.Hibernate中对象的三种状态  瞬时态(Transient)、 持久态(Persistent)、脱管态(Detached)。处于持久态的对象也称为PO(Persistence Object)，瞬时对象和脱管对象也称为VO（Value Object）。 瞬时态  由new命令开辟内存空间的java对象，  eg. Person person = new Person(”amigo”, “女”); 如果没有变量对该对象进行引用，它将被java虚拟机回收。  瞬时对象在内存孤立存在，它是携带信息的载体，不和数据库的数据有任何关联关系，在Hibernate中，可通过session的save()或 saveOrUpdate()方法将瞬时对象与数据库相关联，并将数据对应的插入数据库中，此时该瞬时对象转变成持久化对象。 持久态  处于该状态的对象在数据库中具有对应的记录，并拥有一个持久化标识。如果是用hibernate的delete()方法，对应的持久对象就变成瞬时对象，因数据库中的对应数据已被删除，该对象不再与数据库的记录关联。  当一个session执行close()或clear()、evict()之后，持久对象变成脱管对象，此时持久对象会变成脱管对象，此时该对象虽然具有数据库识别值，但它已不在HIbernate持久层的管理之下。 持久对象具有如下特点： 1. 和session实例关联；n 2. 在数据库中有与之关联的记录。脱管态  当与某持久对象关联的session被关闭后，该持久对象转变为脱管对象。当脱管对象被重新关联到session上时，并再次转变成持久对象。  脱管对象拥有数据库的识别值，可通过update()、saveOrUpdate()等方法，转变成持久对象。 脱管对象具有如下特点：  1. 本质上与瞬时对象相同，在没有任何变量引用它时，JVM会在适当的时候将它回收； 2.   比瞬时对象多了一个数据库记录标识值。', '0', '2017-12-26 22:38:42', '58', '1');
INSERT INTO `topic` VALUES ('6393', '26', '4', '在读写速度上，Nor,Nand有什么区别？', '57869fcb-6662-464d-b3db-3c88f9065019.', null, null, null, null, null, null, 'NOR-FLASH的读取速度比NAND-FLASH快；\r\n NAND-FLASH的写入速度和擦除速度比NOR-FLASH快。', '', '0', '2017-12-26 22:38:48', '18', '1');
INSERT INTO `topic` VALUES ('6394', '4', '4', ' Detached Object（游离对象）有什么好处', '277da9c4-c1f8-4b2e-962e-19059743dec3.', null, null, null, null, null, null, 'DETACHED OBJECT（游离对象）可以传递到任何层直到表现层而不是用任何DTO(DATA TRANSFER OBJECTS). 然后你还可以重新把游离对象赋给另外一个SESSION.', '', '0', '2017-12-26 22:39:02', '58', '1');
INSERT INTO `topic` VALUES ('6395', '33', '4', '1. Jsp有哪些内置对象?作用分别是什么?', 'abbbe8b3-93fe-49fd-a75d-dd96a8751bb6.', null, null, null, null, null, null, 'APPLICATION对象代表应用程序上下文，它允许JSP页面与包括在同一应用程序中的任何WEB组件共享信息。\r\n<JSP:FORWARD>操作允许将请求转发到另一个JSP、SERVLET或静态资源文件', '', '0', '2017-12-26 22:39:06', '65', '1');
INSERT INTO `topic` VALUES ('6396', '26', '4', 'hibernate如何实现数据表映射的继承关系', 'bf4db9ba-9a5d-47f1-8404-1ab0f2f79bdc.', null, null, null, null, null, null, '\r\nDETACHED OBJECT（游离对象）可以传递到任何层直到表现层而不是用任何DTO(DATA TRANSFER OBJECTS). 然后你还可以重新把游离对象赋给另外一个SESSION.  12. HIBERNATE如何实现数据表映射的继承关系  1、两个表，子类重复父类的属性。  2、一个表，子类父类共用一个表      <CLASS NAME=”USERS” TABLE=”USERS” DISCRIMINATOR-VALUE=”USERS”>    <DISCRIMINATOR COLUMN=”DISCRIMINATOR_USERTYPE” TYPE=”STRING”/> <SUBCLASS NAME=”ADMIN” DISCRIMINATOR-VALUE=”ADMIN”>             <PROPERTY NAME=”ADMINREMARK” COLUMN=”ADMIN_REMARK” TYPE=”STRING” />         </SUBCLASS>     </CLASS>   3、两个表，子类引用父类的主键，享用公共的字段或属性。     <CLASS NAME=”USERS” TABLE=”USERS”>          <ID NAME=”USERID” COLUMN=”USERID” TYPE=”STRING”>             <GENERATOR CLASS=”ASSIGNED”/>         </ID>          <PROPERTY NAME=”PWD” COLUMN=”PWD” TYPE=”STRING” />    <JOINED-SUBCLASS NAME=”GUEST” TABLE=”GUEST”>     <KEY COLUMN=”USERID”/>           <PROPERTY NAME=”GUESTREMARK” COLUMN=”GUEST_REMARK” TYPE=”STRING” />         </JOINED-SUBCLASS> </CLASS> 批量删除   QUERY QUERY=SESSION.CREATEQUERY(”UPDATE”或”DELETE”);  QUERY.EXECUTEUPDATE()', '', '0', '2017-12-26 22:39:20', '58', '1');
INSERT INTO `topic` VALUES ('6397', '33', '4', 'java的webservlet运行的生命周期图.', '55ab4899-4b69-4150-bf17-06e9cd2eec0e.', null, null, null, null, null, null, '装载SERVLET\r\nSERVLET类                                           \r\nSERVLET初始化（调用INIT方法）\r\n实例对象被回收                                        \r\n提供服务（调用SERVICE方法）\r\n销毁SERVLET实例（调用DESTROY方法）', '', '0', '2017-12-26 22:39:34', '65', '1');
INSERT INTO `topic` VALUES ('6398', '4', '4', 'Hibernate的应用(hibernate的结构)', 'f86c1c67-10aa-4c1f-a508-fbedf36c58fc.', null, null, null, null, null, null, '\r\nDETACHED OBJECT（游离对象）可以传递到任何层直到表现层而不是用任何DTO(DATA TRANSFER OBJECTS). 然后你还可以重新把游离对象赋给另外一个SESSION.  12. HIBERNATE如何实现数据表映射的继承关系  1、两个表，子类重复父类的属性。  2、一个表，子类父类共用一个表      <CLASS NAME=”USERS” TABLE=”USERS” DISCRIMINATOR-VALUE=”USERS”>    <DISCRIMINATOR COLUMN=”DISCRIMINATOR_USERTYPE” TYPE=”STRING”/> <SUBCLASS NAME=”ADMIN” DISCRIMINATOR-VALUE=”ADMIN”>             <PROPERTY NAME=”ADMINREMARK” COLUMN=”ADMIN_REMARK” TYPE=”STRING” />         </SUBCLASS>     </CLASS>   3、两个表，子类引用父类的主键，享用公共的字段或属性。     <CLASS NAME=”USERS” TABLE=”USERS”>          <ID NAME=”USERID” COLUMN=”USERID” TYPE=”STRING”>             <GENERATOR CLASS=”ASSIGNED”/>         </ID>          <PROPERTY NAME=”PWD” COLUMN=”PWD” TYPE=”STRING” />    <JOINED-SUBCLASS NAME=”GUEST” TABLE=”GUEST”>     <KEY COLUMN=”USERID”/>           <PROPERTY NAME=”GUESTREMARK” COLUMN=”GUEST_REMARK” TYPE=”STRING” />         </JOINED-SUBCLASS> </CLASS> 批量删除   QUERY QUERY=SESSION.CREATEQUERY(”UPDATE”或”DELETE”);  QUERY.EXECUTEUPDATE();  13.HIBERNATE的应用(HIBERNATE的结构)  答：//首先获得SESSIONFACTORY 的对象  SESSIONFACTORY SESSIONFACTORY = NEW CONFIGURATION().CONFIGURE(). BUILDSESSIONFACTORY(); //然后获得SESSION 的对象  SESSION SESSION = SESSIONFACTORY.OPENSESSION(); //其次获得TRANSACTION 的对象  TRANSACTION TX = SESSION.BEGINTRANSACTION(); //执行相关的数据库操作:增,删,改,查  SESSION.SAVE(USER); //增加, USER 是USER 类的对象 SESSION.DELETE(USER); //删除 SESSION.UPDATE(USER); //更新  QUERY QUERY = SESSION.CREATEQUERY(“FROM USER”); //查询 LIST LIST = QUERY.LIST(); //提交事务 TX.COMMIT();  //如果有异常,我们还要作事务的回滚,恢复到操作之前 TX.ROLLBACK();//最后还要关闭SESSION,释放资源 SESSION.CLOSE(); ', '', '0', '2017-12-26 22:39:43', '58', '1');
INSERT INTO `topic` VALUES ('6400', '18', '4', ' 预处理器标识 #error的目的是什么？', '7b17968c-4b32-417b-86c7-41a41e7ede94.', null, null, null, null, null, null, '#ERROR预处理指令的作用是，编译程序时，只要遇到#ERROR就会生成一个编译错误提示消息，并停止编译。', '', '0', '2017-12-26 22:39:58', '18', '1');
INSERT INTO `topic` VALUES ('6401', '3', '1', '下面的代码实现了设计模式中的什么模式\r\npublic class A { private A instance; private A() { } public static A getInstance { if ( A == null ) instance = new A(); return instance; } } ', '804bc070-d1c1-478b-a288-678ced575df5.', 'Abstract Factory', 'Singleton', 'Builder', 'Factory', '', '', 'B', '', '0', '2017-12-26 22:39:59', '64', '1');
INSERT INTO `topic` VALUES ('6402', '33', '4', '几个典型的JSP指令及各个指令的含义?', '7f8bd5ba-5994-4822-80f3-3b0890926f3e.', null, null, null, null, null, null, 'PAGE指令：用于传递与页面相关的信息，如缓冲区信息、线程信息和出错处理信息等。\r\n　　INCLUDE指令：用于在页面中包含一个外部的文档。如著作权文档或者公司信息文档——把通用内容写在一个文档中，然后包含在各个页面中，比直接写在各个JSP页面中更容易维护。当然，被包含的文件也可能是另一个JSP文件。\r\n　　TAGLIB指令：用于指出页面可以调用的一个客户标识库，常用于自定义标识。', '', '0', '2017-12-26 22:40:10', '65', '1');
INSERT INTO `topic` VALUES ('6403', '33', '4', '简述你对MVC思想的理解,并采用此思想对User表实现查询所有的信息的操作,并实现分页.', 'd7687f27-6493-4a8c-94e6-ee5834769385.', null, null, null, null, null, null, ' USER表的字段有如下： \r\n    ID  主键 自动递增  INT类型\r\n    NAME 用户名      VARCHAR\r\n    SEX 用户性别      VARCHAR\r\n         BIRTH 出生日期    DATETIME', '', '0', '2017-12-26 22:40:26', '65', '1');
INSERT INTO `topic` VALUES ('6404', '33', '1', ' MAX_LENGTH 是int 型public 成员变量，变量值保持为常量1，用简短语句定义这个变量。', '5ebba3b7-8c8c-4aee-a341-346439b83dde.', 'public int MAX_LENGTH=1;', 'final int MAX_LENGTH=1;', 'final public int MAX_LENGTH=1;', 'public final int MAX_LENGTH=1.', '', '', 'D', '', '0', '2017-12-26 22:40:32', '64', '1');
INSERT INTO `topic` VALUES ('6405', '4', '4', 'Hibernate的五个核心接口', '28c58d47-bbe5-4d2f-8595-b172820e53ef.', null, null, null, null, null, null, 'CONFIGURATION 接口：配置HIBERNATE，根据其启动HIBERNATE，创建 SESSIONFACTORY 对象；  SESSIONFACTORY 接口：初始化HIBERNATE，充当数据存储源的代理，创建 SESSION 对象，SESSIONFACTORY 是线程安全的，意味着它的同一个实例可以被应 用的多个线程共享，是重量级、二级缓存；  SESSION 接口：负责保存、更新、删除、加载和查询对象，是线程不安全的， 避免多个线程共享同一个SESSION，是轻量级、一级缓存', '', '0', '2017-12-26 22:40:42', '58', '1');
INSERT INTO `topic` VALUES ('6406', '4', '4', 'hibernate中数据表映射关系主要有什么类型?', '5e980073-90c4-43c4-8b79-fd828dbb1a65.', null, null, null, null, null, null, 'ONE-TO-MANY   INVERSE:主控方，外键的关系有谁控制    INVERSE=FALSE 是主控方，外键是由它控制的      INVERSE=TRUE 是被控方，外键与它没关系    要想实现主控方的控制必须将被控方作为主控方的属性  CASCADE:级联   主表增从表增   主表修从表修   主表删从表删  LAZY:延迟    LAZY=FALSE：一下将所有的内容取出，不延时(常用)   LAZY=TRUE：取出部分内容，其余内容动态去取   通过GET可以取出对方的所有内容', '', '0', '2017-12-26 22:41:00', '58', '1');
INSERT INTO `topic` VALUES ('6407', '3', '1', 'String s=new String(“hello”);\r\nString t =new String(“hello”);\r\nchar c [ ] ={‘h’，’e’，’l’，’l’，’o’};\r\n下列哪些表达式返回true ?', 'aa9d049d-0110-46ad-aead-156f78f91b75.', 's.equals(t);', 't.equals(c);', 's= =t ；', 't.equals (new String(“hello”));', '', '', 'AD', '', '0', '2017-12-26 22:41:06', '64', '1');
INSERT INTO `topic` VALUES ('6409', '3', '1', ' 类 Teacher 和 Student 是类 Person 的子类;\r\nTeacher t;\r\nStudent s;\r\n// t and s are all non-null.\r\nif (t instanceof Person ){ s=(Student)t; }\r\n最后一条语句的结果是:', 'd9e6a88a-14ab-4303-8c41-871eb7930e26.', '将构造一个Student 对象;', '表达式是合法的；', '表达式是错误的；', '编译时正确， 但运行时错误。', '', '', 'D', '', '0', '2017-12-26 22:41:33', '64', '1');
INSERT INTO `topic` VALUES ('6410', '4', '4', 'hibernate中Query对象的使用', 'c0b02409-f2b5-4472-aa60-7636aebe7a24.', null, null, null, null, null, null, '1 个或多个属性查询:   QUERY QUERY=SESSION.CREATEQUERY(”SELECT CUSTOMERNAME,CUSTOMERID FROM CUSTOMER”)  LIST L=QUERY.LIST();  FOR(INT I=0;I<L.SIZE();I++) {   OBEJCT[] OBJECT=(OBJECT[])L.GET(I);  OBJECT[0]  OBJECT[1] } }  分组: “SELECT COUNT(*),PRODUCTNAME FROM PRODUCT GROUP BY PRODUCTNAME ORDER BY PRODUCTNAME” 取值与属性一样  配置的查询,在*.HBM.XML中  <QUERY NAME=”SQL”>     <![CDATA[       FROM PRODUCT WHERE PRODUCTID=:PRODUCTID     ]]>/QUERY>   QUERY QUERY=SESSION.GETNAMEDQUERY(SQL); 联接1   ”FROM CUSTOMER AS CUSTOMER JOIN FETCH CUSTOMER.BUYSET”：将多的放到BUYSET属性中，得出的结是CUSTOMER有一个，BUY有多个 联接2  “FROM CUSTOMER AS CUSTOMER JOIN CUSTOMER.BUYSET”:得出的对象,CUSTOMER与BUY是1对1 子查询:   ”FROM CUSTOMER AS CUSTOMER WHERE (SELECT COUNT(*) FROM CUSTOMER.BUYSET)>1″', '', '0', '2017-12-26 22:41:39', '58', '1');
INSERT INTO `topic` VALUES ('6411', '33', '4', 'AVA相关基础知识\r\n1、面向对象的特征有哪些方面 ', 'a602a5d5-d898-47c9-8483-0139daa2c945.', null, null, null, null, null, null, '1.抽象：\r\n抽象就是忽略一个主题中与当前目标无关的那些方面，以便更充分地注意与当前目标有关的方面。抽象并不打算了解全部问题，而只是选择其中的一部分，暂时不用部分细节。抽象包括两个方面，一是过程抽象，二是数据抽象。\r\n2.继承：\r\n继承是一种联结类的层次模型，并且允许和鼓励类的重用，它提供了一种明确表述共性的方法。对象的一个新类可以从现有的类中派生，这个过程称为类继承。新类继承了原始类的特性，新类称为原始类的派生类（子类），而原始类称为新类的基类（父类）。派生类可以从它的基类那里继承方法和实例变量，并且类可以修改或增加新的方法使之更适合特殊的需要。\r\n3.封装：\r\n封装是把过程和数据包围起来，对数据的访问只能通过已定义的界面。面向对象计算始于这个基本概念，即现实世界可以被描绘成一系列完全自治、封装的对象，这些对象通过一个受保护的接口访问其他对象。\r\n4. 多态性：\r\n多态性是指允许不同类的对象对同一消息作出响应。多态性包括参数化多态性和包含多态性。多态性语言具有灵活、抽象、行为共享、代码共享的优势，很好的解决了应用程序函数同名问题。', '', '0', '2017-12-26 22:41:51', '65', '1');
INSERT INTO `topic` VALUES ('6412', '3', '1', '关于线程设计，下列描述正确的是', '4d9e7361-879b-48d4-979d-1c5dd034a51f.', '线程对象必须实现Runnable接口', '启动一个线程直接调用线程对象的run()方法', 'Java提供对多线程同步提供语言级的支持', '一个线程可以包含多个进程', '', '', 'C', '', '0', '2017-12-26 22:42:04', '64', '1');
INSERT INTO `topic` VALUES ('6413', '33', '4', 'java数据类型String是最基本的数据类型吗?', '5b280588-68f3-4f5f-99a7-b6b5631473d2.', null, null, null, null, null, null, '基本数据类型包括BYTE、INT、CHAR、LONG、FLOAT、DOUBLE、BOOLEAN和SHORT。', '', '0', '2017-12-26 22:42:18', '65', '1');
INSERT INTO `topic` VALUES ('6414', '3', '1', '欲构造ArrayList类得一个实例，此类继承了List接口，下列哪个方法是正确的：', 'd7ca5134-e6db-4419-86f5-0df28589c184.', 'ArrayList myList = new Object();', ' List myList = new ArrayList();', 'ArraylList myList = new List();', 'List myList = new List();', '', '', 'B', '', '0', '2017-12-26 22:42:31', '64', '1');
INSERT INTO `topic` VALUES ('6415', '33', '4', 'java里面基本数据int 和 Integer 有什么区别', '34d44608-2bbc-4b4e-9fa7-f23d271832ff.', null, null, null, null, null, null, 'AVA 提供两种不同的类型：引用类型和原始类型（或内置类型）。INT是JAVA的原始数据类型，INTEGER是JAVA为INT提供的封装类。JAVA为每个原始类型提供了封装类。\r\n原始类型封装类', '', '0', '2017-12-26 22:42:52', '65', '1');
INSERT INTO `topic` VALUES ('6416', '4', '1', 'Spring基础知识及IOC_选择题', '47c1715a-3740-42f9-84fa-7ac84489ec78.', 'Spring支持可插入的事务管理器，使事务划分更轻松，同时无需处理底层的问题。', 'Spring事务管理的通用抽象层还包括JTA策略和一个JDBC DataSource。', '与JTA或EJB CMT一样，Spring的事务支持依赖于Java EE环境。', 'Spring事务语义通过AOP应用于 POJO，通过XML或Java SE 5注释进行配置。', '', '', 'C', '', '0', '2017-12-26 22:43:25', '58', '1');
INSERT INTO `topic` VALUES ('6417', '33', '1', '以下各DOS命令能够显示出本机DNS服务器地址的是：( )', '1889ccbf-5959-4237-92e2-9c16f553c3a9.', 'ping -a', 'ipconfig -all', 'netstat', 'telnet', '', '', 'C', '', '0', '2017-12-26 22:43:26', '64', '1');
INSERT INTO `topic` VALUES ('6418', '33', '4', 'java里面的数据类型String 和StringBuffer的区别', '276cb28f-836a-4e83-8d5f-c97225ce8674.', null, null, null, null, null, null, 'AVA平台提供了两个类：STRING和STRINGBUFFER，它们可以储存和操作字符串，即包含多个字符的字符数据。这个STRING类提供了数值不可改变的字符串。而这个STRINGBUFFER类提供的字符串进行修改。当你知道字符数据要改变的时候你就可以使用STRINGBUFFER。典型地，你可以使用STRINGBUFFERS来动态构造字符数据。', '', '0', '2017-12-26 22:43:37', '65', '1');
INSERT INTO `topic` VALUES ('6419', '18', '4', '描述一下嵌入式基于ROM的运行方式基于RAM的运行方式有什么区别。', '26e4966b-3dac-4003-b4e8-9f1e4cf4e44a.', null, null, null, null, null, null, '基于RAM的运行方式：需要把硬盘和其他介质的代码先加载到RAM中，加载过程中一般有重定位的操作；\r\n    基于ROM：没有上面的操作。\r\n    基于ROM：速度较基于RAM的慢，因为会有一个把变量，部分代码等从存储器（硬盘，FLASH）搬移到RAM的过程；可用RAM资源比基于RAM的多；\r\n    基于RAM：速度较基于ROM的快，可用RAM比基于ROM的少，因为所有的代码，数据都必须存放在RAM中。', '', '0', '2017-12-26 22:43:55', '18', '1');
INSERT INTO `topic` VALUES ('6420', '4', '1', '下面选项哪个不是Spring中接口注入的方式？（ ）', '070e3d69-18b1-46a0-bdd9-e7d3c80071cb.', '接口注入', '构造子注入', '设值注入', '指针注入', '', '', 'D\r\n', '', '0', '2017-12-26 22:44:12', '58', '1');
INSERT INTO `topic` VALUES ('6421', '33', '4', 'java程序运行运行时异常与一般异常有何异同？', 'a786e3ee-682d-413b-9dfe-016c12bdcd04.', null, null, null, null, null, null, '异常表示程序运行过程中可能出现的非正常状态，运行时异常表示虚拟机的通常操作中可能遇到的异常，是一种常见运行错误。JAVA编译器要求方法必须声明抛出可能发生的非运行时异常，但是并不要求必须声明抛出未被捕获的运行时异常。', '', '0', '2017-12-26 22:44:17', '65', '1');
INSERT INTO `topic` VALUES ('6422', '33', '1', '下列IP地址中，属于C类IP地址的是( )', '2fae0abc-d807-46a8-80c3-bbc94657a629.', '21.222.1.65', ' 1.2.1.1', ' 1.2.1.1', '255.255.255.255', '', '', 'D', '', '0', '2017-12-26 22:44:19', '64', '1');
INSERT INTO `topic` VALUES ('6423', '4', '1', '下列关于Spring特性中IoC描述错误的是：（）a', '2047d7d3-105b-45f9-94ba-9aa0564e5bac.', 'IoC就是指程序之间的关系由程序代码直接操控', ' 所谓“控制反转”,是指控制权由应用代码转到外部容器，控制权的转移', 'IoC将控制创建的职责搬进了框架中；并把它从应用代码脱离开来', '当使用Spring的IoC容器时只需指出组件需要的对象，在运行时Spring的IoC容器会根据XML配置数据提供给它。', '', '', 'A', '', '0', '2017-12-26 22:44:44', '58', '1');
INSERT INTO `topic` VALUES ('6424', '4', '4', '请简述Spring的工作机制？ ', '1879773c-60be-4d3f-a6c2-c2de1d1d73bb.', null, null, null, null, null, null, '考答案：SPRING的工作机制可从以下几点来描述：（1）SPRING   MVC请所有的请求都提交给DISPATCHERSERVLET,它会委托应用系统的其他模块负责负责对请求进行真正的处理工作。   （2）DISPATCHERSERVLET查询一个或多个HANDLERMAPPING,找到处理请求的CONTROLLER。（3）DISPATCHERSERVLET请请求提交到目标CONTROLLER   （4）CONTROLLER进行业务逻辑处理后，会返回一个MODELANDVIEW   （5）DISPATHCHER查询一个或多个VIEWRESOLVER视图解析器,找到MODELANDVIEW对象指定的视图对象（6）视图对象负责渲染返回给客户端。', '', '0', '2017-12-26 22:45:06', '58', '1');
INSERT INTO `topic` VALUES ('6425', '3', '1', '以下哪个命令用于测试网络连通。', 'ee7a8de3-edb8-41c8-acc8-b95cd61929d3.', 'telnet', 'telnet', 'ping', 'ftp', '', '', 'C', '', '0', '2017-12-26 22:45:13', '64', '1');
INSERT INTO `topic` VALUES ('6426', '4', '4', '请回答你为什么用Spring的工作机制？', '3d84cc0c-6278-49ec-8d18-d75d4f67f3fc.', null, null, null, null, null, null, '参考答案：SPRING能有效的组织你的中间层对象，不管你是否选择使用了EJB。如果你仅仅使用了STRUS或其他为J2EE的API特性的FRAMEWORK，SPRING致力于解决剩下的问题。SPRING能够消除在许多工程中常见的对SINGLETON的过多的使用。这个是一个很大的问题，它降低了系统的可测试性和面向对象的程度。通过把对接口编程而不是对类编程的代价几乎减少到没有，SPRING能够促进良好的变成习惯的养成', '', '0', '2017-12-26 22:45:20', '58', '1');
INSERT INTO `topic` VALUES ('6427', '4', '4', '请简述Spring是什么？', 'e24b74a8-1ed2-4f27-8206-0776422ea094.', null, null, null, null, null, null, '参考答案：SPRING是一个轻型的容器，是J2EE规范的轻量级实现，是企业应用的“一站式”解决方案。其中的核心就是BEAN工厂，用以构造我们需要的MODEL，SPRING是非侵入式的，SPRING的应用中的对象不依赖于SPRING的特定类。', '', '0', '2017-12-26 22:45:38', '58', '1');
INSERT INTO `topic` VALUES ('6428', '33', '1', '在一个办公室内，将6台计算机用交换机连接成网络，该网络的屋里拓扑结构为', 'ca588031-692d-4489-8fcf-afbe10b6df4a.', '星型', ' 总线型', '树型', '环型', '', '', 'C', '', '0', '2017-12-26 22:45:42', '64', '1');
INSERT INTO `topic` VALUES ('6429', '33', '4', '请你简单的描述webServlet生命周期同时并说出Servlet和CGI的区别把', '5426655c-3ea6-47a5-8096-4e948f89141c.', null, null, null, null, null, null, 'SERVLET被服务器实例化后，容器运行其INIT方法，请求到达时运行其SERVICE方法，SERVICE方法自动派遣运行与请求对应的DOXXX方法（DOGET，DOPOST）等，当服务器决定将实例销毁的时候调用其DESTROY方法。\r\n与CGI的区别在于SERVLET处于服务器进程中，它通过多线程方式运行其SERVICE方法，一个实例可以服务于多个请求，并且其实例一般不会销毁，而CGI对每个请求都产生新的进程，服务完成后就销毁，所以效率上低于SERVLET。', '', '0', '2017-12-26 22:45:45', '65', '1');
INSERT INTO `topic` VALUES ('6430', '4', '4', '简述spring的组成？', '848a59f2-e499-40f5-8299-c011082d1e69.', null, null, null, null, null, null, '参考答案：SPRING主要由以下六个部分组成① SPRING   CORE：核心容器，BEANFACTORY提供了组件生命周期的管理，组件的创建，装配，销毁等功能。SPRINGCONTEXT：APPLICATIONCONTEXT，扩展核心容器，提供事件处理、国际化等功能。它提供了一些企业级服务的功能，提供了JNDI，EJB，RMI的支持。②  SPRING AOP：提供切面支持。③ SPRING DAO：提供事务支持，JDBC，DAO支持。④ SPRING ORM：对流行的O/R   MAPPING封装或支持。⑤ SPRING WEB：提供WEB应用上下文，对WEB开发提供功能上的支持，如请求，表单，异常等。⑥ SPRING WEB  MVC：全功能MVC框架，作用等同于STRUTS。', '', '0', '2017-12-26 22:46:01', '58', '1');
INSERT INTO `topic` VALUES ('6431', '33', '1', '下列既可用作输入设备又可用作输出设备的是。', '2dd1c6fa-813f-40f1-a7dc-97c7fa44da38.', '.鼠标器', '磁盘', '键盘', '显示器', '', '', 'B', '', '0', '2017-12-26 22:46:15', '64', '1');
INSERT INTO `topic` VALUES ('6432', '4', '4', '简述Spring容器提供了哪些功能？', '7ad6d08e-4dca-4cd0-bd10-b2b615d8456f.', null, null, null, null, null, null, '参考答案：SPRING容器提供了对对象的管理，如SPRING容器负责生成、组装、销毁组件，，另外SPRING容器还提供了对持久化的支持，对事务的支持。另外SPRING容器提供了国际化等功能。', '', '0', '2017-12-26 22:46:19', '58', '1');
INSERT INTO `topic` VALUES ('6433', '4', '4', '在Spring中，bean的注入有几种方式，各是什么？ ', '54f5db31-77ef-4a70-9694-66739a8fc424.', null, null, null, null, null, null, '参考答案：SPRING中，BEAN的注入有两中方式，分别是SETTER注入和构造器注入。', '', '0', '2017-12-26 22:46:32', '58', '1');
INSERT INTO `topic` VALUES ('6434', '33', '1', '计算机的电源切断之后，存储内容全部消失的存储器是。', 'fd578f59-07d1-442f-b743-d52d3da4050b.', '软磁盘', '硬盘', '硬盘', '.随机存储器', '', '', 'D', '', '0', '2017-12-26 22:46:42', '64', '1');
INSERT INTO `topic` VALUES ('6435', '33', '4', '请说出 java util包下ArrayList和Vector合 LinkedList的存储性能和特性', '399d23be-437e-4b20-a60e-19481dc0433e.', null, null, null, null, null, null, 'ARRAYLIST和VECTOR都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，VECTOR由于使用了SYNCHRONIZED方法（线程安全），通常性能上较ARRAYLIST差，而LINKEDLIST使用双向链表实现存储，按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。', '', '0', '2017-12-26 22:46:47', '65', '1');
INSERT INTO `topic` VALUES ('6436', '4', '4', ' 请简述s：Spring bean的zuoyongyu', 'dae8cf38-ce3a-41b5-be4c-b94f607feae0.', null, null, null, null, null, null, '参考答案：在SPRING2.0之前BEAN只有2种作用域即：SINGLETON(单例)、NON-SINGLETON（也称PROTOTYPE）,   SPRING2.0以后，增加了SESSION、REQUEST、GLOBAL   SESSION三种专用于WEB应用程序上下文的BEAN。因此，默认情况下SPRING2.0现在有五种类型的BEAN。当然，SPRING2.0对BEAN的类型的设计进行了重构，并设计出灵活的BEAN类型支持，理论上可以有无数多种类型的BEAN，用户可以根据自己的需要，增加新的BEAN类型，满足实际应用需求', '', '0', '2017-12-26 22:47:03', '58', '1');
INSERT INTO `topic` VALUES ('6437', '33', '1', '.中央处理单元（CPU）的两个主要组成部分是运算器和什么。', 'a8d37b9d-3226-4ce3-994e-9618445cc2bf.', '寄存器', '.主存储器', '.主存储器', '辅助存储器', '', '', 'C', '', '0', '2017-12-26 22:47:06', '64', '1');
INSERT INTO `topic` VALUES ('6438', '4', '4', ' 请叙述设值注入的优点？', 'ce22acc2-148b-450f-bae2-6c0c9fc58bb9.', null, null, null, null, null, null, '参考答案：设置注入的优点：（1）与传统的JAVABEAN的写法更相似，程序开发人员更容易了解和接受。通过SETTER方法设定依赖关系显得更加直观、自然。（2）对于有复杂的依赖关系，如果采用构造注入，会导致构造器过于臃肿，难以阅读。SPRING在创建BEAN实例时，需要同时实例化其依赖的全部实例，因而导致性能的下降，而使用设值注入能够解决这些问题。（3）尤其是某些属性可选的情况下，多参数的构造器更加笨重。', '', '0', '2017-12-26 22:47:17', '58', '1');
INSERT INTO `topic` VALUES ('6439', '4', '4', '请叙述gouzaozhuru的优点？', '81668735-ff08-4578-a559-32efa407fc6c.', null, null, null, null, null, null, '参考答案：构造注入的优点：（1）可以在构造器中决定依赖关系的注入顺序，优先依赖的优先注入。（2）对于依赖关系无须变化的BEAN，构造注入更加有用处。因为没有SETTER方法，所有的依赖关系全部在构造器内设定，因此，无须担心后续的代码对依赖关系产生破坏。（3）依赖关系只能在构造器中设定，则只有组建的创建者才能改变组建的依赖关系。对组建的调用者而言，组建内部的依赖关系完全透明，更符合高内聚的原则。', '', '0', '2017-12-26 22:47:42', '58', '1');
INSERT INTO `topic` VALUES ('6440', '33', '1', '下列说法中哪项是错误的是。', '61b5fef9-e55e-4223-90df-a366880d532f.', '不同CPU的计算机有不同的机器语言和汇编语言；', ' 回收站是硬盘中的一块区域，而剪贴板是内存中的一块区域；', '在Dos中可以用的文件名在windows 98中一定可用；', '计算机病毒不可能会驻留在BIOS中。', '', '', 'D', '', '0', '2017-12-26 22:47:49', '64', '1');
INSERT INTO `topic` VALUES ('6441', '33', '4', 'EJB是怎么实现的？说出SessionBeanEntityBean的区别', 'fcabdf03-9e74-4855-8cce-91baea09d089.', null, null, null, null, null, null, 'EJB包括SESSION BEAN、ENTITY BEAN、MESSAGE DRIVEN BEAN，基于JNDI、RMI、JAT等技术实现。\r\nSESSIONBEAN在J2EE应用程序中被用来完成一些服务器端的业务操作，例如访问数据库、调用其他EJB组件。ENTITYBEAN被用来代表应用系统中用到的数据。', '', '0', '2017-12-26 22:48:02', '65', '1');
INSERT INTO `topic` VALUES ('6442', '4', '4', '说出bean工厂创建bean的三种方式？', '7644e789-1ae6-4d82-95d6-216969f87da5.', null, null, null, null, null, null, '参考答案:BEAN工厂创建BEAN的三种方式分别是：  （1）直接构造，需要一个DEFAULT CONSTRUCTOR和相应的SETTERS/GETTERS方法。  要注意的是,我们可以为GETTER/SETTER方法传递参数(用PREPERTIES标签),也可以为构造函数传递参数 2）采用静态工厂方法，如:  <BEAN ID=\"EXAMPLEBEAN\"CLASS=\"EXAMPLES.EXAMPLEBEAN2\"  FACTORY-METHOD=\"CREATEINSTANCE\"/>  这里要求EXAMPLES.EXAMPLEBEAN2类有个静态方法CREATEINSTANCE （3）非静态工厂方法  <BEAN ID=\"MYFACTORYBEAN\" CLASS=\"...\"> </BEAN> <BEAN ID=\"EXAMPLEBEAN\"   FACTORY-BEAN=\"MYFACTORYBEAN\" FACTORY-METHOD=\"CREATEINSTANCE\"/>  在这里,必须没有CLASS标签,FACTORY-BEAN是BEANFACTORY,FACTORY-METHOD是它的非静态方法，MYFACTORYBEAN可以通过容器来管理和配置。', '', '0', '2017-12-26 22:48:05', '58', '1');
INSERT INTO `topic` VALUES ('6443', '33', '1', '用于电子邮件的协议是。', 'df5c405b-bbf9-4270-8183-c89e0879b535.', 'IP', 'TCP', 'TCP', 'SMTP', '', '', 'D', '', '0', '2017-12-26 22:48:18', '64', '1');
INSERT INTO `topic` VALUES ('6444', '4', '4', '请写出bean的生命周期的方法？', '742dcbaf-fd3d-4067-9e29-e0f812c8fbc2.', null, null, null, null, null, null, '参考答案：（1）通过设置BEAN的INIT-METHOD属性指定初始化的方法，他的限制是方法无法接受任何参数，方法可以为STATIC。（2）实现INITIALIZINGBEAN接口的AFTERPRIOERTIESSET（）方法。（3）销毁对象可以通过DISPOSABLEBEAN的DESTROY的实现。', '', '0', '2017-12-26 22:48:20', '58', '1');
INSERT INTO `topic` VALUES ('6445', '33', '4', 'java立里面的集合有Collection 和 Collections的区别。 ', '10df3c95-11b8-433c-96ca-8d007e777bfb.', null, null, null, null, null, null, 'COLLECTION是集合类的上级接口，继承与他的接口主要有SET 和LIST.\r\nCOLLECTIONS是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。', '', '0', '2017-12-26 22:48:44', '65', '1');
INSERT INTO `topic` VALUES ('6446', '4', '4', '请回答：IoC最大的好处是什么？', 'd15ab2b7-7da8-47dd-98cd-f6744ab1bbf3.', null, null, null, null, null, null, '参考答案：IOC最大的好处是降低了对象的耦合性，实现了应用的松散耦合。因为把对象生成放在了XML里定义，所以当我们需要换一个实现子类将会变成很简单（一般这样的对象都是现实于某种接口的），只要修改XML就可以了。', '', '0', '2017-12-26 22:48:50', '58', '1');
INSERT INTO `topic` VALUES ('6447', '4', '4', '简述IoC的类型？', '54960813-4454-4409-9d5f-4eaee358031a.', null, null, null, null, null, null, '参考答案：IOC可以分为三种注入类型，分别是构造函数注入、属性注入和接口注入。SPRING主要支持构造函数注入和属性注入。', '', '0', '2017-12-26 22:49:03', '58', '1');
INSERT INTO `topic` VALUES ('6448', '33', '2', '序列图描述对象是如何交互的并且将重点放在消息序列上。', '97df1431-6748-47ef-a556-9b0cab8946ae.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 22:49:13', '64', '1');
INSERT INTO `topic` VALUES ('6449', '4', '4', 'Spring中依赖注入与传统编程之间的差别是什么？', '4639db25-c559-4928-8ee5-1640499d7531.', null, null, null, null, null, null, '参考答案：在传统的程序设计过程中，通常由调用者来创建被调用者的实例。但在SPRING里，创建被调用者的工作不再由调用者来完成，因此称为控制反转；创建被调用者实例的工作通常由SPRING容器来完成，然后注入调用者，因此也称为依赖注入。依赖注入的主要作用是起到解耦合的作用。', '', '0', '2017-12-26 22:49:25', '58', '1');
INSERT INTO `topic` VALUES ('6450', '4', '4', '说出Spring的通知类型有哪些？', 'cdc94334-f606-460c-90e2-f607f53d7119.', null, null, null, null, null, null, '参考答案：SPRING的通知类型有(1) METHODBEFOREADVICE  (2) AFTERRETURNINGADVICE  (3)  METHODINTERCEPTOR (4)THROWSADVICE ', '', '0', '2017-12-26 22:49:42', '58', '1');
INSERT INTO `topic` VALUES ('6451', '33', '1', '下列哪些是J2EE的体系。', '8c4e5ed4-2109-4ff7-a7c3-42f706b273ef.', 'JSP', 'JAVA', 'Servlet', 'WebService', '', '', 'ACD', '', '0', '2017-12-26 22:49:46', '64', '1');
INSERT INTO `topic` VALUES ('6452', '33', '4', '说说final finalize的区别。', '50fb5e9b-3bae-427c-ac17-04dbbe797cae.', null, null, null, null, null, null, 'FINAL—修饰符（关键字）如果一个类被声明为FINAL，意味着它不能再派生出新的子类，不能作为父类被继承。因此一个类不能既被声明为 ABSTRACT的，又被声明为FINAL的。将变量或方法声明为FINAL，可以保证它们在使用中不被改变。被声明为FINAL的变量必须在声明时给定初值，而在以后的引用中只能读取，不可修改。被声明为FINAL的方法也同样只能使用，不能重载\r\nFINALLY—再异常处理时提供 FINALLY 块来执行任何清除操作。如果抛出一个异常，那么相匹配的 CATCH 子句就会执行，然后控制就会进入 FINALLY 块（如果有的话）。', '', '0', '2017-12-26 22:49:52', '65', '1');
INSERT INTO `topic` VALUES ('6453', '4', '4', '谈谈目标对象实现接口与目标对象不实现接口有什么区别？', '6737c56e-bd6b-4baf-b54c-a42703517919.', null, null, null, null, null, null, '参考答案：目标对象实现接口与目标对象不实现接口主要有以下几点区别： （1）如果目标对象实现了接口,默认采用JDK的动态代理机制实现AOP （2）如果目标对象实现了接口,可以强制SPRING采用CGLIB实现代理  （3） 如果目标对象没有实现接口,必须采用CGLIB实现代理,SPRING会自动的在CGLIB和JDK动态代理之间切换', '', '0', '2017-12-26 22:50:01', '58', '1');
INSERT INTO `topic` VALUES ('6454', '3', '4', '请描述JDK动态代理和CGLI代理的区别？', '7f81115d-f8d5-41cd-ba5d-a2df4d1faf1d.', null, null, null, null, null, null, '参考答案：JDK 的动态代理只能对实现了接口的目标类进行代理，而不实现接口的类就不能使用 JDK 的动态代理 CGLIB   是针对类来实现代理，当没有实现接口的类需要代理时就需要通过 CGLIB   来实现代理了，他的原理是对指定的目标类生成一个子类，并覆盖其中方法实现增强，但是因为采用的是继承，所以不能对 FINALL   类进行继承。二者在某些特殊场合需混合使用', '', '0', '2017-12-26 22:50:21', '58', '1');
INSERT INTO `topic` VALUES ('6455', '4', '4', ' 简述ProxyFactoryBean的作用是什么？', '1c2f036f-0a8e-49a9-b59b-05f32f6857a9.', null, null, null, null, null, null, '参考答案：PROXYFACTORYBEAN的作用是依照配置信息，将切面应用到目标对象，生成动态代理对象。', '', '0', '2017-12-26 22:50:35', '58', '1');
INSERT INTO `topic` VALUES ('6456', '4', '4', '叙述Spring中的自动代理的原理？', 'c4e3f65b-c326-48aa-a607-e91af27f9941.', null, null, null, null, null, null, '参考答案：SPRING在生成代理对象的时候，默认情况下，会使用被代理对象的接口来生成代理对象。如果被代理对象没有实现接口，此时，SPRING会使用CGLIB生成代理对象，此时该代理对象是被代理对象的子类。', '', '0', '2017-12-26 22:50:51', '58', '1');
INSERT INTO `topic` VALUES ('6457', '4', '4', '写出创建代理对象需指定的三要素是什么？', 'a70d3662-740e-418f-b0b4-846e8e26c6d7.', null, null, null, null, null, null, '参考答案：创建代理对象需要指定的三要素是：TARGET：设定目标对象（只能是一个）；PROXYINTERFACES：设定代理接口（目标对象所实现的接口）；INTERCEPTORNAMES：设定拦截器的名字（各个ADVICE或ADVISOR  BEAN的列表）', '', '0', '2017-12-26 22:51:09', '58', '1');
INSERT INTO `topic` VALUES ('6458', '4', '4', '写出代理的两种方式分别是什么？', 'c82ab981-5a38-4ea2-b192-4994fadc918e.', null, null, null, null, null, null, '参考答案：代理的两种方式是：静态代理和动态代理，其中静态代理针对每个具体类分别编写代理类；针对一个接口编写一个代理类。而动态代理针对一个方面编写一个INVOCATIONHANDLER，然后借用JDK反射包中的PROXY类为各种接口动态生成相应的代理', '', '0', '2017-12-26 22:51:21', '58', '1');
INSERT INTO `topic` VALUES ('6459', '4', '4', '请简述：什么是AOP？', '4fe4e6c4-b4f3-49e7-bf5c-4f96a894dbec.', null, null, null, null, null, null, '参考答案：将程序中的交叉业务逻辑提取出来，称之为切面。将这些切面动态织入到目标对象，然后生成一个代理对象的过程。', '', '0', '2017-12-26 22:51:34', '58', '1');
INSERT INTO `topic` VALUES ('6460', '4', '4', '简述AOP核心？', 'd380ec2d-f343-444c-9d78-e1004475adf3.', null, null, null, null, null, null, '参考答案：AOP核心主要包括以下内容：（1）ASPECT（切面），（2）JOINPOINT（连接点），（3）ADVICE（通知），（4）POINTCUT（切入点），（5）INTRODUCTION（引入），（6）WEAVING（织入），（7）TARGET（目标对象），（8）PROXY（代理对象）', '', '0', '2017-12-26 22:51:49', '58', '1');
INSERT INTO `topic` VALUES ('6462', '4', '4', '什么是Spring框架？Spring框架有哪些主要模块？', '87bb75cd-f7c4-4d2a-8246-22862070fa15.', null, null, null, null, null, null, 'SPRING框架是一个为JAVA应用程序的开发提供了综合、广泛的基础性支持的JAVA平台。SPRING帮助开发者解决了开发中基础性的问题，使得开发人员可以专注于应用程序的开发。SPRING框架本身亦是按照设计模式精心打造，这使得我们可以在开发环境中安心的集成SPRING框架，不必担心SPRING是如何在后台进行工作的。', '', '0', '2017-12-26 22:52:04', '65', '1');
INSERT INTO `topic` VALUES ('6463', '4', '4', ' 请叙述AOP事务的含义？', 'b57f98a3-b92a-411a-b98e-da051bb898a6.', null, null, null, null, null, null, '参考答案：SPRING中进行事务管理的通常方式是利用AOP（面向切片编程）的方式，为普通JAVA类封装事务控制，它是通过动态代理实现的，由于接口是延迟实例化的，SPRING在这段时间内通过拦截器，加载事务切片', '', '0', '2017-12-26 22:52:26', '58', '1');
INSERT INTO `topic` VALUES ('6464', '4', '4', 'Spring框架能带来哪些好处？', 'b6c8a8bb-c09e-4d1c-af76-80add27b6fea.', null, null, null, null, null, null, '与EJB容器相比较，IOC容器更加趋向于轻量级。这样一来IOC容器在有限的内存和CPU资源的情况下进行应用程序的开发和发布就变得十分有利。', '', '0', '2017-12-26 22:52:30', '65', '1');
INSERT INTO `topic` VALUES ('6465', '4', '4', '请叙述Spring对持久层支持所采用的策略？', '74a3cd6b-d4a3-436b-a3ef-426a05591059.', null, null, null, null, null, null, '考答案：SPRING对持久层采取了很好的支持，这些支持策略主要有：（1）SPRING对持久层“不发明重复的轮子”，即没有重新实现新的持久层方案，对现有持久层方案做封装，更利于使用。（2）采用DAO模式。（3）提供了大量的模板类来简化编程（HIBERNATEDAOSUPPORT，JDBCTEMPLATE等）（4）重新设计了一套完善的异常体系结构：①   类型丰富，细化异常类型。② 全都是运行时异常（RUNTIMEEXCEPTION）。', '', '0', '2017-12-26 22:52:45', '58', '1');
INSERT INTO `topic` VALUES ('6466', '4', '4', '请问Spring如何简化事务配置？', 'bc584002-c2b7-4b0c-87ad-f1ac5ab07bd4.', null, null, null, null, null, null, '参考答案：PRING简化事务配置有两种方式：第一种方式就是使用TRANSACTIONPROXYFACTORYBEAN创建事务代理（通常事务代理以SERVICE层为目标BEAN）配置HIBERNATE的事务管理器，使用HIBERNATETRANSACTIONMANAGER类，该类实现了PLATFORMTRANSACTIONMANAGER接口,针对HIBERNATE   持久化连接的特定实现。第二种方式使用自动创建代理简化事务配置使用BEANNAMEAUTOPROXYCREATOR和DEFAULTADVISORAUTOPROXYCREATOR创建代理时，并不一定是创建事务代理，关键在于传入的拦截器，如果传入事务拦截器，将可自动生成事务代理 ', '', '0', '2017-12-26 22:52:59', '58', '1');
INSERT INTO `topic` VALUES ('6467', '4', '4', '反转(IOC)什么是注入？', 'bb8dd572-e2c0-4464-bcd8-caaff1221e01.', null, null, null, null, null, null, '控制反转是应用于软件工程领域中的，在运行时被装配器对象来绑定耦合对象的一种编程技巧，对象之间耦合关系在编译时通常是未知的。在传统的编程方式中，业务逻辑的流程是由应用程序中的早已被设定好关联关系的对象来决定的。在使用控制反转的情况下，业务逻辑的流程是由对象关系图来决定的，该对象关系图由装配器负责实例化，这种实现方式还可以将对象之间的关联关系的定义抽象化。而绑定的过程是通过“依赖注入”实现的。', '', '0', '2017-12-26 22:53:11', '65', '1');
INSERT INTO `topic` VALUES ('6468', '4', '4', '请简述Spring的shiwujizhi？', 'ff71ee50-b7ed-4898-89c7-26f22bb9df4f.', null, null, null, null, null, null, '参考答案：SPRING对事务的支持很丰富，除了编程式的处理事务，SPRING还支持声明式事务。其次SPRING使用事务服务代理和事务管理器（如HIBERNATETRANSACTIONMANAGER）来支持事务服务。另外SPRING对事务的边界多了一种嵌套事务。', '', '0', '2017-12-26 22:53:18', '58', '1');
INSERT INTO `topic` VALUES ('6469', '4', '4', '请回答：Spring API中的getCurrentSession()和openSession()两个方法的区别？', 'ce987ff2-c304-4b35-b6ca-fa38a38157a8.', null, null, null, null, null, null, '参考答案：GETCURRENTSESSION()和OPENSESSION()两个方法主要有两点的区别：（1）采用GETCURRENTSESSION（）创建的SESSION会绑定到当前线程中，而采用OPENSESSION（）创建的SESSION则不会。（2）采用GETCURRENTSESSION（）创建的SESSION在COMMIT或者ROLLBACK后会自动关闭，而采用OPENSESSION的方式需要手动进行关闭。 ', '', '0', '2017-12-26 22:53:40', '58', '1');
INSERT INTO `topic` VALUES ('6470', '4', '4', '请叙述Spring中使用Hibernate事务的步骤？', '268e277a-40ff-43dc-ae2c-00cb6e4caeca.', null, null, null, null, null, null, '参考答案：SPRING中使用HIBERNATE事务的步骤为：（1）配置数据源 （2）配置SESSIONFACTORY  （3）配置事务管理器  （4）创建事务服务代理', '', '0', '2017-12-26 22:53:59', '58', '1');
INSERT INTO `topic` VALUES ('6472', '4', '4', '请叙述关于Spring的声明式事务处理？', '37c7931b-a0cf-4ff7-9266-2e6fb16c97f1.', null, null, null, null, null, null, '参考答案：SPRING声明式事务让我们从复杂的事务处理中得到解脱。使得我们再也无需要去处理获得连接、关闭连接、事务提交和回滚等这些操作。再也无需要我们在与事务相关的方法中处理大量的TRY„CATCH„FINALLY代码。我们在使用SPRING声明式事务时，有一个非常重要的概念就是事务属性。事务属性通常由事务的传播行为，事务的隔离级别，事务的超时值和事务只读标志组成。我们在进行事务划分时，需要进行事务定义，也就是配置事务的属性。', '', '0', '2017-12-26 22:54:16', '58', '1');
INSERT INTO `topic` VALUES ('6473', '4', '4', '请叙述Spring的事务传播属性与隔离级别？', '23817e64-bdeb-4706-ab28-39b5fa0980d1.', null, null, null, null, null, null, '参考答案：在使用SPRING时，大部分会用到他的声明式事务，简单的在配置文件中进行一些规则配置，利用SPRING的AOP功能就能轻松搞定事务问题；这里面就涉及到一个事务的传播属性问题PROPAGATION，它在TRANSACTIONDEFINITION接口中定义，以供PLATFROMTRANSACTIONMANAGER使用,PLATFROMTRANSACTIONMANAGER是SPRING事务管理的核心接口。在TransactionDefinition接口中定义了五个不同的事务隔离级别，ISOLATION_DEFAULT  这是一个PlatfromTransactionManager默认的隔离级别，使用数据库默认的事务隔离级别.另外四个与JDBC的隔离级别相对应，ISOLATION_READ_UNCOMMITTED  这是事务最低的隔离级别，它充许别外一个事务可以看到这个事务未提交的数据。这种隔离级别会产生脏读，不可重复读和幻像读。', '', '0', '2017-12-26 22:54:28', '58', '1');
INSERT INTO `topic` VALUES ('6474', '26', '4', '什么是 MAC (Media Access Control) ，MAC 主要的功能是什么？', 'cc48eb61-3648-44dd-997e-c9f375ee39a8.', null, null, null, null, null, null, 'MEDIA ACCESS CONTROL 的缩写，为以太网络硬件讯框的规格，以太网络就是以 MAC 讯框进行数据的传送。 目前 MAC 也常被用为以太网络卡卡号的代称。', '', '0', '2017-12-26 22:54:34', '48', '1');
INSERT INTO `topic` VALUES ('6475', '4', '4', 'ApplicationContext何beanfacototy有什么区别？', 'e4254239-88db-42e2-8acb-a179f277e314.', null, null, null, null, null, null, 'EANFACTORY 可以理解为含有BEAN集合的工厂类。BEANFACTORY 包含了种BEAN的定义，以便在接收到客户端请求时将对应的BEAN实例化。', '', '0', '2017-12-26 22:54:48', '65', '1');
INSERT INTO `topic` VALUES ('6476', '26', '4', '什么是封包碰撞？为什么会发生封包碰撞？', 'e3bb5e2c-8f4b-4b52-9b9f-c0cbc05bc713.', null, null, null, null, null, null, '当主机要使用网络时，必须要先进行 CSMA/CD 监听网络，如果(1)网络使用频繁 (2)网络间隔太大， 则可能会发生监听时均显示无主机使用，但发出封包后却发生同步发送封包的情况，此时两个封包就会产生碰撞， 造成数据损毁。', '', '0', '2017-12-26 22:54:57', '48', '1');
INSERT INTO `topic` VALUES ('6477', '4', '4', '简单谈谈你知道的Spring有几种配置方式？', 'a7e6f54d-8466-495c-87cb-7fa69986e000.', null, null, null, null, null, null, '基于XML的配置\r\n基于注解的配置\r\n基于JAVA的配置', '', '0', '2017-12-26 22:55:26', '65', '1');
INSERT INTO `topic` VALUES ('6478', '26', '4', 'TCP 封包上面的 SYN 与 ACK 标志代表的意义为何？', '93654345-20df-4905-b141-0902758a4939.', null, null, null, null, null, null, 'SYN 代表该封包为该系列联机的第一个封包，亦即是主动联机的意思；\r\nACK 则代表该封包为确认封包，亦即是回应封包！ ', '', '0', '2017-12-26 22:55:28', '48', '1');
INSERT INTO `topic` VALUES ('6479', '4', '4', ' 请叙述编写业务逻辑的方法？', 'a92883be-7c71-41a1-99e9-decef56e960b.', null, null, null, null, null, null, '参考答案：继承HIBERNATEDAOSUPPORT类，使用HIBERNATETEMPLATE来持久化，HIBERNATETEMPLATE是HIBERNATE   SESSION的轻量级封装。默认情况下运行期异常才会回滚（包括继承了RUNTIMEEXCEPTION子类），普通异常是不会滚的。编写业务逻辑方法时，最好将异常一直向上抛出，在表示层（STRUTS）处理。关于事务边界的设置，通常设置到业务层，不要添加到DAO上。', '', '0', '2017-12-26 22:55:32', '58', '1');
INSERT INTO `topic` VALUES ('6480', '4', '4', '在Web分层架构中业务层为什么都选择Spring？', '6d2a64eb-8100-4a99-b1bc-8a3efd9b27b0.', null, null, null, null, null, null, '参考答案：因为SERVICE层需要处理业务逻辑和交叉业务逻辑，处理事务，日志，安全等，而这些与SPRING的IOC特性，AOP等不谋而合', '', '0', '2017-12-26 22:55:46', '58', '1');
INSERT INTO `topic` VALUES ('6481', '26', '4', '请说明 CSMA/CD 的运作原理？', '7b6f4721-4a6e-488f-a3b8-452776d1a45e.', null, null, null, null, null, null, '发送流程\r\n主机欲使用网络时，会先监听网络，若网络没有被使用时，才会准备传送，否则继续监听；\r\n当数据传送钟，发现有碰撞情况时，则会重新监听网络，并且重新发送一次该封包；\r\n若重复发生碰撞 16 次，则网络会瘫痪；\r\n接收流程\r\n主机如果没有在传送数据，则会监听网络，并且主动在接收的状态下；\r\n若接收到一个封包，并且该表头所载 MAC 为本身的网卡卡号，则开始接收该封包，否则将该封包丢弃；\r\n接收过程当中如果发生封包碰撞，则会通知原发送主机碰撞的数据；\r\n封包接收完毕后，会以 MAC 表头所载长度同时分析本封包长度，若发生问题，则会通知对方重新传送。', '', '0', '2017-12-26 22:55:55', '48', '1');
INSERT INTO `topic` VALUES ('6482', '4', '4', '谈谈spring是如何用基于XML配置的方式配置Spring？', '9641fd21-57a2-4d91-b1a1-559f6a75684f.', null, null, null, null, null, null, '在SPRING框架中，依赖和服务需要在专门的配置文件来实现，我常用的XML格式的配置文件。这些配置文件的格式通常用<BEANS>开头，然后一系列的BEAN定义和专门的应用配置选项组成。', '', '0', '2017-12-26 22:55:59', '65', '1');
INSERT INTO `topic` VALUES ('6483', '33', '1', '在Struts中实现页面跳转主要通过什么方法来实现？', '579667ae-5892-4113-a7f4-4d8b22aaec9d.', 'server.transfer', 'response.redirect', 'mapping.findForward', 'response.sendRedirect', '', '', 'C', '', '0', '2017-12-26 22:56:47', '64', '1');
INSERT INTO `topic` VALUES ('6484', '33', '1', 'EJB的优点有哪些？', 'd8da9724-d091-42a1-b2a4-59ea4d0398e2.', '技术领先', '价格低廉 ', '性能优越 ', '强大的容器支持 ', '', '', 'CD', '', '0', '2017-12-26 22:57:19', '64', '1');
INSERT INTO `topic` VALUES ('6485', '4', '4', '阐述一下Spring中Bean在启动时的的生命周期', 'c342b449-cf7f-4baf-ac06-b0b80972d6f5.', null, null, null, null, null, null, '1.容器启动，实例化所有实现了BEANFACTOYPOSTPROCESSOR接口的类。他会在任何普通BEAN实例化之前加载.', '', '0', '2017-12-26 22:57:25', '65', '1');
INSERT INTO `topic` VALUES ('6486', '4', '4', 'MVC的理解?', '9995aefe-d129-4708-a633-8ef20c2e79f6.', null, null, null, null, null, null, 'MVC是模型(MODEL)－视图(VIEW)－控制器(CONTROLLER)的缩写，一种软件设计思想, 强制性的把应用程序的输入、处理和输出分开。解耦和,任何的重定向都能解耦和   MVC中的模型、视图、控制器它们分别担负着不同的任务。   1．视图: 视图是用户看到并与之交互的界面。视图向用户显示相关的数据，并接受用户的输入。视图不进行任何业务逻辑处理。 --获取数据/显示数据  2．模型: 模型表示业务数据和业务处理。相当于JAVABEAN。一个模型能为多个视图提供数据。这提高了应用程序的重用性-- 处理数据(MODEL层对容器的依赖性越少越好,MODEL层是多实例还是单例)  3．控制器: 当用户单击WEB页面中的提交按钮时,控制器接受请求并调用相应的模型去处理请求。 然后根据处理的结果调用相应的视图来显示处理的结果。 --控制流程   MVC的处理过程：首先控制器接受用户的请求，调用(委托)相应的模型来进行业务处理，并返回数据给控制器。控制器调用相应的视图来显示处理的结果。并通过视图呈现给用户。', '', '0', '2017-12-26 22:57:26', '58', '1');
INSERT INTO `topic` VALUES ('6487', '33', '1', '以下哪些接口能够实现对Web访问者的身份认证？', '92194026-5fe9-42e1-85c1-aec44071d248.', 'Http Servlet Request ', 'Http Servlet Response ', 'Http Session ', 'Http Servlet ', '', '', 'C', '', '0', '2017-12-26 22:57:46', '64', '1');
INSERT INTO `topic` VALUES ('6488', '33', '1', '无状态会话Bean、有状态会话Bean、CMP与BMP中，哪一种Bean不需要自己书写连接数据库的代码？ ', 'f6c93618-86d7-4df9-9d30-9a4c21d1dd2b.', '无状态会话Bean ', '有状态会话Bean ', '有状态会话Bean ', 'BMP ', '', '', 'C', '', '0', '2017-12-26 22:58:09', '64', '1');
INSERT INTO `topic` VALUES ('6489', '33', '1', '假设web应用的文档根目录为MyApp，那么可以从哪里找到database.jar文件。 ', 'bd9d3346-9237-468b-8566-0b21427d3a0c.', 'MyApp目录下 ', 'MyApp\\images目录下 ', 'MyApp\\WEB-INF目录下 ', 'MyApp\\WEB-INF\\lib目录下 ', '', '', 'D', '', '0', '2017-12-26 22:58:34', '64', '1');
INSERT INTO `topic` VALUES ('6490', '3', '4', 'Java对标识符命名有什么规定？', '3fef0887-4133-45b0-9f11-e192236478cc.', null, null, null, null, null, null, '答：JAVA对标识符的命名规定如下：     1) JAVA语言的标识符必须由字母、下划线(“_”)或美元符号(“$”)开始，其余字符可以是上述三种符号或数字(0-9)。JAVA语言使用UNICODE字符集，所以字母包括‘A’-‘Z’、‘A’-‘Z’以及UNICODE字符集中序号大于0XC0的所有符号。     2) 保留字不能用于标识符如：ABSTRACT BOOLEAN 等等。   3) 标识符区分大小写。', '', '0', '2017-12-26 22:58:53', '58', '1');
INSERT INTO `topic` VALUES ('6491', '33', '1', '从以下哪一个选项中可以获得Servlet的初始化参数。 ', '3244054c-eb61-4a4d-81de-46d5d615fc2d.', 'Servlet ', 'ServletContext ', 'ServletConfig ', 'GenericServlet ', '', '', 'C', '', '0', '2017-12-26 22:58:59', '64', '1');
INSERT INTO `topic` VALUES ('6492', '3', '4', '请列出Java主要的基本数据类型', '67740c54-96a1-4b8b-8917-935c06a601c6.', null, null, null, null, null, null, '答：JAVA主要的基本数据类型有：布尔型BOOLEAN、字节型BYTE、字符型CHAR、短整型SHORT、整型INT、长整型LONG、浮点型(单精度型)FLOAT、双精度型DOUBLE。', '', '0', '2017-12-26 22:59:05', '58', '1');
INSERT INTO `topic` VALUES ('6493', '4', '1', '哪一个对象可以用于获得浏览器发送的请求。 ', '57533e7b-436a-48a0-b380-60d471ed22cf.', 'HttpServletRequest ', 'HttpServletResponse ', 'HttpServlet ', 'Http ', '', '', 'A', '', '0', '2017-12-26 22:59:23', '64', '1');
INSERT INTO `topic` VALUES ('6494', '3', '4', '什么是类？什么是对象？类和对象有何联系？', 'c567a836-91e6-459f-84c0-513b254f27b4.', null, null, null, null, null, null, '答：在面向对象程序设计里，类是定义一个对象的属性和方法的蓝本。对象就是一组变量和相关方法的集合，其中变量表明对象的状态，方法表明对象所具有的行为。类是对象的模板，对象是类的实例，可以从一个类中创建许多对象。', '', '0', '2017-12-26 22:59:27', '58', '1');
INSERT INTO `topic` VALUES ('6495', '3', '4', '方法的重载和方法的覆盖有什么不同？', 'a7da008a-8f2c-4d73-a5b7-9368b7774ac1.', null, null, null, null, null, null, '答：方法重载，指的是在类中创建多个具有相同名称，但使用不同参数的方法，JAVA虚拟机根据传递给方法的参数个数和类型决定调用哪个重载方法。方法的覆盖指在子类中重新定义父类中已有的方法，对于重写的方法，运行时系统根据调用该方法的实例的类型来决定选择哪个方法调用。', '', '0', '2017-12-26 22:59:40', '58', '1');
INSERT INTO `topic` VALUES ('6496', '33', '1', '运行jsp需要安装_______Web服务器。 ', '7bef9055-e46e-4018-9039-5b7f2852ee30.', 'Apache ', 'tomcat ', 'WebLogic ', 'IIS ', '', '', 'BC', '', '0', '2017-12-26 22:59:50', '64', '1');
INSERT INTO `topic` VALUES ('6497', '3', '4', '类de变量和实例变量有何区别？', '9775a2bd-ac2c-4297-8ef5-59f4dce2bda1.', null, null, null, null, null, null, '答：由STATIC修饰的变量称为类变量，当系统在程序中第一次遇到一个类时，便会拷贝一份所有的类变量在内存里。然后那些由此类产生的实例便可分享这些类变量。  实例变量指不是用STATIC修饰的变量，可供实例方法使用。实例变量会复制于每一个从类产生的实例中。', '', '0', '2017-12-26 23:00:01', '58', '1');
INSERT INTO `topic` VALUES ('6498', '4', '4', 'JVM内存分哪几个区', '1587c5c1-915d-45ae-8f15-8add5a513abd.', null, null, null, null, null, null, '方法区、虚拟机栈、本地方法栈、堆、程序计数器', '', '0', '2017-12-26 23:00:08', '50', '1');
INSERT INTO `topic` VALUES ('6499', '3', '4', 'Java的成员变量修饰符有哪几种？其中哪种修饰符限定的范围最大？', '709c2b20-1cba-4cb8-989f-aeefbca22b26.', null, null, null, null, null, null, ' 答：成员变量的修饰符有PUBLIC、PROTECTED、PRIVATE、STATIC、FINAL、TRANSIENT、VOLATILE七种。PUBLIC修饰符的限定范围最大。', '', '0', '2017-12-26 23:00:16', '58', '1');
INSERT INTO `topic` VALUES ('6500', '4', '1', '如何取得数据源。 ', 'aaecd4e0-0687-4494-8255-0375f5bdd199.', '通过Http ', '通过Http ', 'JNDI ', '通过Connection对象 ', '', '', 'C', '', '0', '2017-12-26 23:00:17', '64', '1');
INSERT INTO `topic` VALUES ('6501', '3', '4', '说明对象的基本概念和主要特征？', 'f04545f9-4e4c-406a-8314-71042340c760.', null, null, null, null, null, null, '.对象是对客观世界实体及其实体关系的抽象。特点：（1）以数据为中心；(2)实现了数据封装；（3）模块独立性好；（4）对象是主动的；（5）本质上具有并行性。', '', '0', '2017-12-26 23:00:29', '58', '1');
INSERT INTO `topic` VALUES ('6502', '33', '1', '下列哪一个接口定义了用于查找、创建和删除EJB实例 ', '553b1333-10e6-48c4-99ab-160bd56d0421.', 'Home ', 'Remote ', 'Local ', 'Message ', '', '', 'A', '', '0', '2017-12-26 23:00:39', '64', '1');
INSERT INTO `topic` VALUES ('6503', '3', '4', '抽象类和抽象fangfa有什么特点？', 'e1c33572-d77b-40fd-adb3-9d033ebe575f.', null, null, null, null, null, null, '答：① 一个抽象类里可以没有抽象方法，但含有抽象方法的类必定为抽象类。  ② 抽象类不能被实例化为对象，而只能作为其它类的超类，并且必须被继承。  ③ 若某子类继承自一个抽象类，而该子类不是抽象类，则子类需用覆盖的方式来实例化超类中的所有抽象方法。抽象方法可再与PUBLIC、PROTECTED复合使用，但不能与FINAL、PRIVATE和STATIC复合使用。 ④ 抽象方法只有方法声明，不能有方法体。', '', '0', '2017-12-26 23:00:54', '58', '1');
INSERT INTO `topic` VALUES ('6504', '33', '1', '在服务器的网络编程中，解决会话跟踪的方法有： ', '554b1165-2c10-4d69-b847-afc5db695402.', '使用Cookie。 ', '使用URL重写。 ', '使用隐藏的表单域。 ', '以上方法都不能单独使用。 ', '', '', 'ABC', '', '0', '2017-12-26 23:01:12', '64', '1');
INSERT INTO `topic` VALUES ('6505', '3', '4', '接口和抽象类有什么qubie？', '18fd4152-c88f-4b43-8f75-6100cdf267e2.', null, null, null, null, null, null, '答：从本质上讲，接口是一种特殊的抽象类，然而它们又有区别： ①接口只包含常量，而抽象类则不一定。  ②接口中不能有非抽象的方法，但抽象类中可以有。 ③一个类能实现多个接口，但只能有一个父类。  ④接口并不属于继承结构，它实际与继承无关，无关的类可以实现同一个接口。', '', '0', '2017-12-26 23:01:23', '58', '1');
INSERT INTO `topic` VALUES ('6506', '4', '4', 'JVM内存中方法区的作用是什么?', '64b0712c-9d01-4b20-9279-ed9090933049.', null, null, null, null, null, null, '1. 有时候也成为永久代，在该区内很少发生垃圾回收，但是并不代表不发生GC，在这里进行的GC主要是对方法区里的常量池和对类型的卸载\r\n2. 方法区主要用来存储已被虚拟机加载的类的信息、常量、静态变量和即时编译器编译后的代码等数据。\r\n3. 该区域是被线程共享的。4. 方法区里有一个运行时常量池，用于存放静态编译产生的字面量和符号引用。该常量池具有动态性，也就是说常量并不一定是编译时确定，运行时生成的常量也会存在这个常量池中。', '', '0', '2017-12-26 23:01:27', '50', '1');
INSERT INTO `topic` VALUES ('6507', '33', '1', '与HttpSessionListener接口有关的方法是。 ', 'd43c3d17-4651-4f1e-906f-9b86ee0a67e6.', 'sessionInitialized() ', 'sessionCreated() ', 'sessionFinialized() ', 'sessionDestroyed() ', '', '', 'BD', '', '0', '2017-12-26 23:01:38', '64', '1');
INSERT INTO `topic` VALUES ('6508', '3', '4', '什么是包？为什么要使用包？', '2c0becb6-f98e-4f10-8f75-5951fdf5c46e.', null, null, null, null, null, null, '答：包（PACKAGE）是类的容器。由于JAVA编译器为每个类生成一个字节码文件，且文件名与类名相同，因此同名的类有可能发生冲突。为了解决这一问题，JAVA提供包来管理类名空间。此外一旦创建了一个类，并想重复地使用它，那么把它放在一个包中将是非常有效的。', '', '0', '2017-12-26 23:01:39', '58', '1');
INSERT INTO `topic` VALUES ('6509', '33', '4', 'String数据类型是java里面的最基本的数据类型吗？', '60468d92-aaa3-435d-9a83-e05e747a5671.', null, null, null, null, null, null, '不是。JAVA中的基本数据类型只有8个：BYTE、SHORT、INT、LONG、FLOAT、DOUBLE、CHAR、BOOLEAN；除了基本类型（PRIMITIVE TYPE）和枚举类型（ENUMERATION TYPE），剩下的都是引用类型（REFERENCE TYPE）。', '', '0', '2017-12-26 23:01:52', '65', '1');
INSERT INTO `topic` VALUES ('6510', '3', '4', '简述在类的继承关系中，子类可以继承父类的哪些成员，不能继承的有哪些成员。 ', 'd2e4fd29-b32e-4835-9d0e-0f897dca6e5f.', null, null, null, null, null, null, '答：可继承：①父类中公开级的成员；②父类中保护级的成员；③如果子类和父类在同一个包中，则子类继承父类中缺省的包访问级的成员。  不可继承：④父类中私有级的成员；⑤不在同一包的缺省成员和父类的同名成员。', '', '0', '2017-12-26 23:01:58', '58', '1');
INSERT INTO `topic` VALUES ('6511', '33', '1', '关于JSP生命周期的叙述，下列哪些为真？ ', 'c47da005-3c60-4678-8d3a-3f00cf8f3a1c.', '关于JSP生命周期的叙述，下列哪些为真？ ', '关于JSP生命周期的叙述，下列哪些为真？ ', '关于JSP生命周期的叙述，下列哪些为真？ ', '.每当用户端运行JSP时，jspDestroy()方法都会运行一次 ', '', '', 'AC', '', '0', '2017-12-26 23:02:19', '64', '1');
INSERT INTO `topic` VALUES ('6512', '3', '4', '.Error类和Exception类有什么qubie？', '547863ca-49d2-4619-b1c0-496d83b46d0d.', null, null, null, null, null, null, '答：异常，是指由于程序运行时发生错误，从而导致程序错误结束。  在进行程序设计时，错误的产生是不可避免的，没有异常处理代码的程序，在运行时发生错误则可能非正常结束，引起严重问题。因此，JAVA给程序员提供了处理运行时错误的功能，称为异常处理。', '', '0', '2017-12-26 23:02:26', '58', '1');
INSERT INTO `topic` VALUES ('6513', '33', '4', 'float f=9.6对不对', '654e6bb1-fe64-409b-831d-99b15fdc7a08.', null, null, null, null, null, null, '不正确。3.4是双精度数，将双精度型（DOUBLE）赋值给浮点型（FLOAT）属于下转型（DOWN-CASTING，也称为窄化）会造成精度损失，因此需要强制类型转换FLOAT F =(FLOAT)3.4; 或者写成FLOAT F =3.4F;。', '', '0', '2017-12-26 23:02:33', '65', '1');
INSERT INTO `topic` VALUES ('6514', '33', '1', '下列哪个为JSP的隐含对象。 ', '7a24326d-340c-44e3-90a0-54cb385140d2.', 'env ', 'page ', 'jspinfo ', '.jspinfo ', '', '', 'B', '', '0', '2017-12-26 23:02:59', '64', '1');
INSERT INTO `topic` VALUES ('6515', '4', '4', 'java语言有哪些特点？', '282182e2-89ca-4f41-a74a-872af04f5a8e.', null, null, null, null, null, null, '简单性、面向对象、分布式、解释型、健壮、安全、与体系结构无关、可移植、高性能、多线程和动态执行。', '', '0', '2017-12-26 23:03:19', '58', '1');
INSERT INTO `topic` VALUES ('6516', '4', '1', '下面的那一个不属于MVC模式中的对象？ ', 'ab2bfe0c-13c4-472e-ac73-95cb47a8b78c.', 'Model ', 'View ', 'Collection ', 'Controller ', '', '', 'C', '', '0', '2017-12-26 23:03:33', '64', '1');
INSERT INTO `topic` VALUES ('6517', '3', '4', 'java平台分为几类，它们的适用范围是什么？', 'ebe507aa-6a5a-4a3e-813f-5eb3e4cdcf3e.', null, null, null, null, null, null, 'J2EE 为企业计算提供一个应用服务器运行和开发平台。 J2SE 为台式机和工作站提供一个开发和运行平台。  J2ME 为消费电子产品提供一个运行平台，使得JAVA程序能在手机、机顶盒和PDA产品 上运行。', '', '0', '2017-12-26 23:03:34', '58', '1');
INSERT INTO `topic` VALUES ('6518', '3', '4', '哪些数据类型可以充当swith语句的条件？ ', '206e7e7c-463c-4bee-ba10-ec1ccd9515f6.', null, null, null, null, null, null, '表达式的返回值类型必须是：BYTE SHORT INT CHAR ，是基本数据类型而不是包装类', '', '0', '2017-12-26 23:03:45', '58', '1');
INSERT INTO `topic` VALUES ('6519', '33', '4', '请回答一下short s1 = 1 short s1 = 1 s1 += 1对不对', 'cff782fa-c8de-427a-b19c-65ce98a954c9.', null, null, null, null, null, null, '对于SHORT S1 = 1; S1 = S1 + 1;由于1是INT类型，因此S1+1运算结果也是INT 型，需要强制转换类型才能赋值给SHORT型。而SHORT S1 = 1; S1 += 1;可以正确编译，因为S1+= 1;相当于S1 = (SHORT)(S1 + 1);其中有隐含的强制类型转换', '', '0', '2017-12-26 23:03:54', '65', '1');
INSERT INTO `topic` VALUES ('6520', '33', '1', '要创建一个EJB，必须要至少编写哪些Java类和接口？ ', '178d6ccd-7f03-4245-99ec-a8882b423000.', ' 定义远程(或业务)接口 ', '定义本地接口 ', ' 定义Bean接口 ', ' 定义Bean接口 ', '', '', 'ABC', '', '0', '2017-12-26 23:03:58', '64', '1');
INSERT INTO `topic` VALUES ('6521', '3', '4', 'Java编程规范？', 'f6946725-b4ba-475e-b370-9d79739dab94.', null, null, null, null, null, null, '1）有多个IMPORT语句时，先写JAVA包，后写JAVAX，最后写其他公司和自己定义的包。 （2）命名规则：\r\n  包名中的字母小写。\r\n  类名、接口名中每个单词首字母大写。方法名、变量名第一个单词首字母小写，后面单词首字母大写。\r\n 常量中每个字母大写。 （3）适当保持缩进，便于阅读。 （4）有一定的注释量（20%--50%）。', '', '0', '2017-12-26 23:04:02', '58', '1');
INSERT INTO `topic` VALUES ('6522', '33', '2', 'XML 是一种元语言, 可以用它来描述其他语言。 ', '8ce0c687-e738-4c98-a1cd-5b295211a6d1.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 23:04:14', '64', '1');
INSERT INTO `topic` VALUES ('6523', '3', '4', '构造方法和抽象？ 构造方法：', '40673a82-fa67-4e1d-af3c-67d4445f88f2.', null, null, null, null, null, null, '有与类相同的名称； 不含返回值；  不能在方法中用 RETURN 语句返回一个值；  当自定义了构造方法后，编译器将不再自动创建不带参数的构造方法 。 抽象：  从被研究对象中舍弃个别的、非本质的或者与研究主旨无关的次要特征；抽取与研究有关的共性内容进行考察，形成对研究问题正确的、简明扼要的认识。', '', '0', '2017-12-26 23:04:20', '58', '1');
INSERT INTO `topic` VALUES ('6524', '3', '4', '对象位于内存何处？声明能够引用对象的实质是什么？', '90ed78d0-6b7f-4257-b657-0af99030d1f1.', null, null, null, null, null, null, '（1） 对象位于堆内存中。  （2） 声明能够引用对象的实质：在栈中保留了对象的地址。', '', '0', '2017-12-26 23:04:30', '58', '1');
INSERT INTO `topic` VALUES ('6525', '33', '4', '谈谈你对解释内存中的栈(stack)、堆(heap)和静态区(static area)的用法的理解。', '070878a5-f908-41e8-a852-e9522047bfc4.', null, null, null, null, null, null, '：通常我们定义一个基本数据类型的变量，一个对象的引用，还有就是函数调用的现场保存都使用内存中的栈空间；而通过NEW关键字和构造器创建的对象放在堆空间；程序中的字面量（LITERAL）如直接书写的100、”HELLO”和常量都是放在静态区中。栈空间操作起来最快但是栈很小，通常大量的对象都是放在堆空间，理论上整个内存没有被其他进程使用的空间甚至硬盘上的虚拟内存都可以被当成堆空间来使用。', '', '0', '2017-12-26 23:04:36', '65', '1');
INSERT INTO `topic` VALUES ('6526', '33', '1', '哪一个不是EL定义的隐式对象', '60aa448f-b8d9-405e-b885-d155c96a3c3e.', 'ookie ', 'geContext ', 'attributes ', ' initParam ', '', '', 'C', '', '0', '2017-12-26 23:04:41', '64', '1');
INSERT INTO `topic` VALUES ('6527', '4', '4', '虚拟机栈的作用是什么?', '5dc2cfbb-0f2a-4b16-8902-18415582c395.', null, null, null, null, null, null, '1. 虚拟机栈也就是我们平常所称的栈内存,它为JAVA方法服务，每个方法在执行的时候都会创建一个栈帧，用于存储局部变量表、操作数栈、动态链接和方法出口等信息。\r\n2. 虚拟机栈是线程私有的，它的生命周期与线程相同。\r\n3. 局部变量表里存储的是基本数据类型、RETURNADDRESS类型（指向一条字节码指令的地址）和对象引用，这个对象引用有可能是指向对象起始地址的一个指针，也有可能是代表对象的句柄或者与对象相关联的位置。局部变量所需的内存空间在编译器间确定\r\n4.操作数栈的作用主要用来存储运算结果以及运算的操作数，它不同于局部变量表通过索引来访问，而是压栈和出栈的方式\r\n5.每个栈帧都包含一个指向运行时常量池中该栈帧所属方法的引用，持有这个引用是为了支持方法调用过程中的动态连接.动态链接就是将常量池中的符号引用在运行期转化为直接引用。', '', '0', '2017-12-26 23:04:43', '50', '1');
INSERT INTO `topic` VALUES ('6528', '3', '4', '基本数据类型和对象作为参数传递的不同？', '163863f2-bacb-43b5-892e-994272bb34f0.', null, null, null, null, null, null, '（1） 基本数据类型作为参数在方法中传递的是值传递。  （2） 对象是引用传递，当对象作为参数传递时，传递的是对象的地址。', '', '0', '2017-12-26 23:04:45', '58', '1');
INSERT INTO `topic` VALUES ('6529', '3', '4', ' 对象在什么时候成为垃圾对象并被释放？', '20cc4021-2841-4979-894a-e7a79f284919.', null, null, null, null, null, null, '（1） 对象没有任何引用时，对象才能成为垃圾对象。  （2） 当对象成为垃圾时，系统并不是主动释放对象所占用的资源，而是在资源不够  的情况下才能够进行释放。 ', '', '0', '2017-12-26 23:04:54', '58', '1');
INSERT INTO `topic` VALUES ('6530', '4', '4', 'java虚拟机中本地方法栈的作用是什么？', 'cc0d6862-51a4-45d2-b666-80a4ba7dabd9.', null, null, null, null, null, null, '本地方法栈和虚拟机栈类似，只不过本地方法栈为NATIVE方法服务', '', '0', '2017-12-26 23:05:21', '50', '1');
INSERT INTO `topic` VALUES ('6531', '33', '1', '下面哪些属于JSTL中的表达式操作标签', '7d3f6c12-b061-4888-bf5a-f8cd1c8bb86e.', '．<c:out> ', '．<c:if> ', '．<c:catch> ', '．<c:catch> ', '', '', 'A', '', '0', '2017-12-26 23:05:21', '64', '1');
INSERT INTO `topic` VALUES ('6532', '33', '4', '简述Cookie的设置及获取过程\r\n\r\n', 'd9a4df70-468f-4ed3-9015-22314c054081.', null, null, null, null, null, null, '设置COOKIE的值：\r\nSETCOOKIE(名称，值，保存时间，有效域); \r\n\r\n获取值：$_COOKIE[\'名称\']', '', '0', '2017-12-26 23:05:44', '62', '1');
INSERT INTO `topic` VALUES ('6533', '4', '1', 'Struts框架可以支持以下哪种程序开发语言', 'fc367dff-6984-40a8-91d6-f9396e7e2367.', 'C ', 'C++ ', '\r\njava', 'C# ', '', '', 'C', '', '0', '2017-12-26 23:05:54', '64', '1');
INSERT INTO `topic` VALUES ('6534', '4', '4', 'JVM内存中堆的作用', 'd67c0c76-6f03-4363-bc17-497b3aa8cccc.', null, null, null, null, null, null, 'JAVA堆是所有线程所共享的一块内存，在虚拟机启动时创建，几乎所有的对象实例都在这里创建，因此该区域经常发生垃圾回收操作', '', '0', '2017-12-26 23:06:08', '50', '1');
INSERT INTO `topic` VALUES ('6537', '3', '4', ' static 修饰符作用？', '2252ddf1-aac3-419c-b6e6-e26cb783dffc.', null, null, null, null, null, null, '\r\n  修饰的成员方法表示静态方法，可以直接通过类名来访问。\r\n 修饰的程序代码块表示静态代码块，当JAVA虚拟机加载类 时，就会执行该', '', '0', '2017-12-26 23:06:45', '58', '1');
INSERT INTO `topic` VALUES ('6538', '33', '1', 'javax.Servlet的包中，属于类的是', '5d91fe06-1c6d-4640-af10-977e4a094067.', 'Servlet ', 'GenericServlet ', 'ServletRequest ', 'ServletContext ', '', '', 'B', '', '0', '2017-12-26 23:06:53', '64', '1');
INSERT INTO `topic` VALUES ('6539', '3', '4', ' 面向对象的主要特征是什么？', '6d28e20d-09bd-4d05-9287-8eda39ec7d94.', null, null, null, null, null, null, '8、 对象在什么时候成为垃圾对象并被释放？ （1） 对象没有任何引用时，对象才能成为垃圾对象。  （2） 当对象成为垃圾时，系统并不是主动释放对象所占用的资源，而是在资源不够  的情况下才能够进行释放。 9、 FINAL修饰符的作用？\r\n  修饰的类不能被继承\r\n 修饰的方法不可重写\r\n  修饰的变量最多只能赋值一次，值不可变   10、 STATIC 修饰符作用？\r\n  修饰的成员方法表示静态方法，可以直接通过类名来访问。\r\n 修饰的程序代码块表示静态代码块，当JAVA虚拟机加载类 时，就会执行该 代码块。\r\n  所修饰的成员变量和成员方法标明归某个类所有，它不依赖 于类的特定实  例，被类的所有实例共享。 11、 面向对象的主要特征是什么？  封装：利用类将数据与方法绑定在一起，数据被保存在类的内部，系统只有通过  被授权的方法才能够访问数据。  继承：JAVA是通过EXTENDS关键字来实现，在定义类的时候使用EXTENDS关键字指  明新定义类的父类，在两个类之间建立继承关系。 多态：多态是指一个程序中同名的不同方法共存的情况。', '', '0', '2017-12-26 23:07:12', '58', '1');
INSERT INTO `topic` VALUES ('6540', '33', '4', '论述java里的数据类型数组有没有length()的方法？String有没有length()的方法？', 'c9d35783-e0f4-4132-b65f-4ee7e919cf96.', null, null, null, null, null, null, '数组没有LENGTH()方法，有LENGTH 的属性。STRING 有LENGTH()方法。JAVASCRIPT中，获得字符串的长度是通过LENGTH属性得到的，这一点容易和JAVA混淆。', '', '0', '2017-12-26 23:07:13', '65', '1');
INSERT INTO `topic` VALUES ('6541', '4', '4', 'java虚拟机中的程序计数器的作用', '4472a4e3-cc24-4a60-a0ff-af8a8c6b09f8.', null, null, null, null, null, null, '内存空间小，字节码解释器工作时通过改变这个计数值可以选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理和线程恢复等功能都需要依赖这个计数器完成。该内存区域是唯一一个JAVA虚拟机规范没有规定任何OOM情况的区域。', '', '0', '2017-12-26 23:07:25', '50', '1');
INSERT INTO `topic` VALUES ('6542', '26', '1', 'Http缺省的请求方法是', '47a5b834-ebaa-4a80-a35f-3ed267d2cf59.', 'UT ', 'GET ', 'POST ', 'TRACE ', '', '', 'B', '', '0', '2017-12-26 23:07:30', '64', '1');
INSERT INTO `topic` VALUES ('6543', '3', '4', 'Object有哪些fangfa？', 'dfca0054-f5e4-425d-bddf-c22558dde37f.', null, null, null, null, null, null, 'CLONE() EQUALS() FINALIZE() HASHCODE() TOSTRING() NOTIFY() WAIT()', '', '0', '2017-12-26 23:07:36', '58', '1');
INSERT INTO `topic` VALUES ('6544', '3', '4', '什么是重载和覆盖', 'b6f633e3-2ef6-4dfb-a515-f1db1721fd18.', null, null, null, null, null, null, '重载：在类中定义了多个同名而不同参数的成员方法，称为重载。 覆盖：子类对父类的参数相同，返回类型相同的同名方法进行重新定义，称为覆盖。', '', '0', '2017-12-26 23:07:48', '58', '1');
INSERT INTO `topic` VALUES ('6545', '4', '4', '如和判断一个对象是否存活?(或者GC对象的判定方法)', 'fa822861-853f-4a2a-aaf9-4f90da5e763c.', null, null, null, null, null, null, '1. 引用计数法2.可达性算法(引用链法)', '', '0', '2017-12-26 23:07:53', '50', '1');
INSERT INTO `topic` VALUES ('6546', '3', '4', 'this与super用法？', '62d0974b-94f8-4a5d-93ab-4671dbd6be2f.', null, null, null, null, null, null, 'THIS：  THIS.域变量 THIS. 成员方法 THIS（参数） THIS指代当前对象 SUPER:  SUPER.域变量 SUPER.成员方法 SUPER（参数）', '', '0', '2017-12-26 23:08:05', '58', '1');
INSERT INTO `topic` VALUES ('6547', '33', '1', '在XML中用于注释的符号是', '3e4199af-7ea3-4794-b207-6271178695af.', '<!– –> ', '<?– –?> ', '<% %> ', '<!– –!> ', '', '', 'A', '', '0', '2017-12-26 23:08:09', '64', '1');
INSERT INTO `topic` VALUES ('6548', '3', '4', '子类对象实例化过程？', '80472ef5-4227-4abb-92b1-601fcfe1bf7e.', null, null, null, null, null, null, '（1） 为对象分配内存空间，对域变量进行默认初始化。2） 绑定构造方法，将NEW对象中的参数传递给构造方法的形式参数。  （3） 调用THIS或者SUPER，二者必居其一，不能同时存在。 （4） 进行域变量的显示初始化。 （5） 执行当前构造方法中的程序代码。', '', '0', '2017-12-26 23:08:20', '58', '1');
INSERT INTO `topic` VALUES ('6549', '33', '2', 'DTD与XML Schema都是XML文档', '2dcda63f-b4a0-4db1-ad7a-08808c276422.', null, null, null, null, null, null, '错误', '', '0', '2017-12-26 23:08:31', '64', '1');
INSERT INTO `topic` VALUES ('6550', '4', '4', '接口的hanyi？', '201fdca2-3773-42bb-9e62-63974840506f.', null, null, null, null, null, null, '1） 可以被引用调用的方法  （2） 同“类”概念地位相当的专有INTERFACE概念。', '', '0', '2017-12-26 23:08:35', '58', '1');
INSERT INTO `topic` VALUES ('6551', '3', '4', '引用计数法的用法和功能', '83dd2c6d-909e-46e6-be1b-cc7c3d94027c.', null, null, null, null, null, null, '所谓引用计数法就是给每一个对象设置一个引用计数器，每当有一个地方引用这个对象时，就将计数器加一，引用失效时，计数器就减一。当一个对象的引用计数器为零时，说明此对象没有被引用，也就是“死对象”,将会被垃圾回收.\r\n引用计数法有一个缺陷就是无法解决循环引用问题，也就是说当对象A引用对象B，对象B又引用者对象A，那么此时A,B对象的引用计数器都不为零，也就造成无法完成垃圾回收，所以主流的虚拟机都没有采用这种算法。', '', '0', '2017-12-26 23:08:53', '50', '1');
INSERT INTO `topic` VALUES ('6552', '3', '4', ' Java程序分为哪两大类？它们的主要特点是什么？', '7d599b81-4ebd-455f-8f06-f0c7084e6db4.', null, null, null, null, null, null, '答：（1）JAVA应用程序（APPLICATION），以MAIN()方法作为程序入口，由JAVA解释器加载执行。（2）JAVA小应用程序（APPLET），没有MAIN()方法，由浏览器或APPLETVIEWER加载执行。', '', '0', '2017-12-26 23:09:09', '58', '1');
INSERT INTO `topic` VALUES ('6553', '33', '1', '如果没有指定Cookie的时效，那么默认的时效是。', 'be3c9906-81e7-41f6-b1fc-08e64556ba96.', '一天 ', '永不过期 ', '会话级别 ', '一分钟 ', '', '', 'C', '', '0', '2017-12-26 23:09:16', '64', '1');
INSERT INTO `topic` VALUES ('6554', '3', '4', '开发与运行Java程序需要经过哪些主要步骤和过程？ ', '08ac5e34-b4ba-47a5-909e-2a1795703e63.', null, null, null, null, null, null, '（1）编写JAVA源文件:使用文本编辑器（EDIT或记事本），扩展名为.JAVA  （2）编译JAVA源文件:使用JAVA编译器（JAVAC.EXE）。得到字节码文件*.CLASS  （3）运行JAVA程序:JAVA应用程序使用JAVA解释器（JAVA.EXE）执行字节码文件；', '', '0', '2017-12-26 23:09:26', '58', '1');
INSERT INTO `topic` VALUES ('6555', '4', '4', 'Spring有哪些优点？', 'eeed2de9-b198-48ab-836b-8f9b0ac5ac81.', null, null, null, null, null, null, '1.轻量级\r\n2.控制反转(IOC)\r\n3.面向切面编程(AOP)等', '\r\n\r\n    轻量级：Spring在大小和透明性方面绝对属于轻量级的，基础版本的Spring框架大约只有2MB。\r\n\r\n    控制反转(IOC)：Spring使用控制反转技术实现了松耦合。依赖被注入到对象，而不是创建或寻找依赖对象。\r\n\r\n    面向切面编程(AOP)： Spring支持面向切面编程，同时把应用的业务逻辑与系统的服务分离开来。\r\n\r\n    容器：Spring包含并管理应用程序对象的配置及生命周期。\r\n\r\n    MVC框架：Spring的web框架是一个设计优良的web MVC框架，很好的取代了一些web框架。\r\n\r\n    事务管理：Spring对下至本地业务上至全局业务(JAT)提供了统一的事务管理接口。\r\n\r\n    异常处理：Spring提供一个方便的API将特定技术的异常(由JDBC, Hibernate, 或JDO抛出)转化为一致的、Unchecked异常。\r\n', '0', '2017-12-26 23:09:31', '62', '1');
INSERT INTO `topic` VALUES ('6556', '33', '1', '.&lt;?xml version=”1.0″ encoding=”GB2312″?&gt; \r\n\r\n&lt;!ELEMENT Customer EMPTY&gt; \r\n\r\n&lt;!ATTLIST Customer称呼 CDATA #IMPLIED姓名 CDATA #REQUIRED职位 CDATA #REQUIRED&gt;关于上述DTD定义的描述正确的是', 'c06643e5-cb03-4ee9-93eb-5b4790f881eb.', 'Customer元素能包含子元素，并且能为空 ', 'Customer元素能包含文本，并且能为空 ', 'Customer元素不能包含文本，也不能包含子元素 ', 'Customer元素的所有实例的“称呼”属性必须有值，不能为空 ', '', '', 'C', '', '0', '2017-12-26 23:09:43', '64', '1');
INSERT INTO `topic` VALUES ('6557', '3', '4', '什么叫标识符？标识符的规则是什么？ ', '5c663a9a-18cf-474b-ab1c-bd2bff537ddd.', null, null, null, null, null, null, '①用来标识类名、变量名、、方法名、类型名、数组名、文件名的有效字符序列。  ②由字母、下划线、美元符号和数字组成，并且第一个字符不能是数字字符，而且关键字不能作为标识符。 ', '', '0', '2017-12-26 23:09:43', '58', '1');
INSERT INTO `topic` VALUES ('6558', '3', '4', '类中的实例变量在什么时候会被分配内存空间？', 'ad9eeaaf-5ae7-4c90-b137-c74ed88d63c6.', null, null, null, null, null, null, '当该类创建对象之后，实例变量才会被分配相应的内存空间。', '', '0', '2017-12-26 23:10:03', '58', '1');
INSERT INTO `topic` VALUES ('6559', '33', '1', '实现现下列哪一种接口的对象，并不需要在web.xml文件内进行额外的设定，Servlet容器就能够回应该对象加入HTTP会话所发生的事件？(', '33c39eeb-6227-44e7-a7db-514d7b5a44ed.', 'ServletContextListener ', 'HttpSessionListener ', 'HttpSessionAttributeListener ', 'HttpSessionBindingListener ', '', '', 'D', '', '0', '2017-12-26 23:10:08', '64', '1');
INSERT INTO `topic` VALUES ('6560', '33', '4', '构造器可以重写（override）吗', 'adf2f67e-e366-4131-912a-44b9f0c6d0ac.', null, null, null, null, null, null, '构造器不能被继承，因此不能被重写，但可以被重载。', '', '0', '2017-12-26 23:10:20', '65', '1');
INSERT INTO `topic` VALUES ('6561', '3', '4', '简述Java语言中抽象类和接口概念的差异和使用方式。', 'b2b3a496-adca-4da4-8b2e-498469a05696.', null, null, null, null, null, null, '使用ABSTRACT修饰的类叫做抽象类，抽象类使用EXTENDS关键字继承，而接口使用IMPLEMENTS实现。 接口是一组方法集，接口中包含的方法都是抽象方法，定义方法体的任务留给实现该接口的类去完成。  接口是用来实现类间（不相关类）多重继承功能 的结构。（接口的作用） 接口是JAVA中的一种引用数据类型类型，用INTERFACE关键字来定义。 接口是一种特殊的“类”，一种特殊的“抽象类”。 一个类可以实现多个接口。  接口中的所有方法都默认是PUBLIC ABSTRACT的，并且只有方法头和参数列表，没有方法体。   接口中的所有变量都默认是PUBLIC STATIC FINAL的。接口中没有构造方 法。   接口可以继承，而且可以多重继承。  接口中的方法体可以由JAVA语言书写，也可以由其他语言书写，此时接口方法需要用NATIVE关键字修饰', '', '0', '2017-12-26 23:10:23', '58', '1');
INSERT INTO `topic` VALUES ('6562', '33', '1', '下列哪个为JSP的小脚本的标签？(', 'a66235b8-f45a-4f9e-8d2f-10ef042299f4.', '．<% %> ', '．<% %> ', '．<%! %> ', '．<%! %> ', '', '', 'A', '', '0', '2017-12-26 23:10:29', '64', '1');
INSERT INTO `topic` VALUES ('6564', '33', '1', '以下不属于JSP的标准指令的是', '7873e477-4731-45d5-b31f-ac4ab14e922b.', 'Taglib ', 'Include ', 'Import ', 'Page ', '', '', 'C', '', '0', '2017-12-26 23:11:02', '64', '1');
INSERT INTO `topic` VALUES ('6565', '3', '4', '什么是面向对象技术？它有什么优点？', '83de4266-d655-4a24-ae2d-9b30661a3871.', null, null, null, null, null, null, '答：程序设计者考虑的是对象的描述，对象间的关系，类的管理、什么时候什么地方调用对象的那一种方法。最大的优点是面向对象编程能有效地支持重用，使超大规模的程序也变得相对容易维护。', '', '0', '2017-12-26 23:11:02', '58', '1');
INSERT INTO `topic` VALUES ('6566', '3', '4', 'Java中字符数组与字符串有什么区别？', '6e74f874-1126-40c8-a39d-9afee864356d.', null, null, null, null, null, null, '字符数组用CHAR[]定义，字符串用STRING定义，字符数组是数组，字符串是类。', '', '0', '2017-12-26 23:11:19', '58', '1');
INSERT INTO `topic` VALUES ('6567', '33', '1', '对于每一个网站访问用户都要访问的变量，应该将它设为________变量。', '253455d4-8658-4126-b56a-8c522c465bf9.', 'Session ', 'Reques ', 'Response ', 'Application ', '', '', 'D', '', '0', '2017-12-26 23:11:24', '64', '1');
INSERT INTO `topic` VALUES ('6568', '3', '4', '可达性算法(引用链法)的用法和功能', '701dfc14-d9e6-46a5-a8b4-fa5ac45fc707.', null, null, null, null, null, null, '该算法的思想是：从一个被称为GC ROOTS的对象开始向下搜索，如果一个对象到GC ROOTS没有任何引用链相连时，则说明此对象不可用。\r\n在JAVA中可以作为GC ROOTS的对象有以下几种:\r\n\r\n虚拟机栈中引用的对象\r\n方法区类静态属性引用的对象\r\n方法区常量池引用的对象\r\n本地方法栈JNI引用的对象\r\n虽然这些算法可以判定一个对象是否能被回收，但是当满足上述条件时，一个对象比不一定会被回收。当一个对象不可达GC ROOT时，这个对象并 \r\n不会立马被回收，而是出于一个死缓的阶段，若要被真正的回收需要经历两次标记\r\n如果对象在可达性分析中没有与GC ROOT的引用链，那么此时就会被第一次标记并且进行一次筛选，筛选的条件是是否有必要执行FINALIZE()方法。当对象没有覆盖FINALIZE()方法或者已被虚拟机调用过，那么就认为是没必要的。\r\n如果该对象有必要执行FINALIZE()方法，那么这个对象将会放在一个称为F-QUEUE的对队列中，虚拟机会触发一个FINALIZE()线程去执行，此线程是低优先级的，并且虚拟机不会承诺一直等待它运行完，这是因为如果FINALIZE()执行缓慢或者发生了死锁，那么就会造成F-QUEUE队列一直等待，造成了内存回收系统的崩溃。GC对处于F-QUEUE中的对象进行第二次被标记，这时，该对象将被移除”即将回收”集合，等待回收。', '', '0', '2017-12-26 23:11:34', '50', '1');
INSERT INTO `topic` VALUES ('6569', '3', '4', '怎样区分应用程序和小应用程序？应用程序的主类或小应用程序的主类必须用\r\npublic修 饰吗？', '3f666501-4cfa-43e4-bf4a-e440e21c4137.', null, null, null, null, null, null, '程序代码中有无MAIN()方法。是 ', '', '0', '2017-12-26 23:11:34', '58', '1');
INSERT INTO `topic` VALUES ('6570', '3', '4', '什么叫关键字？请说出5个关键字。', 'ee3cde09-72ca-472f-9ea3-2057aec7becb.', null, null, null, null, null, null, '关键字是由系统定义的一些字符串，代表语言中的特定含义。CLASS、PUBLIC、FINAL、INT、SHORT、LONG。。。。', '', '0', '2017-12-26 23:11:46', '58', '1');
INSERT INTO `topic` VALUES ('6571', '33', '1', 'EJB类库存在于Java的哪个版本中？', '9f68c808-b2ab-4d2d-8a0e-7b02fae078d5.', 'J2SE ', 'J2EE ', '2ME ', 'J2NE ', '', '', 'B', '', '0', '2017-12-26 23:11:48', '64', '1');
INSERT INTO `topic` VALUES ('6572', '3', '4', '简述java垃圾回收机制?', '1e03ffa6-8646-4b31-baab-56e8b2fe2f9c.', null, null, null, null, null, null, '在JAVA中，程序员是不需要显示的去释放一个对象的内存的，而是由虚拟机自行执行。在JVM中，有一个垃圾回收线程，它是低优先级的，在正常情况下是不会执行的，只有在虚拟机空闲或者当前堆内存不足时，才会触发执行，扫面那些没有被任何引用的对象，并将它们添加到要回收的集合中，进行回收。', '', '0', '2017-12-26 23:11:54', '50', '1');
INSERT INTO `topic` VALUES ('6573', '33', '4', '对象值相同(equals(y)==true)，但却可有不同的 code，', '5c9a1fd6-90e2-4164-add8-8b3047b092de.', null, null, null, null, null, null, '不对，如果两个对象X和Y满足X.EQUALS(Y) == TRUE，它们的哈希码（HASH CODE）应当相同。JAVA对于EQAULS方法和HASHCODE方法是这样规定的：(1)如果两个对象相同（EQUALS方法返回TRUE），那么它们的HASHCODE值一定要相同；(2)如果两个对象的HASHCODE相同，它们并不一定相同。当然，你未必要按照要求去做，但是如果你违背了上述原则就会发现在使用容器时，相同的对象可以出现在SET集合中，同时增加新元素的效率会大大下降（对于使用哈希存储的系统，如果哈希码频繁的冲突将会造成存取性能急剧下降）', '', '0', '2017-12-26 23:12:09', '65', '1');
INSERT INTO `topic` VALUES ('6574', '3', '4', '方法重载与方法重写的区别是什么？', '9b80d1bd-6555-4262-94a8-9c636d859e68.', null, null, null, null, null, null, '方法重载是指在一个类中，多个方法的方法名相同，但是参数列表不同。方法重写是指子类对父类方法的重写，要求不能改变方法名、参数个数及类型，以及返回值类型。', '', '0', '2017-12-26 23:12:21', '58', '1');
INSERT INTO `topic` VALUES ('6575', '3', '4', 'java中垃圾收集的方法有哪些?', '76827d8f-2bd6-4535-bc21-820fc8e07370.', null, null, null, null, null, null, '标记-清除:、复制算法:、标记-整理、分代收集 ', '', '0', '2017-12-26 23:12:30', '50', '1');
INSERT INTO `topic` VALUES ('6576', '3', '4', '什么是异常？Java中两种异常处理方法是什么？ ', 'ecca86f7-8e50-468b-855f-ebb610b948d1.', null, null, null, null, null, null, '异常即异常事件，指程序运行过程中出现的影响正常程序流程的事件。异常处理方法一是使用TRY-CATCH-FINALLY块结构在程序代码中捕获和处理异常。二是把异常对象通过向调用层抛出，一层层向上直至交给JAVA虚拟机处理，这种产生异常和转交异常的过程称为抛出异常。', '', '0', '2017-12-26 23:12:32', '58', '1');
INSERT INTO `topic` VALUES ('6577', '3', '4', '简述迭代器的操作过程', '61488940-9d95-4afd-9a46-4c4befa1d928.', null, null, null, null, null, null, '1）调用方法ITERATOR()要求容器返回一个ITERATOR对象； 2）使用NEXT()方法获得容器中的下一个元素； 3）使用HASNEXT()方法检查容器中是否还有元素； 4）使用REMOVE()方法删除迭代器新返回的元素。', '', '0', '2017-12-26 23:12:47', '58', '1');
INSERT INTO `topic` VALUES ('6578', '33', '1', '假设A.jsp内设定一个&lt;jsp:useBean&gt;元素： \r\n\r\n&lt;jsp:useBean id=”bean1” class=”myBean” /&gt; \r\n\r\n下列哪一个为真', 'e8db94ed-5ba4-4091-a3ea-3b1ff9c20d8d.', 'bean1的存取范围（scope）默认为application \r\n', '在HTTP会话内可以存取bean1 ', '只有在A.jsp内可以存取bean1 ', '在A.jsp所属的Web应用程序内均可存取bean1 ', '', '', 'C', '', '0', '2017-12-26 23:12:50', '64', '1');
INSERT INTO `topic` VALUES ('6579', '3', '4', '简述创建线程实例的两种方法。 ', '3c60c0b6-cffb-4260-90b3-a0ad4bb8f743.', null, null, null, null, null, null, '答：1）创建子类继承THREAD类并重写\r\nRUN()方法，然后使用子类创建一个线程实例；2）创建子类实现RUNNABLE接口并重写RUN()方法，创建子类对象并作为THREAD类的构造方法的参数，生成线程实例。  一维数组的创建有哪几种方式？请简要描述。两种，静态和动态。例如：INT[] A;  A = NEW INT[]{1,2,3,4,5};静态，INT[] A; A = NEW INT[5];动态', '', '0', '2017-12-26 23:13:01', '58', '1');
INSERT INTO `topic` VALUES ('6580', '4', '4', 'Spring常见创建对象的注解？', '135d7f35-ab3b-4517-a964-9414f71bd805.', null, null, null, null, null, null, '@COMPONENT@CONTROLLER@ SERVICE@ REPOSITORY', '', '0', '2017-12-26 23:13:02', '62', '1');
INSERT INTO `topic` VALUES ('6581', '33', '1', '在MVC设计模式中，JavaBean的作用是', '23aee598-f78f-403f-acb7-5897b832c6ff.', 'Controller ', 'Model ', '业务数据的封装 ', 'View ', '', '', 'B', '', '0', '2017-12-26 23:13:08', '64', '1');
INSERT INTO `topic` VALUES ('6582', '26', '1', '主机通过局域网直接接入Internet时应该配置（）。\r\n', 'dbb6e607-9dd5-4035-946a-64c515efd87b.', 'IP地址', '子网掩码', '默认网关和DNS服务器的IP地址默认网关和DNS服务器的IP地址', '以上选项都是 \r\n', '', '', 'D', '', '0', '2017-12-26 23:13:11', '18', '1');
INSERT INTO `topic` VALUES ('6583', '4', '4', 'Spring中用到的设计模式', '240314db-3afa-46fc-95a6-b4cb3bcd0d82.', null, null, null, null, null, null, '简单工厂、工厂方法、单例模式、适配器、包装器、代理、观察者、策略、模板方法', '', '0', '2017-12-26 23:13:26', '62', '1');
INSERT INTO `topic` VALUES ('6584', '33', '4', 'swih机构能作用在long 上，是否能作用在Strig上', 'e0bc6ac3-031e-421b-b075-9588b1c4dac8.', null, null, null, null, null, null, '在JAVA 5以前，SWITCH(EXPR)中，EXPR只能是BYTE、SHORT、CHAR、INT。从JAVA 5开始，JAVA中引入了枚举类型，EXPR也可以是ENUM类型，从JAVA 7开始，EXPR还可以是字符串（STRING），但是长整型（LONG）在目前所有的版本中都是不可以的。', '', '0', '2017-12-26 23:13:33', '65', '1');
INSERT INTO `topic` VALUES ('6585', '3', '4', '定义一个类需要包含什么元素？', '93006716-2d2f-4e75-8cae-9106972c71b8.', null, null, null, null, null, null, '一个类包含属性和方法。该类具有哪些特征使用属性表示，该类具有哪些行为使用方法来表示。', '', '0', '2017-12-26 23:13:36', '58', '1');
INSERT INTO `topic` VALUES ('6586', '3', '4', '、如何使用this关键字？', 'f983f8cd-6795-41d4-a1d4-ae2c29655117.', null, null, null, null, null, null, 'THIS指向自己的引用，即当前方法所在的对象。 它的一个主要作用是要将自己这个对象当做参数，传送给别的对象中的犯法。或者在类定义时使用THIS来引用自己的属性或方法。', '', '0', '2017-12-26 23:13:47', '58', '1');
INSERT INTO `topic` VALUES ('6587', '3', '4', '类体中的方法包含哪些分类？', '82c6a508-2a81-450c-a5de-2381b96cf287.', null, null, null, null, null, null, '按返回值分：有返回值、无返回值  按参数分：无参数、有参数（单个参数，多个参数） 按范围或功能分：实例方法、类方法、构造方法', '', '0', '2017-12-26 23:14:00', '58', '1');
INSERT INTO `topic` VALUES ('6588', '3', '4', '什么时候为类中的实例变量分配内存空间？', '0e0c42b2-a9a3-4429-be5a-c6efa9d79dfb.', null, null, null, null, null, null, '在使用类创建实例对象时会为其分配空间。（通过NEW关键字和构造函数为其实例化的时候）', '', '0', '2017-12-26 23:14:10', '58', '1');
INSERT INTO `topic` VALUES ('6589', '3', '4', ' 什么叫方法的重载？构造方法可以重载吗？', '7d5f68d9-514d-4349-ac06-9a95e20a04a6.', null, null, null, null, null, null, '一个类中可以有多个方法具有相同的名称，但这些犯法的参数必须不同，即或者是参数个数不同，或者是参数的类型不同，或者是参数的顺序不同。  构造方法可以重载，而且构造方法的重载是方法中使用频率最高的一种。', '', '0', '2017-12-26 23:14:22', '58', '1');
INSERT INTO `topic` VALUES ('6590', '33', '1', '单元测试是在软件开发过程中的哪个阶段完成的？ ', '19cd186c-d29a-499c-b0c5-60016d8c435b.', '可行性研究和计划 ', '概要设计 ', '实现 ', ' 使用和维护 ', '', '', 'C', '', '0', '2017-12-26 23:14:29', '64', '1');
INSERT INTO `topic` VALUES ('6591', '3', '4', ' 简述类变量和实例变量的不同？', 'b6f85140-37c8-4b1a-a7a7-9d0fcea24cce.', null, null, null, null, null, null, '1）不同对象的实例变量将分配不同的内存空间，实例变量则属性独有，改变某一个对象的值不影响其他对象；而所有对象的类变量占用同一块内存空间，类变量是所有对象共有的，改变其中一个对象的值，其他对象得到的就是改变后的结果。    （2）类变量在类被加载到内存是就为其分配内存空间，而实例变量在使用NEW创建对象时，才为其分配内存空间；    （3） 类变量可以通过对象和类名访问，而实例变量只能通过对象访问。     （4）类变量通过STATIC关键字修饰，实例变量不需要。', '', '0', '2017-12-26 23:14:34', '58', '1');
INSERT INTO `topic` VALUES ('6592', '33', '4', '用于java中垃圾收集的‘标记-清除’的方法和功能:', '056f8f88-e9c3-440d-83f5-bb5b3964b2a5.', null, null, null, null, null, null, '这是垃圾收集算法中最基础的，根据名字就可以知道，它的思想就是标记哪些要被回收的对象，然后统一回收。这种方法很简单，但是会有两个主要问题：1.效率不高，标记和清除的效率都很低；2.会产生大量不连续的内存碎片，导致以后程序在分配较大的对象时，由于没有充足的连续内存而提前触发一次GC动作。', '', '0', '2017-12-26 23:14:49', '50', '1');
INSERT INTO `topic` VALUES ('6593', '33', '1', '在J2EE的Web应用中，编译后的class文件存放的目录为', '53d65473-9164-4ee2-9ba3-927c023d53f3.', 'classes目录 ', 'classes目录 ', ' jar目录 ', ' jar目录 ', '', '', 'A', '', '0', '2017-12-26 23:14:51', '64', '1');
INSERT INTO `topic` VALUES ('6594', '3', '4', '通过Student stu;语句定义一个用户类型变量时，是否能在内存中创建对象？', '82d7da16-c9d0-4d65-8694-e1404236a07e.', null, null, null, null, null, null, '通过STUDENT STU；语句仅仅声明了一个类型为STUDENT，名称为STU的引用变量。这个引用变量具有指向一个STUDENT对象的潜在可能，但还没有指向一个STUDENT对象。如果要想使STU指向一个全新的STUDENT对象，在运行时用特定的JAVA关键字NEW在JVM存储空间中分配STUDENT对象。即通过赋值语句将引用变量和对象关联起来，  STUDENT STU=NEW STUDENT（）。', '', '0', '2017-12-26 23:14:55', '58', '1');
INSERT INTO `topic` VALUES ('6595', '33', '1', ' HttpServlet中，用来处理POST请求的方法是', '9910385b-8b55-4a9b-9303-faf082aee2e8.', 'doHead ', ' doGet ', 'doPost ', 'doPut ', '', '', 'C', '', '0', '2017-12-26 23:15:13', '64', '1');
INSERT INTO `topic` VALUES ('6596', '3', '4', 'ru何创建一个对象？', 'b74b450e-419e-4d4d-b22e-0c4e25a6774a.', null, null, null, null, null, null, '声明该类型的变量，创建该类型的对象，并将对象的引用赋给变量    PEOPLE P=NEW PEOPLE（）；', '', '0', '2017-12-26 23:15:15', '58', '1');
INSERT INTO `topic` VALUES ('6597', '3', '4', 'J2EE 是什么？它包括哪些技术？', 'fdc42618-8aff-44b5-82aa-d0c7c8b46c5b.', null, null, null, null, null, null, '从整体上讲，J2EE 是使用 JAVA 技术开发企业级应用的工业标准，它是 JAVA 技术不断适应和促进企业级应用过程中的产物.适用于企业级应用的 J2EE,提供一个平台独立的、可移植的、多用户的、安全的和基于标准的企业级平台，从而简化企业应用的开发、管理和部署。J2EE 是一个标准，而不是一个现成的产品。\r\n主要包括以下这些技术：\r\n1) SERVLET\r\nSERVLET 是 JAVA 平台上的 CGI 技术。SERVLET 在服务器端运行，动态地生成 WEB 页面。与传统的 CGI和许多其它类似 CGI 的技术相比，JAVA SERVLET 具有更高的效率并更容易使用。对于 SERVLET，重复的请求不会导致同一程序的多次转载，它是依靠线程的方式来支持并发访问的。\r\n2)JSP\r\nJSP(JAVA SERVER PAGE)是一种实现普通静态 HTML 和动态页面输出混合编码的技术。从这一点来看，非常类似 MICROSOFTASP、PHP 等技术。借助形式上的内容和外观表现的分离，WEB 页面制作的任务可以比较方便地划分给页面设计人员和程序员，并方便地通过JSP 来合成。在运行时态，JSP 将会被首先转换成 SERVLET，并以 SERVLET 的形态编译运行，因此它的效率和功能与 SERVLET 相比没有差别，一样具有很高的效率。\r\n3) EJB\r\nEJB 定义了一组可重用的组件：ENTERPRISE BEANS。开发人员可以利用这些组件，像搭积木一样建立分布式应用。\r\n4)JDBC\r\nJDBC(JAVA DATABASE CONNECTIVITY ， JAVA 数据库连接)API 是 一 个 标 准 SQL(STRUCTURED QUERYLANGUAGE，结构化查询语言)数据库访问接口，它使数据库开发人员能够用标准 JAVA API 编写数据库应用程序。JDBC API 主要用来连接数据库和直接调用 SQL 命令执行各种 SQL 语句。利用 JDBC API 可以执行一般的 SQL 语句、 动态 SQL 语句及带 IN 和 OUT 参数的存储过程。 JAVA 中的 JDBC 相当于 MICROSOFT平台中的 ODBC(OPEN DATABASECONNECTIVITY)。', '', '0', '2017-12-26 23:15:27', '68', '1');
INSERT INTO `topic` VALUES ('6598', '3', '4', '类变量与实例变量的qu别？', '614c5b59-2dc9-4b62-95f7-12c300933acb.', null, null, null, null, null, null, '类变量在类加载是分配内存的；实例变量在创建对象时分配内存的；类变量在程序退出时释放内存；对象不存在实例变量就不存在了。  类变量被所有对象共享，即同一类的所有对象共享此类的类变量，实例变量为每个对象独有；操作自己的实例变量而不会影响其他对象  类变量一般通过类名来调用', '', '0', '2017-12-26 23:15:33', '58', '1');
INSERT INTO `topic` VALUES ('6599', '33', '1', 'DOM中XMLDOMnodelist的length属性的表示是：', '70aba101-d4e9-4f8e-bb45-37aa19d99185.', '该对象中文本字符的长度 ', '该对象中元素节点的数量 ', '该对象中节点的数量', '该对象中文档对象的数量 ', '', '', 'A', '', '0', '2017-12-26 23:15:37', '64', '1');
INSERT INTO `topic` VALUES ('6600', '3', '4', '类方法与实例方法的区别', '4d09d1a7-5e5b-4173-8a1c-e76e4b633da5.', null, null, null, null, null, null, '类加载时，类方法被分配入口地址；实例方法是在第一个对象创建时被分配入口地址  类方法一般通过类名来调用  在类方法中不能使用THIS关键字；应为THIS代表当前对象；类方法是在类加载时就存在而此时对象还不存在', '', '0', '2017-12-26 23:15:45', '58', '1');
INSERT INTO `topic` VALUES ('6601', '33', '1', '如何创建Cookie?', 'c0765616-7d17-494c-9420-87aa35c842e1.', ' 使用new Cookie语句 ', '调用response.addCookie方法 ', ' 使用Cookie的setMaxAge方法 ', 'setCookie方法 ', '', '', 'B', '', '0', '2017-12-26 23:15:59', '64', '1');
INSERT INTO `topic` VALUES ('6602', '3', '4', '参数传递有几种形式？', '274b780e-1c33-4348-8a78-d27541d6e0ac.', null, null, null, null, null, null, '按值传参、按引用传参', '', '0', '2017-12-26 23:16:00', '58', '1');
INSERT INTO `topic` VALUES ('6603', '33', '4', 'java垃圾收集的“复制算法”的方法和功能:', 'c51bac62-a39d-45f3-9883-8a0283fb7503.', null, null, null, null, null, null, '为了解决效率问题，复制算法将可用内存按容量划分为相等的两部分，然后每次只使用其中的一块，当一块内存用完时，就将还存活的对象复制到第二块内存上，然后一次性清楚完第一块内存，再将第二块上的对象复制到第一块。但是这种方式，内存的代价太高，每次基本上都要浪费一般的内存。\r\n于是将该算法进行了改进，内存区域不再是按照1：1去划分，而是将内存划分为8:1:1三部分，较大那份内存交EDEN区，其余是两块较小的内存区叫SURVIOR区。每次都会优先使用EDEN区，若EDEN区满，就将对象复制到第二块内存区上，然后清除EDEN区，如果此时存活的对象太多，以至于SURVIVOR不够时，会将这些对象通过分配担保机制复制到老年代中。(JAVA堆又分为新生代和老年代)', '', '0', '2017-12-26 23:16:18', '50', '1');
INSERT INTO `topic` VALUES ('6604', '3', '4', '构造函数的作用和特点', 'ac9187ae-add4-458d-8f00-e32a93e08239.', null, null, null, null, null, null, '作用：在创建对象时，对新构造出来的对象进行初始化。 特点：  1) 构造函数的方法名与类同名；  2) 构造函数是对象在实例化是由系统自动调用；  3) 构造函数没有返回类型，并且也不用VOID关键字修饰；  4) 如果在定义类时没有定义构造函数，则编译器会自动插入一个无参且方 法体为空的构造函数；  5) 如果在定义类时显式地定义了一个有参构造函数，则编译器不再提供无 参的默认构造函数。  6) 构造函数的重载是方法重载中最为频繁的一种方式。', '', '0', '2017-12-26 23:16:19', '58', '1');
INSERT INTO `topic` VALUES ('6605', '33', '1', '关于Web应用程序，下列说法错误的是（ ）。 ', '8ab3f656-680c-488f-951f-26a9c7406b35.', 'WEB-INF目录存在于web应用的根目录下 ', 'WEB-INF目录与classes 目录平行 ', ' web.xml在WEB-INF目录下 ', 'Web应用程序可以打包为war文件 ', '', '', 'B', '', '0', '2017-12-26 23:16:28', '64', '1');
INSERT INTO `topic` VALUES ('6606', '3', '4', 'feng装的概念是什么？', '44fd2840-55de-4779-828d-e9fcdf3ebb9d.', null, null, null, null, null, null, '将数据连同函数捆绑在一起，形成新的类型，这被称为封装。', '', '0', '2017-12-26 23:16:35', '58', '1');
INSERT INTO `topic` VALUES ('6607', '3', '4', '测试生命周期、测试过程分为几个阶段，以及各阶段的含义？', '3943904e-b6c9-4a9e-9617-64f40173c606.', null, null, null, null, null, null, '：软件测试生命周期一般包括 6 个阶段：1）计划 2）分析，3）设计，4）构建，5）测试周期，6）最后测试和实施，1） 计划：产品定义阶段2). 分析:外部文档阶段3). 设计:文档架构阶段4). 构建:单元测试阶段5). 测试周期:错误修正,重复系统测试阶段6). 最后的测试和实施:代码冻结阶段', '', '0', '2017-12-26 23:16:45', '68', '1');
INSERT INTO `topic` VALUES ('6608', '3', '4', '访问控制里面四个关键字是什么？简要说四者的访问权限关系？', 'adf25a1c-8912-4522-86a5-90d37ba10998.', null, null, null, null, null, null, 'PUBLIC ： 任何其他类，对象只要可以看到这个类的话，那么它就可以存取变量的数据或 使用方法  PROTECTED ：  同一类，同一包可以使用。不同包的类要使用，必须是该类的子类。 PRIVATE  ：   不允许任何其他类存取和调用 FRIENDLY（DEFAULT，前边没有修饰符的情况）：  在同一程序包中出现才可以直接使用它的数据和方法', '', '0', '2017-12-26 23:16:48', '58', '1');
INSERT INTO `topic` VALUES ('6609', '26', '1', 'httpd.conf文件中的基本参数DirectoryIndex配置三个文件index.html、index.htm、 default.htm其格式为（）。', 'fa1e81d5-1b5b-40cf-baf4-c03015688b14.', 'DirectoryIndex=index.html, index.htm , default.htm ', 'DirectoryIndex =index.html; DirectoryIndex =index.htm ;DirectoryIndex =default.htm', 'DirectoryIndex index.html, index.htm ,default.htm ', 'DirectoryIndex index.html index.htm default.htm', '', '\r\n\r\n\r\n\r\n', 'D', '', '0', '2017-12-26 23:16:50', '18', '1');
INSERT INTO `topic` VALUES ('6610', '33', '1', '有关Servlet的生命周期说法正确的有（ ）。 ', 'cb0bf344-c762-49ea-b572-bc626c6a2547.', 'Servlet的生命周期由Servlet实例控制 ', 'init()方法在创建完Servlet实例后对其进行初始化，传递的参数为实现ServletContext接口的对象 ', 'service()方法响应客户端发出的请求 ', 'destroy()方法释放Servlet实例 ', '', '', 'C', '', '0', '2017-12-26 23:16:50', '64', '1');
INSERT INTO `topic` VALUES ('6611', '33', '1', '以下web.xml片断（ ）正确地声明servlet 上下文参数。 ', '97edd269-b27c-4a04-bdbc-f3c1433a6ea7.', '<init-param> \r\n\r\n<param-name>MAX</param-name> \r\n\r\n<param-value>100</param-value> \r\n\r\n</init-param> ', '<context-param> \r\n\r\n<param name=”MAX” value=”100″ /> \r\n\r\n<context-param> ', '<context> \r\n\r\n<param name=”MAX” value=”100″ /> \r\n\r\n<context> ', '<context-param> \r\n\r\n<param-name>MAX</param-name> \r\n\r\n<param-value>100</param-value> \r\n\r\n<context-param> ', '', '', 'A', '', '0', '2017-12-26 23:17:16', '64', '1');
INSERT INTO `topic` VALUES ('6612', '3', '4', '封装的好处是什么？', '6077e0ce-76c4-4cd6-b92f-ae04fd176908.', null, null, null, null, null, null, '封装有助于提高程序的灵活性，便于代码的维护和修改，们可以有效地避免修改代码而造成“牵一发而动全身”的问题。而且，杂成员变量被访问的同时还可以避免错误，提高程序的健壮性。   在代码发生变化时可以通过修改访问方法，使得修改不影响外界的访问。通过隐藏设计细节，可以把对代码修改造成的负面影响缩小到最小的范围内，这样就可以写出可维护性和可扩展性高的代码 ', '', '0', '2017-12-26 23:17:23', '58', '1');
INSERT INTO `topic` VALUES ('6613', '3', '4', '在Java中，封装设计过程中所需要遵循的规则是什么？', '72291d4c-5712-41e9-ab06-1e46c9ebca9d.', null, null, null, null, null, null, '用访问控制修饰符保护成员变量，通常是PRIVATE；  2.建立公有的访问方法，强制调用代码通过这些方法访问成员变量。 或  1.成员变量私有化  2.为每一个私有化的成员变量建立一组公有的GETTER或SETTER方法', '', '0', '2017-12-26 23:17:36', '58', '1');
INSERT INTO `topic` VALUES ('6614', '4', '1', '以下（ ）可用于检索session属性userid的值。 ', '3403fe25-1925-4741-a789-107ff1696228.', 'session. getAttribute (“userid”); ', 'session. setAttribute (“userid”); ', 'request. getParameter (“userid”); ', 'request. getAttribute (“userid”); ', '', '', 'A', '', '0', '2017-12-26 23:17:44', '64', '1');
INSERT INTO `topic` VALUES ('6615', '33', '4', '请解释：java中垃圾收集的的方法中“标记-整理”的方法和功能', '8fe34c2f-61f0-4a80-a564-c67cb39cd540.', null, null, null, null, null, null, '该算法主要是为了解决标记-清除，产生大量内存碎片的问题；当对象存活率较高时，也解决了复制算法的效率问题。它的不同之处就是在清除对象的时候现将可回收对象移动到一端，然后清除掉端边界以外的对象，这样就不会产生内存碎片了。', '', '0', '2017-12-26 23:17:49', '50', '1');
INSERT INTO `topic` VALUES ('6617', '3', '4', '什么是继承?这道题问的什么是继承', 'ea58e876-da8e-408f-95ac-05b6bce3438b.', null, null, null, null, null, null, '继承性是面向对象程序设计语言的另一种基本特征，通过继承可以实现代码的重用。继承而得到的类为子类，被继承的类为父类，父类包括所有直接或间接被继承的类。  子类可继承父类中的变量及方法，也可定义其自身特有的变量及方法。 JAVA中不支持多重继承。', '', '0', '2017-12-26 23:18:08', '58', '1');
INSERT INTO `topic` VALUES ('6618', '3', '4', '类有哪三个基本特性？各特性的优点？', 'c2974316-523f-4ba3-8782-6e47aef20524.', null, null, null, null, null, null, '类具有封装性、继承性和多态性。\r\n封装性：类的封装性为类的成员提供公有、缺省、保护和私有等多级访问权限，目的是隐藏类中的私有变量和类中方法的实现细节。\r\n继承性：类的继承性提供从已存在的类创建新类的机制，继承（INHERITANCE）使一个新类自动拥有被继承类（父类）的全部可继承的成员。\r\n多态性：类的多态性提供类中方法执行的多样性，多态性有两种表现形式：重载和覆盖。', '', '0', '2017-12-26 23:18:22', '68', '1');
INSERT INTO `topic` VALUES ('6619', '3', '4', 'Java中如何实现继承？如何实现继承', 'cba36ccb-8c8f-4cfb-9fc9-f832062d890c.', null, null, null, null, null, null, '通过在类的声明中加入EXTENDS 来创建一个类的子类。 CLASS SUBCLASS  EXTENDS  SUBCLASS{  }', '', '0', '2017-12-26 23:18:35', '58', '1');
INSERT INTO `topic` VALUES ('6620', '33', '1', '下列JSP代码： \r\n\r\n&lt;html&gt; \r\n\r\n&lt;body&gt; \r\n\r\n&lt;% \r\n\r\nfor(int i = 0; i &lt; 10; i++) { \r\n\r\n//1 \r\n\r\n} \r\n\r\n%&gt; \r\n\r\n&lt;/body&gt; \r\n\r\n&lt;/html&gt; \r\n\r\n以下（ ）可放置在//1处，不会发生编译错误\r\n\r\n&lt;/html&gt; \r\n\r\n以下（ ）可放置在//1处，不会发生编译错误。 ', '6eb93165-3dcc-4a58-97c9-8210dbf12a42.', '<%= i %> ', '<b>i</b> ', '%><%= i %><% ', '不写任何内容 ', '', '', 'CD', '', '0', '2017-12-26 23:18:37', '64', '1');
INSERT INTO `topic` VALUES ('6621', '3', '4', 'Java中，有继承关系时，变量隐藏的原则？', 'fc9d9896-decd-4412-9e12-9ecdc48184d2.', null, null, null, null, null, null, '子类中变量名与继承自父类的变量名相同时，则继承自父类的变量将被隐藏。', '', '0', '2017-12-26 23:18:46', '58', '1');
INSERT INTO `topic` VALUES ('6622', '26', '1', '2.6.10版本的内核是（）。', '6a9ff4f3-98df-4d96-b2c2-2cc4fbae7c7f.', '产品化的版本', '实验版本\r\n', 'Red Hat Linux的发行版本\r\n', '以上都对 \r\n', '', '', 'A', '', '0', '2017-12-26 23:18:47', '18', '1');
INSERT INTO `topic` VALUES ('6623', '33', '4', 'java垃圾收集分代收集的“分代收集” ', 'a8520aaf-b010-4895-8a61-db07b00229e7.', null, null, null, null, null, null, '现在的虚拟机垃圾收集大多采用这种方式，它根据对象的生存周期，将堆分为新生代和老年代。在新生代中，由于对象生存期短，每次回收都会有大量对象死去，那么这时就采用复制算法。老年代里的对象存活率较高，没有额外的空间进行分配担保，所以可以使用标记-整理 或者 标记-清除。', '', '0', '2017-12-26 23:18:58', '50', '1');
INSERT INTO `topic` VALUES ('6624', '32', '4', '试述数据库完整保护的主要任务和措施。', 'fb0bade5-223c-41bd-987b-830ea11b88fd.', null, null, null, null, null, null, '数据库的完整性保护也就是数据库中数据正确性的维护。数据库完整性包括三个内容：实体完整性规则，参照物完整性规则以及用户定义完整性规则。前两个是有 DBMS 自动处理。实体完整性规则是说针对于基表中的关键字中属性值不能为空值，是数据库完整性的基本要求，主关键字和元组的唯一性对应。参照物完整性规则是不允许引用不存在的元组：即基表中的外关键字要么为空，要么关联基表中必存在元组。用户定义完整性规则针对具体的数据环境由用户具体设置的规则，它反应了具体应用中的语义要求。一个完整性规则一般由下面三部分组成:完整性约束条件设置,完整性约束条件的检查以及完整性约束条件的处理.后两部分在数据库中一般有相应的模块处理。另外触发器也可以做完整性的保护，但触发器大量用于主动性领域。', '', '0', '2017-12-26 23:19:00', '68', '1');
INSERT INTO `topic` VALUES ('6625', '3', '4', 'Java中，有继承关系时，方法重写yuanze？ ', 'ab914e17-d536-44ba-827e-ba1c5ce94b5b.', null, null, null, null, null, null, '重写后的方法不能比被重写的方法有更严格的访问权限（可以相同）             改写后的方法不能比重写的方法产生更多的例外（异常）', '', '0', '2017-12-26 23:19:02', '58', '1');
INSERT INTO `topic` VALUES ('6626', '3', '4', 'Java中，super关键字的作用', '4db6b6bc-cb15-4af4-89f8-6035c447ecce.', null, null, null, null, null, null, '调用构造方法：  SUPER（）必须是子类构造函数第一个执行的语句，如果SUPER（）没有被用到，每个超类的默认的或无参数的构造函数将被执行。    调用被隐藏变量及方法：  可通过SUPER关键字调用被隐藏的父类中的变量及方法。', '', '0', '2017-12-26 23:19:17', '58', '1');
INSERT INTO `topic` VALUES ('6627', '3', '4', 'Java中，是否支持多继承？问的是是否支撑多继承', '95f81da6-4a57-44af-bb14-41f629921f7e.', null, null, null, null, null, null, '不支持多继承，允许多层继承', '', '0', '2017-12-26 23:19:40', '58', '1');
INSERT INTO `topic` VALUES ('6628', '3', '4', '谈谈对 XML 的理解？说明 Web 应用中 Web.xml 文件的作用？', '650b4321-2043-4355-b1e1-57c5f58356da.', null, null, null, null, null, null, 'XML（EXTENSIBLE MARKUP LANGUAGE）即可扩展标记语言，它与 HTML 一样，都是 SGML(STANDARD GENERALIZEDMARKUP LANGUAGE,标准通用标记语言)。XML 是 INTERNET 环境中跨平台的，依赖于内容的技术，是当前处理结构化文档信息的有力工具。扩展标记语言 XML 是一种简单的数据存储语言，使用一系列简单的标记描述数据，而这些标记可以用方便的方式建立，虽然 XML 占用的空间比二进制数据要占用更多的空间，但 XML 极其简单易于掌握和使用。WEB.XML的作用是配置欢迎页，SERVLET，FILTER，LISTENER 等的。', '', '0', '2017-12-26 23:19:52', '68', '1');
INSERT INTO `topic` VALUES ('6629', '33', '1', '有关JSP隐式对象，以下（ ）描述正确。 ', '2c766a65-7c21-4f8b-9212-1df53075a0a2.', '隐式对象是WEB容器加载的一组类的实例，可以直接在JSP页面使用 ', '不能通过config对象获取ServletContext对象 ', '不能通过config对象获取ServletContext对象 ', '只有在出错处理页面才有exception对象 ', '', '', 'ACD ', '', '0', '2017-12-26 23:20:05', '64', '1');
INSERT INTO `topic` VALUES ('6630', '3', '4', 'Java中，请说明final关键字的使用？final', 'a0ce46e0-1fdd-4de6-a9b8-388cbcbc9402.', null, null, null, null, null, null, 'FINAL在类之前  表示该类是最终类，表示该类不能再被继承。 FINAL在方法之前  表示该类方法是最终方法，该方法不能被任何派生的子类覆盖。 FINAL在变量之前  表示变量的值在初始化之后就不能再改变，相当于定义了一个常量', '', '0', '2017-12-26 23:20:08', '58', '1');
INSERT INTO `topic` VALUES ('6631', '4', '1', '一个栈的输入序列为1 2 3 4 5，则下列序列中不可能是栈得输出序列的是（ ）', '9c08b02a-bf44-4d7b-b55d-eaab6a12ba79.', '5 4 1 3 2 ', '1 2 3 4 5 ', '1 5 4 3 2 ', '2 3 1 4 5', '', '', 'A', '', '0', '2017-12-26 23:20:09', '62', '1');
INSERT INTO `topic` VALUES ('6632', '3', '4', ' 什么叫成员变量的隐藏？', 'b000a9a2-3117-4a0c-a925-c5e59e82016e.', null, null, null, null, null, null, '对于成员变量来说，当子类本身具有与继承自父类的某个成员变量名称相同的成员变量时，便构成了成员变量的隐藏。其含义是，在子类中直接调用该成员变量时，将调用的是子类中本身具有的成员变量，而不是从父类继承的成员变量', '', '0', '2017-12-26 23:20:21', '58', '1');
INSERT INTO `topic` VALUES ('6633', '33', '4', 'java内存模型', 'f639a0ab-cb39-4543-b394-02cc5be405b1.png', null, null, null, null, null, null, 'AVA内存模型(JMM)是线程间通信的控制机制.JMM定义了主内存和线程之间抽象关系。线程之间的共享变量存储在主内存（MAIN MEMORY）中，每个线程都有一个私有的本地内存（LOCAL MEMORY），本地内存中存储了该线程以读/写共享变量的副本。本地内存是JMM的一个抽象概念，并不真实存在。它涵盖了缓存，写缓冲区，寄存器以及其他的硬件和编译器优化。JAVA内存模型的抽象示意图如下：\r\n\r\n从上图来看，线程A与线程B之间如要通信的话，必须要经历下面2个步骤：\r\n1. 首先，线程A把本地内存A中更新过的共享变量刷新到主内存中去。\r\n2. 然后，线程B到主内存中去读取线程A之前已更新过的共享变量。', '', '0', '2017-12-26 23:20:27', '50', '1');
INSERT INTO `topic` VALUES ('6634', '3', '4', '事务是什么？有哪些属性，并简要说明这些属性的含义。', 'c861bb4b-3d9f-4f9d-9fd7-309087b024af.', null, null, null, null, null, null, '事务(TRANSACTION)是访问并可能更新数据库中各种数据项的一个程序执行单元(UNIT)。事务通常由高级数据库操纵语言或编程语言（如 SQL，C++或 JAVA）书写的用户程序的执行所引起，并用形如 BEGIN TRANSACTION 和 END TRANSACTION 语句（或函数调用）来界定。事务由事务开始(BEGINTRANSACTION)和事务结束(END TRANSACTION)之间执行的全体操作组成。事务应该具有 4 个属性：原子性、一致性、隔离性、持续性。这四个属性通常称为 ACID 特性。\r\n（ATOMICITY）  。一个事务是一个不可分割的工作单位，事务中包括的诸操作要么都做，要么都不做。\r\n 一致性（CONSISTENCY）  。事务必须是使数据库从一个一致性状态变到另一个一致性状态。一致性与原子性是密切相关的。\r\n    隔离性（ISOLATION）  。一个事务的执行不能被其他事务干扰。即一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰。\r\n持久性（DURABILITY）  。持续性也称永久性（PERMANENCE），指一个事务一旦提交，它对数据库中数据的改变就应该是永久性的。接下来的其他操作或故障不应该对其有任何影响。', '', '0', '2017-12-26 23:20:29', '68', '1');
INSERT INTO `topic` VALUES ('6635', '33', '1', '考虑下面JSP文件代码片断： \r\n\r\n&lt;HTML&gt; \r\n\r\n&lt;BODY&gt; \r\n\r\n&lt;jsp:include page=”test2.jsp”&gt; \r\n\r\n&lt;jsp:param name=”username” value=”accp”/&gt; \r\n\r\n&lt;/jsp:include&gt; \r\n\r\n&lt;/BODY&gt; \r\n\r\n&lt;/HTML&gt; \r\n\r\n以下（ ）代码片断放置在test2.jsp中不会导致错误。 ', 'ec300006-8474-4170-bca6-e4436c5ab04a.', '考虑下面JSP文件代码片断： \r\n\r\n<HTML> \r\n\r\n<BODY> \r\n\r\n<jsp:include page=”test2.jsp”> \r\n\r\n<jsp:param name=”username” value=”accp”/> \r\n\r\n</jsp:include> \r\n\r\n</BODY> \r\n\r\n</HTML> \r\n\r\n以下（ ）代码片断放置在test2.jsp中不会导致错误。 ', '．<jsp:include param =”username”/> ', '．<%=request.getParameter(“username”)%> \r\n', '．<%=request.getParameter(“username”)%> \r\n', '', '', 'C', '', '0', '2017-12-26 23:20:30', '64', '1');
INSERT INTO `topic` VALUES ('6636', '3', '4', '什么是方法的重载？方法重载的规则是什么？', 'db4c25fb-25ac-415e-a138-39567cf09055.', null, null, null, null, null, null, '方法重载指的是在同一个类里面，有两个或两个以上具有相同的方法名，不同参数序列的方法', '', '0', '2017-12-26 23:20:33', '58', '1');
INSERT INTO `topic` VALUES ('6637', '26', '1', 'Red Hat Linux 9默认使用的文件系统类型是（）。', 'f16c2ce0-7e3a-4e1e-8bfc-b2e982e24096.', 'swap', 'ext3', 'fat', 'ntfs \r\n', '', '', 'B', '', '0', '2017-12-26 23:20:35', '18', '1');
INSERT INTO `topic` VALUES ('6638', '3', '4', '重载方法是如何进行匹配的？', '725323c3-a4e4-41ac-a97d-cfffae5a75ba.', null, null, null, null, null, null, '在方法调用进行匹配的时候，首先选择直接匹配的方法；如果没有则将参数进行提升转换后再匹配方法，总是匹配最接近的方法对于基本数据类型而言，就是按照基本数据类型间的自动转换关系，将传递的参数进行自动转换，并寻找最匹配的一个方法  对于对象应用类型而言，则按照继承树向上转型的方式，将传递的参数进行自动转换， 并寻找最匹配的一个方法', '', '0', '2017-12-26 23:20:46', '58', '1');
INSERT INTO `topic` VALUES ('6639', '33', '1', 'LDAP是什么?    ', '2a1501d3-11f4-4aee-92f8-b948d6aa0d1e.', ' 是一种开源产品', ' 是一种编程语言', ' 是一种访问协议', '是一种存储数据的目录', '', '', 'C', '', '0', '2017-12-26 23:21:10', '62', '1');
INSERT INTO `topic` VALUES ('6640', '33', '4', '描述 J2EE 框架的多层结构，并简要说明各层的作用。', 'e79657f7-cf01-4008-a3cd-2117273ed1d4.', null, null, null, null, null, null, '1)PRESENTATION LAYER（表示层）A. 表示逻辑（生成界面代码）B. 接收请求 C. 处理业务层抛出的异常 D. 负责规则验证（数据格式，数据非空等）E. 流程控制\r\n2) SERVICE LAYER（服务层/业务层）A.封装业务逻辑处理，并且对外暴露接口B.负责事务，安全等服务\r\n3) PERSISTENCE LAYER（持久层） A 封装数据访问的逻辑，暴露接口 B.提供方便的数据访问的方案（查询语言，API，映射机制等）\r\n4）DOMAIN LAYER（域层） A. 业务对象以及业务关系的表示B. 处理简单的业务逻辑C. 域层的对象可以穿越表示层，业务层，持久层软件分层结构使得代码维护非常方便，设计明确，各层独立，专注自己擅长的领域。', '', '0', '2017-12-26 23:21:11', '68', '1');
INSERT INTO `topic` VALUES ('6641', '3', '4', '一个引用类型的变量可以指向哪些对象？', 'd9e05169-5072-41b9-8333-d15be0930bb6.', null, null, null, null, null, null, '一个引用类型的变量可以指向由其本类所构造出来的对象，还可以指向由其子类及子孙类所构造出来的对象。', '', '0', '2017-12-26 23:21:18', '58', '1');
INSERT INTO `topic` VALUES ('6642', '3', '4', 'java类有几个加载过程?', 'fa7b2927-88bc-4612-ae97-58052ce4427c.', null, null, null, null, null, null, '加载、验证、准备、解析、初始化', '', '0', '2017-12-26 23:21:35', '50', '1');
INSERT INTO `topic` VALUES ('6643', '3', '4', '什么是抽象类？请说出抽象类所具有的特点？', '7a97fe47-47df-4ca0-9c3c-cc5aeef18878.', null, null, null, null, null, null, '使用ABSTRACT修饰的类叫抽象类', '特点：1.抽象类必须被继承        2.抽象类不能直接实例化，它只能作为其他类的超类，这一点与最终类（final类）正 好相反。', '0', '2017-12-26 23:21:36', '58', '1');
INSERT INTO `topic` VALUES ('6644', '33', '1', '下面代码片断在浏览器中输出结果为（ ）。 \r\n\r\n&lt;c:set var=”myVar” scope =”session”&gt; \r\n\r\n2+3 \r\n\r\n&lt;/c:set&gt; \r\n\r\n&lt;c:out value=”${myVar}”/&gt; ', '875d4bbf-d929-42c7-85f5-8947c64d5e40.', '0 ', '5 ', '2+3', '无输出', '', '', 'C', '', '0', '2017-12-26 23:21:44', '64', '1');
INSERT INTO `topic` VALUES ('6645', '3', '4', '什么是抽象方法？抽象方法的特点？', '8eac9154-7c2c-4a84-a323-ec104e1652ad.', null, null, null, null, null, null, '抽象方法：  用ABSTRACT来修饰一个方法时，该方法叫抽象方法，只有方法声明，没有方法体。   特点：  抽象方法必须被重写      抽象方法只有声明，不能有实现     定义了抽象方法的类必须是抽象类 ', '', '0', '2017-12-26 23:21:48', '58', '1');
INSERT INTO `topic` VALUES ('6646', '4', '4', '简要描述如何结合 struts、hibernate、spring 开发 Web 应用？', '93b436bd-bd25-4d1e-86f7-e97cb0f3334a.', null, null, null, null, null, null, 'STRUTS 可以将 JSP 页面的表单关联起来,就是把 JSP 页面的表单数据封装成 JAVABEAN,这样的话,在 ACTION 中你再也不需要使用传统的 REQUEST.GETPARAMETER(\"NAME\");还有 STRUTS 有一个控制器,你在 STRUTS 编程中的控制器(XXXACTION)都是继承总的 ACTIONSERVLET,它能集中处理请求,然后转到相关的页面。还有 STRUTS 的表单验证组件,不用你写 JS 验证了,只需要你配置一下文件就可以了。另外 STRUTS 的令牌机制可以防表单重复提交。\r\n SPRING 是一个轻量级容器,非侵入性.包含依赖注入,AOP 等。它是为了解决企业应用程序开发复杂性而创建的。框架的主要优势之一就是其分层架构，分层架构允许您选择使用哪一个组件，同时为J2EE 应用程序开发提供集成的框架。\r\n    HIBERNATE:它可以让我们以 OO 的方式操作数据库，这让我们看到了 HIBERNATE 的强大之处，体验到操作数据的方便。但 HIBERNATE 最耀眼之处是 HIBERNATE 的缓存机制，而不是以 OO 的方式操作数据库。HIBERNATE 的缓存机制不外乎是一级缓存 SESSION，二级缓存 SESSIONFACTORY，和第三方缓存 如 EHCACHE 。 也就 是 HIBERNATE 的 最 强大 的地 方 是 它的 缓存 ， 理解了 这 个 才能 真正 的 理解HIBERNATE,HIBERNATE 的命名查询/命名参数查询，    就是将 HQL 语句放在一个单独的 XML 文件之中，    它仍然让人们以面向对象的方式去操纵数据，而不用在以 OO 的方式写着代码的同时，然后再转变思维，用面向关系的方式去写那些 SQL 语句。但 HIBERNATE不仅做了这些，它的NATIVE SQL 查询方式，完\r\n全满足 SQL 语句的偏爱者，它像 IBATIS 一样，将 SQL 语句放在配置文件之中', '', '0', '2017-12-26 23:22:01', '68', '1');
INSERT INTO `topic` VALUES ('6647', '3', '4', 'java类加载过程中的“加载”', 'b7dd7667-1683-4913-a49d-1a7f200dfa2d.', null, null, null, null, null, null, '加载时类加载的第一个过程，在这个阶段，将完成一下三件事情：\r\n1. 通过一个类的全限定名获取该类的二进制流。\r\n2. 将该二进制流中的静态存储结构转化为方法去运行时数据结构。 \r\n3. 在内存中生成该类的CLASS对象，作为该类的数据访问入口。', '', '0', '2017-12-26 23:22:02', '50', '1');
INSERT INTO `topic` VALUES ('6648', '3', '4', '什么是接口？使用接口的好处？ ', '7c88d20a-9552-4c34-98f6-89936a59ef06.', null, null, null, null, null, null, '接口（INTERFACE）就是方法定义和常量值的集合。从语法上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义（抽象方法），而没有方法的实现。   特点：通过接口可以实现不相关类的相同行为，而不需要考虑这些类之间的层次关系       通过接口可以指明多个类需要实现的方法        通过接口可以了解对象的交互界面，而不需要了解对象所对应的类', '', '0', '2017-12-26 23:22:02', '58', '1');
INSERT INTO `topic` VALUES ('6649', '33', '1', '要想在你的视图上成功的执行查询需要做什么？', '258cfdbb-65e1-4252-8ba8-0ffa96aa801c.', '只能在基础表中有select权限', '在视图中需要有select权限', ' 基础表中必须有数据', '基础表必须在同一个 用户模式中', '', '', 'B', '', '0', '2017-12-26 23:22:04', '62', '1');
INSERT INTO `topic` VALUES ('6650', '26', '1', 'shell位于Linux系统中的（）。', '1a30ede6-3499-4bb0-b807-572a093bc61d.', '硬件与内核之间\r\n', '内核之间\r\n', '内核与命令行之间', '命令行之外 \r\n', '', '', 'C', '', '0', '2017-12-26 23:22:06', '18', '1');
INSERT INTO `topic` VALUES ('6651', '33', '1', '编写一个Filter，除继承HttpServlet类外还需要（ ）。 ', '965001f3-384d-40ea-b85e-dc1847f308fa.', '继承Filter 类 ', '实现Filter 接口 ', '继承HttpFilter 类 ', '实现HttpFilter接口 ', '', '', 'B', '', '0', '2017-12-26 23:22:10', '64', '1');
INSERT INTO `topic` VALUES ('6652', '3', '4', '请写出抽象类、接口的相同点和不同点？', '8b674462-77d2-4bb6-b368-90d68e35eb5e.', null, null, null, null, null, null, '相同点： 都不能被实例化          都必须通过其他类实现才能使用 不同点：         抽象类是类，其中可包含变量及（抽象、非抽象）方法的定义        接口实质并不是类，其中只包含类常量及抽象方法的定义', '', '0', '2017-12-26 23:22:23', '58', '1');
INSERT INTO `topic` VALUES ('6653', '33', '1', '以下哪个Hibernate主键生成策略是实现主键按数值顺序递增的？ ', 'af1d1b4d-e6ac-4e26-87ff-052e9ab00ec9.', 'increment ', 'identity ', 'sequence ', 'native ', '', '', 'A', '', '0', '2017-12-26 23:22:32', '64', '1');
INSERT INTO `topic` VALUES ('6654', '3', '4', '列出自己常用的 jdk 包.', '5c59f375-70c5-4b6a-9346-8ead27928ba0.', null, null, null, null, null, null, '：JDK 常用的 PACKAGE\r\nJAVA.LANG：这个是系统的基础类，比如 STRING 等都是这里面的，这个 PACKAGE 是唯一一个可以不用 IMPORT 就可以使用的 PACKAGE\r\nJAVA.IO: 这里面是所有输入输出有关的类，比如文件操作等\r\nJAVA.NET: 这里面是与网络有关的类，比如 URL,URLCONNECTION 等。\r\nJAVA.UTIL : 这个是系统辅助类，特别是集合类 COLLECTION,LIST,MAP 等。\r\nJAVA.SQL: 这个是数据库操作的类，CONNECTION, STATEMEMT，RESULTSET 等', '', '0', '2017-12-26 23:22:32', '68', '1');
INSERT INTO `topic` VALUES ('6655', '3', '4', '列出自己常用的 jdk 中的数据结构', '165905d8-3bf5-42b8-ae75-069ac57dea82.', null, null, null, null, null, null, '线性表，链表，哈希表是常用的数据结构。', '', '0', '2017-12-26 23:22:53', '68', '1');
INSERT INTO `topic` VALUES ('6656', '33', '1', '正则表达式”\\d+\\.?\\d*”在匹配下列字符串时结果是失败的是？ ', '3c511a11-5b5e-4288-b6e6-7463e0a86f08.', '12.5 ', '1.25 ', '以上都成功 ', '以上都失败 ', '', '', 'B', '', '0', '2017-12-26 23:23:11', '64', '1');
INSERT INTO `topic` VALUES ('6657', '32', '1', '下面关于该组语句的哪个描述是正确的？', '23ca4d03-4b53-4996-ab5f-25370f6f5c7f.', 'DESCRIBE DEPT语句将返回一个错误ORA-04043: object DEPT does not exist. ', ' DESCRIBE DEPT语句将显示DEPT表的结构描述内容', 'DESCRIBE DEPT语句将只有在ROLLBACK之前引入一个COMMIT语句时，才会显示DEPT表的结构描述内容\r\n', 'ROLLBACK语句将释放DEPT占用的存储空间', '', '', 'B', '', '0', '2017-12-26 23:23:26', '62', '1');
INSERT INTO `topic` VALUES ('6658', '26', '1', '如果需要将命令放到后台执行，则需要在命令后添加的符号是（）。', '87cbee6f-7969-4713-9462-4f6793c7e910.', ' ', '&\r\n', '>', '>> \r\n', '', '', 'B', '', '0', '2017-12-26 23:23:32', '18', '1');
INSERT INTO `topic` VALUES ('6659', '33', '1', '下列没有直接采用XML技术的是（ ）', '2bf86128-ecd8-44d3-9cf8-9c4a6a71cdf5.', ' UDDI', 'SOAP', 'AJAX', 'DCOM', '', '', 'D', '', '0', '2017-12-26 23:23:33', '64', '1');
INSERT INTO `topic` VALUES ('6660', '3', '4', '.JSP 页面之间传递参数的方法有哪些？', 'fb67c2b6-c295-4feb-a59c-d70c0ab4bc4e.', null, null, null, null, null, null, ' 1）REQUEST2）SESSION 3）APPLICATION 4）提交表单5）超链接', '', '0', '2017-12-26 23:23:40', '68', '1');
INSERT INTO `topic` VALUES ('6661', '33', '1', '下列可以用来解析XML的是（ ）', 'a6b95f09-905d-4839-be25-a947b4b4d9ee.', 'CSS', 'DTD', 'SAX', 'XSL', '', '', 'C', '', '0', '2017-12-26 23:23:55', '64', '1');
INSERT INTO `topic` VALUES ('6662', '32', '3', 'Oracle中VARCHAR2类型的最大长度是： _______', '688f9b15-59b0-4bb6-919f-aa23ba13924d.', null, null, null, null, null, null, '4000 ', '', '0', '2017-12-26 23:24:08', '62', '1');
INSERT INTO `topic` VALUES ('6663', '33', '1', '下面关于XML叙述不正确的是（ ）', '77283fb7-75c3-4bd5-bcec-e6c3d4dd4f50.', 'XML标记必须关闭', 'XML是大小写敏感的', 'XML文件只能跟DTD文件一块使用', 'XML和XSL结合可以在浏览器上显示', '', '', 'C', '', '0', '2017-12-26 23:24:16', '64', '1');
INSERT INTO `topic` VALUES ('6664', '3', '4', 'Java 反射机制的作用？', 'eb3e5b16-a0d0-4406-ae9f-b4b56024b74b.', null, null, null, null, null, null, 'JAVA 反射机制的作用是：\r\n1）在运行时判断任意一个对象所属的类。2）在运行时构造任意一个类的对象。3）在运行时判断任意一个类所具有的成员变量和方法。4）在运行时调用任意一个对象的方法', '', '0', '2017-12-26 23:24:21', '68', '1');
INSERT INTO `topic` VALUES ('6665', '3', '4', '你是怎么理解 java 的泛型的？', 'a3fddd0f-265a-4610-9181-8aaedbd77bdc.', null, null, null, null, null, null, '在1.5 之前，没有泛型的情况的下，通过对类型 OBJECT 的引用来实现参数的“任意化”，“任意化”带来的缺点是要做显式的强制类型转换，而这种转换是要求开发者对实际参数类型可以预知的情况下进行的。对于强制类型转换错误的情况，编译器可能不提示错误，在运行的时候才出现异常，这是一个安全隐患。\r\n     泛型是 JAVA SE 1.5 的新特性，泛型的本质是参数化类型，也就是说所操作的数据类型被指定为一个参数。这种参数类型可以用在类、接口和方法的创建中，分别称为泛型类、泛型接口、泛型方法。泛型的好处是在编译的时候检查类型安全，并且所有的强制转换都是自动和隐式的，提高代码的重用率。', '', '0', '2017-12-26 23:24:39', '68', '1');
INSERT INTO `topic` VALUES ('6666', '3', '4', 'java类加载过程中的“验证过程”的解释？', '2875bea7-3d7a-4c5e-93b3-a6dc55e94e2f.', null, null, null, null, null, null, '验证的目的是为了确保CLASS文件的字节流中的信息不回危害到虚拟机.在该阶段主要完成以下四钟验证:\r\n1. 文件格式验证：验证字节流是否符合CLASS文件的规范，如主次版本号是否在当前虚拟机范围内，常量池中的常量是否有不被支持的类型.\r\n2. 元数据验证:对字节码描述的信息进行语义分析，如这个类是否有父类，是否集成了不被继承的类等。\r\n3. 字节码验证：是整个验证过程中最复杂的一个阶段，通过验证数据流和控制流的分析，确定程序语义是否正确，主要针对方法体的验证。如：方法中的类型转换是否正确，跳转指令是否正确等。\r\n4. 符号引用验证：这个动作在后面的解析过程中发生，主要是为了确保解析动作能正确执行。', '', '0', '2017-12-26 23:25:00', '50', '1');
INSERT INTO `topic` VALUES ('6667', '4', '4', 'OSI模型的七个层次依次是', '831febfe-d537-4e0b-8f51-54a9cc809575.', null, null, null, null, null, null, '物理层 数据链路层 网络层 传输层 会话层 表示层 应用层', '', '0', '2017-12-26 23:25:01', '62', '1');
INSERT INTO `topic` VALUES ('6668', '33', '1', '关于IFrame表述正确的有：()', '297c99f5-46ce-4688-bb67-d5ece8f186f4.', '通过IFrame，网页可以嵌入其他网页内容，并可以动态更改', '在相同域名下，内嵌的IFrame可以获取外层网页的对象', '在相同域名下，外层网页脚本可以获取IFrame网页内的对象', '可以通过脚本调整IFrame的大小', '', '', 'CD', '', '0', '2017-12-26 23:25:03', '64', '1');
INSERT INTO `topic` VALUES ('6669', '32', '4', '在一个千万级的数据库查寻中，如何提高查询效率？分别说出在数据库设计、SQL 语句、java 等', 'cb148e51-1d90-4321-94fd-922a11a547c4.', null, null, null, null, null, null, '1）数据库设计方面：\r\nA. 对查询进行优化，应尽量避免全表扫描，首先应考虑在 WHERE 及 ORDER BY 涉及的列上建立索引。B. 应尽量避免在 WHERE 子句中对字段进行 NULL 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：SELECT IDFROM T WHERE NUM IS NULL可以在 NUM 上设置默认值 0，确保表中 NUM 列没有 NULL 值，然后这样查询：SELECT ID FROM T WHERENUM=0\r\nC. 并不是所有索引对查询都有效，SQL 是根据表中数据来进行查询优化的 当索引列有大量数据重复时,查询可能不会去利用索引，如一表中有字段 SEX，MALE、FEMALE 几乎各一半，那么即使在 SEX 上建了索引也对查询效率起不了作用。\r\nD. 索引并不是越多越好，索引固然可以提高相应的 SELECT 的效率，但同时也降低了 INSERT 及UPDATE 的效率，因为 INSERT 或 UPDATE 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过 6 个，若太多则应考虑一些不常使用到的列上建的索引是否有必要。\r\n3)JAVA 方面：\r\nA.尽可能的少造对象。B.合理摆正系统设计的位置。大量数据操作，和少量数据操作一定是分开的。大量的数据操作，肯定不是 ORM 框架搞定的。，\r\nC.使用 JDBC 链接数据库操作数据D.控制好内存，让数据流起来，而不是全部读到内存再处理，而是边读取边处理；E.合理利用内存，有的数据要缓存', '', '0', '2017-12-26 23:25:03', '68', '1');
INSERT INTO `topic` VALUES ('6670', '33', '1', '关于表格表述正确的有：（）', '7ca26f2a-548f-4933-b6bd-1ea8344140b5.', ' 表格中可以包含TBODY元素', '表格中可以包含CAPTION元素', '表格中可以包含多个TBODY元素', '表格中可以包含COLGROUP元素', '', '', 'C', '', '0', '2017-12-26 23:25:30', '64', '1');
INSERT INTO `topic` VALUES ('6671', '26', '1', '在Linux系统中解压、归档test.tgz文件的命令是（）。', '05fa8ad4-7fdf-4603-b7dc-c59c0bc93314.', 'tar  vxf  test.tgz', 'tar  jvxf  test.tgz', 'tar  zvxf  test.tgz', 'tar  zf  test.tgz \r\n', '', '', 'C', '', '0', '2017-12-26 23:25:39', '18', '1');
INSERT INTO `topic` VALUES ('6672', '33', '1', '在DHTML中把整个文档的各个元素作为对象处理的技术是：（）', '219c03e7-8ae3-40f4-a0f6-4eccf0ae2fe3.', 'HTML', 'CSS', 'DOM', 'Script(脚本语言)', '', '', 'C', '', '0', '2017-12-26 23:26:04', '64', '1');
INSERT INTO `topic` VALUES ('6673', '5', '4', '请写出一个超链接，点击链接后可以向 zhangsan@d-heaven.com 发送电子邮件。', 'e01e62dc-41bd-47bb-97ac-290a411faa57.', null, null, null, null, null, null, ' <A HREF=”MAILTO: ZHANGSAN@D-HEAVEN.COM”>发邮件</A>', '', '0', '2017-12-26 23:26:20', '68', '1');
INSERT INTO `topic` VALUES ('6674', '4', '1', '当客户端关闭一个从连接池中获取的连接, 会发生下面哪一种情况? ', '8d42cc67-abaf-40a1-a756-5e55fd9c492c.', ' 连接不会关闭，只是简单地还给连接池', '连接被关闭，但又被重新打开并还给连接池', '连接永久性关闭', '无任何结果', '', '', 'A', '', '0', '2017-12-26 23:26:23', '62', '1');
INSERT INTO `topic` VALUES ('6675', '33', '1', '下面属于JavaScript对象的有：( )', 'a3388ffe-81b1-4386-92ae-fde4f6344ee5.', 'Window', 'Document', 'Form', 'String', 'Navigator', '', 'ACE', '', '0', '2017-12-26 23:26:31', '64', '1');
INSERT INTO `topic` VALUES ('6676', '33', '4', '请说明 meta 标签的作用。', '5d590254-4d50-4964-ae47-b35180c84a6f.', null, null, null, null, null, null, 'META 是用来在 HTML 文档中模拟 HTTP 协议的响应头报文。META 标签用于网页的＜HEAD＞与＜/HEAD＞中，META 标签的用处很多。META 的属性有两种：NAME 和 HTTP-EQUIV。NAME 属性主要用于描述网页，对应于 CONTENT（网页内容），以便于搜索引擎机器人查找、分类（目前几乎所索引擎都使用网上机器人自动查找 META 值来给网页分类）           。这其中最重要的是 DESCRIPTION（站点在搜索引擎上的描述）和 KEYWORDS（分类关键词）    ，所以应该给每页加一个 META 值。比较常用的有以下几个：\r\nNAME 属性\r\n1)．＜META NAME=\"GENERATOR\" CONTECT=\"\"＞用以说明生成工具（如 MICROSOFT FRONTPAGE 4.0）\r\n2)．＜META NAME=\"KEYWORDS\" CONTECT=\"\"＞向搜索引擎说明你的网页的关键词；\r\n3)．＜META NAME=\"DESCRIPTION\" CONTECT=\"\"＞告诉搜索引擎你的站点的主要内容；\r\n4).＜META NAME=\"AUTHOR\" CONTECT=\"你的姓名\"＞告诉搜索引擎你的站点的制作的作者；\r\n5).＜META NAME=\"ROBOTS\" CONTECT= \"ALL|NONE|INDEX|NOINDEX|FOLLOW|NOFOLLOW\"＞\r\n    其中的属性说明如下：\r\n    设定为 ALL：文件将被检索，且页面上的链接可以被查询；设定为 NONE：文件将不被检索，且页面上的链接不可以被查询； 设定为 INDEX：文件将被检索；设定为FOLLOW：页面上的链接可以被查询；设定为 NOINDEX：文件将不被检索，但页面上的链接可以被查询设定为 NOFOLLOW：文件将不被检索，页面上的链接可以被查询。\r\n6).HTTP-EQUIV 属性\r\n    A、＜META HTTP-EQUIV=\"CONTENT-TYPE\"CONTECT=\"TEXT/HTML\";CHARSET=GBK\"＞\r\n    和 ＜META HTTP-EQUIV=\"CONTENT-LANGUAGE\"CONTECT=\"ZH-CN\"＞用以说明主页制作所使用的文字以及语言；\r\n    B、＜METAHTTP-EQUIV=\"REFRESH\" CONTECT=\"N;URL=HTTP://YOURLINK\"＞定时让网页在指定的时\r\n间 N 内，跳转到页面 HTTP;//YOURLINK；\r\n    C、＜METAHTTP-EQUIV=\"EXPIRES\" CONTECT=\"MON,12 MAY 2001 00:20:00 GMT\"＞可以用于设定网页的到期时间，一旦过期则必须到服务器上重新调用。需要注意的是必须使用 GMT 时间格式；\r\n    D、＜META HTTP-EQUIV=\"PRAGMA\"CONTECT=\"NO-CACHE\"＞是用于设定禁止浏览器从本地机的缓存中调阅页面内容，设定后一旦离开网页就无法从 CACHE 中再调出；\r\n    E、＜METAHTTP-EQUIV=\"SET-COOKIE\" CONTECT=\"MON,12 MAY 2001 00:20:00GMT\"＞COOKIE 设定，如果网页过期，存盘的 COOKIE 将被删除。需要注意的也是必须使用 GMT 时间格式；\r\n    F、＜METAHTTP-EQUIV=\"PICS-LABEL\" CONTECT=\"\"＞网页等级评定，在 IE 的 INTERNET 选项中有一项内容设置，可以防止浏览一些受限制的网站，而网站的限制级别就是通过 META 属性来设置的；\r\n    G、＜METAHTTP-EQUIV=\"WINDOWS-TARGET\" CONTECT=\"_TOP\"＞强制页面在当前窗口中以独立页面显示，可以防止自己的网页被别人当作一个FRAME 页调用；\r\n    H、＜METAHTTP-EQUIV=\"PAGE-ENTER\"CONTECT=\"REVEALTRANS(DURATION=10,TRANSTION=\r\n   50)\"＞和＜METAHTTP-EQUIV=\"PAGE-EXIT\" CONTECT=\"REVEALTRANS(DURATION=20，TRANSTION\r\n   =6)\"＞设定进入和离开页面时的特殊效果，这个功能即 FRONTPAGE 中的“格式/网页过渡”，不过所加的页面不能够是一个 FRAME 页面。', '', '0', '2017-12-26 23:26:56', '68', '1');
INSERT INTO `topic` VALUES ('6677', '26', '1', '为了保证系统的安全，Linux系统将/etc/passwd文件加密后，保存为文件（）。', '13aa6811-4f2d-4451-811b-233d4e414487.', '/etc/group', '/etc/netgroup', '/etc/init\r\n', '/etc/shadow \r\n', '', '', 'D', '', '0', '2017-12-26 23:27:10', '18', '1');
INSERT INTO `topic` VALUES ('6678', '4', '1', 'Servlet程序的入口点是？（ ）', 'e4f994bc-2da0-4331-9d36-7090ff3a8b3a.', 'init（）', 'main（）', 'service（）', 'doGet（）', '', '', 'C', '', '0', '2017-12-26 23:27:13', '64', '1');
INSERT INTO `topic` VALUES ('6679', '3', '4', '请针对java类加载过程中需要经历的“准备过程”描写', 'c654d956-4d42-4e6f-8523-1f7d1faf13e5.', null, null, null, null, null, null, '准备阶段是为类的静态变量分配内存并将其初始化为默认值，这些内存都将在方法区中进行分配。准备阶段不分配类中的实例变量的内存，实例变量将会在对象实例化时随着对象一起分配在JAVA堆中。\r\n\r\n    PUBLIC STATIC INT VALUE=123;//在准备阶段VALUE初始值为0 。在初始化阶段才会变为123 。', '', '0', '2017-12-26 23:27:18', '50', '1');
INSERT INTO `topic` VALUES ('6680', '5', '1', '以下不是javascript的全局函数的是（） ', '9e0ddb38-8738-4545-99e0-3942bd9dba70.', ' eval', ' parseFloat ', ' setTimeout', ' parseFloat ', '', '', 'C', '', '0', '2017-12-26 23:27:40', '62', '1');
INSERT INTO `topic` VALUES ('6681', '33', '1', '模块内聚度越高，说明模块内各成分彼此结合的程度越 ', '8f5295ef-16e6-4f28-a812-7a460f952595.', '松散', '紧密', '无法判断 ', '相同', '', '', 'B', '', '0', '2017-12-26 23:27:51', '64', '1');
INSERT INTO `topic` VALUES ('6682', '33', '1', '以下选项中不是项目经理的职责的是？', 'd4f7f087-b24f-4861-80de-502f2c817139.', '需求分析 ', '计划 ', ' 计划跟踪 ', '质量管理 ', '', '', 'D', '', '0', '2017-12-26 23:28:25', '64', '1');
INSERT INTO `topic` VALUES ('6683', '26', '1', '在默认情况下，使用ls命令显示当前目录下的所有文件时，符号连接文件一般显示为 （）。', '66c3a2bb-0252-4f17-a635-2438fa4f06c8.', '红色', '绿色', '浅蓝色', '黄色', '', '', 'C', '', '0', '2017-12-26 23:28:35', '18', '1');
INSERT INTO `topic` VALUES ('6684', '33', '1', '你使用mkdir命令创建一个临时文件夹/tmp/aaa，并将一些文件复制其中。你使用完后要删除/mnt/tmp文件夹及其中的所有文件，应该使用命', '4a738571-9516-41c0-b391-bf799d65d96f.', ' rm /tmp/aaa ', 'rm -r /tmp/aaa ', 'rmdir -r /tmp/aaa ', 'rmdir /tmp/aaa ', '', '', 'B', '', '0', '2017-12-26 23:28:36', '62', '1');
INSERT INTO `topic` VALUES ('6685', '33', '1', '下面的哪个方法在servlet的response的输出流在URL中保存Session ID。（ ）', '5b0f468e-2e78-4466-a4d7-4ce17b4da095.', 'The encodeURL method of the HttpServletRequest interface.', 'The encodeURL method of the HttpServletResponse interface.', 'The rewriteURL method of the HttpServletRequest interface.', 'The rewriteURL method of the HttpServletResponse interface.', '', '', 'B', '', '0', '2017-12-26 23:28:47', '64', '1');
INSERT INTO `topic` VALUES ('6686', '33', '3', '. 在UML提供的图中，（  ）用于按时间顺序描述对象间的交互。', '813af359-f35e-42ee-a374-e4102649f0a0.', null, null, null, null, null, null, '序列图', '', '0', '2017-12-26 23:28:58', '62', '1');
INSERT INTO `topic` VALUES ('6688', '33', '1', '看下面这个类\r\npublic class IfAttributsChanged implements ServletContextAttributeListener{\r\npublic void attributeAdded(ServletContextAttributeEvent scab){\r\nSystem.out.println(“加入一个属性”);\r\n}\r\npublic void attributeRemoved(ServletContextAttributeEvent scab){\r\nSystem.out.println(“删除一个属性”);\r\n}\r\n}\r\n关于IfAttributsChanged类的叙述，下列哪一个为真？', '26c21a89-d5cc-48b0-8d35-b3fcafccdaa9.', '此类可以成功编译', '此类无法成功编译，原因是缺少attributeChanged()方法。', '此类无法成功编译，原因是缺少attributeReplaced()方法。', '此类无法成功编译，原因是缺少attributeUpdated()方法。', '', '', 'C', '', '0', '2017-12-26 23:29:19', '64', '1');
INSERT INTO `topic` VALUES ('6689', '5', '5', '请写出一段 JavaScript 代码，要求页面有一个按钮，点击按钮弹出确认框。程序可以判断出用户点击的是“确认”还是“取消”', null, null, null, null, null, null, null, null, '', '0', '2017-12-26 23:29:31', '68', '1');
INSERT INTO `topic` VALUES ('6690', '33', '1', '. 下面有关系统并发访问数估算数据那个最有效：  ', 'e583fc09-1f55-4ff9-9d8b-e20f66f369bf.', '高峰时段日处理业务量100000 ', '高峰时段平均每秒请求数80', '同时在线用户数100 ', '平均每秒用户请求数50 ', '', '', 'B', '', '0', '2017-12-26 23:29:43', '62', '1');
INSERT INTO `topic` VALUES ('6691', '26', '1', '在C类IP地址中，netmask 255.255.255.192最多可以将网络划分成（）。', '57287d55-5104-4923-aaed-7f536f7bb840.', '2个子网 ', '4个子网 ', '6个子网 ', '8个子网 ', '', '', 'A', '', '0', '2017-12-26 23:29:50', '18', '1');
INSERT INTO `topic` VALUES ('6692', '5', '4', 'JavaScript 能否操作 cookie 和 session？', 'f265cf73-192f-4984-891b-e525b6314595.', null, null, null, null, null, null, 'JAVASCRIPT 可以操作 COOKIE，但是不能操作 SESSION', '', '0', '2017-12-26 23:30:12', '68', '1');
INSERT INTO `topic` VALUES ('6693', '4', '1', '不同级别的用户对同一对象拥有不同的访问权利或某个客户端不能直接操作到某个对象，但又必须和那个对象有所互动，这种情况最好使用什么设计模式。', '7c797ea2-56a4-4e38-97f7-9e195bfe141f.', 'Bridge模式', ' Fa？ade模式', 'Adapter模式', 'Proxy模式', '', '', 'D', '', '0', '2017-12-26 23:30:50', '62', '1');
INSERT INTO `topic` VALUES ('6694', '26', '1', ' xinetd服务器的配置文件是 （）。', '7af8412c-ab31-4a82-9fe3-873962fc6905.', '/etc/xinetd.conf', '/etc/xinetd.d', '/etc/xinetd.cf', '/etc/xinetd', '', '', 'A', '', '0', '2017-12-26 23:31:04', '18', '1');
INSERT INTO `topic` VALUES ('6695', '3', '4', '请对java加载过程中的初始化过程的功能进行描写', '1dfb56ba-b619-46fe-a4c0-a6de39b77a8c.', null, null, null, null, null, null, '初始化时类加载的最后一步，前面的类加载过程，除了在加载阶段用户应用程序可以通过自定义类加载器参与之外，其余动作完全由虚拟机主导和控制。到了初始化阶段，才真正开始执行类中定义的JAVA程序代码。', '', '0', '2017-12-26 23:31:05', '50', '1');
INSERT INTO `topic` VALUES ('6696', '3', '4', '简述java类加载机制?', '3036f6de-fd02-4613-a851-0f2245801fd7.', null, null, null, null, null, null, '虚拟机把描述类的数据从CLASS文件加载到内存，并对数据进行校验，解析和初始化，最终形成可以被虚拟机直接使用的JAVA类型。', '', '0', '2017-12-26 23:31:27', '50', '1');
INSERT INTO `topic` VALUES ('6697', '32', '1', ' PL/SQL中用来判断FETCH语句是否成功，并且在FETCH语句失败时返回逻辑真的属性是：', '76bda63b-e677-435f-b66f-d259bca26333.', '%ISOPEN', '%ROWCOUNT', '%NOTFOUND', '%FOUND ', '', '', 'C', '', '0', '2017-12-26 23:31:44', '62', '1');
INSERT INTO `topic` VALUES ('6698', '3', '4', '类加载器双亲委派模型机制？', '3da7f140-7940-4d2c-b4f2-5423a6d57abc.', null, null, null, null, null, null, '当一个类收到了类加载请求时，不会自己先去加载这个类，而是将其委派给父类，由父类去加载，如果此时父类不能加载，反馈给子类，由子类去完成类的加载。', '', '0', '2017-12-26 23:31:46', '50', '1');
INSERT INTO `topic` VALUES ('6699', '26', '1', ' telnet服务的默认端口是（）。', '7d668b69-63eb-436c-88ac-6b758c8d6c48.', '22', '21', '53', '23', '', '', 'D', '', '0', '2017-12-26 23:31:51', '18', '1');
INSERT INTO `topic` VALUES ('6700', '3', '5', '请写出如下正则表达式的含义', '7277ce74-7611-45ea-82d8-a58ab95fb141.png', null, null, null, null, null, null, null, '', '0', '2017-12-26 23:31:54', '68', '1');
INSERT INTO `topic` VALUES ('6701', '3', '4', '什么是类加载器，类加载器有哪些?', '8f1a75b5-ac1e-4107-abd5-b864d9da6b42.', null, null, null, null, null, null, '实现通过类的权限定名获取该类的二进制字节流的代码块叫做类加载器。\r\n主要有一下四种类加载器:\r\n1. 启动类加载器(BOOTSTRAP CLASSLOADER)用来加载JAVA核心类库，无法被JAVA程序直接引用。\r\n2. 扩展类加载器(EXTENSIONS CLASS LOADER):它用来加载 JAVA 的扩展库。JAVA 虚拟机的实现会提供一个扩展库目录。该类加载器在此目录里面查找并加载 JAVA 类。\r\n3. 系统类加载器（SYSTEM CLASS LOADER）：它根据 JAVA 应用的类路径（CLASSPATH）来加载 JAVA 类。一般来说，JAVA 应用的类都是由它来完成加载的。可以通过 CLASSLOADER.GETSYSTEMCLASSLOADER()来获取它。\r\n4. 用户自定义类加载器，通过继承 JAVA.LANG.CLASSLOADER类的方式实现。', '', '0', '2017-12-26 23:32:05', '50', '1');
INSERT INTO `topic` VALUES ('6702', '32', '1', 'Oracle数据库表空间与用户的关系是 ( )?', 'bb77d38b-00bd-4d91-a1d3-ae9da247346e.', '一对一', '一对多', '多对一', '多对多', '', '', 'D', '', '0', '2017-12-26 23:32:07', '64', '1');
INSERT INTO `topic` VALUES ('6703', '3', '4', '请用正则表达式匹配出 QQ 号（假设 QQ 号码为 5—10 位）     ', 'bc2acbec-1356-44ce-bf44-fe7457366247.', null, null, null, null, null, null, ' ^\\D{5,10}$', '', '0', '2017-12-26 23:32:20', '68', '1');
INSERT INTO `topic` VALUES ('6704', '32', '1', 'oracle数据库表空间与数据文件的关系描述正确的是( )', 'fe829d55-228a-47a4-890e-c9da4c6bd7f0.', 'oracle数据库表空间与数据文件的关系描述正确的是( )', '一个表空间可以对应多个数据文件', '一个数据文件可以对应多个表空间', '表空间与数据文件没任何对应关系', '', '', 'B', '', '0', '2017-12-26 23:32:36', '64', '1');
INSERT INTO `topic` VALUES ('6705', '3', '4', '简述java内存分配与回收策率以及Minor GC和Major GC', '5f3b9a8c-c1c9-41c0-8c6c-a6ddc7d38fdd.', null, null, null, null, null, null, '对象优先在堆的EDEN区分配。\r\n大对象直接进入老年代.\r\n长期存活的对象将直接进入老年代.\r\n当EDEN区没有足够的空间进行分配时，虚拟机会执行一次MINOR GC.MINOR GC通常发生在新生代的EDEN区，在这个区的对象生存期短，往往发生GC的频率较高，回收速度比较快;FULL GC/MAJOR GC 发生在老年代，一般情况下，触发老年代GC的时候不会触发MINOR GC,但是通过配置，可以在FULL GC之前进行一次MINOR GC这样可以加快老年代的回收速度。', '', '0', '2017-12-26 23:32:42', '50', '1');
INSERT INTO `topic` VALUES ('6706', '32', '1', '判断这PL/SQL 代码块\r\nBEGIN\r\nFOR i IN 1..6 LOOP\r\nIF i = 2 OR i = 3 THEN null;\r\nELSE\r\nINSERT INTO example(one) VALUES (i);\r\nEND IF;\r\nROLLBACK;\r\nEND LOOP;\r\nCOMMIT;\r\nEND;\r\n有多少行被插入到表 EXAMPLE ?', '176c4fab-e02c-4277-80d3-c97ed92b58a1.', '0', '1', '2', '3', '', '', 'A', '', '0', '2017-12-26 23:33:07', '64', '1');
INSERT INTO `topic` VALUES ('6707', '33', '4', 'UML中有哪些常用的图？', '53c4d37a-aaf6-496d-b899-f4a96cc46a5d.', null, null, null, null, null, null, 'ML定义了多种图形化的符号来描述软件系统部分或全部的静态结构和动态结构，包括：用例图（USE CASE DIAGRAM）、类图（CLASS DIAGRAM）、时序图（SEQUENCE DIAGRAM）、协作图（COLLABORATION DIAGRAM）、状态图（STATECHART DIAGRAM）、活动图（ACTIVITY DIAGRAM）、构件图（COMPONENT DIAGRAM）、部署图（DEPLOYMENT DIAGRAM）等。在这些图形化符号中，有三种图最为重要，分别是：用例图（用来捕获需求，描述系统的功能，通过该图可以迅速的了解系统的功能模块及其关系）、类图（描述类以及类与类之间的关系，通过该图可以快速了解系统）、时序图', '', '0', '2017-12-26 23:33:07', '65', '1');
INSERT INTO `topic` VALUES ('6708', '26', '1', ' DNS的区域文件中，别名记录的标志是（）。', '67c49f9b-47f8-4a3b-bca4-205e3f15ee3a.', 'A', 'PTR', 'NS', 'CNAME', '', '', 'D', '', '0', '2017-12-26 23:33:10', '18', '1');
INSERT INTO `topic` VALUES ('6709', '33', '1', ' 关于以下程序代码的说明正确的是：', '1f3ea006-d67b-474f-87ac-8beb8f60e5b0.png', '程序通过编译，输出结果为：x=103 ', '10行不能通过编译，因为x是私有静态变量', '5行不能通过编译，因为引用了私有静态变量', '程序通过编译，输出结果为：x=102', '', '', 'D', '', '0', '2017-12-26 23:33:15', '62', '1');
INSERT INTO `topic` VALUES ('6710', '33', '4', '、简述一下你了解的设计模式。', 'bf6e2f81-df9b-42de-a826-f2d0b112c487.', null, null, null, null, null, null, '所谓设计模式，就是一套被反复使用的代码设计经验的总结（情境中一个问题经过证实的一个解决方案）。使用设计模式是为了可重用代码、让代码更容易被他人理解、保证代码可靠性。设计模式使人们可以更加简单方便的复用成功的设计和体系结构。将已证实的技术表述成设计模式也会使新系统开发者更加容易理解其设计思路。', '', '0', '2017-12-26 23:33:35', '65', '1');
INSERT INTO `topic` VALUES ('6711', '33', '1', '你判断下面语句，有什么作用？\r\nGRANT update ON inventory TO joe WITH GRANT OPTION;', '3fd45611-54f2-4b27-bc77-48265cdbf167.', '一个系统权限被授予用户JOE', '一个对象权限被授予用户JOE', '用户JOE被授予在这个对象上的所有权限', '一个系统权限和一个对象权限被授予用户JOE', '', '', 'B', '', '0', '2017-12-26 23:33:43', '64', '1');
INSERT INTO `topic` VALUES ('6713', '32', '1', '表 CLASSES 和 表 SCHEDULE 结构如下:\r\nCLASSES：\r\nID NUMBER(9)\r\nCLASS_NAME VARCHAR2(2)\r\nTEACHER_ID NUMBER(9)\r\nSCHEDULE：\r\nCLASS_TIME DATE\r\nCLASS_ID NUMBER(9)\r\n你建一个视图显示每一课的课名、课时，并按教师ID排序，判断下面语句将返回何种结果？\r\nCREATE VIEW class_schedule AS\r\nSELECT C.class_name， s.class_time FROM classes c， schedule s WHERE C.id = s.class_id;', '89770620-46f4-46b7-8304-a7e015abc1ad.', '语句创建视图 CLASS_SCHEDULE 且可产生预期结果.', '.语句创建视图 CLASS_SCHEDULE 但不能产生预期结果.', '语法错误，因为视图不可基于连接查询.', '语法错，因为语句未包含 ORDER BY 子句.', '', '', 'B', '', '0', '2017-12-26 23:34:24', '64', '1');
INSERT INTO `topic` VALUES ('6714', '3', '1', ' 定义字符串：String s1=\"hello\"；对下面程序描述正确的是：', '57a1d422-bf89-4776-94fe-8b241307ccd4.png', ' 输出 s1 !=hello ', '编译正确,运行错误', '产生编译错误', ' 输出 s1=\"hello\" ', '', '', 'D', '', '0', '2017-12-26 23:34:27', '62', '1');
INSERT INTO `topic` VALUES ('6715', '32', '1', 'Oracle数据库中，在SQL语句中连接字符串的方法是哪个？', '1a45b9d9-2048-43a6-b195-f1bf7c3c961a.', 'cat', 'concat', 'join', '+', '', '', 'B', '', '0', '2017-12-26 23:34:48', '64', '1');
INSERT INTO `topic` VALUES ('6716', '33', '4', '简述一下面向对象的”六原则一法则', '741cfc65-bd61-4b70-9c8b-98e4a7919b18.', null, null, null, null, null, null, ' 单一职责原则：一个类只做它该做的事情。（单一职责原则想表达的就是”高内聚”，写代码最终极的原则只有六个字”高内聚、低耦合”，就如同葵花宝典或辟邪剑谱的中心思想就八个字”欲练此功必先自宫”，所谓的高内聚就是一个代码模', '', '0', '2017-12-26 23:35:10', '65', '1');
INSERT INTO `topic` VALUES ('6717', '32', '1', '定义游标如下：\r\nDECLARE\r\nCURSOR query_cursor(v_salary) IS\r\nSELECT last_name， salary， dept_no\r\nFROM employee\r\nWHERE salary&gt;v_salary;\r\n这条语句为什么会错误？', 'c36ed988-b770-4e69-8ecb-212a919c52ec.', '在游标定义中不允许出现where子句', '在游标定义中不允许出现where子句', '参数未指定为变量数据类型', '定义cursor的语法写错了', '', '', 'C', '', '0', '2017-12-26 23:35:26', '64', '1');
INSERT INTO `topic` VALUES ('6718', '33', '4', '、如何通过反射调用对象的方法？', '71da3738-0ddf-4f14-a193-aa23ed3c6792.', null, null, null, null, null, null, '请看下面的代码：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\nIMPORT JAVA.LANG.REFLECT.METHOD;\r\n \r\nCLASS METHODINVOKETEST {\r\n \r\n    PUBLIC STATIC VOID MAIN(STRING[] ARGS) THROWS EXCEPTION {\r\n        STRING STR = \"HELLO\";\r\n        METHOD M = STR.GETCLASS().GETMETHOD(\"TOUPPERCASE\");\r\n        SYSTEM.OUT.PRINTLN(M.INVOKE(STR));  // HELLO\r\n    }', '', '0', '2017-12-26 23:35:32', '65', '1');
INSERT INTO `topic` VALUES ('6719', '33', '5', '请写出一个单例模式。', null, null, null, null, null, null, null, null, '', '0', '2017-12-26 23:35:52', '68', '1');
INSERT INTO `topic` VALUES ('6720', '33', '4', '、如何通过反射获取和设置对象私有字段的值？', '2464ee71-3a9f-4d79-8f22-d18052bb6969.', null, null, null, null, null, null, '可以通过类对象的GETDECLAREDFIELD()方法字段（FIELD）对象，然后再通过字段对象的SETACCESSIBLE(TRUE)将其设置为可以访问，接下来就可以通过GET/SET方法来获取/设置字段的值了', '', '0', '2017-12-26 23:35:54', '65', '1');
INSERT INTO `topic` VALUES ('6721', '32', '1', '在 PL/SQL 块的哪部分可以对初始变量赋予新值?', '2420c768-92d5-49fc-a5e5-dfe2222293f0.', '结尾部分', '开头部分', '执行部分', '声明部分', '', '', 'C', '', '0', '2017-12-26 23:35:55', '64', '1');
INSERT INTO `topic` VALUES ('6722', '3', '4', '在 java 中，List 是个接口，那实现 List 接口的类有哪些，有什么区别？', 'e7e4da6c-43ff-486f-b7f3-dacaad16401f.', null, null, null, null, null, null, ' ARRAYLIST 是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，LINKEDLIST 使用双向链表实现存储按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。', '', '0', '2017-12-26 23:36:22', '68', '1');
INSERT INTO `topic` VALUES ('6723', '32', '1', '哪句可以实现显示 id 和 description ，条件满足订单时间在 January 1， 1997 以前的，且单价小于 1. 或者大于 5. 的， 结果用订单时间降序排列', 'b57fe8a9-97b3-49df-a425-fbf7b7d3cd0a.', 'SELECT id_number， description FROM inventory\r\nWHERE price IN (1.， 5.) OR order_date < ’1-JAN-97′\r\nORDER BY order_date DESC;', 'SELECT id_number， description FROM inventory\r\nWHERE price BETWEEN 1. AND 5. OR order_date < ’1-JAN-1997′\r\nORDER BY order_date;', 'SELECT id_number， description FROM inventory\r\nWHERE price < 1. OR price > 5. AND order_date < ’1 -Jan-97′\r\nORDER BY order_date ASC;', 'SELECT id_number， description FROM inventory\r\nWHERE (price <1. OR price > 5.) AND order_date < ’1-JAN-1997′\r\nORDER BY order_date DESC;', '', '', 'D', '', '0', '2017-12-26 23:36:27', '64', '1');
INSERT INTO `topic` VALUES ('6724', '33', '4', '怎么用反射创建对象？', '11a43499-cbef-41c6-ac05-d40e0d839ad3.', null, null, null, null, null, null, '方法1：通过类对象调用NEWINSTANCE()方法，例如：STRING.CLASS.NEWINSTANCE()\r\n- 方法2：通过类对象的GETCONSTRUCTOR()或GETDECLAREDCONSTRUCTOR()方法获得构造器（CONSTRUCTOR）对象并调用其NEWINSTANCE()方法创建对象，例如：STRING.CLASS.GETCONSTRUCTOR(STRING.CLASS).NEWINSTANCE(“HELLO”);', '', '0', '2017-12-26 23:36:43', '65', '1');
INSERT INTO `topic` VALUES ('6725', '3', '4', 'Class.forName（String className）这个方法的作用', 'f5e6db15-7974-44c3-a5a5-4221775ea48e.', null, null, null, null, null, null, '通过类的全名获得该类的类对象', '', '0', '2017-12-26 23:36:52', '68', '1');
INSERT INTO `topic` VALUES ('6726', '32', '1', '.判断下面句子，将返回什么值？\r\nSELECT id_number， description， price FROM inventory\r\nWHERE manufacturer_id IN (SELECT manufacturer_id FROM inventory WHERE price &gt; 8. OR quantity &gt; 1);', '80a944fe-070a-47b3-90fa-57c47583db50.', '返回单价大于8.且数量大于1的存货的 货号、种类、单价信息', '返回单价大于8.或者数量大于1的存货的 货号、种类、单价信息.', '返回单价大于8.或者数量大于1且有制造商号的存货的 货号、种类、单价信息.', '返回单价大于8.或者数量大于1的制造商的所有存货的 货号、种类、单价信息.', '', '', 'C', '', '0', '2017-12-26 23:36:55', '64', '1');
INSERT INTO `topic` VALUES ('6727', '33', '4', '你该怎么样获得一个类的类对象', 'ada50821-8b4c-4a23-be7f-9157de85c0c1.', null, null, null, null, null, null, ' 方法1：类型.CLASS，例如：STRING.CLASS\r\n- 方法2：对象.GETCLASS()，例如：”HELLO”.GETCLASS()\r\n- 方法3：CLASS.FORNAME()，例如：CLASS.FORNAME(“JAVA.LANG.STRING”)', '', '0', '2017-12-26 23:37:15', '65', '1');
INSERT INTO `topic` VALUES ('6728', '32', '4', '你认为在表上建立索引可以提高数据库系统的效率吗，为什么？', '85857664-430f-4730-85cd-f30a82648e8f.', null, null, null, null, null, null, '不一定建立太多的索引将会影响更新和插入的速度，因为它需要同样更新每个索引文件。对于一个经常需要更新和插入的表格，就没有必要为一个很少使用的 WHERE 子句单独建立索引了，对于比较小的表，排序的开销不会很大，也没有必要建立另外的索引。', '', '0', '2017-12-26 23:37:17', '68', '1');
INSERT INTO `topic` VALUES ('6729', '32', '1', '考虑下列声明，那些是不合法的', '1c95407b-9402-4b67-9a65-8e140b8b5b67.', 'DECLARE v_name， v_dept VARCHAR2(14);', 'DECLARE v_test NUMBER(5);', 'DECLARE V_MAXSALARY NUMBER(7， 2) = 5;', 'DECLARE V_JOINDATE BOOLEAN := SYSDATE;', '', '', 'ACD', '', '0', '2017-12-26 23:37:21', '64', '1');
INSERT INTO `topic` VALUES ('6730', '26', '1', '如要修改Apache服务器工作的端口号为1080，则需要修改的配置文件中的语句为（）。 \r\n', 'a83c38f1-6b45-432a-97c5-1d508cc52bd5.', 'pidfile 80\r\n', 'timeout 80\r\n', 'listen 80 ', 'keeplive 80 \r\n', '', '', 'C', '', '0', '2017-12-26 23:37:28', '18', '1');
INSERT INTO `topic` VALUES ('6731', '33', '4', 'Java中是如何支持正则表达式操作的？', '620033c2-9d08-49df-b7a4-0b6fb2459693.', null, null, null, null, null, null, '：JAVA中的STRING类提供了支持正则表达式操作的方法，包括：MATCHES()、REPLACEALL()、REPLACEFIRST()、SPLIT()。此外，JAVA中可以用PATTERN类表示正则表达式对象，它提供了丰富的API进行各种正则表达式操作，请参考下面面试题的代码。', '', '0', '2017-12-26 23:37:37', '65', '1');
INSERT INTO `topic` VALUES ('6732', '4', '4', 'hibernate 中的 java 对象有几种状态，其相互关系如何（区别和相互转换）     ', '294d6a35-f45d-4686-87ab-1ae07b3ac433.', null, null, null, null, null, null, '在 HIBERNATE中，对象有三种状态：临时状态、持久状态和游离状态。\r\n临时状态：当 NEW 一个实体对象后，这个对象处于临时状态，即这个对象只是一个保存临时数据的内存区域，如果没有变量引用这个对象，则会被 JRE 垃圾回收机制回收。这个对象所保存的数据与数据库没有任何关系，除非通过 SESSION 的 SAVE 或者SAVEORUPDATE 把临时对象与数据库关联，并把数据插入或者更新到数据库，这个对象才转换为持久对象；\r\n持久状态:持久化对象的实例在数据库中有对应的记录，并拥有一个持久化表示（ID）。对持久化对象进行 DELETE 操作后，数据库中对应的记录将被删除，那么持久化对象与数据库记录不再存在对应关系，持久化对象变成临时状态。持久化对象被修改变更后，不会马上同步到数据库，直到数据库事务提交。在同步之前，持久化对象是脏的（DIRTY）    。\r\n游离状态：当 SESSION进行了 CLOSE、CLEAR 或者 EVICT 后，持久化对象虽然拥有持久化标识符和与数据库对应记录一致的值 但是因为会话已经消失 对象不在持久化管理之内，        所以处于游离状态（也叫：脱管状态）。游离状态的对象与临时状态对象是十分相似的，只是它还含有持久化标识。', '', '0', '2017-12-26 23:37:41', '68', '1');
INSERT INTO `topic` VALUES ('6733', '32', '1', '关于 PL/SQL 块的执行部分下列说法正确的是？(', 'b91222f5-7c7e-4446-99c4-1ae06765291a.', 'PL/SQL 表达式可以包含分组函数.', 'PL/SQL表达式不可以包含SQL函数.', '在SQL 语句中部分分组函数可用.', ' 以上都不对', '', '', 'A', '', '0', '2017-12-26 23:37:44', '64', '1');
INSERT INTO `topic` VALUES ('6734', '32', '1', '表（TEACHER）包含以下列：\r\nID NUMBER(7) PK\r\nSALARY NUMBER(7，2)\r\nSUBJECT_ID NUMBER(7)\r\n判断以下两个SQL语句：\r\n（1）SELECT ROUND(SUM(salary)，-2) FROM teacher ;\r\n（2）SELECT subject_id， ROUND(SUM(salary)，-2) FROM teacher GROUP BY subject_id ;\r\n有什么不同结果?', '7bf77b76-494c-40b7-9e4a-aa789ddb9275.', '语句1将返回每个老师一个结果', '. 语句2将返回多个结果', '结果相同，显示不同', '将有一个句子产生错误', '', '', 'B', '', '0', '2017-12-26 23:38:10', '64', '1');
INSERT INTO `topic` VALUES ('6735', '33', '4', '阐述一下正则表达式。', '79128d45-fb8f-40a2-a5ed-c30e722eec4f.', null, null, null, null, null, null, '在编写处理字符串的程序时，经常会有查找符合某些复杂规则的字符串的需要。正则表达式就是用于描述这些规则的工具。换句话说，正则表达式就是记录文本规则的代码。', '', '0', '2017-12-26 23:38:22', '65', '1');
INSERT INTO `topic` VALUES ('6736', '33', '4', '什么是 AOP 和 OOP，IOC 和 DI 有什么不同?', 'd9fb60c1-800b-4e49-961f-7b137658599d.', null, null, null, null, null, null, '1）面向对象编程（OBJECT ORIENTED PROGRAMMING，OOP，面向对象程序设计）是一种计算机编程架构。AOP 是 OOP 的延续，是 ASPECT ORIENTED PROGRAMMING 的缩写，意思是面向方面编程。 将通用需求功能从不相关类之中分离出来；同时，能够使得很多类共享一个行为，一旦行为发生变化，不必修改很多类，只要修改这个行为就可以。AOP 就是这种实现分散关注的编程方法，它将“关注”封装在“方面”中\r\n2）控制反转 IOC(INVERSION OF CONTROL) 控制指的就是程序相关类之间的依赖关系.传统观念设计中,通常由调用者来创建被调用者的实例, 在 SPRING 里,创建被调用者的工作不再由调用者来完成,而是由 SPRING 容器完成，依赖关系被反转了，称为控制反转，目的是为了获得更好的扩展性和良好的可维护性。依赖注入(DEPENDENCY INJECTION)创建被调用者的工作由 SPRING 容器完成，然后注入调用者，因此也称依赖注入。控制反转和依赖注入是同一个概念。', '', '0', '2017-12-26 23:38:23', '68', '1');
INSERT INTO `topic` VALUES ('6737', '26', '1', '为了使得vsftpd服务器单独启动，可以修改文件vsftpd.conf中的行 （）。', '41cb5109-8bcd-4807-929e-4b05095e37bb.', 'listen = YES', 'listen = NO ', 'boot = standalone', '#listen = YES ', '', '', 'A', '', '0', '2017-12-26 23:38:26', '18', '1');
INSERT INTO `topic` VALUES ('6738', '33', '4', 'JDBC能否处理Blob和Clob？', '9e90bfd3-02b7-46c6-a618-95dd4075c501.', null, null, null, null, null, null, ' BLOB是指二进制大对象（BINARY LARGE OBJECT），而CLOB是指大字符对象（CHARACTER LARGE OBJEC），因此其中BLOB是为存储大的二进制数据而设计的，而CLOB是为存储大的文本数据而设计的。JDBC的PREPAREDSTATEMENT和RESULTSET都提供了相应的方法来支持BLOB和CLOB操作。下面的代码展示了如何使用JDBC操作LOB：', '', '0', '2017-12-26 23:38:39', '65', '1');
INSERT INTO `topic` VALUES ('6739', '4', '4', 'Struts1 中 actionform 和 action 属于 MVC 哪一层，为什么？', '30875a49-ca09-4095-9ce2-e8fe3567a0ff.', null, null, null, null, null, null, 'ACTIONFORM 和 ACTION 属于 MVC 的 MODEL 层，ACTION 用来处理业务逻辑，ACTIONFORM 保存用户表单数据以便于在不同页面间传递。而 MVC 中的 MODEL 层就是业务逻辑层，该层用于实现具体的业务逻辑、状态维护及管理。', '', '0', '2017-12-26 23:38:42', '68', '1');
INSERT INTO `topic` VALUES ('6740', '32', '1', '游标的哪一种属性指示fetch语句是否从活动集中返回行，如未能返回行，则此属性的值为\r\ntrue ？(', '9df37fd0-86bf-4514-83c4-5c378cdcf9b2.', '%FOUND', '%NOTFOUND', '%ROWCOUNT', '%ISOPEN', '', '', 'B', '', '0', '2017-12-26 23:38:44', '64', '1');
INSERT INTO `topic` VALUES ('6741', '4', '1', '在实现DAO设计模式时，下面哪种模式经常被采用：', 'dd290f04-ffdb-4daf-8bed-0e0c655b7757.', ' Proxy模式', 'Factory模式', '\r\n Prototype模式\r\n', 'Observer模式', '', '', 'B', '', '0', '2017-12-26 23:38:44', '62', '1');
INSERT INTO `topic` VALUES ('6742', '33', '4', '1、JDBC中如何进行事务处理？', '5fd5e8fa-11a6-4b16-820e-70c13ae4dab3.', null, null, null, null, null, null, '：CONNECTION提供了事务处理的方法，通过调用SETAUTOCOMMIT(FALSE)可以设置手动提交事务；当事务完成后用COMMIT()显式提交事务；如果在事务处理过程中发生异常则通过ROLLBACK()进行事务回滚。除此之外，从JDBC 3.0中还引入了SAVEPOINT（保存点）的概念，允许通过代码设置保存点并让事务回滚到指定的保存点。', '', '0', '2017-12-26 23:38:57', '65', '1');
INSERT INTO `topic` VALUES ('6743', '32', '1', '哪一子句可实现 SELECT 语句查询员工平均工资小于5的部门信息 ? ', 'ce947be7-7b18-41d4-9400-7b9eba6f175a.', 'GROUP BY dept_id WHERE AVG(sal) < 5', 'GROUP BY AVG(sal) HAVING AVG(sal) < 5', 'GROUP BY dept_id HAVING AVG(sal) < 5', 'GROUP BY AVG(sal) < 5', '', '', 'C', '', '0', '2017-12-26 23:39:15', '64', '1');
INSERT INTO `topic` VALUES ('6744', '3', '4', '请按照输出级别由低到高的顺序写出日志输出级别。', '0177f07d-8e0a-4908-b723-b23c83399980.', null, null, null, null, null, null, 'LOG4J 分 为 OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL 或者您定义的级别。LOG4J建议只使用四个级别，优先级从高到低分别是 ERROR、WARN、INFO、DEBUG。通过在这里定义的级别，您可以控制到应用程序中相应级别的日志信息的开关。比如在这里定义了 INFO 级别， 则应用程序中所有 DEBUG 级别的日志信息将不被打印出来。', '', '0', '2017-12-26 23:39:17', '68', '1');
INSERT INTO `topic` VALUES ('6745', '26', '3', '在TCP/IP网络中，源地址和目标地址都使用（）的数对来标识。\r\n ', 'fcc6cc89-b621-489f-aa0b-0dbf21bcd060.', null, null, null, null, null, null, 'IP地址:端口号 ', '', '0', '2017-12-26 23:39:33', '18', '1');
INSERT INTO `topic` VALUES ('6746', '33', '4', '请你回答一下事务的ACID是指什么？', '0cb50fc8-89b9-4301-a01a-ac421b685e3a.', null, null, null, null, null, null, '- 原子性(ATOMIC)：事务中各项操作，要么全做要么全不做，任何一项操作的失败都会导致整个事务的失败；\r\n- 一致性(CONSISTENT)：事务结束后系统状态是一致的；\r\n- 隔离性(ISOLATED)：并发执行的事务彼此无法看到对方的中间状态；\r\n- 持久性(DURABLE)：事务完成后所做的改动都会被持久化，即使发生灾难性的失败。通过日志和同步备份可以在故障发生后重建数据。', '', '0', '2017-12-26 23:39:37', '65', '1');
INSERT INTO `topic` VALUES ('6747', '32', '1', '在PL/SQL中使用哪几种语句来对变量进行赋值？', '8ea31640-34f9-4019-950f-65eaa7a784dd.', '：=', 'SELECT INTO', 'FETCH INTO', '=', '', '', 'ABC', '', '0', '2017-12-26 23:39:42', '64', '1');
INSERT INTO `topic` VALUES ('6748', '4', '4', '说出几个与 spring 同类型的开源框架，说出几个与 hibernate 同类型的开源框架,说出几个与struts 同类型的开源框架', '4cd9827f-4220-4a32-a75d-fc4d1d738f4d.', null, null, null, null, null, null, '1）与 SPRING 同类型的开源框架：JUIDE、EJB3.0、PICOCONTAINER\r\n2）与 HIBERNATE 同类型的开源框架 ：IBATIS，JDO，JPA\r\n3）几个与 STRUTS 同类型的开源框架：WEBWORK，TAPESTRY，JSF', '', '0', '2017-12-26 23:39:46', '68', '1');
INSERT INTO `topic` VALUES ('6749', '33', '4', '请你回答一下什么是DAO模式？', 'ab3d615d-e24b-459a-ae96-ca836fb2324b.', null, null, null, null, null, null, 'DAO（DATA ACCESS OBJECT）顾名思义是一个为数据库或其他持久化机制提供了抽象接口的对象，在不暴露底层持久化方案实现细节的前提下提供了各种数据访问操作。在实际的开发中，应该将所有对数据源的访问操作进行抽象化后封装在一个公共API中', '', '0', '2017-12-26 23:40:07', '65', '1');
INSERT INTO `topic` VALUES ('6751', '32', '1', '你试图用下面句子查询数据：SELECT 1/NVL(quantity， ) FROM inventory;\r\n为何QUANTITY为 null 空值时，将导致出错？\r\n', '1bd41ab6-b755-48e8-bec9-a331164e9829.', '表达式企图被空值除.', '.换函数参数数据类型不一致.', '.换函数参数数据类型不一致.', '表达式企图被零除.', '', '', 'D', '', '0', '2017-12-26 23:40:15', '64', '1');
INSERT INTO `topic` VALUES ('6752', '32', '1', 'PL/SQL的哪一部分实现对数据的操作? ', '03616f5f-5778-4182-9598-0d37bfe523ef.', '头部分', '列外部分', '执行部分', '声明部分', '', '', 'C', '', '0', '2017-12-26 23:40:36', '64', '1');
INSERT INTO `topic` VALUES ('6753', '33', '4', '请你详细回答一下在进行数据库编程时，连接池有什么作用？', '5fd5fc06-362d-41ec-aefa-d13e2222d190.', null, null, null, null, null, null, '由于创建连接和释放连接都有很大的开销（尤其是数据库服务器不在本地时，每次建立连接都需要进行TCP的三次握手，释放连接需要进行TCP四次握手，造成的开销是不可忽视的），为了提升系统访问数据库的性能，可以事先创建若干连接置于连接池中', '', '0', '2017-12-26 23:40:50', '65', '1');
INSERT INTO `topic` VALUES ('6754', '32', '1', '下列哪个集合操作符返回两个查询所选择的所有的行', 'a87eb875-fa00-4867-a85c-136efb451f96.', 'Union', 'Union all', 'Union only', 'connect by', '', '', 'B', '', '0', '2017-12-26 23:40:58', '64', '1');
INSERT INTO `topic` VALUES ('6755', '26', '3', '在Red Hat Linux系统中，用户可以使用（）组合键来在不同的虚拟屏幕之间切换。', 'ad70c4a8-f193-4ac8-bb11-47ac8ef9d31f.', null, null, null, null, null, null, 'ALT+FN(N=1、2、3、4、5、6) \r\n', '', '0', '2017-12-26 23:41:12', '18', '1');
INSERT INTO `topic` VALUES ('6756', '32', '1', '在Oracle中，当需要使用显式游标更新或删除游标中的行时，UPDATE或DELETE语句必须使用（）子句。', 'ca8fdf00-8342-47af-a19a-b3db426efdba.', 'WHERE CURRENT OF', 'WHERE CURSOR OF', 'FOR UPDATE', 'FOR CURSOR OF', '', '', 'C', '', '0', '2017-12-26 23:41:21', '64', '1');
INSERT INTO `topic` VALUES ('6757', '32', '1', '在Oracle中，使用下列的语句：CREATE PUBLIC SYNONYM parts FOR Scott.inventory;\r\n完成的任务是（）。', '53f84ea0-8efa-47ab-a06a-d31d52491b50.', '将Scott.inventory对象的访问权限赋予所有用户', '指定了新的对象权限', '指定了新的系统权限', '给Scott.inventory对象创建一个公用同义词parts', '', '', 'D', '', '0', '2017-12-26 23:41:41', '64', '1');
INSERT INTO `topic` VALUES ('6758', '4', '4', 'struts2 中，OGNL 访问值栈的时候查找的顺序是什么？请排序：模型对象、临时对象、固定名称的对象、Action 对象', '88e2e4ec-2f7f-403d-826d-319ae44f6e94.', null, null, null, null, null, null, 'STRUTS2 的值栈排列顺序为：1）.临时对象；2）.模型对象；3）.ACTION 对象；4）.固定名称对象（如#APPLICATION, #SESSION,#REQUEST 等对象）     ', '', '0', '2017-12-26 23:42:09', '68', '1');
INSERT INTO `topic` VALUES ('6759', '33', '4', '请你分析一下，如何提升读取数据的性能？如何提升更新数据的性能？', 'fa68aa37-b4f8-4d3d-87bf-a420f1c0a28c.', null, null, null, null, null, null, '：要提升读取数据的性能，可以指定通过结果集（RESULTSET）对象的SETFETCHSIZE()方法指定每次抓取的记录数（典型的空间换时间策略）；要提升更新数据的性能可以使用PREPAREDSTATEMENT语句构建批处理，将若干SQL语句置于一个批处理中执行。', '', '0', '2017-12-26 23:42:18', '65', '1');
INSERT INTO `topic` VALUES ('6760', '4', '4', 'struts2 中，Action 通过什么方式获得用户从页面输入的数据，又是通过什么方式把其自身的数据传给视图的？', 'adc6dceb-2d6f-4dfd-88fd-14b50fb796e3.', null, null, null, null, null, null, '1）可以直接通过与表单元素相同名称的数据成员（需要存在符合命名规范 SET和 GET 方法）获取页面表单数据。\r\n2）会把处理好的数据成员放入值栈中，到页面可以使用 STRUTS2 标签取值就可以了。', '', '0', '2017-12-26 23:42:30', '68', '1');
INSERT INTO `topic` VALUES ('6761', '26', '3', '现行的DNS系统中，通常有三种DNS服务器（）、 \r\n（）和（）。', 'a47373cd-5471-4cae-a681-ee0a0c70612c.', null, null, null, null, null, null, '主DNS服务器、辅助DNS服务器、高速缓冲DNS服务器 \r\n', '', '0', '2017-12-26 23:42:32', '18', '1');
INSERT INTO `topic` VALUES ('6762', '32', '1', '有如下SQL片段\r\na．select * from asdfh a where a.kehhao in (select kehhao from retail_vip )\r\nb．select * from asdfh a where exists (select r. kehhao from retail_vip r where r.kehhao = a.kehhao)\r\n则以下哪些描述是正确的：', '2d2a039d-79ec-462b-920d-7873e23df220.', 'a，b 含义相同', 'a的效率高于b', ' b的效率高于a', 'a，b 效率高低依赖于表 asdfh 和 kehhao的结构', 'a，b 效率高低需考虑表 asdfh和kehhao的数据量', '', 'E', '', '0', '2017-12-26 23:42:44', '64', '1');
INSERT INTO `topic` VALUES ('6763', '33', '4', '请你回答一下 Statement和PreparedStatement有什么区别？哪个性能更好？', '46050e4a-6daf-4b5b-8717-d787c2fe53f7.', null, null, null, null, null, null, '与STATEMENT相比，①PREPAREDSTATEMENT接口代表预编译的语句，它主要的优势在于可以减少SQL的编译错误并增加SQL的安全性（减少SQL注射攻击的可能性）；②PREPAREDSTATEMENT中的SQL语句是可以带参数的，避免了用字符串连接拼接SQL语句的麻烦和不安全；', '', '0', '2017-12-26 23:42:56', '65', '1');
INSERT INTO `topic` VALUES ('6764', '26', '3', '在Red Hat Linux中第一块以太网接口的TCP/IP网络参数存放在文件（）。', '28dcbb80-230c-4ec2-a5b1-6a73bd545297.', null, null, null, null, null, null, '/ETC/SYSCONFIG/NETWORK-SCRIPTS/IFCFG-ETH0 (IFCFG-ETH0) \r\n', '', '0', '2017-12-26 23:43:06', '18', '1');
INSERT INTO `topic` VALUES ('6765', '32', '1', '有如下表结构\r\n客户号（kehhao），日期（riqi），账户余额(zhhuye)\r\n说明表a中记录客户不同日期账户余额，但仅在相邻两天任一客户（kehhao）账户余额（zhhuye）发生变化时，才在表a中添加新记录。\r\n日期(riqi)，其中包含多条日期：如2511，2511等\r\n则如下SQL片段含义为：\r\nSelect a.kehhao，c.riqi，a.zhhuye\r\n(Select b.riqi as riqi ， max(a.riqi) as riqix from b，a where a.riqi &lt;= b.riqi) c\r\nLeft join a\r\nOn a.riqi = c. riqix', '78068c2c-f111-4e6f-afb9-95e7173a98b6.', '选择表a中各个客户在给定日期（给定日期由表b存储）的余额信息', '选择表a中各个客户在除给定日期（给定日期由表b存储）的余额信息', '选择表a中各个客户最接近给定日期（给定日期由表b存储）的余额信息', '以上都不对', '', '', 'D', '', '0', '2017-12-26 23:43:16', '64', '1');
INSERT INTO `topic` VALUES ('6766', '32', '4', '如何优化数据库，如何提高数据库的性能?', 'ac8c0e52-2acb-4a29-aa5b-03e8e0bf64a7.', null, null, null, null, null, null, '1）硬件调整性能\r\n最有可能影响性能的是磁盘和网络吞吐量,解决办法扩大虚拟内存，并保证有足够可以扩充的空间；\r\n把数据库服务器上的不必要服务关闭掉；把数据库服务器和主域服务器分开；把 SQL 数据库服务器的\r\n吞吐量调为最大；在具有一个以上处理器的机器上运行 SQL。\r\n2）调整数据库\r\n若对该表的查询频率比较高，则建立索引；建立索引时，想尽对该表的所有查询搜索操作，               按照\r\nWHERE 选择条件建立索引，尽量为整型键建立为有且只有一个簇集索引，数据在物理上按顺序在数据\r\n页上，缩短查找范围，为在查询经常使用的全部列建立非簇集索引，能最大地覆盖查询；但是索引不\r\n可太多，执行 UPDATEDELETE INSERT 语句需要用于维护这些索引的开销量急剧增加；避免在索引中\r\n有太多的索引键；避免使用大型数据类型的列为索引；保证每个索引键值有少数行。\r\n3）使用存储过程\r\n应用程序的实现过程中，能够采用存储过程实现的对数据库的操作尽量通过存储过程来实现，因为存\r\n储过程是存放在数据库服务器上的一次性被设计、编码、测试，并被再次使用，需要执行该任务的应\r\n用可以简单地执行存储过程，并且只返回结果集或者数值，这样不仅可以使程序模块化，同时提高响\r\n应速度，减少网络流量，并且通过输入参数接受输入，使得在应用中完成逻辑的一致性实现。\r\n4）应用程序结构和算法\r\n建立查询条件索引仅仅是提高速度的前提条件，响应速度的提高还依赖于对索引的使用。因为人们在使用 SQL 时往往会陷入一个误区，即太关注于所得的结果是否正确，特别是对数据量不是特别大的数据库操作时，是否建立索引和使用索引的好坏对程序的响应速度并不大，因此程序员在书写程序时就忽略了不同的实现方法之间可能存在的性能差异，这种性能差异在数据量特别大时或者大型的或是复杂的数据库环境中（如联机事务处理 OLTP 或决策支持系统 DSS）中表现得尤为明显。在工作实践中发现，不良的 SQL 往往来自于不恰当的索引设计、不充份的连接条件和不可优化的 WHERE 子句。在对它们进行适当的优化后，其运行速度有了明显地提高！', '', '0', '2017-12-26 23:43:29', '68', '1');
INSERT INTO `topic` VALUES ('6767', '26', '3', '在Red Hat Linux中所有服务器守护进程的启动脚本存放在（）目录中。', '4645096f-93b8-428a-bc48-2351e0cb7205.', null, null, null, null, null, null, '/ETC/RC.D/INIT.D', '', '0', '2017-12-26 23:43:38', '18', '1');
INSERT INTO `topic` VALUES ('6768', '32', '1', '有如下SQL片段\r\nDelete from asdfh a where a.kaihrq &gt; ‘291214’ and a.jiluzt &lt;&gt; ‘1’其含义为：', '15aa24e3-1325-4e87-9549-64577ddb02f1.', '从表asdfh中删除kaihrq 不小于29年12月14日，且jiluzt不为1的记录', '从表asdfh中删除kaihrq 和 jiluzt列', '对表asdfh中删除kaihrq 不小于29年12月14日，且jiluzt不为1的记录打删除标记', '以上都不正确', '', '', 'C', '', '0', '2017-12-26 23:43:40', '64', '1');
INSERT INTO `topic` VALUES ('6769', '33', '4', '你可以回答你一下 在 项 目 中 哪 些 地 方 用 到 了X M L？', 'b98067b4-0803-4b50-84ed-f4ed7c2229b7.', null, null, null, null, null, null, 'XML的主要作用有两个方面：数据交换和信息配置。在做数据交换时，XML将数据用标签组装成起来，然后压缩打包加密后通过网络传送给接收者，接收解密与解压缩后再从XML文件中还原相关信息进行处理', '', '0', '2017-12-26 23:44:10', '65', '1');
INSERT INTO `topic` VALUES ('6770', '32', '1', '分机构统计VIP客户的数量下面SQL语句正确的是？\r\n其中\r\n表a：jigou(机构)，kehhao(客户号)，jiaoyrq(交易日期)，jioyje(交易金额)\r\n表b: kehhao(客户号)，表b为VIP客户号表\r\nSelect ______ from a inner join b on a.kehhao = b.kehhao ________', '1a4c496c-a852-4c58-88ae-5bc1d08970be.', 'Count(a.kehhao)， group by jigou', 'Count(a.kehhao)， order by jigou', 'Sum(a.kehhao)， order by jigou', 'Count(a.kehhao)， having jigou', '', '', 'A', '', '0', '2017-12-26 23:44:18', '64', '1');
INSERT INTO `topic` VALUES ('6771', '33', '1', '读写原始数据，一般采用什么流？', 'aed5db8e-a1b4-4269-8eff-44b3ce690c00.', 'InputStream', 'DataInputStream', 'OutputStream', 'BufferedInputStream', '', '', 'AC', '', '0', '2017-12-26 23:44:29', '62', '1');
INSERT INTO `topic` VALUES ('6772', '26', '3', 'httpd.conf文件分为三部分分别是（）、（）、和（）。', '0b70556e-67e1-4004-bf7a-b1305fb64536.', null, null, null, null, null, null, '全局环境 、主服务器配置、虚拟主机 \r\n', '', '0', '2017-12-26 23:44:31', '18', '1');
INSERT INTO `topic` VALUES ('6773', '33', '4', 'XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？', '3d5e4df0-ed7b-46a8-b514-5f6aa769c25a.', null, null, null, null, null, null, '：XML文档定义分为DTD和SCHEMA两种形式，二者都是对XML语法的约束，其本质区别在于SCHEMA本身也是一个XML文件，可以被XML解析器解析，而且可以为XML承载的数据定义类型，约束能力较之DTD更强大。对XML的解析主要有DOM（文档对象模型，DOCUMENT OBJECT MODEL）、SAX（SIMPLE API FOR XML）和STAX（JAVA 6中引入的新的解析', '', '0', '2017-12-26 23:44:31', '65', '1');
INSERT INTO `topic` VALUES ('6774', '32', '1', 'SQL语言中修改表结构的命令是？', '32b78f1c-23ed-495b-a646-499f8ceb4489.', 'MODIFY TABLE', 'MODIFY STRUCTURE', 'ALTER TABLE', 'ALTER STRUCTURE', '', '', 'C', '', '0', '2017-12-26 23:44:39', '64', '1');
INSERT INTO `topic` VALUES ('6775', '32', '1', '使用函数时，下列哪一个描述是不正确的', 'dc9ddbdd-3c3d-4190-b01d-d49f23a98f2a.', '不要忘记获取返回值', '不能用过程来调用函数', '可以定义不能返回值的函数', '可以定义没有返回类型的函数', '', '', 'B', '过程完全可以调用函数，只要接收回值就和调用其他过程一样。', '0', '2017-12-26 23:44:44', '61', '1');
INSERT INTO `topic` VALUES ('6776', '33', '4', '用Java的套接字编程实现一个多线程的回显（echo）服务器。', '105727dc-9237-4eca-bffa-ef37436bdecb.', null, null, null, null, null, null, 'JAVA 7的TWR语法，由于很多外部资源类都间接的实现了AUTOCLOSEABLE接口（单方法回调接口），因此可以利用TWR语法在TRY结束的时候通过回调的方式自动调用外部资源类的CLOSE()方法，避免书写冗长的FINALLY代码块。此外，上面的代码用一个静态内部类实现线程的功能，使用多线程可以避免一个用户I/O操作所产生的中断影响其他用户对服务器的访问，简单的说就是一个用户的输入操作不会造成其他用户的阻塞', '', '0', '2017-12-26 23:45:02', '65', '1');
INSERT INTO `topic` VALUES ('6777', '32', '1', 'Delete和 truncate 都可以用来删除表内容，一下描述正确的是？', 'b061f206-713e-4010-a67a-c857fedbf276.', 'Truncate 不需要 rollbacksegment', 'Delete 需要rollbacksegment', 'Truncate在 提交commit之前仍可回滚', 'Truncate还可以删除表结构', '', '', 'AB', '', '0', '2017-12-26 23:45:03', '64', '1');
INSERT INTO `topic` VALUES ('6778', '5', '4', '如何获得&lt;div id=”div1”&gt;This isfirst layer&lt;/div&gt;中的值？', '7c75b815-12c2-4139-acaf-56a6c4b3f012.', null, null, null, null, null, null, '<SCRIPT>\r\n  VAR DIV1=DOCUMENT.GETELEMENTBYID(“DIV1”);\r\n  ALERT(DIV1.INNERHTML)\r\n</SCRIPT>', '', '0', '2017-12-26 23:45:10', '68', '1');
INSERT INTO `topic` VALUES ('6779', '26', '3', '在Linux系统中，DHCP服务器使用（）文件记录地址租约。 \r\n', '9b177426-1b24-4434-8198-9f9b0d4e0566.', null, null, null, null, null, null, 'DHCPD.LEASES', '', '0', '2017-12-26 23:45:14', '18', '1');
INSERT INTO `topic` VALUES ('6780', '32', '1', '请给出两个影响系统效率的函数', 'a8d5fa73-8f6a-4c9e-964b-6646442245db.', 'UPPER', 'SUM', 'MAX', 'LOWER', '', '', 'CB', '', '0', '2017-12-26 23:45:24', '64', '1');
INSERT INTO `topic` VALUES ('6781', '3', '4', 'JDK1.5 中支持的 for 循环的语法', '23236c7f-6045-4c21-95c2-db2b241754b1.', null, null, null, null, null, null, '：FOR(TYPEELEMENT : ARRAY) {\r\n SYSTEM.OUT.PRINTLN(ELEMENT)\r\n}\r\nTYPE 集合(不仅仅指COLLECTION，也包含普通的数组)中元素的数据类型\r\nELEMENT遍历到  的元素ARRAY 集合对象本身(当然不只是 COLLECTION)', '', '0', '2017-12-26 23:45:32', '68', '1');
INSERT INTO `topic` VALUES ('6782', '33', '4', '1、如何用Java代码列出一个目录下所有的文件？', 'd7023c0a-630f-41c2-9046-44a70a6dceff.', null, null, null, null, null, null, '如果需要对文件夹继续展开，代码如下所示：\r\n\r\n1\r\n2\r\n3\r\n4\r\n5\r\n6\r\n7\r\n8\r\n9\r\n10\r\n11\r\n12\r\n13\r\n14\r\n15\r\n16\r\n17\r\n18\r\n19\r\n20\r\n21\r\n22\r\n23\r\n24\r\n25\r\n26\r\nIMPORT JAVA.IO.FILE;\r\n \r\nCLASS TEST12 {\r\n \r\n    PUBLIC STATIC VOID MAIN(STRING[] ARGS) {\r\n        SHOWDIRECTORY(NEW FILE(\"/USERS/HAO/DOWNLOADS\"));\r\n    }\r\n \r\n    PUBLIC STATIC VOID SHOWDIRECTORY(FILE F) {\r\n        _WALKDIRECTORY(F, 0);\r\n    }', '', '0', '2017-12-26 23:45:41', '65', '1');
INSERT INTO `topic` VALUES ('6783', '3', '4', 'String编码UTF-8和GBK的区别', '09c5b5d1-eaec-46fd-a2ec-332b0aa9f31a.', null, null, null, null, null, null, 'UTF-8是国际通用的编码，通用性比较好，GBK是国家编码，支持中文，但是相比UTF-8的通用性差，不过UTF-8占用的数据库比较大，所以相对反应速度要慢', '', '0', '2017-12-26 23:45:45', '62', '1');
INSERT INTO `topic` VALUES ('6784', '26', '3', '普通用户可以执行（）命令转换成root身份。', 'c100b516-6483-42e3-830f-ab8e95c55080.', null, null, null, null, null, null, 'SU(或SU-) ', '', '0', '2017-12-26 23:45:48', '18', '1');
INSERT INTO `topic` VALUES ('6785', '32', '1', 'Oracle下列关于包的说法，不正确的是?', '13c4d358-74f7-4ac8-9668-d6d0e47f8948.', '不能够在还没有编写包主体的情况下调用包', '主体包含了规范的实现、以及私有例程/数据/变量', '不能直接调用Oracle提供的包 ', 'DBMS_OUTPUT程序包可以让用户输出文本信息', '', '', 'C', 'oracle 提供的包就是一些pl/sql形式的API，当然可以调用了。', '0', '2017-12-26 23:45:54', '61', '1');
INSERT INTO `topic` VALUES ('6786', '32', '1', 'QUESTION. description of the students table: sid_id number start_date date end_date date which two function are valid on the start_date column?_________。', '3296dede-4cdd-4ab3-9633-7778ec048b56.', 'sum(start_date) ', 'avg(start_date) ', 'count(start_date) ', 'avg(start_date，end_date)', 'min(start_date)', '', 'CE', '', '0', '2017-12-26 23:45:56', '64', '1');
INSERT INTO `topic` VALUES ('6787', '33', '4', '写一个方法，输入一个文件名和一个字符串，统计这个字符串在这个文件中出现的次数。', '5b2fd21e-963a-4be1-953a-b2ec662031e6.', null, null, null, null, null, null, 'PUBLIC STATIC INT COUNTWORDINFILE(STRING FILENAME, STRING WORD) {\r\n        INT COUNTER = 0;\r\n        TRY (FILEREADER FR = NEW FILEREADER(FILENAME)) {\r\n            TRY (BUFFEREDREADER BR = NEW BUFFEREDREADER(FR)) {\r\n                STRING LINE = NULL;\r\n                WHILE ((LINE = BR.READLINE()) != NULL) {\r\n                    INT INDEX = -1;\r\n                    WHILE (LINE.LENGTH() >= WORD.LENGTH() && (INDEX = LINE.INDEXOF(WORD)) >= 0) {\r\n                        COUNTER++;\r\n                        LINE = LINE.SUBSTRING(INDEX + WORD.LENGTH());\r\n                    }\r\n                }\r\n            }\r\n        } CATCH (EXCEPTION EX) {\r\n            EX.PRINTSTACKTRACE();\r\n        }\r\n        RETURN COUNTER;\r\n    }', '', '0', '2017-12-26 23:46:02', '65', '1');
INSERT INTO `topic` VALUES ('6788', '3', '4', '将字符“12345”转换成 long 型', '95f7a72d-7aa1-485f-8846-a63015df616b.', null, null, null, null, null, null, 'STRINGS=\"12345\";\r\n LONGNUM=LONG.VALUEOF(S).LONGVALUE();', '', '0', '2017-12-26 23:46:18', '68', '1');
INSERT INTO `topic` VALUES ('6789', '26', '3', 'Linux常用的启动引导装载器有（）和（）。', 'd2649408-46cc-425a-9469-bb882aec4f45.', null, null, null, null, null, null, 'GRUB，LILO \r\n', '', '0', '2017-12-26 23:46:26', '18', '1');
INSERT INTO `topic` VALUES ('6790', '32', '1', 'which are DML statements(choose all that apply)______', '4d794ad5-eb48-4d27-b40c-b6affa3ee843.', 'merge', 'update', 'delete', 'creat', '', '', 'ABC', '', '0', '2017-12-26 23:46:28', '64', '1');
INSERT INTO `topic` VALUES ('6791', '33', '4', '在webJava中有几种类型的流？', 'be2aef1a-5cbd-4e63-9161-270043b2a0bf.', null, null, null, null, null, null, '字节流和字符流。字节流继承于INPUTSTREAM、OUTPUTSTREAM，字符流继承于READER、WRITER。在JAVA.IO 包中还有许多其他的流，主要是为了提高性能和使用方便。关于JAVA的I/O需要注意的有两点：一是两种对称性（输入和输出的对称性，字节和字符的对称性）；二是两种设计模式（适配器模式和装潢模式）。另外JAVA中的流不同于C#的是它只有一个维度一个方向。', '', '0', '2017-12-26 23:46:31', '65', '1');
INSERT INTO `topic` VALUES ('6792', '4', '4', 'struts 中如何实现国际化，涉及哪些文件？', '2dd56c04-1fa5-4030-b55a-d6927d9eee7d.', null, null, null, null, null, null, '“国际化”是指一个应用程序在运行时能够根据客户端请求所来自的国家/地区、语言的不同而显示不同的用户界面。 STRUTS 框架通过使用<BEAN:MESSAGE>标记以及使用 JAVA.UTIL 数据包中定义的 LOCALE 和 RESOURCEBUNDLE 类来支持国际化。JAVA.TEXT.MESSAGEFORMAT 类定义的技术可以支持消息的格式。利用此功能，开发人员不需了解这些类的细节就可进行国际化和设置消息的格式。会涉及到资源文件，不需了解这些类的细节就可进行国际化和设置消息的格式。会涉及到资源文件，STRUTS-CONFIG.XML 配置文件,WEB.XML 配置文件。', '', '0', '2017-12-26 23:46:35', '68', '1');
INSERT INTO `topic` VALUES ('6793', '32', '4', '例举在诊断 Oracle 性能问题时，常用的工具、方法', 'cdb9262d-d2e1-4de7-98de-3435d4f6f334.', null, null, null, null, null, null, '1）简单一点的可以用 TOAD 及 DBARTISAN 这样的工具。\r\n2）纯做性能监测，比较出色的有 SPOLIGHT 和 EMC 的 I3，这两个软件都比较贵。\r\n3）一些网管系统这方面也不错，如 HP 的 OPENVIEW。不过定制起来不太容易，且很贵。\r\n4）不用花钱又好用的就是 ORACLE 的 STATPACK 了。\r\n5）再有就是自己写脚本了，大多数有经验的 DBA 都喜欢这样的方式。优点是实用灵活。缺点是如果想出一个性能变化的曲线图等图表，且做的美观就需要些 DELPHI,C++BUILDER 或是 PB 的开发功底了。', '', '0', '2017-12-26 23:46:52', '68', '1');
INSERT INTO `topic` VALUES ('6794', '32', '1', '从 “员工” 表的“姓名”字段中找出名字包含“玛丽”的人，下面哪条select语句正确：（ ）', '53ec0bfa-418c-455f-8602-5836d535ef14.', 'Select * from员工 where 姓名 =’_玛丽_’', 'Select * from员工 where 姓名 =’_玛丽_’', 'Select * from员工 where 姓名 like ‘_玛丽%’', 'Select * from员工 where 姓名 like ‘%玛丽%’', '', '', 'D', '', '0', '2017-12-26 23:46:56', '64', '1');
INSERT INTO `topic` VALUES ('6795', '32', '1', 'PL/SQL匿名块中', 'b411cee3-525c-4ae1-8d71-a7f7f938e67b.', '注释可以嵌套', '执行体可以嵌套 ', '所有组成成分都不能嵌套', '以上答案均不正确', '', '', 'B', '一个使用 begin/end 的块中可以包含其他 begin/end 块。', '0', '2017-12-26 23:46:56', '61', '1');
INSERT INTO `topic` VALUES ('6796', '26', '3', '设置文件test.pl如下属性“-rwxrw-r-x”使用的命令是（）。', 'e762ca56-e330-469c-bb53-e85231f9b0c3.', null, null, null, null, null, null, 'CHMOD 765 TEST.PL', '', '0', '2017-12-26 23:47:06', '18', '1');
INSERT INTO `topic` VALUES ('6797', '32', '4', 'Oracle 启动中，startup nomount、 startup mount 有什么差别？', 'e91f9384-24ba-4049-b014-8c0060e055e5.', null, null, null, null, null, null, 'STARTUP NOMOUNT：启动实例，读取参数文件，分配内存空间，启动后台进程，打开跟踪文件和报警文件。STARTUP MOUNT：装载数据库，打开控制文件。NOMOUNT 方式下还没有读取控制文件，该选项用于在数据库的控制文件全部损坏，需要重新创建数据库控制文件或创建一个新的数据库时使用。MOUNT 选项下并没有打开数据文件，该选项可以用来修改数据库的运行模式或进行数据库恢复。', '', '0', '2017-12-26 23:47:15', '68', '1');
INSERT INTO `topic` VALUES ('6798', '32', '1', '在关系数据库的询问优化中，事先处理文件，如排序、建立索引的目的是（）', '19d8e632-6910-4803-b1dd-321279a6bde5.', '优化表达式', '减少中间结果 ', '扩大缓冲数据', '减少扫描文件的时间', '', '', 'D', '', '0', '2017-12-26 23:47:21', '64', '1');
INSERT INTO `topic` VALUES ('6799', '32', '4', 'Oracle 启动中，spfile.ora、init&lt;SID&gt;.ora、spfile&lt;SID&gt;.ora 这三个文件正确的先后顺序是\r\n什么？', 'b594c3e3-caa0-4034-8ace-e364f3f46bc7.', null, null, null, null, null, null, '启动数据库，使用STARTUP 命令，ORALCE 将会按照以下顺序在缺省目录中搜索参数文件：SPFILE<SID>.ORA, SPFILE.ORA ,INIT<SID>.ORA A', '', '0', '2017-12-26 23:47:33', '68', '1');
INSERT INTO `topic` VALUES ('6800', '33', '4', 'Java在实体类里如何实现序列化，', '86cc8a46-41e3-471c-8558-801cb2957b95.', null, null, null, null, null, null, '序列化就是一种用来处理对象流的机制，所谓对象流也就是将对象的内容进行流化。可以对流化后的对象进行读写操作，也可将流化后的对象传输于网络之间。序列化是为了解决对象流读写操作时可能引发的问题（如果不进行序列化可能会存在数据乱序的问题）。\r\n要实现序列化，需要让一个类实现SERIALIZABLE接口，该接口是一个标识性接口，标注该类对象是可被序列化的，然后使用一个输出流来构造一个对象输出流并通过WRITEOBJECT(OBJECT)方法就可以将实现对象写出（即保存其状态）；如果需要反序列化则可以用一个输入流建立对象输入流，然后通过READOBJECT方法从流中读取对象。序列化除了能够实现对象的持久化之外，还能够用于对象的深度', '', '0', '2017-12-26 23:47:41', '65', '1');
INSERT INTO `topic` VALUES ('6801', '32', '4', '假设表空间neuspace已用尽500MB空间，现要求增加一个数据文件，存放在e:\\appdata目录下，文件名为appneudata，大小为500MB，不自动增长', 'edc8cedc-8a9c-4117-bcbb-8d0e8a2be08c.', null, null, null, null, null, null, 'ALTER TABLESPACE NEUSPACE ADD DATAFILE ‘E:\\APPDATA\\APPNEUDATA.DBF’ SIZE 500M', '', '0', '2017-12-26 23:47:45', '61', '1');
INSERT INTO `topic` VALUES ('6802', '26', '3', '要修改用户tom的密码可以使用命令（）。', 'd96ea5ce-6d37-4b6b-95bf-a5553c0d0b0d.', null, null, null, null, null, null, 'PASSWD TOM', '', '0', '2017-12-26 23:47:50', '18', '1');
INSERT INTO `topic` VALUES ('6803', '32', '4', '说明 Oracle 数据库逻辑备份和物理备份的方式。', '72501cfd-9190-4c5f-8823-4df2dde12b74.', null, null, null, null, null, null, 'ORACLE 备份包括逻辑备份和物理备份。\r\n1）．逻辑备份\r\n数据库的逻辑备份包含读一个数据库记录集和将记录集写入文件。\r\nA.输出（EXPORT）输出可以是整个数据库、指定用户或指定表。\r\nB.输入（IMPORT）输入将输出建立的二进制转储文件读入并执行其命令。\r\n2)．物理备份\r\n物理备份包含拷贝构成数据库的文件而不管其逻辑内容。\r\nORACLE 支持两种不同类型的物理文件备份脱机备份    （OFFLINE BACKUP）和联机备份（ONLINE B。A.脱机备份: 脱机备份用在当数据库已正常关闭，数据库处于\"OFFLINE\"时，要备份下列文件：所有数据文件所有控制文件所有联机日志INIT.ORA（可选的）\r\nB 联机备份:联机备份可用来备份任何运作在ARCHIVELOG 方式下的数据库。在这种方式下，联机日志被归档，在数据库内部建立一个所有作业的完整记录。联机备份过程具备强有力的功能。第一，提供了完全的时间点（POINT-IN-TIME）恢复。第二，在文件系统备份时允许数据库保持打开状态。', '', '0', '2017-12-26 23:47:58', '68', '1');
INSERT INTO `topic` VALUES ('6804', '32', '1', '以下哪些PL/SQL语句能够正确调用该过程？', '08f079fd-f2ec-4b4f-bc0d-a6aa2e2c567b.', 'EXECUTE INSERT_TEAM;', 'EXECUTE INSERT_TEAM (V_NAME=.>”LONG HORNS”);', 'V_CITY=>”AUSTIN”;', 'EXECUTE INSERT_TEAM (3，”AUSTIN”，”LONG HORNS”)', '', '', 'D', '', '0', '2017-12-26 23:48:03', '64', '1');
INSERT INTO `topic` VALUES ('6805', '32', '4', '以系统管理员身份登录，创建账号tom，设置tom的默认表空间为neuspace。为tom分配connect和resource系统角色，获取基本的系统权限。然后为tom分配对用户scott的表emp的select权限和对SALARY, MGR属性的update权限', '777a8e8b-349d-4128-b5b0-97ea254439df.', null, null, null, null, null, null, 'CREATE USER TOM IDENTIFIED BY JACK DEFAULT TABLESPACE NEUSPACE\r\nGRANT CONNECT, RESOURCE TO TOM\r\nGRANT SELECT, UPDATE(SALARY, MGR) ON SCOTT.EMP TO TOM', '', '0', '2017-12-26 23:48:24', '61', '1');
INSERT INTO `topic` VALUES ('6807', '26', '3', '命令“mv test.pl mytest.pl”的作用是 （）。', '57ee79f1-d150-4c66-b66e-f67f39dfb31e.', null, null, null, null, null, null, '将文件TEST.PL改名成MYTEST.PL \r\n', '', '0', '2017-12-26 23:48:40', '18', '1');
INSERT INTO `topic` VALUES ('6808', '33', '4', '什么是线程池（thread pool）？', 'adcfc95d-37fe-452e-801d-ded1f9b7f1a0.', null, null, null, null, null, null, '在面向对象编程中，创建和销毁对象是很费时间的，因为创建一个对象要获取内存资源或者其它更多资源。在JAVA中更是如此，虚拟机将试图跟踪每一个对象，以便能够在对象销毁后进行垃圾回收。所以提高服务程序效率的一个手段就是尽可能减少创建和销毁对象的次数，特别是一些很耗资源的对象创建和销毁，这就是”池化资源”技术产生的原因', '', '0', '2017-12-26 23:48:50', '65', '1');
INSERT INTO `topic` VALUES ('6809', '32', '4', '在表student的SNAME属性上创建索引student_sname_idx', 'aa6d33ef-527b-49a6-86df-f1cfb082b21e.', null, null, null, null, null, null, 'CREATE INDEX STUDENT_SNAME_IDX ON STUDENT(SNAME)', '', '0', '2017-12-26 23:49:11', '61', '1');
INSERT INTO `topic` VALUES ('6811', '26', '3', '在vsftp服务器上，匿名用户上传文件，存放在incoming目录中，其为root所有，匿名用户对于incoming\r\n来说是其他用户，设定权限的命令是（）。', '46137e3c-f66f-42d8-87a5-ace1fd93a885.', null, null, null, null, null, null, 'CHMOD O+W INCOMING', '', '0', '2017-12-26 23:49:34', '18', '1');
INSERT INTO `topic` VALUES ('6813', '3', '4', '查看下面的代码，写出可以使程序正常执行的修改方法', 'ea2fbee8-c9f2-46c5-8327-c0a65e8f3894.png', null, null, null, null, null, null, '：删除第 8 行或者将第 6 行改为 STRING S3 = \"\";', '', '0', '2017-12-26 23:49:48', '68', '1');
INSERT INTO `topic` VALUES ('6814', '26', '3', ' 在Red Hat Linux系统中网络管理员的UID为（）。', 'ff0988db-d42e-4b4e-b134-3141b46f08fe.', null, null, null, null, null, null, '0', '', '0', '2017-12-26 23:50:07', '18', '1');
INSERT INTO `topic` VALUES ('6815', '4', '1', '选出你知道的网络协议？', '4b50ddff-944f-4d5f-91e2-686f5ba121f2.', 'Telnet (Remote Login):提供远程登录功能，一台计算机用户可以登录到远程的另一台计算机上，如同在远程主机上直接操\r\n\r\n作一样。', 'FTP(File Transfer Protocol):远程文件传输协议，允许用户将远程主机上的文件拷贝到自己的计算机上。', '\r\nSMTP(Simple Mail transfer Protocol):简单邮政传输协议，用于传输电子邮件。\r\nUDP(User Datagram Protocol) :用户数据包协议，它和TCP一样位于传输层，和IP协议配合使用，在传输数据是省去包头，\r\n\r\n但它不能提供数据包的中传，所以适合传输较短的文件', 'NFS(NETwork File Server):网络文件服务器，可以使用多台计算机透明地访问彼此的目录。', '', '', 'ABCD', '', '0', '2017-12-26 23:50:20', '61', '1');
INSERT INTO `topic` VALUES ('6816', '33', '4', 'synchronized关键字的用法？', '77c39cff-a297-4a4b-9cbe-9eaa4110ba9d.', null, null, null, null, null, null, '：SYNCHRONIZED关键字可以将对象或者方法标记为同步，以实现对对象和方法的互斥访问，可以用SYNCHRONIZED(对象) { … }定义同步代码块，或者在声明方法时将SYNCHRONIZED作为方法的修饰符。在第60题的例子中已经展示了SYNCHRONIZED关键字的用法。', '', '0', '2017-12-26 23:50:24', '65', '1');
INSERT INTO `topic` VALUES ('6818', '3', '4', '为了显示 myStr = 23 这样的结果，写出在控制台输入的命令', '7b7793eb-7a7d-45b6-aff7-d9f419e9953c.png', null, null, null, null, null, null, 'JAVAMYCLASS 1 2 3 4', '', '0', '2017-12-26 23:51:08', '68', '1');
INSERT INTO `topic` VALUES ('6820', '26', '4', '简述FTP两种数据传输模式的工作过程。', 'da9b39fd-eea9-4944-8740-916014e6caec.', null, null, null, null, null, null, 'PORT模式，客户端动态选择一个端口来连接服务器的21端口，建立控制连接。当用户\r\n要进行数据的传输，客户端发出PORT指令告诉服务器连接自己的哪个端口来建立数据通\r\n道，服务器接到PORT指令后会使用20端口连接PORT指令中指定的端口，建立数据传输\r\n通道。 \r\nPASV模式，在建立控制信道上与PORT模式相同。在数据信道上，当客户端发送数据传输\r\n命令时，客户端发送PASV指令，用户通过该指令告诉服务器，自己要连接服务器的哪个端\r\n口。此时，如果服务器的该端口恰好空闲，则返回ACK的确认信息。否则，返回UNACK\r\n信息，这时，客户端会再次发送PASV指令。 \r\n', '', '0', '2017-12-26 23:51:36', '18', '1');
INSERT INTO `topic` VALUES ('6821', '32', '4', '选择最有效率的表名顺序(只在基于规则的优化器中有效)：', 'e8ee9a0b-8205-4d0c-8619-d8e60fd00f28.', null, null, null, null, null, null, 'ORACLE的解析器按照从右到左的顺序处理FROM子句中的表名，FROM子句中写在最后的表(基础表 DRIVING TABLE)将被最先处理，在FROM子句中包含多个表的情况下,你必须选择记录条数最少的表作为基础表。如果有3个以上的表连接查询, 那就需要选择交叉表(INTERSECTION TABLE)作为基础表, 交叉表是指那个被其他表所引用的表.', '', '0', '2017-12-26 23:51:42', '61', '1');
INSERT INTO `topic` VALUES ('6822', '32', '4', 'WHERE子句中的连接顺序', 'a0d7e800-f68a-4b78-92b7-c1cb20d8c85b.', null, null, null, null, null, null, 'ORACLE采用自下而上的顺序解析WHERE子句,根据这个原理,表之间的连接必须写在其他WHERE条件之前, 那些可以过滤掉最大数量记录的条件必须写在WHERE子句的末尾.', '', '0', '2017-12-26 23:52:09', '61', '1');
INSERT INTO `topic` VALUES ('6823', '26', '4', '什么是Linux的shell。', '0c1f3aaf-b065-4d2a-b7fb-b401b3bcc35f.', null, null, null, null, null, null, 'SHELL是LINUX系统中重要的组成部分。作为LINUX系统的外壳，为用户提供了使用操作系\r\n统的接口，是用户和系统交互作用的界面。SHELL不但是一个命令解释程序，还是一种高级\r\n编程语言。 \r\n', '', '0', '2017-12-26 23:52:20', '18', '1');
INSERT INTO `topic` VALUES ('6824', '32', '4', 'SELECT子句中避免使用/*/', '4a3ce0ba-3b95-4d60-a898-f90c3da39814.', null, null, null, null, null, null, 'ORACLE在解析的过程中, 会将\'*\' 依次转换成所有的列名, 这个工作是通过查询数据字典完成的, 这意味着将耗费更多的时间', '', '0', '2017-12-26 23:52:44', '61', '1');
INSERT INTO `topic` VALUES ('6826', '32', '4', '减少访问数据库的次数', '19368a87-b1f1-4748-b676-3bbe4c8b326c.', null, null, null, null, null, null, 'ORACLE在内部执行了许多工作: 解析SQL语句, 估算索引的利用率, 绑定变量 , 读数据块等；', '', '0', '2017-12-26 23:53:05', '61', '1');
INSERT INTO `topic` VALUES ('6828', '33', '4', 'Thread类的sleep()方法和对象的wait()方法都可以让线程暂停执行，它们有什么区别?', '7970d7ab-bee2-4999-b930-84445ee44651.', null, null, null, null, null, null, 'SLEEP()方法（休眠）是线程类（THREAD）的静态方法，调用此方法会让当前线程暂停执行指定的时间，将执行机会（CPU）让给其他线程，但是对象的锁依然保持，因此休眠时间结束后会自动恢复（线程回到就绪状态，请参考第66题中的线程状态转换图）。WAIT()是OBJECT类的方法，调用对象的WAIT()方法导致当前线程放弃对象的锁（线程暂停执行），进入对象的等待池（WAIT POOL），只有调用对象的NOTIFY()方法（或NOTIFYALL()方法）时才能唤醒等待池中的线程进入等锁池（LOCK POOL），如果线程重新获得对象的锁就可以进入就绪状态。', '', '0', '2017-12-26 23:53:35', '65', '1');
INSERT INTO `topic` VALUES ('6829', '32', '4', '用TRUNCATE替代DELETE', '02c69e3a-f1b4-4655-8af8-40910f9e977f.', null, null, null, null, null, null, '当删除表中的记录时,在通常情况下, 回滚段(ROLLBACK SEGMENTS ) 用来存放可以被恢复的信息. 如果你没有COMMIT事务,ORACLE会将数据恢复到删除之前的状态(准确地说是恢复到执行删除命令之前的状况) 而当运用TRUNCATE时, 回滚段不再存放任何可被恢复的信息.当命令运行后,数据不能被恢复.因此很少的资源被调用,执行时间也会很短. (译者按: TRUNCATE只在删除全表适用,TRUNCATE是DDL不是DML)', '', '0', '2017-12-26 23:53:41', '61', '1');
INSERT INTO `topic` VALUES ('6832', '32', '4', '使用表的别名(Alias)：', '6562e776-c046-4201-ae7c-60677bfc8732.', null, null, null, null, null, null, '当在SQL语句中连接多个表时, 请使用表的别名并把别名前缀于每个COLUMN上.这样一来,就可以减少解析的时间并减少那些由COLUMN歧义引起的语法错误.', '', '0', '2017-12-26 23:54:32', '61', '1');
INSERT INTO `topic` VALUES ('6835', '32', '4', ' 用EXISTS替代IN、用NOT EXISTS替代NOT IN：', 'd4c614bb-00f1-4a05-a889-6ab8d99ddd3a.', null, null, null, null, null, null, '在许多基于基础表的查询中,为了满足一个条件,往往需要对另一个表进行联接.在这种情况下, 使用EXISTS(或NOT EXISTS)通常将提高查询的效率. 在子查询中,NOT IN子句将执行一个内部的排序和合并. 无论在哪种情况下,NOT IN都是最低效的 (因为它对子查询中的表执行了一个全表遍历). 为了避免使用NOT IN ,我们可以把它改写成外连接(OUTER JOINS)或NOT EXISTS.\r\n例子：\r\n（高效）SELECT * FROM  EMP (基础表)  WHERE  EMPNO > 0  AND  EXISTS (SELECT ‘X\'  FROM DEPT  WHERE  DEPT.DEPTNO = EMP.DEPTNO  AND  LOC = ‘MELB\')\r\n(低效)SELECT  * FROM  EMP (基础表)  WHERE  EMPNO > 0  AND  DEPTNO IN(SELECT DEPTNO  FROM  DEPT  WHERE  LOC = ‘MELB\')', '', '0', '2017-12-26 23:54:56', '61', '1');
INSERT INTO `topic` VALUES ('6836', '26', '4', ' 简述TCP/IP网络体系结构及各层次有哪些协议。', 'e861d090-f11c-4a4a-9923-eb6af4ac48c3.', null, null, null, null, null, null, 'TCP/IP体系结构自下向上分别是：网络接口层，网络层，传输层，应用层。各层主要的协\r\n议有：\r\n①网络接口层：封装了所有的物理层和数据链路层协议，如数据链路层的PPP、X.25、\r\nFRAMERELAY、PPPOE等。 \r\n②网络层：IP，ICMP，ARP，RARP协议 \r\n③传输层：TCP、UDP  \r\n④应用层：FTP，HTTP，TELNET，SMTP，POP，DNS，SNMP，RTSP等。  \r\n', '', '0', '2017-12-26 23:55:04', '18', '1');
INSERT INTO `topic` VALUES ('6838', '32', '4', '用EXISTS替换DISTINCT：', '5741999b-81b1-46e4-9bb8-d5d4ec269a77.', null, null, null, null, null, null, '当提交一个包含一对多表信息(比如部门表和雇员表)的查询时,避免在SELECT子句中使用DISTINCT. 一般可以考虑用EXIST替换, EXISTS 使查询更为迅速,因为RDBMS核心模块将在子查询的条件一旦满足后,立刻返回结果. 例子：\r\n(低效):\r\nSELECT  DISTINCT  DEPT_NO,DEPT_NAME  FROM  DEPT D , EMP E\r\nWHERE  D.DEPT_NO = E.DEPT_NO\r\n(高效):\r\nSELECT  DEPT_NO,DEPT_NAME  FROM  DEPT D  WHERE  EXISTS ( SELECT ‘X\'\r\nFROM  EMP E  WHERE E.DEPT_NO = D.DEPT_NO)\r\n（19） SQL语句用大写的；因为ORACLE总是先解析SQL语句，把小写的字母转换成大写的再执行 （20） 在JAVA代码中尽量少用连接符“＋”连接字符串！ （21） 避免在索引列上使用NOT 通常，\r\n我们要避免在索引列上使用NOT, NOT会产生在和在索引列上使用函数相同的影响. 当ORACLE”遇到”NOT,他就会停止使用索引转而执行全表扫描.\r\n（22） 避免在索引列上使用计算．\r\nWHERE子句中，如果索引列是函数的一部分．优化器将不使用索引而使用全表扫描．\r\n举例:\r\n低效：\r\nSELECT … FROM  DEPT  WHERE SAL * 12 > 25000\r\n高效:\r\nSELECT … FROM DEPT WHERE SAL > 25000/12', '', '0', '2017-12-26 23:55:39', '61', '1');
INSERT INTO `topic` VALUES ('6842', '32', '4', ' 用&gt;=替代&gt;', 'ae4a99da-2cbb-405c-ad55-f6d399f4dfee.', null, null, null, null, null, null, '高效:\r\nSELECT * FROM  EMP  WHERE  DEPTNO >=4\r\n低效:\r\nSELECT * FROM EMP WHERE DEPTNO >3\r\n两者的区别在于, 前者DBMS将直接跳到第一个DEPT等于4的记录而后者将首先定位到DEPTNO=3的记录并且向前扫描到第一个DEPT大于3的记录.', '', '0', '2017-12-26 23:56:06', '61', '1');
INSERT INTO `topic` VALUES ('6844', '32', '4', '用UNION替换OR (适用于索引列)', '00749574-a63a-4369-9d96-e6602936006e.', null, null, null, null, null, null, '高效:\r\nSELECT LOC_ID , LOC_DESC , REGION\r\nFROM LOCATION\r\nWHERE LOC_ID = 10\r\nUNION\r\nSELECT LOC_ID , LOC_DESC , REGION\r\nFROM LOCATION\r\nWHERE REGION = “MELBOURNE”\r\n低效:\r\nSELECT LOC_ID , LOC_DESC , REGION\r\nFROM LOCATION\r\nWHERE LOC_ID = 10 OR REGION = “MELBOURNE”\r\n如果你坚持要用OR, 那就需要返回记录最少的索引列写在最前面.', '通常情况下, 用UNION替换WHERE子句中的OR将会起到较好的效果. 对索引列使用OR将造成全表扫描. 注意, 以上规则只针对多个索引列有效. 如果有column没有被索引, 查询效率可能会因为你没有选择OR而降低. 在下面的例子中, LOC_ID 和REGION上都建有索引.', '0', '2017-12-26 23:56:49', '61', '1');
INSERT INTO `topic` VALUES ('6846', '26', '4', '什么是文件系统，Linux的文件系统具有如何的通用结构？', 'ab508760-450d-4f1d-af79-7e2d6dcf4956.', null, null, null, null, null, null, '文件系统是操作系统在硬盘或者分区上保存文件信息的方法和数据结构，也就是文件在\r\n硬盘或分区上的组织结构方式。 \r\nLINUX文件系统都具有如下的通用结构，SUPERBLOCK(超级块)、INODE(索引节点)、DATA BLOCK(数\r\n据块)和DIRECTORY BLOCK(目录块)。', '', '0', '2017-12-26 23:57:14', '18', '1');
INSERT INTO `topic` VALUES ('6849', '32', '4', '用IN来替换OR', '0fd206e1-05a6-444e-a007-8dd29dbe28f0.', null, null, null, null, null, null, '低效:\r\nSELECT…. FROM LOCATION WHERE LOC_ID = 10 OR LOC_ID = 20 OR LOC_ID = 30\r\n高效\r\nSELECT… FROM LOCATION WHERE LOC_IN  IN (10,20,30)', '这是一条简单易记的规则，但是实际的执行效果还须检验，在ORACLE8i下，两者的执行路径似乎是相同的．', '0', '2017-12-26 23:57:34', '61', '1');
INSERT INTO `topic` VALUES ('6850', '32', '4', '避免在索引列上使用IS NULL和IS NOT NULL', 'dee0f10e-ad8c-45a5-b9d1-3141994e0264.', null, null, null, null, null, null, '避免在索引中使用任何可以为空的列，ORACLE将无法使用该索引．对于单列索引，如果列包含空值，索引中将不存在此记录. 对于复合索引，如果每个列都为空，索引中同样不存在此记录.　如果至少有一个列不为空，则记录存在于索引中．举例: 如果唯一性索引建立在表的A列和B列上, 并且表中存在一条记录的A,B值为(123,null) , ORACLE将不接受下一条具有相同A,B值（123,null）的记录(插入). 然而如果所有的索引列都为空，ORACLE将认为整个键值为空而空不等于空. 因此你可以插入1000 条具有相同键值的记录,当然它们都是空! 因为空值不存在于索引列中,所以WHERE子句中对索引列进行空值比较将使ORACLE停用该索引.', '低效: (索引失效)\r\nSELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE IS NOT NULL\r\n高效: (索引有效)\r\nSELECT … FROM  DEPARTMENT  WHERE  DEPT_CODE >=0', '0', '2017-12-26 23:57:56', '61', '1');
INSERT INTO `topic` VALUES ('6851', '33', '4', '比较一下Java和JavaSciprt。', '270991de-d313-4af7-8ef5-fee1eff52194.', null, null, null, null, null, null, 'JAVASCRIPT 与JAVA是两个公司开发的不同的两个产品。JAVA 是原SUN MICROSYSTEMS公司推出的面向对象的程序设计语言，特别适合于互联网应用程序开发；而JAVASCRIPT是NETSCAPE公司的产品，为了扩展NETSCAPE浏览器的功能而开发的一种可以嵌入WEB页面中运行的基于对象和事件驱动的解释性语言。JAVASCRIPT的前身是LIVESCRIPT；而JAVA的前身是OAK语言。', '', '0', '2017-12-26 23:58:25', '65', '1');
INSERT INTO `topic` VALUES ('6852', '32', '4', '总是使用索引的第一个列', '96b4f5f7-82aa-490d-9147-bdc4687dff9c.', null, null, null, null, null, null, '如果索引是建立在多个列上, 只有在它的第一个列(LEADING COLUMN)被WHERE子句引用时,优化器才会选择使用该索引. 这也是一条简单而重要的规则，当仅引用索引的第二个列时,优化器使用了全表扫描而忽略了索引', '', '0', '2017-12-26 23:58:40', '61', '1');
INSERT INTO `topic` VALUES ('6854', '26', '4', '简述邮件系统的组成。', 'cee96813-da26-47df-8e7c-c1c971a5440d.', null, null, null, null, null, null, '邮件用户代理(MUA)：用户与邮件服务器之间的接口程序，为用户提供一个撰写、收\r\n发、处理邮件信息的友好界面。 \r\n 邮件传输代理(MTA)：运行在MAIL SERVER上，将MUA传递过来的邮件投递到目标\r\n主机上，如SENDMAIL,POSTFIX \r\n 本地投递代理(LDA)：MTA把邮件投递到邮件接收者的邮件帐号所在的服务器上，\r\nLDA则负责把邮件按照接收这的用户名投递到具体的邮箱中。', '', '0', '2017-12-26 23:59:02', '18', '1');
INSERT INTO `topic` VALUES ('6855', '32', '4', '用UNION-ALL 替换UNION ( 如果有可能的话)：', '8ee78e9e-050d-4e34-8fa1-bcd3fd94206e.', null, null, null, null, null, null, '当SQL语句需要UNION两个查询结果集合时,这两个结果集合会以UNION-ALL的方式被合并, 然后在输出最终结果前进行排序. 如果用UNION ALL替代UNION, 这样排序就不是必要了. 效率就会因此得到提高. 需要注意的是，UNION ALL 将重复输出两个结果集合中相同记录. 因此各位还是要从业务需求分析使用UNION ALL的可行性. UNION 将对结果集合排序,这个操作会使用到SORT_AREA_SIZE这块内存. 对于这块内存的优化也是相当重要的. 下面的SQL可以用来查询排序的消耗量', '低效：\r\nSELECT  ACCT_NUM, BALANCE_AMT\r\nFROM  DEBIT_TRANSACTIONS\r\nWHERE TRAN_DATE = \'31-DEC-95\'\r\nUNION\r\nSELECT ACCT_NUM, BALANCE_AMT\r\nFROM DEBIT_TRANSACTIONS\r\nWHERE TRAN_DATE = \'31-DEC-95\'\r\n高效:\r\nSELECT ACCT_NUM, BALANCE_AMT\r\nFROM DEBIT_TRANSACTIONS\r\nWHERE TRAN_DATE = \'31-DEC-95\'\r\nUNION ALL\r\nSELECT ACCT_NUM, BALANCE_AMT\r\nFROM DEBIT_TRANSACTIONS\r\nWHERE TRAN_DATE = \'31-DEC-95\'', '0', '2017-12-26 23:59:08', '61', '1');
INSERT INTO `topic` VALUES ('6856', '33', '4', '如何实现字符串的反转及替换？', '1e0ee8ca-9578-447b-bb0c-cb8d0e9aca95.', null, null, null, null, null, null, 'PUBLIC STATIC STRING REVERSE(STRING ORIGINSTR) {\r\n      IF(ORIGINSTR == NULL || ORIGINSTR.LENGTH() <= 1) \r\n          RETURN ORIGINSTR;\r\n      RETURN REVERSE(ORIGINSTR.SUBSTRING(1)) + ORIGINSTR.CHARAT(0);\r\n  }', '', '0', '2017-12-26 23:59:22', '65', '1');
INSERT INTO `topic` VALUES ('6858', '32', '4', '用WHERE替代ORDER BY', 'b62f34c0-9d91-45c7-8624-bfce756b8d2d.', null, null, null, null, null, null, 'ORDER BY 子句只在两种严格的条件下使用索引.\r\nORDER BY中所有的列必须包含在相同的索引中并保持在索引中的排列顺序.\r\nORDER BY中所有的列必须定义为非空.\r\nWHERE子句使用的索引和ORDER BY子句中所使用的索引不能并列.', '例如:\r\n表DEPT包含以下列:\r\nDEPT_CODE PK NOT NULL\r\nDEPT_DESC NOT NULL\r\nDEPT_TYPE NULL\r\n低效: (索引不被使用)\r\nSELECT DEPT_CODE FROM  DEPT  ORDER BY  DEPT_TYPE\r\n高效: (使用索引)\r\nSELECT DEPT_CODE  FROM  DEPT  WHERE  DEPT_TYPE > 0', '0', '2017-12-26 23:59:46', '61', '1');
INSERT INTO `topic` VALUES ('6861', '32', '4', '需要当心的WHERE子句', '66afb714-484a-4004-bf51-cdc62e2753d2.', null, null, null, null, null, null, '某些SELECT 语句中的WHERE子句不使用索引. 这里有一些例子.\r\n在下面的例子里, (1)‘!=\' 将不使用索引. 记住, 索引只能告诉你什么存在于表中, 而不能告诉你什么不存在于表中. (2) ‘||\'是字符连接函数. 就象其他函数那样, 停用了索引. (3) ‘+\'是数学函数. 就象其他数学函数那样, 停用了索引. (4)相同的索引列不能互相比较,这将会启用全表扫描.', '', '0', '2017-12-27 00:00:29', '61', '1');
INSERT INTO `topic` VALUES ('6865', '32', '4', '如果检索数据量超过30%的表中记录数.使用索引将没有显著的效率提高', '1434f5d2-c7ed-4570-8632-8e933cf8d6be.', null, null, null, null, null, null, '在特定情况下, 使用索引也许会比全表扫描慢, 但这是同一个数量级上的区别. 而通常情况下,使用索引比全表扫描要块几倍乃至几千倍!', '', '0', '2017-12-27 00:01:21', '61', '1');
INSERT INTO `topic` VALUES ('6867', '33', '4', '如何实现对象克隆？', '775f1800-52c3-4e47-8f3f-34e15e623b39.', null, null, null, null, null, null, '实现CLONEABLE接口并重写OBJECT类中的CLONE()方法；\r\n2). 实现SERIALIZABLE接口，通过对象的序列化和反序列化实现克隆，可以实现真正的深度克隆，代码如下。', '', '0', '2017-12-27 00:01:45', '65', '1');
INSERT INTO `topic` VALUES ('6869', '32', '4', '避免使用耗费资源的操作:', '883b23e7-cb00-4d7c-84cf-85c497557e36.', null, null, null, null, null, null, '带有DISTINCT,UNION,MINUS,INTERSECT,ORDER BY的SQL语句会启动SQL引擎', '执行耗费资源的排序(SORT)功能. DISTINCT需要一次排序操作, 而其他的至少需要执行两次排序. 通常, 带有UNION, MINUS , INTERSECT的SQL语句都可以用其他方式重写. 如果你的数据库的SORT_AREA_SIZE调配得好, 使用UNION , MINUS, INTERSECT也是可以考虑的, 毕竟它们的可读性很强', '0', '2017-12-27 00:02:09', '61', '1');
INSERT INTO `topic` VALUES ('6870', '32', '4', '优化GROUP BY:', '4d3a6b18-52c6-40ad-b8fc-de90d4a01a0f.', null, null, null, null, null, null, '提高GROUP BY 语句的效率, 可以通过将不需要的记录在GROUP BY 之前过滤掉.下面两个查询返回相同结果但第二个明显就快了许多.', '低效:\r\nSELECT JOB , AVG(SAL)\r\nFROM EMP\r\nGROUP JOB\r\nHAVING JOB = ‘PRESIDENT\'\r\nOR JOB = ‘MANAGER\'\r\n高效:\r\nSELECT JOB , AVG(SAL)\r\nFROM EMP\r\nWHERE JOB = ‘PRESIDENT\'\r\nOR JOB = ‘MANAGER\'\r\nGROUP JOB', '0', '2017-12-27 00:02:32', '61', '1');
INSERT INTO `topic` VALUES ('6877', '6', '4', '什么是AJAX，为什么要使用Ajax', 'a9ef8d7b-b479-46cb-8292-db03f5000b55.', null, null, null, null, null, null, 'AJAX是“ASYNCHRONOUS JAVASCRIPT AND XML”的缩写。他是指一种创建交互式网页应用的网页开发技术。\r\n\r\n\r\nAJAX包含下列技术：\r\n\r\n\r\n基于WEB标准（STANDARDS-BASEDPRESENTATION）XHTML+CSS的表示；\r\n\r\n\r\n使用 DOM（DOCUMENT OBJECTMODEL）进行动态显示及交互；\r\n\r\n\r\n使用 XML 和 XSLT 进行数据交换及相关操作；\r\n\r\n\r\n使用 XMLHTTPREQUEST 进行异步数据查询、检索；\r\n\r\n\r\n使用 JAVASCRIPT 将所有的东西绑定在一起。\r\n', '', '0', '2017-12-27 00:04:25', '61', '1');
INSERT INTO `topic` VALUES ('6881', '6', '4', '请说一下为什么要用ajax?', 'c732fa44-22b5-4327-a37e-21fcd0383301.', null, null, null, null, null, null, 'AJAX应用程序的优势在于：\r\n\r\n\r\n1. 通过异步模式，提升了用户体验\r\n\r\n\r\n2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用\r\n\r\n\r\n3. AJAX引擎在客户端运行，承担了一部分本来由服务器承担的工作，从而减少了大用户量下的服务器负载。\r\n', '', '0', '2017-12-27 00:05:18', '61', '1');
INSERT INTO `topic` VALUES ('6887', '6', '4', 'XMLHttpRequest对象在IE和Firefox中创建方式有没有不同。', '904010c7-7805-4775-b5ff-f49e54bc385a.', null, null, null, null, null, null, '有，IE中通过NEW ACTIVEXOBJECT()得到，FIREFOX中通过NEWXMLHTTPREQUEST()得到', '', '0', '2017-12-27 00:06:53', '61', '1');
INSERT INTO `topic` VALUES ('6891', '6', '4', '你采用的是什么框架（架包）', 'd731f97a-aede-4940-9a71-db688befaab2.', null, null, null, null, null, null, '在JAVA中比较流行的有 DOJO, PROTOTYPE , JQUERY, DWR, EXTJS 等等', '', '0', '2017-12-27 00:07:40', '61', '1');
INSERT INTO `topic` VALUES ('6893', '6', '4', 'AJAX的全称是什么？ 介绍一下AJAX？', 'eaf86c6e-8e51-4fa0-bcb5-5258445c753b.', null, null, null, null, null, null, 'AJAX的全称是ASYNCHRONOUS JAVASCRIPT AND XML.\r\n\r\n\r\nAJAX是2005年由GOOGLE发起并流行起来的编程方法， AJAX不是一个新的编程语言，但是它是一个使用已有标准的新的编程技术。\r\n\r\n\r\n使用AJAX可以创建更好，更快，更用户界面友好的WEB应用。\r\n\r\n\r\nAJAX技术基于JAVASCRIPT和HTTP REQUEST.\r\n', '', '0', '2017-12-27 00:08:28', '61', '1');
INSERT INTO `topic` VALUES ('6894', '6', '4', 'Ajax主要包含了哪些技术？', '16230c44-563f-4339-abe8-aadc33f257c1.', null, null, null, null, null, null, 'AJAX（ASYNCHRONOUS JAVASCRIPT + XML）的定义\r\n\r\n\r\n基于WEB标准（STANDARDS-BASED PRESENTATION）XHTML+CSS的表示；\r\n\r\n\r\n使用 DOM（DOCUMENT OBJECT MODEL）进行动态显示及交互；\r\n\r\n\r\n使用 XML 和 XSLT 进行数据交换及相关操作；\r\n\r\n\r\n使用XMLHTTPREQUEST 进行异步数据查询、检索；\r\n 使用 JAVASCRIPT 将所有的东西绑定在一起。英文参见AJAX的提出者JESSE JAMES GARRETT的原文,原文题目(AJAX: A NEW APPROACH TO\r\n\r\nWEB APPLICATIONS)。\r\n\r\n\r\n类似于DHTML或LAMP，AJAX不是指一种单一的技术，而是有机地利用了一系列相关的技术。事实上，一些基于AJAX的“派生/合成”式（DERIVATIVE/COMPOSITE）的技术正在出现，如“AFLAX”。\r\n\r\n\r\nAJAX的应用使用支持以上技术的WEB浏览器作为运行平台。这些浏览器目前包括：MOZILLA、FIREFOX、INTERNET EXPLORER、OPERA、KONQUEROR及SAFARI。但是OPERA不支持XSL格式对象，也不支持XSLT。\r\n', '', '0', '2017-12-27 00:09:01', '61', '1');
INSERT INTO `topic` VALUES ('6895', '18', '2', '虚拟控制台登陆就是使用文本方式登陆虚拟控制台登陆就是使用文本方式登陆。', 'c3b07767-364e-4cf2-b17b-d47cfa8c2a8e.', null, null, null, null, null, null, '正确', '', '0', '2017-12-27 00:09:22', '18', '1');
INSERT INTO `topic` VALUES ('6896', '6', '4', 'AJAX都有哪些优点和缺点？', '50e4b7ad-77aa-46da-8740-4d9f3ee3a318.', null, null, null, null, null, null, '1、最大的一点是页面无刷新，用户的体验非常好。\r\n\r\n2、使用异步方式与服务器通信，具有更加迅速的响应能力。ajax的缺点\r\n\r\n1、ajax不支持浏览器back按钮。\r\n\r\n2、安全问题 AJAX暴露了与服务器交互的细节。\r\n\r\n3、对搜索引擎的支持比较弱。\r\n\r\n4、破坏了程序的异常机制。\r\n\r\n5、不容易调试。\r\n\r\n\r\n3、可以把以前一些服务器负担的工作转嫁到客户端，利用客户端闲置的能力来处理，减轻服务器和带宽的负担，节约空间和宽带租用成本。并且减轻服务器的负担，AJAX的原则是“按需取数据”，可以最大程度的减少冗余请求，和响应对服务器造成的负担。\r\n\r\n4、基于标准化的并被广泛支持的技术，不需要下载插件或者小程序\r\n', '', '0', '2017-12-27 00:09:26', '61', '1');
INSERT INTO `topic` VALUES ('6897', '26', '2', '在字符界面环境下注销LINUX, 可用exit 或ctrl+D。', 'd0c7a17c-9bf1-49c3-b807-342670096eee.', null, null, null, null, null, null, '正确', '', '0', '2017-12-27 00:09:40', '18', '1');
INSERT INTO `topic` VALUES ('6898', '26', '2', '在RedHat 中cd ~ 这个命令会把你送回到你的家目录。', '053ef0b1-484e-4c36-bb5a-fb937f822014.', null, null, null, null, null, null, '正确', '', '0', '2017-12-27 00:09:59', '18', '1');
INSERT INTO `topic` VALUES ('6899', '26', '2', 'RedHat Linux使用 ls -all 命令将列出当前目录中的文件和子目录名。', 'b996d30a-e230-4b9e-8ce3-10ff22ee2f6e.', null, null, null, null, null, null, '错误', '', '0', '2017-12-27 00:10:14', '18', '1');
INSERT INTO `topic` VALUES ('6903', '26', '2', 'redhat 系统中, 默认情况下根口令没有字符长短的的限制，但是必须把口令输入两次; 如\r\n果两次输入的口令不一样，安装程序将会提示用户重新输入口令。', '157d7a4c-03c4-490f-b62e-c9fedaeb0a74.', null, null, null, null, null, null, '错误', '', '0', '2017-12-27 00:10:59', '18', '1');
INSERT INTO `topic` VALUES ('6904', '4', '4', '如何混合使用Jsp和SSI #include? ', '518413a0-da0f-40db-98f1-75027ea85503.', null, null, null, null, null, null, '在JSP中可以使用如下方式包含纯HTML： \r\n<!--#INCLUDE FILE=\"DATA.INC\"--> \r\n但是如果DATA.INC中包含JSP CODE ，我们可以使用： \r\n<%@INCLUDE FILE=\"DATA.INC\"%>  ', '', '0', '2017-12-27 00:11:05', '61', '1');
INSERT INTO `topic` VALUES ('6907', '4', '4', '如何执行一个线程安全的JSP? ', '883b773a-280f-4830-93f0-fa70c2ed2a9f.', null, null, null, null, null, null, '只需增加如下指令 \r\n<%@ PAGE ISTHREADSAFE=\"FALSE\" %>', '', '0', '2017-12-27 00:11:23', '61', '1');
INSERT INTO `topic` VALUES ('6909', '4', '4', 'JSP如何处理HTML FORM中的数据? ', '3f89a04b-a9d7-4a59-baa7-957f126954d7.', null, null, null, null, null, null, '通过内置的REQUEST对象即可，如下： \r\n<% \r\nSTRING ITEM = REQUEST.GETPARAMETER(\"ITEM\"); \r\nINT HOWMANY = NEW INTEGER(REQUEST.GETPARAMETER(\"UNITS\")).INTVALUE(); \r\n%>', '', '0', '2017-12-27 00:11:38', '61', '1');
INSERT INTO `topic` VALUES ('6911', '4', '4', '在JSP如何包含一个静态文件? ', 'e1bb27f2-8424-448e-85ad-7ffceadaecd1.', null, null, null, null, null, null, '静态包含如下：<%@ INCLUDE FILE=\"COPYRIGHT.HTML\" %> \r\n动态包含如下：<JSP:INCLUDE PAGE=\"COPYRIGHT.HTML\" FLUSH=\"TRUE\"/>', '', '0', '2017-12-27 00:12:02', '61', '1');
INSERT INTO `topic` VALUES ('6914', '4', '4', '在JSP中如何使用注释? ', '170bcaf0-79b8-4bdf-875f-b83c2714c6fa.', null, null, null, null, null, null, '主要有四中方法： \r\n1。<%-- 与 --%> \r\n2。// \r\n3。/**与**/ \r\n4。<!--与-->', '', '0', '2017-12-27 00:12:29', '61', '1');
INSERT INTO `topic` VALUES ('6915', '33', '4', '阐述实体对象的三种状态以及转换关系。', '10d2c1a5-d91d-449e-9c74-6656f7f4c6bb.', null, null, null, null, null, null, '最新的HIBERNATE文档中为HIBERNATE对象定义了四种状态（原来是三种状态，面试的时候基本上问的也是三种状态），分别是：瞬时态（NEW, OR TRANSIENT）、持久态（MANAGED, OR PERSISTENT）、游状态（DETACHED）和移除态（REMOVED，以前HIBERNATE文档中定义的三种状态中没有移除态），如下图所示，就以前的HIBERNATE文档中移除态被视为是瞬时态。', '', '0', '2017-12-27 00:12:34', '65', '1');
INSERT INTO `topic` VALUES ('6917', '4', '4', '在JSP中如何执行浏览重定向? ', 'af64a357-2f5e-4bf3-a272-f6eb47fcb9b3.', null, null, null, null, null, null, '使用如下方式即可：RESPONSE.SENDREDIRECT(\"HTTP://YBWEN.HOME.CHINAREN.COM/INDEX.HTML\"); \r\n也能物理地改变HTTP HEADER属性，如下： \r\n<% \r\nRESPONSE.SETSTATUS(HTTPSERVLETRESPONSE.SC_MOVED_PERMANENTLY); \r\nSTRING NEWLOCN=\"/NEWPATH/INDEX.HTML\"; \r\nRESPONSE.SETHEADER(\"LOCATION\",NEWLOCN); \r\n%>', '', '0', '2017-12-27 00:12:49', '61', '1');
INSERT INTO `topic` VALUES ('6919', '4', '4', '如何防止在JSP或SERVLET中的输出不被BROWSER保存在CACHE中? ', 'c5edaaa3-d77e-4a9c-9f19-d723af7e7878.', null, null, null, null, null, null, '把如下脚本加入到JSP文件的开始即可： \r\n<% \r\nRESPONSE.SETHEADER(\"CACHE-CONTROL\",\"NO-STORE\"); //HTTP 1.1 \r\nRESPONSE.SETHEADER(\"PRAGMA\",\"NO-CACHE\"); //HTTP 1.0 \r\nRESPONSE.SETDATEHEADER (\"EXPIRES\", 0); //PREVENTS CACHING AT THE PROXY SERVER \r\n%>', '', '0', '2017-12-27 00:13:08', '61', '1');
INSERT INTO `topic` VALUES ('6922', '4', '4', '在JSP中如何设置COOKIE? ', 'fe885d0e-18ca-4842-aca4-26aeae3da358.', null, null, null, null, null, null, 'COOKIE是作为HTTP HEADER的一部分被发送的，如下方法即可设置： \r\n<% \r\nCOOKIE MYCOOKIE = NEW COOKIE(\"ANAME\",\"AVALUE\"); \r\nRESPONSE.ADDCOOKIE(MYCOOKIE); \r\n%>', '', '0', '2017-12-27 00:13:43', '61', '1');
INSERT INTO `topic` VALUES ('6926', '4', '4', '在一个JSP的请求处理中如何停止JSP的执行', '8158309a-5024-49b9-9b8d-99e64b7584bc.', null, null, null, null, null, null, '<% \r\nIF (REQUEST.GETPARAMETER(\"WEN\") != NULL) { \r\n// DO SOMETHING \r\n} ELSE { \r\nRETURN; \r\n} \r\n%>', '', '0', '2017-12-27 00:14:21', '61', '1');
INSERT INTO `topic` VALUES ('6930', '32', '4', '在JSP中如何定义方法 ', 'fd3d6fa8-b6f0-4b31-b13b-b30d3d9a8927.', null, null, null, null, null, null, '你可以定义方法，但是你不能直接访问JSP的内置对象，而是通过参数的方法传递。如下： \r\n<%! \r\nPUBLIC STRING HOWBADFROM(HTTPSERVLETREQUEST REQ) { \r\nHTTPSESSION SES = REQ.GETSESSION(); \r\n... \r\nRETURN REQ.GETREMOTEHOST(); \r\n} \r\n%> \r\n<% \r\nOUT.PRINT(\"IN GENERAL,LAO LEE IS NOT BADDIE \"); \r\n%> \r\n<%= HOWBADFROM(REQUEST) %>', '', '0', '2017-12-27 00:14:54', '61', '1');
INSERT INTO `topic` VALUES ('6932', '4', '4', '如果BROWSER已关闭了COOKIES，在JSP中我如何打开SESSION来跟踪 ', 'c16f6765-225e-4762-b4a4-1140510e72e8.', null, null, null, null, null, null, '使用URL重写即可，如下： \r\nHELLO1.JSP \r\n<%@ PAGE SESSION=\"TRUE\" %> \r\n<% \r\nINTEGER NUM = NEW INTEGER(100); \r\nSESSION.PUTVALUE(\"NUM\",NUM); \r\nSTRING URL =RESPONSE.ENCODEURL(\"HELLO2.JSP\"); \r\n%> \r\n<A HREF=<%=URL%>>HELLO2.JSP</A>\r\nHELLO2.JSP \r\n<%@ PAGE SESSION=\"TRUE\" %> \r\n<% \r\nINTEGER I= (INTEGER )SESSION.GETVALUE(\"NUM\"); \r\nOUT.PRINTLN(\"NUM VALUE IN SESSION IS \"+I.INTVALUE()); \r\n%>', '', '0', '2017-12-27 00:15:32', '61', '1');
INSERT INTO `topic` VALUES ('6934', '4', '4', '在JSP中能发送EMAIL吗？', 'b726be70-2b34-4283-ad9d-35e7e4405302.', null, null, null, null, null, null, '可以使用SUN的专用包：SUN.NET.SMTP包。如下脚本使用SMTPCLIENT类发送EMAIL。 \r\n<%@ PAGE IMPORT=\"SUN.NET.SMTP.SMTPCLIENT, JAVA.IO.*\" %> \r\n<% \r\nSTRING FROM=\"YBWEN@SINA.COM\"; \r\nSTRING TO=\"HEWENJUN@YEAH.NET, LEI@WHO.COM.CN\"; \r\nTRY{ \r\nSMTPCLIENT CLIENT = NEW SMTPCLIENT(\"MAIL.XXXXX.XXX\"); \r\nCLIENT.FROM(FROM); \r\nCLIENT.TO(TO); \r\nPRINTSTREAM MESSAGE = CLIENT.STARTMESSAGE(); \r\nMESSAGE.PRINTLN(\"TO: \" + TO); \r\nMESSAGE.PRINTLN(\"SUBJECT: SENDING EMAIL FROM JSP!\"); \r\nMESSAGE.PRINTLN(\"THIS WAS SENT FROM A JSP PAGE!\"); \r\nMESSAGE.PRINTLN(); \r\nMESSAGE.PRINTLN(\"COOL! :-)\"); \r\nMESSAGE.PRINTLN(); \r\nMESSAGE.PRINTLN(\"GOOD BOY\"); \r\nMESSAGE.PRINTLN(\"IM IN GENIUS.COM\"); \r\nMESSAGE.PRINTLN(); \r\nCLIENT.CLOSESERVER(); \r\n} \r\nCATCH (IOEXCEPTION E){ \r\nSYSTEM.OUT.PRINTLN(\"ERROR SENDING EMAIL:\"+E); \r\n} \r\n%>', '', '0', '2017-12-27 00:16:02', '61', '1');
INSERT INTO `topic` VALUES ('6937', '4', '4', '在SERVLET中我能调用一个JSP错误页吗 ', 'd65af927-02be-44f7-b2a2-83187d3aa98d.', null, null, null, null, null, null, '当然没问题，如下展示了如何在一个SERVLET控制逻辑单元内调用一个JSP错误页面。 \r\nPROTECTED VOID SENDERRORREDIRECT(HTTPSERVLETREQUEST REQUEST, \r\nHTTPSERVLETRESPONSE RESPONSE, STRING ERRORPAGEURL, \r\nTHROWABLE E) \r\nTHROWS SERVLETEXCEPTION, IOEXCEPTION { \r\nREQUEST.SETATTRIBUTE (\"JAVAX.SERVLET.JSP.JSPEXCEPTION\", E); \r\nGETSERVLETCONFIG().GETSERVLETCONTEXT(). \r\nGETREQUESTDISPATCHER(ERRORPAGEURL).FORWARD(REQUEST, \r\nRESPONSE); \r\n}\r\nPUBLIC VOID DOPOST(HTTPSERVLETREQUEST REQUEST,HTTPSERVLETRESPONSE RESPONSE) { \r\nTRY { \r\n// DO SOMETHING \r\n} CATCH (EXCEPTION EX) { \r\nTRY { \r\nSENDERRORREDIRECT(REQUEST,RESPONSE,\"/JSP/MYERRORPAGE.JSP\",EX); \r\n} CATCH (EXCEPTION E) { \r\nE.PRINTSTACKTRACE(); \r\n} \r\n} \r\n}', '', '0', '2017-12-27 00:16:30', '61', '1');
INSERT INTO `topic` VALUES ('6939', '4', '4', 'JSP和APPLET如何通讯 ', '84000566-351a-47f0-93e8-496a3d6b8dc6.', null, null, null, null, null, null, 'JSP如何与EJB SESSIONBEAN通讯 \r\n下面的代码段作了很好的示范 \r\n<%@ PAGE IMPORT=\"JAVAX.NAMING.*, JAVAX.RMI.PORTABLEREMOTEOBJECT, \r\nFOO.ACCOUNTHOME, FOO.ACCOUNT\" %> \r\n<%! \r\n//定义一个对SESSIONBEANHOME接口实例的全局引用 \r\nACCOUNTHOME ACCHOME=NULL;\r\nPUBLIC VOID JSPINIT() { \r\n//获得HOME接口实例 \r\nINITIALCONTEXT CNTXT = NEW INITIALCONTEXT( ); \r\nOBJECT REF= CNTXT.LOOKUP(\"JAVA:COMP/ENV/EJB/ACCOUNTEJB\"); \r\nACCHOME = (ACCOUNTHOME)PORTABLEREMOTEOBJECT.NARROW(REF,ACCOUNTHOME.CLASS); \r\n} \r\n%> \r\n<% \r\n//实例化SESSIONBEAN \r\nACCOUNT ACCT = ACCHOME.CREATE(); \r\n//调用远程方法 \r\nACCT.DOWHATEVER(...); \r\n// 如此等等 \r\n%>', '', '0', '2017-12-27 00:16:52', '61', '1');
INSERT INTO `topic` VALUES ('6940', '33', '4', '你如何理解AOP中的连接点（Joinpoint）、切点（Pointcut）、增强（Advice）、引介（Introduction）、织入（Weaving）、切面（Aspect）这些概念？', '08ad4f13-19be-4fc8-b22f-09c573c82f3b.', null, null, null, null, null, null, ' 连接点（JOINPOINT）：程序执行的某个特定位置（如：某个方法调用前、调用后，方法抛出异常后）。一个类或一段程序代码拥有一些具有边界性质的特定点，这些代码中的特定点就是连接点。SPRING仅支持方法的连接点。\r\nB. 切点（POINTCUT）：如果连接点相当于数据中的记录，那么切点相当于查询条件，一个切点可以匹配多个连接点。SPRING AOP的规则解析引擎负责解析切点所设定的查询条件，找到对应的连接点。\r\nC. 增强（ADVICE）：增强是织入到目标类连接点上的一段程序代码。SPRING提供的增强接口都是带方位名的，如：BEFOREADVICE、AFTERRETURNINGADVICE、THROWSADVICE等。很多资料上将增强译为“通知”，这明显是个词不达意的翻译，让很多程序员困惑了许久。', '', '0', '2017-12-27 00:16:58', '65', '1');
INSERT INTO `topic` VALUES ('6941', '4', '4', '当我使用一个结果集时，如何防止字段为\"null\"的字域显示在我的HTML输入文本域中? ', '193cbc99-8d5b-41c2-a112-cda8df8a85ec.', null, null, null, null, null, null, '可以定义一个简单的函数来达到目的，如下： \r\n<%! \r\nSTRING BLANKNULL(STRING S) { \r\nRETURN (S == NULL) ? \"\" : S; \r\n} \r\n%>\r\n然后在JSP的FORM中，可以这样使用 \r\n<INPUT TYPE=\"TEXT\" NAME=\"SHOESIZE\" VALUE=\"<%=BLANKNULL(SHOESIZE)%>\">', '', '0', '2017-12-27 00:17:17', '61', '1');
INSERT INTO `topic` VALUES ('6943', '33', '4', 'Spring中如何使用注解来配置Bean？有哪些相关的注解？', '0e85bdcf-27ce-46d1-af72-a18fc514099f.', null, null, null, null, null, null, '首先需要在SPRING配置文件中增加如下配置：\r\n\r\n1\r\n<CONTEXT:COMPONENT-SCAN BASE-PACKAGE=\"ORG.EXAMPLE\"/>\r\n然后可以用@COMPONENT、@CONTROLLER、@SERVICE、@REPOSITORY注解来标注需要由SPRING IOC容器进行对象托管的类。这几个注解没有本质区别，只不过@CONTROLLER通常用于控制器，@SERVICE通常用于业务逻辑类，@REPOSITORY通常用于仓储类（例如我们的DAO实现类），普通的类用@COMPONENT来标注。', '', '0', '2017-12-27 00:17:35', '65', '1');
INSERT INTO `topic` VALUES ('6944', '33', '4', 'pring支持的事务管理类型有哪些？你在项目中使用哪种方式？', 'a418ff90-ecee-420a-9bae-f5c767bc3d0b.', null, null, null, null, null, null, 'SPRING支持编程式事务管理和声明式事务管理。许多SPRING框架的用户选择声明式事务管理，因为这种方式和应用程序的关联较少，因此更加符合轻量级容器的概念。声明式事务管理要优于编程式事务管理，尽管在灵活性方面它弱于编程式事务管理，因为编程式事务允许你通过代码控制业务。', '', '0', '2017-12-27 00:17:57', '65', '1');
INSERT INTO `topic` VALUES ('6945', '4', '4', '如何中SERVLET或JSP下载一个文件（如：binary,text,executable)', '992b7bd7-973d-44a6-984c-f22b89e44815.', null, null, null, null, null, null, '现提供两个解决方案： \r\nA：使用HTTP， \r\nB：在SERVLET中，通过设置CONTENTTYPE和使用JAVA.IO包的STREAM等类可作到', '.例如： \r\nresponse.setContentType(\"application/x-msword\"); \r\n然后想输出缓冲中写一些东东即可。', '0', '2017-12-27 00:18:17', '61', '1');
INSERT INTO `topic` VALUES ('6947', '4', '4', '使用useBean标志初始化BEAN时如何接受初始化参数 ？', 'b15139c8-a230-495c-95f9-0d137fe45582.', null, null, null, null, null, null, '<JSP:GETPROPERTY NAME=\"WENBEAN\" PROPERTY=\"SOMEPROPERTY\"/> \r\n<JSP:SETPROPERTY NAME=\"WENBEAN\" PROPERTY=\"SOMEPROPERTY\" VALUE=\"SOMEVALUE\"/>', '', '0', '2017-12-27 00:18:41', '61', '1');
INSERT INTO `topic` VALUES ('6948', '33', '4', '、Spring IoC容器配置Bean的方式？', '1211a353-57aa-4e23-8f85-5deac519ad5f.', null, null, null, null, null, null, '- 基于XML文件进行配置。\r\n- 基于注解进行配置。\r\n- 基于JAVA程序进行配置（SPRING 3+）', '', '0', '2017-12-27 00:18:55', '65', '1');
INSERT INTO `topic` VALUES ('6949', '4', '4', '使用JSP如何获得客户浏览器的信息？ ', 'fe42c089-9082-44e2-8a17-eb52022a0f53.', null, null, null, null, null, null, '使用REQUEST.GETHEADER(STRING)即可', '', '0', '2017-12-27 00:19:07', '61', '1');
INSERT INTO `topic` VALUES ('6950', '4', '4', '能象调用子程序一样调用JSP吗？ ', '8bad9815-2771-4d55-b1ad-b7ce1044475f.', null, null, null, null, null, null, '当然可以，用<JSP:INCLUDE PAGE=\"RELATIVEURL\" FLUSH=\"TRUE\"/>', '', '0', '2017-12-27 00:19:20', '61', '1');
INSERT INTO `topic` VALUES ('6951', '4', '4', '当我重编译我的JSP使用的一个类后，为什么JVM继续使用我的老CLASS？', 'afe1fab7-3795-48e0-a590-0a90ff8169b4.', null, null, null, null, null, null, '<%@INCLUDE FILE=\"ABC.JSP\"%>与<JSP:INCLUDE PAGE=\"ABC.JSP\"/>之间的差别？ \r\n前一个为静态包含，而后一个为动态包含', '', '0', '2017-12-27 00:19:35', '61', '1');
INSERT INTO `topic` VALUES ('6953', '4', '1', 'JSP的缺点？ ', '46ff8c3b-bcb7-4f90-854f-9509cc70f9f1.', '对JAVA程序进行调试没有好东东 ', '因大多数的servlet引擎不支持connection pooling ', 'Servlet引擎没有标准', 'JSP与其它脚本语言的交互', '', '', 'ABCD', '', '0', '2017-12-27 00:20:19', '61', '1');
INSERT INTO `topic` VALUES ('6954', '4', '4', 'JSP能进行递归调用吗？ ', 'bb245a37-76d4-4483-9b94-a1bf25141902.', null, null, null, null, null, null, '当然可以,如对FORM的提交给本页', '', '0', '2017-12-27 00:20:37', '61', '1');
INSERT INTO `topic` VALUES ('6956', '4', '4', '如何实现JSP的国际化？ ', '057d5f11-8596-4476-9f03-0eb2c17312c6.', null, null, null, null, null, null, '为各种版本提供RESOURCE BUNDLES属性文件即可', '', '0', '2017-12-27 00:20:52', '61', '1');
INSERT INTO `topic` VALUES ('6958', '4', '4', '在JSP中如何写文本文件？', 'c6ebbee2-f753-4fe2-bb0d-882bf9f3454a.', null, null, null, null, null, null, '使用PRINTWRITER对象，如： \r\n<%@ PAGE IMPORT=\"JAVA.IO.*\" %> \r\n<% \r\nSTRING STR = \"PRINT ME\"; \r\nSTRING NAMEOFTEXTFILE = \"/USR/ANIL/IMP.TXT\"; \r\nTRY { \r\nPRINTWRITER PW = NEW PRINTWRITER(NEW FILEOUTPUTSTREAM(NAMEOFTEXTFILE)); \r\nPW.PRINTLN(STR); \r\nPW.CLOSE(); \r\n} CATCH(IOEXCEPTION E) { \r\nOUT.PRINTLN(E.GETMESSAGE()); \r\n} \r\n%>', '', '0', '2017-12-27 00:21:10', '61', '1');
INSERT INTO `topic` VALUES ('6961', '4', '4', '如何在JSP中包括绝对路径文件？ ', 'bbea463c-07ab-4e7c-a994-49c1d9704c0e.', null, null, null, null, null, null, '使用URLCONNECTION即可。', '', '0', '2017-12-27 00:21:30', '61', '1');
INSERT INTO `topic` VALUES ('6962', '4', '4', '在servlets和JSP之间能共享session对象吗？ ', '153abcba-7957-4491-8736-38372f3084a2.', null, null, null, null, null, null, '当然可以， \r\nHTTPSESSION SESSION = REQUEST.GETSESSION(TRUE); \r\nSESSION.PUTVALUE(\"VARIABLE\",\"VALUE\");', '', '0', '2017-12-27 00:21:47', '61', '1');
INSERT INTO `topic` VALUES ('6964', '4', '4', '如何设置cookie在某一时间后过期？', 'f9c9f0c2-2ae4-45b1-838b-624e0891dfbd.', null, null, null, null, null, null, '用COOKIE.SETMAXAGE(INT)', '', '0', '2017-12-27 00:22:08', '61', '1');
INSERT INTO `topic` VALUES ('6966', '4', '4', '如何获得当前的sessions数？ ', '64a4edc1-e883-4fe2-ab14-4d7a63851be5.', null, null, null, null, null, null, '可以使用HTTPSESSIONBINDINGLISTENERS来跟踪', '', '0', '2017-12-27 00:22:24', '61', '1');
INSERT INTO `topic` VALUES ('6967', '33', '4', '什么是XSS攻击？什么是SQL注入攻击？什么是CSRF攻击？', '252f3aed-3d97-4dee-9fae-cb1700ebc1c7.', null, null, null, null, null, null, ' XSS（CROSS SITE SCRIPT，跨站脚本攻击）是向网页中注入恶意脚本在用户浏览网页时在用户浏览器中执行恶意脚本的攻击方式。跨站脚本攻击分有两种形式：反射型攻击（诱使用户点击一个嵌入恶意脚本的链接以达到攻击的目标，目前有很多攻击者利用论坛、微博发布含有恶意脚本的URL就属于这种方式）和持久型攻击（将恶意脚本提交到被攻击网站的数据库中，用户浏览网页时，恶意脚本从数据库中被加载到页面执行，QQ邮箱的早期版本就曾经被利用作为持久型跨站脚本攻击的平台）。XSS虽然不是什么新鲜玩意，但是攻击的手法却不断翻新，防范XSS主要有两方面：消毒（对危险字符进行转义）和HTTPONLY（防范XSS攻击者窃取COOKIE数据）。', '', '0', '2017-12-27 00:22:30', '65', '1');
INSERT INTO `topic` VALUES ('6968', '4', '4', '能设置一些代码在我所有的JSP文件之上运行？如果可以，能共享吗？', '21d88226-d8dd-4ab8-b319-a23b3744dac1.', null, null, null, null, null, null, '当然可以,可以为你的JSP文件定义一个别名:/JSP/=YBWEN.GENIUS.MYPREPROCESSINGSERVLET,而以/JSP/为前缀的文件可以使用', '', '0', '2017-12-27 00:22:38', '61', '1');
INSERT INTO `topic` VALUES ('6969', '4', '4', '对一个JSP页，如果多个客户端同时请求它，同步可能吗？ ', '5dd1d35d-b128-42fa-8323-c8faafa6ac0a.', null, null, null, null, null, null, '在JSP:USEBEAN语法中使用BEANNAME有何好处？ \r\nBEANNAME使用BEANS.INSTANTIATE()初始化BEAN', '', '0', '2017-12-27 00:22:58', '61', '1');
INSERT INTO `topic` VALUES ('6970', '33', '4', '什么是领域模型(domain model)？贫血模型(anaemic domain model)和充血模型(rich domain model)有什么区别？', '2cb2954c-3b34-4666-813f-28ab7041a222.', null, null, null, null, null, null, '：领域模型是领域内的概念类或现实世界中对象的可视化表示，又称为概念模型或分析对象模型，它专注于分析问题领域本身，发掘重要的业务领域概念，并建立业务领域概念之间的关系。贫血模型是指使用的领域对象中只有SETTER和GETTER方法（POJO），所有的业务逻辑都不包含在领域对象中而是放在业务逻辑层。有人将我们这里说的贫血模型进一步划分成失血模型（领域对象完全没有业务逻辑）和贫血模型（领域对象有少量的业务逻辑），我们这里就不对此加以区分了', '', '0', '2017-12-27 00:22:58', '65', '1');
INSERT INTO `topic` VALUES ('6971', '4', '4', '当我使用&lt;jsp:forward&gt;时，在浏览器的地址栏没有改变？ ', '9a300666-3955-4a20-8813-9fef02633c2d.', null, null, null, null, null, null, '使用RESPONSE.SENDREDIRECT(\"NEWURL\")', '', '0', '2017-12-27 00:23:12', '61', '1');
INSERT INTO `topic` VALUES ('6972', '33', '4', '谈一谈测试驱动开发（TDD）的好处以及你的理解', '1dd60bfa-3c39-41f1-887c-6b979f54b1ab.', null, null, null, null, null, null, 'TDD是指在编写真正的功能实现代码之前先写测试代码，然后根据需要重构实现代码。在JUNIT的作者KENT BECK的大作《测试驱动开发：实战与模式解析》（TEST-DRIVEN DEVELOPMENT: BY EXAMPLE）一书中有这么一段内容：“消除恐惧和不确定性是编写测试驱动代码的重要原因”。因为编写代码时的恐惧会让你小心试探，让你回避沟通，让你羞于得到反馈，让你变得焦躁不安，而TDD是消除恐惧、让JAVA开发者更加自信更加乐于沟通的重要手段。TDD会带来的好处可能不会马上呈现，但是你在某个时候一定会发现，这些好处包括：\r\n- 更清晰的代码 — 只写需要的代码\r\n- 更好的设计\r\n- 更出色的灵活性 — 鼓励程序员面向接口编程\r\n- 更快速的反馈 — 不会到系统上线时才知道BUG的存在', '', '0', '2017-12-27 00:23:15', '65', '1');
INSERT INTO `topic` VALUES ('6973', '4', '4', '如何转换JSP 0.9版本的文件到JSP1.1? ', 'fc2f0b85-1160-4606-af1b-8ed098fbf97e.', null, null, null, null, null, null, '可使用SED/AWK即可', '', '0', '2017-12-27 00:23:31', '61', '1');
INSERT INTO `topic` VALUES ('6974', '4', '4', '使用JSP连接到数据库连接缓冲池的最好方法是什么？', 'b1d002c6-9f8b-48cb-a156-f727b4caa2e1.', null, null, null, null, null, null, '1.使用JDBC2。0中带有此服务的DRIVER \r\n2.使用提供有此服务的APPLICATION SERVER ', '', '0', '2017-12-27 00:23:53', '61', '1');
INSERT INTO `topic` VALUES ('6977', '33', '4', '如何在Java中实现线程？', '83d0ffec-c65e-4f9f-9f71-047926918b5e.', null, null, null, null, null, null, '在语言层面有两种方式。JAVA.LANG.THREAD 类的实例就是一个线程但是它需要调用JAVA.LANG.RUNNABLE接口来执行，由于线程类本身就是调用的RUNNABLE接口所以你可以继承JAVA.LANG.THREAD 类或者直接调用RUNNABLE接口来重写RUN()方法实现线程', '', '0', '2017-12-27 00:24:56', '65', '1');
INSERT INTO `topic` VALUES ('6979', '33', '4', 'Thread 类中的start() 和 run() 方法有什么区别？', '71645b76-1656-44f2-9c69-765f0d776a47.', null, null, null, null, null, null, '这个问题经常被问到，但还是能从此区分出面试者对JAVA线程模型的理解程度。START()方法被用来启动新创建的线程，而且START()内部调用了RUN()方法，这和直接调用RUN()方法的效果不一样。当你调用RUN()方法的时候，只会是在原来的线程中调用，没有新的线程启动，START()方法才会启动新线程', '', '0', '2017-12-27 00:25:37', '65', '1');
INSERT INTO `topic` VALUES ('6980', '3', '4', 'Java编程,打印昨天的当前时刻', '52884b1b-cb7c-4c9c-85e2-f39fbf888236.', null, null, null, null, null, null, 'PUBLIC CLASS YESTERDAYCURRENT{\r\n  PUBLIC VOID MAIN(STRING[] ARGS){\r\n    CALENDAR CAL = CALENDAR.GETINSTANCE();\r\n    CAL.ADD(CALENDAR.DATE, -1);\r\n    SYSTEM.OUT.PRINTLN(CAL.GETTIME());\r\n  }\r\n}', '', '0', '2017-12-27 00:25:50', '61', '1');
INSERT INTO `topic` VALUES ('6981', '33', '4', 'Java中Runnable和Callable有什么不同？', '8907eef8-b371-4eaa-a7d7-ffd30710f0ba.', null, null, null, null, null, null, 'RUNNABLE和CALLABLE都代表那些要在不同的线程中执行的任务。RUNNABLE从JDK1.0开始就有了，CALLABLE是在JDK1.5增加的。它们的主要区别是CALLABLE的 CALL() 方法可以返回值和抛出异常，而RUNNABLE的RUN()方法没有这些功能。CALLABLE可以返回装载有计算结果的FUTURE对象', '', '0', '2017-12-27 00:25:55', '65', '1');
INSERT INTO `topic` VALUES ('6982', '3', '4', '文件读写,实现一个计数器', '9ea30521-ffd1-4d20-b8c2-8eac78043457.', null, null, null, null, null, null, 'PUBLIC INT GETNUM(){\r\n        INT I = -1;\r\n        TRY{\r\n            STRING STRI=\"\";\r\n            BUFFEREDREADER IN = NEW BUFFEREDREADER(NEW FILEREADER(F));\r\n            WHILE((STRI=IN.READLINE())!=NULL){\r\n                I = INTEGER.PARSEINT(STRI.TRIM());\r\n            }\r\n            IN.CLOSE();\r\n        }CATCH(EXCEPTION E){\r\n            E.PRINTSTACKTRACE();\r\n        }\r\n        RETURN I;\r\n    }\r\n    PUBLIC VOID SETNUM(){\r\n        INT I = GETNUM();\r\n        I++;        \r\n        TRY{\r\n            PRINTWRITER OUT=NEW PRINTWRITER(NEW BUFFEREDWRITER(NEW FILEWRITER(F,FALSE)));  \r\n            OUT.WRITE(STRING.VALUEOF(I));            //可能是编码的原因，如果直接写入INT的话，将出现JAVA编码和WINDOWS编码的混乱，因此此处写入的是STRING\r\n            OUT.CLOSE() ;\r\n        }CATCH(EXCEPTION E){\r\n            E.PRINTSTACKTRACE();\r\n        }\r\n    }', '', '0', '2017-12-27 00:26:35', '61', '1');
INSERT INTO `topic` VALUES ('6983', '33', '4', ' Java中CyclicBarrier 和 CountDownLatch有什么不同？', 'a96360ce-c837-46a7-8038-f1af589a5551.', null, null, null, null, null, null, 'CYCLICBARRIER 和 COUNTDOWNLATCH 都可以用来让一组线程等待其它线程。与 CYCLICBARRIER 不同的是，COUNTDOWNLATCH 不能重新使用', '', '0', '2017-12-27 00:26:50', '65', '1');
INSERT INTO `topic` VALUES ('6984', '33', '4', 'Singleton模式的作用', '4f4e1958-05fe-407b-868a-98aa78549b52.', null, null, null, null, null, null, 'SINGLETON模式提供了一个全局唯一访问类的方法，它在整个程序中只有一个实例，不允许出现多个。作用类似于全局变量。但是全局变量的类型依然可以实例化多个对象，从而不能保证唯一性，所以必须采用SINGLETON模式。 \r\n\r\n程序中经常将某种管理类，以SINGLETON模式实现，比如资源管理、路径服务、网络访问处理，这些在整个程序中都应该只有一个实例', '', '0', '2017-12-27 00:27:07', '61', '1');
INSERT INTO `topic` VALUES ('6986', '33', '4', 'Java中的volatile 变量是什么？', '8dc18571-48e4-4493-ad4a-5913c3b909b1.', null, null, null, null, null, null, 'VOLATILE是一个特殊的修饰符，只有成员变量才能使用它。在JAVA并发程序缺少同步类的情况下，多线程对成员变量的操作对其它线程是透明的。VOLATILE变量可以保证下一个读取操作会在前一个写操作之后发生，就是上一题的VOLATILE变量规则', '', '0', '2017-12-27 00:27:33', '65', '1');
INSERT INTO `topic` VALUES ('6987', '33', '4', '什么是线程安全？Vector是一个线程安全类吗？', '790f03b1-3474-4060-9556-00f6c0f78635.', null, null, null, null, null, null, '如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。一个线程安全的计数器类的同一个实例对象在被多个线程使用的情况下也不会出现计算失误。很显然你可以将集合类分成两组，线程安全和非线程安全的。VECTOR 是用同步方法来实现线程安全的, 而和它相似的ARRAYLIST不是线程安全的。', '', '0', '2017-12-27 00:27:50', '65', '1');
INSERT INTO `topic` VALUES ('6993', '33', '4', ' 为什么wait, notify 和 notifyAll这些方法不在thread类里面？', '857fa5eb-25e5-44be-ab48-a309dcff5547.', null, null, null, null, null, null, '一个很明显的原因是JAVA提供的锁是对象级的而不是线程级的，每个对象都有锁，通过线程获得。如果线程需要等待某些锁那么调用对象中的WAIT()方法就有意义了。如果WAIT()方法定义在THREAD类中，线程正在等待的是哪个锁就不明显了。简单的说，由于WAIT，NOTIFY和NOTIFYALL都是锁级别的操作，所以把他们定义在OBJECT类中因为锁属于对象', '', '0', '2017-12-27 00:29:47', '65', '1');
INSERT INTO `topic` VALUES ('6995', '4', '4', '事务管理--Spring', '276182d4-5e23-44d8-88cd-dd089ebd306a.', null, null, null, null, null, null, 'SPRING 提供一个持续的事务管理接口，可以扩展到上至本地事务下至全局事务（JTA）', '', '0', '2017-12-27 00:30:40', '61', '1');
INSERT INTO `topic` VALUES ('6996', '6', '4', '什么是AJAX，为什么要使用Ajax（请谈一下你对Ajax的认识）', 'dfea59a1-e628-4234-aa7b-aa4a1bea5471.', null, null, null, null, null, null, 'AJAX是“ASYNCHRONOUS JAVASCRIPT AND XML”的缩写。他是指一种创建交互式网页应用的网页开发技术。\r\nAJAX包含下列技术：\r\n基于WEB标准（STANDARDS-BASEDPRESENTATION）XHTML+CSS的表示；\r\n使用 DOM（DOCUMENT OBJECTMODEL）进行动态显示及交互；\r\n使用 XML 和 XSLT 进行数据交换及相关操作；\r\n使用 XMLHTTPREQUEST 进行异步数据查询、检索；\r\n使用 JAVASCRIPT 将所有的东西绑定在一起', '', '0', '2017-12-27 00:31:08', '65', '1');
INSERT INTO `topic` VALUES ('6997', '4', '4', '控制反转--Spring', '9c08b4f4-98f6-453c-a06b-c0e645ff419e.', null, null, null, null, null, null, 'SPRING通过控制反转实现了松散耦合，对象们给出它们的依赖，而不是创建或查找依赖的对象们。', '', '0', '2017-12-27 00:31:10', '61', '1');
INSERT INTO `topic` VALUES ('6999', '4', '4', '面向切面的编程(AOP)', 'ccf81540-a1e2-46dd-a287-636140ce72b1.', null, null, null, null, null, null, 'SPRING支持面向切面的编程，并且把应用业务逻辑和系统服务分开。', '', '0', '2017-12-27 00:31:38', '61', '1');
INSERT INTO `topic` VALUES ('7002', '4', '4', 'MVC框架', 'a55259ff-7c0c-4edb-9e06-90a26ef93a1f.', null, null, null, null, null, null, 'SPRING的WEB框架是个精心设计的框架，是WEB框架的一个很好的替代品。', '', '0', '2017-12-27 00:32:27', '61', '1');
INSERT INTO `topic` VALUES ('7004', '6', '4', 'AJAX应用和传统Web应用有什么不同。', '481e50b1-36ce-415d-9362-756cabeb218e.', null, null, null, null, null, null, '在传统的JAVASCRIPT编程中，如果想得到服务器端数据库或文件上的信息，或者发送客户端信息到服务器，需要建立一个HTML FORM然后GET或者POST数据到服务器端。用户需要点击”SUBMIT”按钮来发送或者接受数据信息，然后等待服务器响应请求，页面重新加载。\r\n因为服务器每次都会返回一个新的页面， 所以传统的WEB应用有可能很慢而且用户交互不友好。\r\n使用AJAX技术， 就可以使JAVASCRIPT通过XMLHTTPREQUEST对象直接与服务器进行交互。\r\n通过HTTP REQUEST， 一个WEB页面可以发送一个请求到WEB服务器并且接受WEB服务器返回的信息(不用重新加载页面)，展示给用户的还是通一个页面，用户感觉页面刷新，也看不到到JAVASCRIPT后台进行的发送请求和接受响应。', '', '0', '2017-12-27 00:32:48', '65', '1');
INSERT INTO `topic` VALUES ('7006', '4', '4', '异常处理', 'ef706afe-6c1e-4087-82e8-cd4e1e63e315.', null, null, null, null, null, null, 'SPRING 提供方便的API把具体技术相关的异常（比如由JDBC，HIBERNATE OR JDO抛出的）转化为一致的UNCHECKED 异常。', '', '0', '2017-12-27 00:33:05', '61', '1');
INSERT INTO `topic` VALUES ('7014', '4', '4', 'SpringMVC与Struts2的主要区别？', '06657d4c-51df-4658-86ba-16d8196db1ad.', null, null, null, null, null, null, '①SPRINGMVC的入口是一个SERVLET即前端控制器，而STRUTS2入口是一个FILTER过虑器。\r\n\r\n②SPRINGMVC是基于方法开发，传递参数是通过方法形参，可以设计为单例或多例(建议单例)，STRUTS2是基于类开发，传递参数是通过类的属性，只能设计为多例。 \r\n③STRUTS采用值栈存储请求和响应的数据，通过OGNL存取数据， SPRINGMVC通过参数解析器是将REQUEST对象内容进行解析成方法形参，将响应数据和页面封装成MODELANDVIEW对象，最后又将模型数据通过REQUEST对象传输到页面。 JSP视图解析器默认使用JSTL。', '', '0', '2017-12-27 00:35:53', '61', '1');
INSERT INTO `topic` VALUES ('7021', '4', '4', '当一个方法向AJAX返回特殊对象,譬如Object,List等,需要做什么处理', 'cdd516a9-b660-40c3-be61-7e9664310959.', null, null, null, null, null, null, '要加上@RESPONSEBODY注解', '', '0', '2017-12-27 00:38:23', '61', '1');
INSERT INTO `topic` VALUES ('7022', '32', '4', '.用一条SQL 语句 查询出每门课都大于80 分的学生姓名\r\nname   kecheng   fenshu\r\n张三    语文       81\r\n张三     数学       75\r\n李四     语文       76\r\n李四     数学       90\r\n王五     语文       81\r\n王五     数学       100\r\n王五     英语       90', '6d57d91a-ff07-487e-b395-d5e74bbdedf2.', null, null, null, null, null, null, 'SELECT DISTINCT NAME FROM TABLE WHERE NAME NOT IN (SELECT DISTINCT NAME FROM TABLE WHERE FENSHU<=80)\r\nSELECT NAME FROM TABLE GROUP BY NAME HAVING MIN(FENSHU)>80', '', '0', '2017-12-27 00:38:49', '65', '1');
INSERT INTO `topic` VALUES ('7023', '4', '4', 'SpringMvc里面拦截器是怎么写的', '1f746a4e-b08c-4db4-b879-ccc1e287963a.', null, null, null, null, null, null, '<!-- 配置SPRINGMVC的拦截器 -->\r\n<MVC:INTERCEPTORS>\r\n    <!-- 配置一个拦截器的BEAN就可以了 默认是对所有请求都拦截 -->\r\n    <BEAN ID=\"MYINTERCEPTOR\" CLASS=\"COM.ET.ACTION.MYHANDLERINTERCEPTOR\"></BEAN>\r\n \r\n    <!-- 只针对部分请求拦截 -->\r\n    <MVC:INTERCEPTOR>\r\n       <MVC:MAPPING PATH=\"/MODELMAP.DO\" />\r\n       <BEAN CLASS=\"COM.ET.ACTION.MYHANDLERINTERCEPTORADAPTER\" />\r\n    </MVC:INTERCEPTOR>\r\n</MVC:INTERCEPTORS>', '', '0', '2017-12-27 00:39:10', '61', '1');
INSERT INTO `topic` VALUES ('7024', '32', '4', '学生表 如下:\r\n自动编号   学号   姓名 课程编号 课程名称 分数\r\n1        2005001 张三 0001     数学    69\r\n2        2005002 李四 0001      数学    89\r\n3        2005001 张三 0001      数学    69\r\n删除除了自动编号不同, 其他都相同的学生冗余信息', '059b8ad1-12c0-4bcd-bd04-90775e6d21cf.', null, null, null, null, null, null, 'DELETE TABLENAME WHERE 自动编号 NOT IN(SELECT MIN( 自动编号) FROM TABLENAME GROUP BY学号, 姓名, 课程编号, 课程名称, 分数)', '', '0', '2017-12-27 00:39:18', '65', '1');
INSERT INTO `topic` VALUES ('7025', '4', '4', '讲下SpringMvc的执行流程', '6b935f35-d99c-430c-a8bd-e288e276cf2c.', null, null, null, null, null, null, '  系统启动的时候根据配置文件创建SPRING的容器, 首先是发送HTTP请求到核心控制器DISPATHERSERVLET，SPRING容器通过映射器去寻找业务控制器，\r\n使用适配器找到相应的业务类，在进业务类时进行数据封装，在封装前可能会涉及到类型转换，执行完业务类后使用MODELANDVIEW进行视图转发，数据放在MODEL中，用MAP传递数据进行页面显示。', '', '0', '2017-12-27 00:39:27', '61', '1');
INSERT INTO `topic` VALUES ('7026', '32', '4', ' 说明：显示文章、提交人和最后回复时间', '01ad6977-c3cc-426c-85b9-d3e4c0d5bac6.', null, null, null, null, null, null, 'ELECT A.TITLE,A.USERNAME,B.ADDDATE FROM TABLE A,(SELECT MAX(ADDDATE) ADDDATE FROM TABLE WHERE TABLE.TITLE=A.TITLE) B', '', '0', '2017-12-27 00:40:27', '65', '1');
INSERT INTO `topic` VALUES ('7027', '32', '4', '外连接查询( 表名1 ：a表名2 ：b)', 'b5f07b2c-e134-42a9-8026-47d6985431e7.', null, null, null, null, null, null, 'SQL: SELECT A.A, A.B, A.C, B.C, B.D, B.F FROM A LEFT OUTER JOIN B ON A.A = B.C\r\nORACLE：SELECT A.A, A.B, A.C, B.C, B.D, B.F FROM A ,B\r\nWHERE A.A = B.C(+)', '', '0', '2017-12-27 00:40:43', '65', '1');
INSERT INTO `topic` VALUES ('7028', '32', '4', '触发器的作用？', 'a92da7d7-af6b-4ed8-83e3-08452af8c756.', null, null, null, null, null, null, '触发器是一中特殊的存储过程，主要是通过事件来触发而被执行的。它可以强化约束，来维护数据的完整性和一致性，可以跟踪数据库内的操作从而不允许未经许可的更新和变化。可以联级运算。如，某表上的触发器上包含对另一个表的数据操作，而该操作又会导致该表触发器被触发。', '', '0', '2017-12-27 00:41:16', '65', '1');
INSERT INTO `topic` VALUES ('7029', '32', '4', '什么是存储过程？用什么来调用？', 'b3f23266-6c3d-45b0-b2e7-2fe23c4f6e31.', null, null, null, null, null, null, '：存储过程是一个预编译的SQL 语句，优点是允许模块化的设计，就是说只需创建一次，以后在该程序中就可以调用多次。如果某次操作需要执行多次SQL ，使用存储过程比单纯SQL 语句执行要快。可以用一个命令对象来调用存储过程。', '', '0', '2017-12-27 00:41:30', '65', '1');
INSERT INTO `topic` VALUES ('7030', '4', '4', 'Xml映射文件中，除了常见的select|insert|updae|delete标签之外，还有哪些标签？', '26040566-af9d-41ae-b6af-e199db2ef87f.', null, null, null, null, null, null, '还有很多其他的标签，<RESULTMAP>、<PARAMETERMAP>、<SQL>、<INCLUDE>、<SELECTKEY>，加上动态SQL的9个标签，TRIM|WHERE|SET|FOREACH|IF|CHOOSE|WHEN|OTHERWISE|BIND等，其中<SQL>为SQL片段标签，通过<INCLUDE>标签引入SQL片段，<SELECTKEY>为不支持自增的主键生成策略标签。', '', '0', '2017-12-27 00:41:39', '61', '1');
INSERT INTO `topic` VALUES ('7031', '32', '4', '索引的作用？和它的优点缺点是什么？', '286fd6a5-07b0-4934-b9e1-bc7085e31d7b.', null, null, null, null, null, null, '索引就一种特殊的查询表，数据库的搜索引擎可以利用它加速对数据的检索。它很类似与现实生活中书的目录，不需要查询整本书内容就可以找到想要的数据。索引可以是唯一的，创建索引允许指定单个列或者是多个列。缺点是它减慢了数据录入的速度，同时也增加了数据库的尺寸大小', '', '0', '2017-12-27 00:41:44', '65', '1');
INSERT INTO `topic` VALUES ('7032', '32', '4', '什么是内存泄漏？', '757ed1c5-573b-461a-907d-7dc2da915eea.', null, null, null, null, null, null, '一般我们所说的内存泄漏指的是堆内存的泄漏。堆内存是程序从堆中为其分配的，大小任意的，使用完后要显示释放内存。当应用程序用关键字NEW 等创建对象时，就从堆中为它分配一块内存，使用完后程序调用FREE 或者DELETE 释放该内存，否则就说该内存就不能被使用，我们就说该内存被泄漏了。', '', '0', '2017-12-27 00:41:59', '65', '1');
INSERT INTO `topic` VALUES ('7033', '4', '4', '最佳实践中，通常一个Xml映射文件，都会写一个Dao接口与之对应，请问，这个Dao接口的工作原理是什么？Dao接口里的方法，参数不同时，方法能重载吗？', '9f974897-b720-4dd7-9757-231d4e07af75.', null, null, null, null, null, null, 'DAO接口，就是人们常说的MAPPER接口，接口的全限名，就是映射文件中的NAMESPACE的值，接口的方法名，就是映射文件中MAPPEDSTATEMENT的ID值，接口方法内的参数，就是传递给SQL的参数。MAPPER接口是没有实现类的，当调用接口方法时，接口全限名+方法名拼接字符串作为KEY值，可唯一定位一个MAPPEDSTATEMENT，举例：COM.MYBATIS3.MAPPERS.STUDENTDAO.FINDSTUDENTBYID，可以唯一找到NAMESPACE为COM.MYBATIS3.MAPPERS.STUDENTDAO下面ID = FINDSTUDENTBYID的MAPPEDSTATEMENT。在MYBATIS中，每一个<SELECT>、<INSERT>、<UPDATE>、<DELETE>标签，都会被解析为一个MAPPEDSTATEMENT对象。\r\n\r\nDAO接口里的方法，是不能重载的，因为是全限名+方法名的保存和寻找策略。\r\n\r\nDAO接口的工作原理是JDK动态代理，MYBATIS运行时会使用JDK动态代理为DAO接口生成代理PROXY对象，代理对象PROXY会拦截接口方法，转而执行MAPPEDSTATEMENT所代表的SQL，然后将SQL执行结果返回。', '', '0', '2017-12-27 00:42:00', '61', '1');
INSERT INTO `topic` VALUES ('7034', '32', '4', '维护数据库的完整性和一致性，你喜欢用触发器还是自写业务逻辑？为什么？', '36ae433c-68c6-43dd-951b-f57543da88eb.', null, null, null, null, null, null, '：我是这样做的，尽可能使用约束，如CHECK, 主键，外键，非空字段等来约束，这样做效率最高，也最方便。其次是使用触发器，这种方法可以保证，无论什么业务系统访问数据库都可以保证数据的完整新和一致性。最后考虑的是自写业务逻辑，但这样做麻烦，编程复杂，效率低下。', '', '0', '2017-12-27 00:42:17', '65', '1');
INSERT INTO `topic` VALUES ('7036', '4', '4', 'Mybatis是如何将sql执行结果封装为目标对象并返回的？都有哪些映射形式？', 'b75ba9dd-f70e-4e80-b237-05ae07009b77.', null, null, null, null, null, null, '第一种是使用<RESULTMAP>标签，逐一定义列名和对象属性名之间的映射关系。第二种是使用SQL列的别名功能，将列别名书写为对象属性名，比如T_NAME AS NAME，对象属性名一般是NAME，小写，但是列名不区分大小写，MYBATIS会忽略列名大小写，智能找到与之对应对象属性名，你甚至可以写成T_NAME AS NAME，MYBATIS一样可以正常工作。\r\n\r\n有了列名与属性名的映射关系后，MYBATIS通过反射创建对象，同时使用反射给对象的属性逐一赋值并返回，那些找不到映射关系的属性，是无法完成赋值的。', '', '0', '2017-12-27 00:43:00', '61', '1');
INSERT INTO `topic` VALUES ('7038', '32', '4', '.查询A(ID,Name)表中第31至40条记录，ID作为主键可能是不是连续增长的列，完整的查询语句如下：', '7286ef5b-00dd-420d-8fa1-d49ca1add1d1.', null, null, null, null, null, null, 'SELECT TOP 10 * FROM A WHERE ID >(SELECT MAX(ID) FROM (SELECT TOP 30 ID FROM A ORDER BY A ) T) ORDER BY A', '', '0', '2017-12-27 00:43:45', '65', '1');
INSERT INTO `topic` VALUES ('7040', '4', '4', '简述Mybatis的Xml映射文件和Mybatis内部数据结构之间的映射关系？', 'c8840635-766c-4943-a630-465acd2228d4.', null, null, null, null, null, null, 'MYBATIS将所有XML配置信息都封装到ALL-IN-ONE重量级对象CONFIGURATION内部。在XML映射文件中，<PARAMETERMAP>标签会被解析为PARAMETERMAP对象，其每个子元素会被解析为PARAMETERMAPPING对象。<RESULTMAP>标签会被解析为RESULTMAP对象，其每个子元素会被解析为RESULTMAPPING对象。每一个<SELECT>、<INSERT>、<UPDATE>、<DELETE>标签均会被解析为MAPPEDSTATEMENT对象，标签内的SQL会被解析为BOUNDSQL对象。', '', '0', '2017-12-27 00:44:32', '61', '1');
INSERT INTO `topic` VALUES ('7042', '4', '4', '为什么说Mybatis是半自动ORM映射工具？它与全自动的区别在哪里？', 'd8a04db8-689c-4ee1-9e80-8edddbe87f22.', null, null, null, null, null, null, 'HIBERNATE属于全自动ORM映射工具，使用HIBERNATE查询关联对象或者关联集合对象时，可以根据对象关系模型直接获取，所以它是全自动的。而MYBATIS在查询关联对象或关联集合对象时，需要手动编写SQL来完成，所以，称之为半自动ORM映射工具。', '', '0', '2017-12-27 00:44:47', '61', '1');
INSERT INTO `topic` VALUES ('7043', '32', '4', '我怎样才能使用SQL Server对结果集的分页进行管理？', 'ad6d669e-bfa1-41d3-9395-bbc1312c16e6.', null, null, null, null, null, null, '您经常需要使用一次一页的形式来显示一个结果集，并保证用户可以轻松查看各个结果集页面，特别是您在为WEB站点开发程序的时候。虽然您可以使用ADO RECORDSET对象对结果集进行分页，但是这种解决办法不具有伸缩性。', '', '0', '2017-12-27 00:45:11', '65', '1');
INSERT INTO `topic` VALUES ('7044', '32', '4', '一些资料介绍说，在SQL Server 6.5中，排序方式会对系统性能造成影响，但是我并没有发现有针对SQL Server 2000或SQL Server 7.0的类似说法。我想知道二分法检索对SQL Server 2000程序到底有何意义。SQL Server 2000所支持的各种排序方式之间在执行性能上存在哪些差异呢？', '79b058d0-688b-4807-a1d7-a00b1092ebfd.', null, null, null, null, null, null, '请记住：各类排序方式间的性能差异受制于SQL SERVER在数据排序和数据比较上所花费的CPU周期数量。排序速度快并不代表性能就一定会得到改善。事实上，选择较为“快速”的排序方法（例如二分法）可能会导致应用程序在其它方面的性能降低。', '', '0', '2017-12-27 00:45:39', '65', '1');
INSERT INTO `topic` VALUES ('7050', '33', '4', '什么是线程,什么是进程,它们有什么区别和联系,一个进程里面是否必须有个线程', '749c12cd-54d0-40b3-8c48-2cfdf18149ce.', null, null, null, null, null, null, '进程本质上是一个执行的程序，一个进程可以有多个线程。它允许计算机同时运行两个或多个程序。一个进程至少会有一个线程。线程是进程的最小执行单位。', '', '0', '2017-12-27 00:49:21', '61', '1');
INSERT INTO `topic` VALUES ('7052', '33', '4', '实现一个线程有哪几种方式,各有什么优缺点,比较常用的是那种,为什么', '7c6cc3cc-642a-49a7-b789-a5827e7e97fb.', null, null, null, null, null, null, '线程有3种实现方式：\r\n①.通过继承THREAD类，优点：可以直接调用START方法启动。缺点：继承一个类后，不能再继承别的类。需要重写RUN方法。无返回值。\r\n②.实现RUNNABLE接口，优点：可以实现多个接口或继承一个类；缺点：不能直接启动，要通过构造一个THREAD把自己传进去。需要重写RUN方法，无返回值。\r\n③.实现CALLABLE接口，优点：可以抛出异常，有返回值；缺点：只有JKD1.5以后才支持。需要重写CALL方法。结合FUTURETASK和THREAD类一起使用，最后调用START启动。\r\n一般最常用的是第二种，实现RUNNABLE接口。比较方便，可扩展性高。', '', '0', '2017-12-27 00:49:40', '61', '1');
INSERT INTO `topic` VALUES ('7055', '33', '4', '一般情况下我们实现自己线程时候要重写什么方法', '2feb26a6-acf1-47e9-8d49-a867d685bcee.', null, null, null, null, null, null, ' 使用THREAD类，要重写RUN方法，或实现RUNNABLE接口时，要实现RUN()方法\r\n使用CALLABLE接口时，要重写CALL方法，且有返回值。', '', '0', '2017-12-27 00:50:12', '61', '1');
INSERT INTO `topic` VALUES ('7057', '33', '4', '.start方法和run方法有什么区别,我们一般调用的那个方法,系统调用的是那个方法', 'a7d615c9-8e74-4790-b793-46a0bb04b746.', null, null, null, null, null, null, 'START用于启动线程，当调用START后，线程并不会马上运行，而是处于就绪状态，是否要运行取决于CPU给的时间片。\r\nRUN用于子类重写来实现线程的功能。\r\n我们一般调用的是START方法，系统调用的是RUN方法', '', '0', '2017-12-27 00:50:32', '61', '1');
INSERT INTO `topic` VALUES ('7059', '33', '4', 'sleep方法有什么作用,一般用来做什么', '00a80113-b4fc-4865-b354-82f053f985af.', null, null, null, null, null, null, 'SLEEP是一个THREAD类的静态方法，让调用它的线程休眠指定的时间，可用于暂停线程，但不会把锁让给其他线程，时间一到，线程会继续执行。', '', '0', '2017-12-27 00:50:51', '61', '1');
INSERT INTO `topic` VALUES ('7060', '33', '4', '讲下join,yield方法的作用,以及什么场合用它们', 'f46334e9-9dfa-4795-b7ae-b663eef29443.', null, null, null, null, null, null, 'JOIN线程有严格的先后顺序，调用它的线程需要执行完以后其他线程才会跟着执行。\r\nYIELD是暂停当前正在执行的线程对象，把时间让给其他线程。\r\n使用场合：JOIN线程有严格的先后顺序，YIELD当前线程占用CPU使用率很高时，把时间让出来。（死循环时）', '', '0', '2017-12-27 00:51:11', '61', '1');
INSERT INTO `topic` VALUES ('7062', '33', '4', '线程中断是否能直接调用stop,为什么?', '0cb4474c-3b2c-4dae-ab29-2cd5308bc4c4.', null, null, null, null, null, null, '不可以，STOP方法是从外部强行终止一个线程，会导致不可预知的错误。如使用IO流时不能关流', '', '0', '2017-12-27 00:51:28', '61', '1');
INSERT INTO `topic` VALUES ('7064', '33', '4', '列举出一般情况下线程中断的几种方式,并说明他们之间的优缺点,并且说明那种中断方式最好', 'ee838946-b814-43e7-ae5c-1e21c11276b8.', null, null, null, null, null, null, '中断线程有4种方式：\r\n①．由INTERRUPT发出中断信号，用户接收中断信号，通过ISINTERRUPTED判断线程是否中断。\r\n②．由INTERRUPT发出中断信号，系统接收中断信号，通过SLEEP抛出中断异常，并把中断信号清除，只能抛出一次。\r\n③．用户自定义中断信号，并将该信号发出，自己接收该中断信号。\r\n④.调用INTERRUPTED()，会把中断信号清除，并中断线程。', '', '0', '2017-12-27 00:51:43', '61', '1');
INSERT INTO `topic` VALUES ('7066', '33', '4', '线程有几种状态,他们是怎么转化的', '91e42f3f-103a-4a4a-afe2-c34b007158f6.', null, null, null, null, null, null, '线程一般分为：新生、可运行、运行、阻塞、死亡五种状态。\r\n当创建一个线程后，并没有运行，还处于新生状态，需要通过调用START方法，让线程处于可运行状态，但是否运行取决CPU分配的时间片，当得到CPU的时间片后，线程就会马上运行，一个正在执行的线程可以通过很多方式进入阻塞状态（等待输入/输出 ，SLEEP，WAIT，GET）当执行完所有操作后就进入死亡状态。', '', '0', '2017-12-27 00:51:59', '61', '1');
INSERT INTO `topic` VALUES ('7068', '33', '4', '在实现Runnable的接口中怎么样访问当前线程对象,比如拿到当前线程的名字', 'fc857fbd-bb82-4726-b373-ff23fc83eb96.', null, null, null, null, null, null, '通过CURRENTTHREAD()方法访问当前线程对象，通过GETNAME()可获得当前线程的名字。', '', '0', '2017-12-27 00:52:17', '61', '1');
INSERT INTO `topic` VALUES ('7069', '33', '4', '讲下什么是守护线程,以及在什么场合来使用它', '3bdcb967-1bc2-4c08-ad39-bde1c61dd434.', null, null, null, null, null, null, ' 守护线程一般在后台提供通用性支持，只有非守护线程全部退出时，守护线程才会退出。\r\n当主线程和主线程创建的子线程全部退出，守护线程一定会跟着退出。', '', '0', '2017-12-27 00:52:31', '61', '1');
INSERT INTO `topic` VALUES ('7070', '3', '4', 'Java的接口和C++的虚类的相同和不同处。', '380d30d5-47e8-4b9d-ab65-d27a90e0ae65.', null, null, null, null, null, null, '由于JAVA不支持多继承，而有可能某个类或对象要使用分别在几个类或对象里面的方法或属性，现有的单继承机制就不能满足要求。与继承相比，接口有更高的灵活性，因为接口中没有任何实现代码。当一个类实现了接口以后，该类要实现接口里面所有的方法和属性，并且接口里面的属性在默认状态下面都是PUBLIC STATIC,所有方法默认情况下是PUBLIC.一个类可以实现多个接口。', '', '0', '2017-12-27 00:52:39', '65', '1');
INSERT INTO `topic` VALUES ('7071', '33', '4', '一般的线程优先级是什么回事,线程优先级高的线程一定会先执行吗?如果不设置优先级的话,那么线程优先级是多少,设置线程优先级用那个函数', '164fbb5f-01f1-42cf-9ec4-0fc658d1a442.', null, null, null, null, null, null, '线程的优先级就是设置哪个线程优先执行，但也不是绝对的，只是让优先级高的线程优先运行的几率高一些。线程默认是NORM_PRIORITY = 5; 设置优先级使用的是SETPRIORITY()函数。', '', '0', '2017-12-27 00:52:48', '61', '1');
INSERT INTO `topic` VALUES ('7073', '33', '4', '为什么Thread里面的大部分方法都是final的', '1f8c8cfb-d226-4e01-8e1f-a37281883e60.', null, null, null, null, null, null, ' 不能被重写，线程的很多方法都是由系统调用的，不能通过子类覆写去改变他们的行为。', '', '0', '2017-12-27 00:53:10', '61', '1');
INSERT INTO `topic` VALUES ('7074', '3', '4', 'JSP的常用指令', 'b21f97c2-0328-482f-a8c0-7ee89dcafd3d.', null, null, null, null, null, null, '<%@PAGE LANGUAGE=”JAVA” CONTENTYPE=”TEXT/HTML;CHARSET=GB2312” SESSION=”TRUE” BUFFER=”64KB” AUTOFLUSH=”TRUE” ISTHREADSAFE=”TRUE” INFO=”TEXT” ERRORPAGE=”ERROR.JSP” ISERRORPAGE=”TRUE” ISELIGNORED=”TRUE” PAGEENCODING=”GB2312” IMPORT=”JAVA.SQL.*”%>\r\nISERRORPAGE(是否能使用EXCEPTION对象)，ISELIGNORED(是否忽略表达式)\r\n<%@INCLUDE FILE=”FILENAME”%>\r\n<%@TAGLIB PREFIX=”C”URI=”HTTP://……”%>', '', '0', '2017-12-27 00:53:17', '65', '1');
INSERT INTO `topic` VALUES ('7075', '33', '4', '什么是线程同步,什么是线程安全', 'f0580d9c-5086-4ac6-9fc2-0d6049c8375f.', null, null, null, null, null, null, '当两个或两个以上的线程需要共享资源，他们就需要某种方法来确定资源在某一刻仅被一个线程占用。\r\n线程安全就是多线程操作同一个对象不会有问题，线程同步一般来保护线程安全，FINAL修饰的也是线程安全', '', '0', '2017-12-27 00:53:28', '61', '1');
INSERT INTO `topic` VALUES ('7077', '33', '4', '讲下同步方法和同步块的区别,以及什么时候用它们', 'b5c3b90b-3262-433e-aa9e-6bee3a615181.', null, null, null, null, null, null, '同步方法就是被SYNCHRONIZED修饰的方法，同步整个方法，且整个方法都会被锁住，同一时间只有一个线程可以访问该方法。整个业务，缺点：性能差\r\n同步块就是使用SYNCHRONIZED修饰的代码块，可以同步一小部分代码\r\n同步块越小性能越好，当性能要求比较高时，用同步块', '', '0', '2017-12-27 00:53:46', '61', '1');
INSERT INTO `topic` VALUES ('7078', '33', '4', '简单说下Lock对象的实现类的锁机制和同步方法或同步块有什么区别', '2026cade-ba97-4136-ad18-5117338b5867.', null, null, null, null, null, null, '可重入锁是JDK1.5以后出现的，比同步方法或同步块更加灵活，可以控制在什么时候上锁，什么时候解锁，而使用同步块或同步方法后，必须要等代码执行完后才会解锁。', '', '0', '2017-12-27 00:54:02', '61', '1');
INSERT INTO `topic` VALUES ('7079', '33', '4', '同步块里面的同步监视器是怎么写的,默认的同步方法里面的同步监视器是那个', '4b8f2bab-4ef0-4cf1-bac9-073c22690b49.', null, null, null, null, null, null, ' SYNCHRONIZED(对象){\r\n//代码块\r\n}\r\n默认的同步监视器THIS', '', '0', '2017-12-27 00:54:17', '61', '1');
INSERT INTO `topic` VALUES ('7081', '33', '4', '讲下什么 是死锁,死锁发生的几个条件是什么', 'ea21c317-5b4c-4406-81ae-37e503e71f5e.', null, null, null, null, null, null, '死锁就是当有两个或两个以上的线程都获得对方的资源，但彼此有不肯放开，处于僵持状态，此时便造成了死锁。\r\n条件：两个或两个以上的线程\r\n同时想要获取对方的资源，彼此又不肯放开', '', '0', '2017-12-27 00:54:31', '61', '1');
INSERT INTO `topic` VALUES ('7082', '33', '4', '线程间是什么通信的,通过调用几个方法来交互的', '6334785b-21a9-48ec-8449-8bba0ff49002.', null, null, null, null, null, null, '线程间是通过相互作用，共同完成一个任务当一个线程调用WAIT方法后便进入等待状态，需要另一线程调用NOTIFY（）方法对它进行唤醒。NOTIFYALL可以唤醒所有线程，都必须在SYNCHRONIZED方法或SYNCHRONIZED块里使用', '', '0', '2017-12-27 00:54:45', '61', '1');
INSERT INTO `topic` VALUES ('7085', '33', '4', 'wait,notify,notifyAll在什么地方使用才有效,他们是那个类的方法', '6c4c27fd-339d-4c9c-a4d8-165eac435513.', null, null, null, null, null, null, ' WAIT ，NOTIFY , NOTIFYALL都必须在SYNCHRONIZED修饰的方法或SYNCHRONIZED块中使用，都属于OBJECT的方法，可以被所有类继承，都是FINAL修饰的方法，不能通过子类覆写去改变他们的行为。', '', '0', '2017-12-27 00:55:04', '61', '1');
INSERT INTO `topic` VALUES ('7086', '33', '4', 'wait和sleep有什么区别和联系,他们执行的时候是否都会释放锁', '375978f4-d0fb-45fe-a94c-e48b7e8de5e0.', null, null, null, null, null, null, ' WAIT和SLEEP都可以使线程暂停，但WAIT必须在SYNCHRONIZED修饰的方法或SYNCHRONIZED块中使用，WAIT可以使锁定解除，而SLEEP不会解锁，WAIT不被唤醒是一直会在等待，而SLEEP会在休眠时间结束之后便会执行', '', '0', '2017-12-27 00:55:18', '61', '1');
INSERT INTO `topic` VALUES ('7088', '33', '4', 'yield,sleep方法有什么区别和联系', '75c4f926-160b-4e14-bc6b-684cc03426af.', null, null, null, null, null, null, ' YIELD和SLEEP都是可以让线程暂停，但YIELD会暂停当前正在执行的线程，把时间片让给其他线程，而SLEEP虽然也是暂停当前线程，但只会暂停指定的时间，不会把同步锁让给其他线程，时间到了当前线程还会继续执行。', '', '0', '2017-12-27 00:55:34', '61', '1');
INSERT INTO `topic` VALUES ('7090', '3', '4', '我们在web应用开发过程中经常遇到输出某种编码的字符，如iso8859-1等，如何输出一个某种编码的字符串？', '9ef580af-6fe6-415c-be9f-08c214aa2822.', null, null, null, null, null, null, 'PUBLIC STRING TRANSLATE (STRING STR) {\r\nSTRING TEMPSTR = \"\";\r\nTRY {\r\nTEMPSTR = NEW STRING(STR.GETBYTES(\"ISO-8859-1\"), \"GBK\");\r\nTEMPSTR = TEMPSTR.TRIM();\r\n}\r\nCATCH (EXCEPTION E) {\r\nSYSTEM.ERR.PRINTLN(E.GETMESSAGE());\r\n}\r\nRETURN TEMPSTR;\r\n}', '', '0', '2017-12-27 00:55:58', '65', '1');
INSERT INTO `topic` VALUES ('7091', '33', '4', '线程的启动是哪个方法，调用的是哪个方法？', '849116d0-1b94-4bcd-a214-78041b9aa3e1.', null, null, null, null, null, null, 'START用于启动线程，当调用START后，线程并不会马上运行，而是处于就绪状态，是否要运行取决于CPU给的时间片。\r\nRUN用于子类重写来实现线程的功能。\r\n我们一般调用的是START方法，系统调用的\r\n是RUN方法。', '', '0', '2017-12-27 00:55:59', '61', '1');
INSERT INTO `topic` VALUES ('7092', '33', '4', '线程安全与线程不安全的区别', '0a5a797f-71d7-48cd-b788-544fcbabf67b.', null, null, null, null, null, null, '当两个或两个以上的线程需要共享资源，他们就需要某种方法来确定资源在某一刻仅被一个线程占用。\r\n线程安全就是多线程操作同一个对象不会有问题，线程同步一般来保护线程安全，FINAL修饰的也是线程安全', '', '0', '2017-12-27 00:56:14', '61', '1');
INSERT INTO `topic` VALUES ('7093', '3', '4', '简述逻辑操作(&,|,^)与条件操作(&&,||)的区别。', 'd85d90b0-2727-4a14-9802-f6bd85c4043e.', null, null, null, null, null, null, '区别主要答两点：A.条件操作只能操作布尔型的,而逻辑操作不仅可以操作布尔型,而且可以操作数值型\r\nB.逻辑操作不会产生短路\r\n70、XML文档定义有几种形式？它们之间有何本质区别？解析XML文档有哪几种方式？ \r\nA: 两种形式 DTD SCHEMA，B: 本质区别:SCHEMA本身是XML的，可以被XML解析器解析(这也是从DTD上发展SCHEMA的根本目的)，C:有DOM,SAX,STAX等 \r\nDOM:处理大型文件时其性能下降的非常厉害。这个问题是由DOM的树结构所造成的，这种结构占用的内存较多，而且DOM必须在解析文件之前把整个文档装入内存,适合对XML的随机访问\r\nSAX:不现于DOM,SAX是事件驱动型的XML解析方式。它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过在其回调事件中写入处理代码来处理XML文件，适合对XML的顺序访问 \r\nSTAX:STREAMING API FOR XML (STAX)', '', '0', '2017-12-27 00:56:16', '65', '1');
INSERT INTO `topic` VALUES ('7095', '33', '4', '线程的实现方式，线程的生命周期等', 'a9d20a27-e191-4a65-81c8-767224ae4588.', null, null, null, null, null, null, '1.线程的生命周期线程是一个动态执行的过程，它也有一个从产生到死亡的过程。\r\n(1)生命周期的五种状态\r\n新建（NEW THREAD）当创建THREAD类的一个实例（对象）时，此线程进入新建状态（未被启动）。\r\n例如：THREAD T1=NEW THREAD();\r\n就绪（RUNNABLE）线程已经被启动，正在等待被分配给CPU时间片，也就是说此时线程正在就绪队列中排队等候得到CPU资源。例如：T1.START();\r\n运行（RUNNING）线程获得CPU资源正在执行任务（RUN()方法），此时除非此线程自动放弃CPU资源或者有优先级更高的线程进入，线程将一直运行到结束。\r\n死亡（DEAD）\r\n当线程执行完毕或被其它线程杀死，线程就进入死亡状态，这时线程不可能再进入就绪状态等待执行。\r\n自然终止：正常运行RUN()方法后终止\r\n异常终止：调用STOP()方法让一个线程终止运行\r\n堵塞（BLOCKED）\r\n由于某种原因导致正在运行的线程让出CPU并暂停自己的执行，即进入堵塞状态。\r\n正在睡眠：用SLEEP(LONG T) 方法可使线程进入睡眠方式。一个睡眠着的线程在指定的时间过去可进入就绪状态。\r\n正在等待：调用WAIT()方法。（调用MOTIFY()方法回到就绪状态）\r\n被另一个线程所阻塞：调用SUSPEND()方法。（调用RESUME()方法恢复）', '', '0', '2017-12-27 00:56:32', '61', '1');
INSERT INTO `topic` VALUES ('7096', '33', '4', '如何处理线程不安全问题 有2种解决方法。', '37e76032-8ba2-4ba3-ac32-6520fe601099.', null, null, null, null, null, null, '1.放在栈里面的数据都是线程安全\r\n2.同步块,同步关键字修饰的都是线程安全\r\n3.FINAL修饰的变量都是线程安全\r\n4.THREADLOACL放置的变量可以解决线程安全\r\n5.可以考虑JDK5提供的线程安全集合和类\r\n第一，是采用原子变量，毕竟线程安全问题最根本上是由于全局变量和静态变量引起的，只要保证了对于变量的写操作要么全写要么不写，就可以解决线程安全，定义变量用SIG_ATOMIC_T和VOLATILE。\r\n第二，就是实现线程间同步啦，用互斥锁，信号量。让线程有序的访问变量就可以啦', '', '0', '2017-12-27 00:57:00', '61', '1');
INSERT INTO `topic` VALUES ('7097', '3', '4', 'EJB的角色和三个对象', '004e40f7-bd9d-4ffb-a9f9-5066d5af2db2.', null, null, null, null, null, null, '一个完整的基于EJB的分布式计算结构由六个角色组成，这六个角色可以由不同的开发商提供，每个角色所作的工作必须遵循SUN公司提供的EJB规范，以保证彼此之间的兼容性。这六个角色分别是EJB组件开发者（ENTERPRISE BEAN PROVIDER） 、应用组合者（APPLICATION ASSEMBLER）、部署者（DEPLOYER）、EJB 服务器提供者（EJB SERVER PROVIDER）、EJB 容器提供者（EJB CONTAINER PROVIDER）、系统管理员（SYSTEM ADMINISTRATOR）\r\n三个对象是REMOTE（LOCAL）接口、HOME（LOCALHOME）接口，BEAN类', '', '0', '2017-12-27 00:57:10', '65', '1');
INSERT INTO `topic` VALUES ('7098', '33', '4', '线程中常用方法的区别，', 'fc42321b-3e0f-4f23-b5ef-0692bcfbbc42.', null, null, null, null, null, null, '首先，线程中最多用到的是START方法，它的作用是用来启动一个线程。（一个THREAD类的对象就是一个线程，用这个对象.START（）就是启动一个线程）\r\n其次，线程中用的多的就是SLEEP，JOIN，WAIT这种会引发INTERRUPTEDEXCEPTION异常的方法，\r\nSLEEP是用来休眠一个线程一段时间，\r\nJOIN是用来强制执行一个线程，\r\nWAIT这个方法是OBJECT类中的方法，用于等待。\r\n除YIELD（），礼让的意思就是让另外一个线程执行一会，然后自己再执行，不同于SLEEP。\r\n还有获得当前线程的对象，这个方法也很重要，CURRENTTHREAD（）。\r\n对于线程中，还应了解到线程的死锁的概念，不需要掌握这个概念，但是应该知道可以通过哪些途径避免死锁，JAVA中提供了使用SYNCHRONIZED关键字和SYNCHRONIZED同步方法来解决。', '', '0', '2017-12-27 00:57:16', '61', '1');
INSERT INTO `topic` VALUES ('7099', '3', '4', 'EJB容器提供的服务', '2bbe01a7-961d-4884-abb4-38b302afd07d.', null, null, null, null, null, null, '主要提供声明周期管理、代码产生、持续性管理、安全、事务管理、锁和并发行管理等服务。', '', '0', '2017-12-27 00:57:24', '65', '1');
INSERT INTO `topic` VALUES ('7100', '3', '4', 'EJB规范规定EJB中禁止的操作有哪些', '846c564f-fc06-4a26-963f-bb4f5e025dad.', null, null, null, null, null, null, '.不能操作线程和线程API(线程API指非线程对象的方法如NOTIFY,WAIT等)，2.不能操作AWT，3.不能实现服务器功能，4.不能对静态属生存取，5.不能使用IO操作直接存取文件系统，6.不能加载本地库.，7.不能将THIS作为变量和返回，8.不能循环调用。', '', '0', '2017-12-27 00:57:38', '65', '1');
INSERT INTO `topic` VALUES ('7101', '33', '3', '线程的四种状态，__、_、_、___。启动调用_方法，启动后会调用__方法。', '278a6c3e-4da9-47ce-a737-bed517caa19c.', null, null, null, null, null, null, '四种状态：新（NEW） 可执行（RUNNABLE）堵塞（BLOCKED）死（DEAD）\r\n启动调用START 启动后调用RUN', '', '0', '2017-12-27 00:57:38', '61', '1');
INSERT INTO `topic` VALUES ('7102', '33', '4', '用同步块与同步方法的区别？', '40d5b1b9-5400-4aec-a125-a02a7966c054.', null, null, null, null, null, null, '同步方法就是被SYNCHRONIZED修饰的方法，同步整个方法，且整个方法都会被锁住，同一时间只有一个线程可以访问该方法。整个业务，缺点：性能差\r\n同步块就是使用SYNCHRONIZED修饰的代码块，可以同步一小部分代码\r\n同步块越小性能越好，当性能要求比较高时，用同步块\r\n写二个线程，对一个INT类型一个I++,一个I--\r\nICON\r\nPUBLIC CLASS THREADTEST IMPLEMENTS RUNNABLE{ \r\n@OVERRIDE\r\nPUBLIC VOID RUN() {\r\nFOR (INT I = 0; I < 10; I++) {\r\nSYSTEM.OUT.PRINTLN(\"我是子线程\"+I); \r\n} \r\n}\r\nPUBLIC STATIC VOID MAIN(STRING[] ARGS) {\r\nRUNNABLE RUNNABLE=NEW THREADTEST();\r\nTHREAD THREAD=NEW THREAD(RUNNABLE);\r\nTHREAD.START();\r\nFOR (INT I = 10; I >0; I--) {\r\nSYSTEM.OUT.PRINTLN(\"我是主线程\"+I); \r\n}\r\n} \r\n}', '', '0', '2017-12-27 00:57:55', '61', '1');
INSERT INTO `topic` VALUES ('7103', '3', '4', 'remote接口和home接口主要作用', '439f6ae2-b5f2-458d-a3d7-579eb3d16c0f.', null, null, null, null, null, null, 'REMOTE接口定义了业务方法，用于EJB客户端调用业务方法。\r\nHOME接口是EJB工厂用于创建和移除查找EJB实例', '', '0', '2017-12-27 00:57:58', '65', '1');
INSERT INTO `topic` VALUES ('7104', '33', '4', '说说stop为什么不建议使用。', '54d55e8a-ffb9-4159-80e1-b25b8ddb01e6.', null, null, null, null, null, null, 'STOP（）方法作为一种粗暴的线程终止行为，在线程终止之前没有对其做任何的清除操作，因此具有固有的不安全性。', '', '0', '2017-12-27 00:58:10', '61', '1');
INSERT INTO `topic` VALUES ('7105', '3', '4', 'bean 实例的生命周期', 'f07e2b76-7d6e-443b-b840-ac208055b06b.', null, null, null, null, null, null, '对于STATELESS SESSION BEAN、ENTITY BEAN、MESSAGE DRIVEN BEAN一般存在缓冲池管理，而对于ENTITY BEAN和STATEFULL SESSION BEAN存在CACHE管理，通常包含创建实例，设置上下文、创建EJB OBJECT（CREATE）、业务方法调用、REMOVE等过程，对于存在缓冲池管理的BEAN，在CREATE之后实例并不从内存清除，而是采用缓冲池调度机制不断重用实例，而对于存在CACHE管理的BEAN则通过激活和去激活机制保持BEAN的状态并限制内存中实例数量。', '', '0', '2017-12-27 00:58:13', '65', '1');
INSERT INTO `topic` VALUES ('7106', '33', '4', 'Runable接口的方法是什么？', 'adc4336f-3aba-4fe2-8355-c150f38bc57a.', null, null, null, null, null, null, 'RUN', '', '0', '2017-12-27 00:58:26', '61', '1');
INSERT INTO `topic` VALUES ('7107', '3', '4', 'EJB的激活机制', '22a97f46-8489-4d4f-b333-db0136afce3a.', null, null, null, null, null, null, '以STATEFUL SESSION BEAN 为例：其CACHE大小决定了内存中可以同时存在的BEAN实例的数量，根据MRU或NRU算法，实例在激活和去激活状态之间迁移，激活机制是当客户端调用某个EJB实例业务方法时，如果对应EJB OBJECT发现自己没有绑定对应的BEAN实例则从其去激活BEAN存储中（通过序列化机制存储实例）回复（激活）此实例。状态变迁前会调用对应的EJBACTIVE和EJBPASSIVATE方法。', '', '0', '2017-12-27 00:58:28', '65', '1');
INSERT INTO `topic` VALUES ('7108', '3', '4', 'EJB的几种类型', '2f2e6802-4f94-4f07-99fb-101513d8a708.', null, null, null, null, null, null, '会话（SESSION）BEAN ，实体（ENTITY）BEAN 消息驱动的（MESSAGE DRIVEN）BEAN\r\n会话BEAN又可分为有状态（STATEFUL）和无状态（STATELESS）两种\r\n实体BEAN可分为BEAN管理的持续性（BMP）和容器管理的持续性（CMP）两种', '', '0', '2017-12-27 00:58:44', '65', '1');
INSERT INTO `topic` VALUES ('7109', '33', '4', '什么是同步和异步，分别用例子说明,同步有几种方式？', 'a126050f-0149-4731-bed5-af460f221af5.', null, null, null, null, null, null, '同步就是排队去做事情，异步就是各做各的', '', '0', '2017-12-27 00:58:45', '61', '1');
INSERT INTO `topic` VALUES ('7110', '3', '4', '客服端调用EJB对象的几个基本步骤', '28242eee-5f79-4703-9acd-5dd96da51a21.', null, null, null, null, null, null, '设置JNDI服务工厂以及JNDI服务地址系统属性，查找HOME接口，从HOME接口调用CREATE方法创建REMOTE接口，通过REMOTE接口调用其业务方法。', '', '0', '2017-12-27 00:58:58', '65', '1');
INSERT INTO `topic` VALUES ('7111', '33', '4', '线程的死锁问题', '4109b361-9f09-48a5-9207-a2589f579749.', null, null, null, null, null, null, '死锁就是当有两个或两个以上的线程都获得对方的资源，但彼此有不肯放开，处于僵持状态，此时便造成了死锁。\r\n条件：两个或两个以上的线程\r\n同时想要获取对方的资源，彼此又不肯放开', '', '0', '2017-12-27 00:59:09', '61', '1');
INSERT INTO `topic` VALUES ('7113', '3', '4', '如何设定的weblogic的热启动模式(开发模式)与产品发布模式?', '1f82185d-ea67-4b78-948e-8bcf30e04035.', null, null, null, null, null, null, '可以在管理控制台中修改对应服务器的启动模式为开发或产品模式之一。或者修改服务的启动文件或者COMMENV文件，增加SET PRODUCTION_MODE=TRUE。', '', '0', '2017-12-27 01:00:01', '65', '1');
INSERT INTO `topic` VALUES ('7114', '3', '4', '如何启动时不需输入用户名与密码?', 'fd8c1609-9266-46d2-b691-159ba1e4f642.', null, null, null, null, null, null, '修改服务启动文件，增加 WLS_USER和WLS_PW项。也可以在BOOT.PROPERTIES文件中增加加密过的用户名和密码.', '', '0', '2017-12-27 01:00:16', '65', '1');
INSERT INTO `topic` VALUES ('7115', '3', '4', '网页三要素是什么', 'f1b7c70b-ae74-4419-9917-3c50be39eb1f.', null, null, null, null, null, null, 'HTML(内容)\r\nCSS(外观)\r\nJAVASCRIPT(行为)', '', '0', '2017-12-27 01:00:17', '61', '1');
INSERT INTO `topic` VALUES ('7116', '3', '4', '在weblogic管理制台中对一个应用域(或者说是一个网站,Domain)进行jms及ejb或连接池等相关信息进行配置后,实际保存在什么文件中?', 'e0cf100a-224d-427a-944f-4368dcc513f3.', null, null, null, null, null, null, '保存在此DOMAIN的CONFIG.XML文件中，它是服务器的核心配置文件。', '', '0', '2017-12-27 01:00:32', '65', '1');
INSERT INTO `topic` VALUES ('7117', '5', '4', '讲下js的数据类型', '3d2b4138-67ac-4661-a5f3-88009076928e.', null, null, null, null, null, null, '基本类型: 数值(NUMBER),字符串(STRING),布尔值(BOOLEAN),UNDEFINED\r\n对象类型: 对象(OBJECT)，数组(ARRAY)，函数(FUNCTION)', '', '0', '2017-12-27 01:00:45', '61', '1');
INSERT INTO `topic` VALUES ('7118', '3', '4', '说说weblogic中一个Domain的缺省目录结构?比如要将一个简单的helloWorld.jsp放入何目录下', 'fbb7ab4f-1dca-4d40-a4b0-14eeda288781.', null, null, null, null, null, null, '可打入HTTP://主机:端口号//HELLOWORD.JSP就可以看到运行结果了? 又比如这其中用到了一个自己写的JAVABEAN该如何办?\r\nDOMAIN目录服务器目录APPLICATIONS，将应用目录放在此目录下将可以作为应用访问，如果是WEB应用，应用目录需要满足WEB应用目录要求，JSP文件可以直接放在应用目录中，JAVABEAN需要放在应用目录的WEB-INF目录的CLASSES目录中，设置服务器的缺省应用将可以实现在浏览器上无需输入应用名。', '', '0', '2017-12-27 01:00:57', '65', '1');
INSERT INTO `topic` VALUES ('7119', '5', '4', '用什么方法来判断一个对象的数据类型,怎么样去判断数组', 'a0a6294e-49b1-4c14-8825-fa338b436ab6.', null, null, null, null, null, null, 'TYPEOF判断对象类型,用INSTANCEOF判断是不是数组', '', '0', '2017-12-27 01:01:02', '61', '1');
INSERT INTO `topic` VALUES ('7120', '3', '4', '、在weblogic中发布ejb需涉及到哪些配置文件', '694cb93d-0f84-402f-9837-5cf2200c4e4c.', null, null, null, null, null, null, '不同类型的EJB涉及的配置文件不同，都涉及到的配置文件包括EJB-JAR.XML,WEBLOGIC-EJB-JAR.XMLCMP实体BEAN一般还需要WEBLOGIC-CMP-RDBMS-JAR.XML ', '', '0', '2017-12-27 01:01:23', '65', '1');
INSERT INTO `topic` VALUES ('7121', '5', '4', '分别讲下小括号,中括号,大括号,冒号在js中的作用', '5ab8dd37-ec09-48ae-81da-62fe8bb9b14c.', null, null, null, null, null, null, '1). 小括号: ()用来定义或调用一个函数\r\n2). 中括号运算符: [ ]用来创建一个数组/获取数组元素\r\n3). 大括号运算符: { }用来创建一个对象\r\n4). 冒号运算符: 冒号用来分隔对象的属性名和属性值', '', '0', '2017-12-27 01:01:23', '61', '1');
INSERT INTO `topic` VALUES ('7122', '5', '4', '讲下函数的三种定义:', 'c340c4d2-68f3-4810-90ee-2bf19d386c10.', null, null, null, null, null, null, '1.FUNCTION NAME(){}\r\n2. VAR NAME=FUNCTION(){}\r\n3. VAR NAME=NEW FUNCTION(\"N\",\"M\",\"N+M\")', '', '0', '2017-12-27 01:01:40', '61', '1');
INSERT INTO `topic` VALUES ('7123', '3', '4', '如何在weblogic中进行ssl配置与客户端的认证配置或说说j2ee(标准)进行ssl的配置', '3fc5dd0d-688a-4937-ab00-b68c90abb645.', null, null, null, null, null, null, '缺省安装中使用DEMOIDENTITY.JKS和DEMOTRUST.JKS KEYSTORE实现SSL，需要配置服务器使用ENABLE SSL，配置其端口，在产品模式下需要从CA获取私有密钥和数字证书，创建IDENTITY和TRUST KEYSTORE，装载获得的密钥和数字证书。可以配置此SSL连接是单向还是双向的。', '', '0', '2017-12-27 01:01:43', '65', '1');
INSERT INTO `topic` VALUES ('7124', '5', '4', '函数的形参和实参是否可以不一样,如果不一样,通过什么调用？', '6de03289-f67d-4e75-af52-ee2548b6b6a1.', null, null, null, null, null, null, '可以不一样,每个函数里面都有个ARGUMENTS数组类型的变量,可以拿到实参的个数', '', '0', '2017-12-27 01:02:04', '61', '1');
INSERT INTO `topic` VALUES ('7126', '5', '4', '说几个系统预定义函数', '5a5c2ff7-7d00-40d9-8e8e-69f16617712e.', null, null, null, null, null, null, 'PARSEINT() / PARSEFLOAT() : 将一个字符串转为数字\r\nISNAN() : 判断是否不是一个数值或者数值类型字符串\r\nENCODEURI() / DECODEURI(): 对字符串进行编码与解码\r\nEVAL() : 将JS代码格式的字符串当作JS执行\r\nSETINTERVAL(CALLBACK,M)间隔多久执行一次CALLBACK函数', '', '0', '2017-12-27 01:02:22', '61', '1');
INSERT INTO `topic` VALUES ('7128', '5', '4', '讲下变量的作用域', 'b96318b8-5f18-4298-b02b-c6470c93f737.', null, null, null, null, null, null, '如果在函数里面用VAR声明,就是局部变量,如果在函数里面不用VAR声明,那就是全局变量,在函数外面用VAR定义都是全局变量', '', '0', '2017-12-27 01:02:37', '61', '1');
INSERT INTO `topic` VALUES ('7129', '3', '4', '说说你所熟悉或听说过的j2ee中的几种常用模式?及对设计模式的一些看法', '51a2f183-91dd-429f-aeea-e160682ab800.', null, null, null, null, null, null, 'SESSION FACADE PATTERN：使用SESSIONBEAN访问ENTITYBEAN\r\nMESSAGE FACADE PATTERN：实现异步调用\r\nEJB COMMAND PATTERN：使用COMMAND JAVABEANS取代SESSIONBEAN，实现轻量级访问\r\nDATA TRANSFER OBJECT FACTORY：通过DTO FACTORY简化ENTITYBEAN数据提供特性\r\nGENERIC ATTRIBUTE ACCESS：通过ATTIBUTEACCESS接口简化ENTITYBEAN数据提供特性\r\nBUSINESS INTERFACE：通过远程（本地）接口和BEAN类实现相同接口规范业务逻辑一致性\r\nＥＪＢ架构的设计好坏将直接影响系统的性能、可扩展性、可维护性、组件可重用性及开发效率。项目越复杂，项目队伍越庞大则越能体现良好设计的重要性。', '', '0', '2017-12-27 01:02:49', '65', '1');
INSERT INTO `topic` VALUES ('7130', '5', '4', '数组有哪两种声明方式', '41cc19c2-1796-4f10-915a-56c9fc969730.', null, null, null, null, null, null, '1.直接用[]里面包含数据声明\r\n2.用NEW ARRAY声明', '', '0', '2017-12-27 01:02:51', '61', '1');
INSERT INTO `topic` VALUES ('7131', '5', '4', '数组用什么去访问', '6d01042b-8be6-400a-b6e3-891063649ffd.', null, null, null, null, null, null, '用下标来访问 ARR[INDEX]', '', '0', '2017-12-27 01:03:07', '61', '1');
INSERT INTO `topic` VALUES ('7132', '3', '4', '说说在weblogic中开发消息Bean时的persistent与non-persisten的差别', 'e772247d-096b-48b1-985a-eee521390242.', null, null, null, null, null, null, 'PERSISTENT方式的MDB可以保证消息传递的可靠性,也就是如果EJB容器出现问题而JMS服务器依然会将消息在此MDB可用的时候发送过来，而NON－PERSISTENT方式的消息将被丢弃。\r\n', '', '0', '2017-12-27 01:03:08', '65', '1');
INSERT INTO `topic` VALUES ('7133', '5', '4', '怎么样删除数组对象', 'e1df811a-4a30-424f-8263-554f1c4fdd8c.', null, null, null, null, null, null, '用 DELETE ARRA[0];', '', '0', '2017-12-27 01:03:25', '61', '1');
INSERT INTO `topic` VALUES ('7135', '5', '4', '对象是怎么样定义的,属性是怎么定义的', 'f6acabf5-0fd4-42ab-a49c-e79fcc1bd3ae.', null, null, null, null, null, null, '可以用FUNCTION定义一个对象,然后根据形参在里面THIS.X=X可以定义属性,或者可以通过动态的添加一个属性', '', '0', '2017-12-27 01:03:40', '61', '1');
INSERT INTO `topic` VALUES ('7136', '5', '4', '对象是怎么样创建的?', '7c17deee-de48-49c0-9600-0d117918106e.', null, null, null, null, null, null, '1.用VAR OBJ={}就可以创建一个对象 2.用NEW OBJECT()也可以创建一个对象', '', '0', '2017-12-27 01:03:57', '61', '1');
INSERT INTO `topic` VALUES ('7138', '5', '4', '怎么样给一个对象动态添加属性或者方法', 'c3b4fb83-f455-4e15-92f4-0e6fe0ee9199.', null, null, null, null, null, null, '直接在对象上面用OBJ.属性=\"TEST\",或 OBJ.方法名=FUNCTION(){}定义一个方法', '', '0', '2017-12-27 01:04:14', '61', '1');
INSERT INTO `topic` VALUES ('7139', '5', '4', 'js里面的全局对象是什么,怎么调用的', 'ae371787-0bd2-4591-9fa1-f1b88bc5dfd3.', null, null, null, null, null, null, 'JS里面的全局对象是WINDOW,在JS里面直接调用的函数都是WINDOW对象里面的函数,\r\n默认的THIS也指向WINDOW,默认全局对象的属性和方法不用前面加WINDOW,可以直接调用', '', '0', '2017-12-27 01:04:31', '61', '1');
INSERT INTO `topic` VALUES ('7140', '3', '4', 'JAVA语言如何进行异常处理，关键字：throws,throw,try,catch,finally分别代表什么意义？在try块中可以抛出异常吗？', '40284b94-f607-4513-b218-839041aac96b.', null, null, null, null, null, null, 'JAVA通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并提供了良好的接口。在JAVA中，每个异常都是一个对象，它是THROWABLE类或其它子类的实例。当一个方法出现异常后便抛出一个异常对象，该对象中包含有异常信息，调用这个对象的方法可以捕获到这个异常并进行处理。JAVA的异常处理是通过5个关键词来实现的：TRY、CATCH、THROW、THROWS和FINALLY。一般情况下是用TRY来执行一段程序，如果出现异常，系统会抛出（THROWS）一个异常，这时候你可以通过它的类型来捕捉（CATCH）它，或最后（FINALLY）由缺省处理器来处理。\r\n用TRY来指定一块预防所有“异常”的程序。紧跟在TRY程序后面，应包含一个CATCH子句来指定你想要捕捉的“异常”的类型。', '', '0', '2017-12-27 01:04:31', '65', '1');
INSERT INTO `topic` VALUES ('7141', '5', '4', '讲几个常见的js内置对象,他们有什么好处', '466c9ba0-4bd8-446f-b138-6f80db134fec.', null, null, null, null, null, null, 'OBJECT,ARRAY,STRING,NUMBER,BOOLEAN,DATE,FUNCTION\r\n可以方便的使用一些方法和常量,譬如STRING里面就有很多字符串函数 DATE可以处理时间', '', '0', '2017-12-27 01:04:58', '61', '1');
INSERT INTO `topic` VALUES ('7143', '5', '4', 'prototype(原型)是什么,它是怎么使用的', '81472e48-046b-4c46-9a66-89c915d92d3a.', null, null, null, null, null, null, '每个函数都有一个PROTOTYPE属性, 它是一个引用变量, 默认指向一个空OBJECT对象 ,有备用的意思,当调用一个对象的函数或者属性的时候,如果在当前对象里面找不到,那么就到原型里面去找', '', '0', '2017-12-27 01:05:18', '61', '1');
INSERT INTO `topic` VALUES ('7144', '5', '4', 'js是怎么样实现继承的?', '410fc6fd-e9d1-48d4-83df-64c38a7ae748.', null, null, null, null, null, null, '使用PROTOTYPE属性就可以实现继承 一般是CHILD.PROTOTYPE=NEW PARENT()就可以实现', '', '0', '2017-12-27 01:05:34', '61', '1');
INSERT INTO `topic` VALUES ('7145', '5', '4', '什么是DOM,DOM分为那三种', '5cbeeb3d-2a8c-4a81-bb42-5f0985b1b49e.', null, null, null, null, null, null, 'DOM= DOCUMENT OBJECT MODEL，文档对象模型， DOM 是 W3C（万维网联盟）的标准。DOM 定义了访问 HTML 和 XML 文档的标准：独立于平台和语言的接口. W3C DOM 标准被分为 3 个不同的部分：\r\n 核心 DOM - 针对任何结构化文档的标准模型\r\n XML DOM - 针对 XML 文档的标准模型\r\n HTML DOM - 针对 HTML 文档的标准模型', '', '0', '2017-12-27 01:05:54', '61', '1');
INSERT INTO `topic` VALUES ('7147', '5', '4', 'DOM中有几种类型的节点', 'c38551df-a1e2-46ff-a8c7-a73d7c3bfbd8.', null, null, null, null, null, null, '整个文档是一个文档节点(DOCUMENT)\r\n每个 HTML 标签是一个元素节点(ELEMENT)\r\n每一个 HTML 属性是一个属性节点(ATTRIBUTE)\r\n包含在 HTML 元素中的文本是文本节点(TEXT)', '', '0', '2017-12-27 01:06:09', '61', '1');
INSERT INTO `topic` VALUES ('7148', '5', '4', '讲下DOM对象的三种查询方式', '5e13fff9-ad25-40d0-8ea8-5cdcbf6b7f38.', null, null, null, null, null, null, 'GETELEMENTBYID()根据元素ID来查找 ,GETELEMENTSBYTAGNAME(TAG):根据元素的TAG名字来查找 \r\nGETELEMENTSBYNAME(NAME) 根据元素名字来查找', '', '0', '2017-12-27 01:06:26', '61', '1');
INSERT INTO `topic` VALUES ('7149', '3', '4', 'java中有几种方法可以实现一个线程？用什么关键字修饰同步方法? stop()和suspend()方法为何不推荐使用？', '8c6270ed-784a-4395-8c1a-308de38465ec.', null, null, null, null, null, null, '有两种实现方法，分别是继承THREAD类与实现RUNNABLE接口\r\n用SYNCHRONIZED关键字修饰同步方法\r\n反对使用STOP()，是因为它不安全。它会解除由线程获取的所有锁定，而且如果对象处于一种不连贯状态，那么其他线程能在那种状态下检查和修改它们。结果很难检查出真正的问题所在。SUSPEND()方法容易发生死锁。调用SUSPEND()的时候，目标线程会停下来，但却仍然持有在这之前获得的锁定。此时，其他任何线程都不能访问锁定的资源，除非被“挂起”的线程恢复运行。对任何线程来说，如果它们想恢复目标线程，同时又试图使用任何一个锁定的资源，就会造成死锁。所以不应该使用SUSPEND()，而应在自己的THREAD类中置入一个标志，指出线程应该活动还是挂起。若标志指出线程应该挂起，便用WAIT()命其进入等待状态。若标志指出线程应当恢复，则用一个NOTIFY()重新启动线程。', '', '0', '2017-12-27 01:06:31', '65', '1');
INSERT INTO `topic` VALUES ('7150', '5', '4', '怎么样创建元素节点和文本节点,怎么样删除节点', '20cf205b-8f18-40b3-b7c2-9cdddbf324ca.', null, null, null, null, null, null, 'CREATEELEMENT(\"DIV\")创建元素节点,CREATETEXTNODE()创建一个文本节点,REMOVECHILD()可以用来删除节点', '', '0', '2017-12-27 01:06:45', '61', '1');
INSERT INTO `topic` VALUES ('7152', '5', '4', '用那个属性可以快速的给一个节点加一段html内容', '325077f0-78e2-4a90-9ea7-18489778d6db.', null, null, null, null, null, null, 'INNERHTML', '', '0', '2017-12-27 01:07:04', '61', '1');
INSERT INTO `topic` VALUES ('7154', '5', '4', '如果我在js里面访问在js下面的html的tag,用什么技术实现', 'ef9a3378-a7a0-4fee-ac54-765eb9129c76.', null, null, null, null, null, null, '默认JS都是解释性语言,JS不能访问后面定义的HTML元素的,但在WINDOW里面有个ONLOAD函数,把代码写在下面\r\n函数体里面就可以 WINDOW.ONLOAD=FUNCTION(){}', '', '0', '2017-12-27 01:07:21', '61', '1');
INSERT INTO `topic` VALUES ('7157', '33', '4', 'Http与Https 的区别？', '3a490ce9-979b-4a50-ac3b-21c908635239.', null, null, null, null, null, null, 'HTTP-超文本传输协议 (HTTP-HYPERTEXT TRANSFER PROTOCOL) 是一种详细规定了浏览器和万维网服务器之间互相通信的规则，通过因特网传送万维网文档的数据传送协议。\r\nHTTPS（全称：HYPERTEXT TRANSFER PROTOCOL OVER SECURE SOCKET LAYER），是以安全为目标的HTTP通道，简单讲是HTTP的安全版。', '', '0', '2017-12-27 01:08:02', '61', '1');
INSERT INTO `topic` VALUES ('7160', '5', '4', '获取某个节点的父节点 ', '07ac164c-6015-47c8-8615-53bcf361d9b1.', null, null, null, null, null, null, 'PARENTNODE属性 ', '', '0', '2017-12-27 01:08:39', '61', '1');
INSERT INTO `topic` VALUES ('7162', '5', '4', '创键一个新的节点 ', '312a4aa6-4541-4601-b0ef-e224ca4e94f4.', null, null, null, null, null, null, 'CREATETEXTNODE(节点文本内容) DOCUMENT对象的方法 在某些浏览器上兼容性不是很好 \r\nCREATEELEMENT(对象) DOCUMENT对象的方法 例如：DOCUMENT.CREATEELEMENT(\"A\"); ', '', '0', '2017-12-27 01:09:01', '61', '1');
INSERT INTO `topic` VALUES ('7163', '5', '4', '给某个节点对象添加属性和属性值 ', '13a9e1e2-0c4f-41aa-88f8-712069b7deb7.', null, null, null, null, null, null, 'SETATTRIBUTE(属性，属性值); 例如：ANODE.SETATTRIBUTE(\"HREF\",\"HTTP://WWW.BAIDU.COM\"); ', '', '0', '2017-12-27 01:09:17', '61', '1');
INSERT INTO `topic` VALUES ('7164', '5', '4', '替换某个节点下的子节点 ', '3d4a1701-bc51-4092-82b0-6556cb0c1d72.', null, null, null, null, null, null, 'REPLACECHILD(新节点，原子节点); ', '', '0', '2017-12-27 01:09:33', '61', '1');
INSERT INTO `topic` VALUES ('7165', '5', '4', '将某个节点添加到一个节点下 ', '3d217bea-b8e8-4b07-a932-c13a96d12225.', null, null, null, null, null, null, 'APPENDCHILD(要添加的节点) ', '', '0', '2017-12-27 01:09:50', '61', '1');
INSERT INTO `topic` VALUES ('7166', '5', '4', '克隆某个节点', 'f1f43c8b-d241-4570-8ce0-708fe8df467c.', null, null, null, null, null, null, 'CLONENODE() 不传参数和传入TRUE参数一样，表示克隆该节点包括子节点 ', '', '0', '2017-12-27 01:10:06', '61', '1');
INSERT INTO `topic` VALUES ('7167', '5', '4', 'css是如何继承的，', 'a33fe69f-6cf3-4043-9770-2caa36901c5a.', null, null, null, null, null, null, '所谓继承，就是父元素的规则也会适用于子元素。比如给BODY设置为COLOR:RED;那么他内部的元素如果没有其他的规则设置，也都会变成红色。继承得来的规则没有特殊性。', '', '0', '2017-12-27 01:10:21', '61', '1');
INSERT INTO `topic` VALUES ('7168', '5', '4', 'html如何进行隐藏与显示。', '21f85d2f-4e1c-4bb3-a853-f8d8f47f2558.', null, null, null, null, null, null, '方法一：\r\nDOCUMENT.GETELEMENTBYID(\"ELEID\").STYLE.VISIBILITY=\"HIDDEN\";\r\nDOCUMENT.GETELEMENTBYID(\"ELEID\").STYLE.VISIBILITY=\"VISIBLE\";\r\n　　利用上述方法实现隐藏后，页面的位置还被控件占用，显示空白。\r\n方法二：\r\nDOCUMENT.GETELEMENTBYID(\"ELEID\").STYLE.DISPLAY=\"NONE\";\r\nDOCUMENT.GETELEMENTBYID(\"ELEID\").STYLE.DISPLAY=\"INLINE\";\r\n　　利用上述方法实现隐藏后，页面的位置不被占用。', '', '0', '2017-12-27 01:10:39', '61', '1');
INSERT INTO `topic` VALUES ('7169', '33', '4', '堆和栈有什么区别堆和栈有什么区别有什么', 'bca8806c-936b-461a-8c6a-b3a7b66afc5f.', null, null, null, null, null, null, '堆是存放对象的，但是对象内的临时变量是存在栈内存中，如例子中的 METHODVAR 是在运\r\n行期存放到栈中的。\r\n栈是跟随线程的，有线程就有栈，堆是跟随 JVM 的，有 JVM 就有堆内存。', '', '0', '2017-12-27 01:11:31', '61', '1');
INSERT INTO `topic` VALUES ('7170', '33', '4', '堆内存中到底存在着什么东西？堆内存中到底存在着什么东西？', '4cfcdf35-be0b-49bd-93ab-241e2d7e3cf0.', null, null, null, null, null, null, '对象，包括对象变量以及对象方法。', '', '0', '2017-12-27 01:11:46', '61', '1');
INSERT INTO `topic` VALUES ('7171', '33', '4', '类变量和实例变量有什么区别？类变量和实例变量有什么区别？有什么区别', 'f47c0b7d-a67a-4082-8b3f-3842d27cbd83.', null, null, null, null, null, null, '静态变量是类变量，非静态变量是实例变量，直白的说，有 STATIC 修饰的变量是静态变量，\r\n没有 STATIC 修饰的变量是实例变量。静态变量存在方法区中，实例变量存在堆内存中。\r\n     启动时就初始化好的，和你这说的不同呀！', '', '0', '2017-12-27 01:12:12', '61', '1');
INSERT INTO `topic` VALUES ('7172', '33', '4', '我听说类变量是在 JVM 启动时就初始化好的，和你这说的不同呀！', '277d6106-93a1-42d1-a81e-293bc08f4e95.', null, null, null, null, null, null, '那你是道听途说，信我的，没错。\r\n     的方法（函数）到底是传值还是传址值还是传址？', '', '0', '2017-12-27 01:12:28', '61', '1');
INSERT INTO `topic` VALUES ('7173', '33', '4', 'Java 的方法（函数）到底是传值还是传址？', '587ea6cc-99aa-439b-a69c-c1c211c0d085.', null, null, null, null, null, null, '都不是，是以传值的方式传递地址，具体的说原生数据类型传递的值，引用类型传递的地\r\n址。对于原始数据类型，JVM 的处理方法是从 METHOD AREA 或 HEAP 中拷贝到 STACK，然后运行 FRAME\r\n中的方法，运行完毕后再把变量指拷贝回去。\r\n             产生？', '', '0', '2017-12-27 01:12:44', '61', '1');
INSERT INTO `topic` VALUES ('7175', '33', '4', '为什么会产生 OutOfMemory 产生？', 'ca6873dc-6649-4d8a-8a5d-c762a7e7ca97.', null, null, null, null, null, null, '一句话：HEAP 内存中没有足够的可用内存了。这句话要好好理解，不是说 HEAP 没有内存\r\n了，是说新申请内存的对象大于 HEAP 空闲内存，比如现在 HEAP 还空闲 1M，但是新申请的内存需\r\n要 1.1M，于是就会报 OUTOFMEMORY 了，可能以后的对象申请的内存都只要 0.9M，于是就只出现\r\n一次 OUTOFMEMORY，GC 也正常了，看起来像偶发事件，就是这么回事。 但如果此时 GC 没有回\r\n收就会产生挂起情况，系统不响应了。', '', '0', '2017-12-27 01:13:00', '61', '1');
INSERT INTO `topic` VALUES ('7177', '33', '4', '为什么会产生 StackOverflowError？？', 'e4e142ff-b4cb-4c00-99fd-a54b897ed5a2.', null, null, null, null, null, null, '因为一个线程把 STACK 内存全部耗尽了，一般是递归函数造成的。\r\n         之间可以互访吗？', '', '0', '2017-12-27 01:13:32', '61', '1');
INSERT INTO `topic` VALUES ('7179', '33', '4', '一个机器上可以看多个 JVM 吗？JVM 之间可以互访吗？', '3f70b3a8-49f1-4bd5-b639-589c8dc38ea3.', null, null, null, null, null, null, '可以多个 JVM，只要机器承受得了。JVM 之间是不可以互访，你不能在 A-JVM 中访问\r\nB-JVM 的 HEAP 内存，这是不可能的。在以前老版本的 JVM 中，会出现 A-JVM CRACK 后影响到\r\nB-JVM，现在版本非常少见。\r\n      要采用垃圾回收机制，的显式', '', '0', '2017-12-27 01:13:47', '61', '1');
INSERT INTO `topic` VALUES ('7181', '33', '4', '为什么 Java 要采用垃圾回收机制，而不采用 C/C++的显式内存管理？的显 内存管理？', '6067cdf3-70ed-43c3-ab69-91fd1f77cca4.', null, null, null, null, null, null, '为了简单，内存管理不是每个程序员都能折腾好的。', '', '0', '2017-12-27 01:14:04', '61', '1');
INSERT INTO `topic` VALUES ('7183', '33', '4', '为什么你没有详细介绍垃圾回收机制？为什么你没有详细介绍垃圾回收机制', '6d081827-7f37-417e-ab77-e0359e49fbdd.', null, null, null, null, null, null, '垃圾回收机制每个 JVM 都不同，JVM SPECIFICATION 只是定义了要自动释放内存，也就是\r\n说它只定义了垃圾回收的抽象方法，具体怎么实现各个厂商都不同，算法各异，这东西实在没必要\r\n深入。', '', '0', '2017-12-27 01:14:23', '61', '1');
INSERT INTO `topic` VALUES ('7184', '33', '4', 'JVM 中到底哪些区域是共享的？哪些是私有的？', 'ab202527-16a3-4a8c-a9c3-70ed3c042aad.', null, null, null, null, null, null, 'HEAP 和 METHOD AREA 是共享的，其他都是私有的，', '', '0', '2017-12-27 01:14:41', '61', '1');
INSERT INTO `topic` VALUES ('7186', '33', '4', '什么是 JIT，你怎么没说？，你怎么没说？', '630e39dd-1fa9-4ca7-9e3c-9734f4364ed2.', null, null, null, null, null, null, 'JIT 是指 JUST IN TIME，有的文档把 JIT 作为 JVM 的一个部件来介绍，有的是作为执行引\r\n擎的一部分来介绍，这都能理解。JAVA 刚诞生的时候是一个解释性语言，别嘘，即使编译成了字\r\n节码（BYTE CODE）也是针对 JVM 的，它需要再次翻译成原生代码(NATIVE CODE)才能被机器执行，于\r\n是效率的担忧就提出来了。SUN 为了解决该问题提出了一套新的机制，好，你想编译成原生代码，\r\n没问题，我在 JVM 上提供一个工具，把字节码编译成原生码，下次你来访问的时候直接访问原生\r\n码就成了，于是 JIT 就诞生了，就这么回事。', '', '0', '2017-12-27 01:14:59', '61', '1');
INSERT INTO `topic` VALUES ('7187', '3', '4', '应用服务器与WEB SERVER的区别', 'f62eafe0-b835-4f4b-a849-82eeee7b2952.', null, null, null, null, null, null, '应用服务器：WEBLOGIC、TOMCAT、JBOSS\r\nWEB SERVER：IIS、 APACHE', '', '0', '2017-12-27 01:15:09', '65', '1');
INSERT INTO `topic` VALUES ('7188', '33', '4', 'JVM 还有哪些部分是你没有提到的？', '6618a01e-d4af-4034-a018-28d9aa60454f.', null, null, null, null, null, null, 'JVM 是一个异常复杂的东西，写一本砖头书都不为过，还有几个要说明的：\r\n常量池（CONSTANT POOL）按照顺序存放程序中的常量，：并且进行索引编号的区域。比如 INT I =100，\r\n这个 100 就放在常量池中。\r\n安全管理器（SECURITY MANAGER）：提供 JAVA 运行期的安全控制，防止恶意攻击，比如指定读取\r\n文件，写入文件权限，网络访问，创建进程等等，CLASS LOADER 在 SECURITY MANAGER 认证通过后才\r\n能加载 CLASS 文件的。\r\n方法索引表（METHODS TABLE），记录的是每个 METHOD 的地址信息，STACK 和 HEAP 中的地址指针\r\n其实是指向 METHODS TABLE 地址', '', '0', '2017-12-27 01:15:16', '61', '1');
INSERT INTO `topic` VALUES ('7190', '33', '4', '为什么不建议在程序中显式的生命 System.gc()？？', 'b9abe015-6f26-4f63-ac19-68005344b072.', null, null, null, null, null, null, '因为显式声明是做堆内存全扫描，也就是 FULL GC，是需要停止所有的活动的（STOP THE\r\nWORLD COLLECTION），你的应用能承受这个吗？', '', '0', '2017-12-27 01:15:38', '61', '1');
INSERT INTO `topic` VALUES ('7191', '3', '4', 'STRUTS的应用(如STRUTS架构) ', '192c78b3-7da0-43aa-9fcd-aba9876eb0fa.', null, null, null, null, null, null, 'STRUTS是采用JAVA SERVLET/JAVASERVER PAGES技术，开发WEB应用程序的开放源码的FRAMEWORK。 采用STRUTS能开发出基于MVC(MODEL-VIEW-CONTROLLER)设计模式的应用构架。 STRUTS有如下的主要功能： 一.包含一个CONTROLLER SERVLET，能将用户的请求发送到相应的ACTION对象。 二.JSP自由TAG库，并且在CONTROLLER SERVLET中提供关联支持，帮助开发员创建交互式表单应用。 三.提供了一系列实用对象：XML处理、通过JAVA REFLECTION APIS自动处理JAVABEANS属性、国际化的提示和消息。', '', '0', '2017-12-27 01:15:50', '65', '1');
INSERT INTO `topic` VALUES ('7192', '33', '4', 'JVM 有哪些调整参数？', '4811f48b-11a4-49e1-bd30-1df2ad2a64e0.', null, null, null, null, null, null, '非常多，自己去找，堆内存、栈内存的大小都可以定义，甚至是堆内存的三个部分、新生\r\n代的各个比例都能调整。', '', '0', '2017-12-27 01:16:00', '61', '1');
INSERT INTO `topic` VALUES ('7194', '33', '4', '检查性异常与非检查性异常区别', 'e0b54cea-fed9-4cef-8b2c-411067dc7658.', null, null, null, null, null, null, '检查性异常: 不处理编译不能通过 非检查性异常：不处理编译可以通过，如果有抛出直接抛到控制台。 运行时异常： 就是非检查性异常 非运行时异常： 就是检查性异常', '', '0', '2017-12-27 01:16:24', '61', '1');
INSERT INTO `topic` VALUES ('7197', '33', '4', '写出运行时异常5个', '60457591-2d3c-438b-bdee-2ea90b486975.', null, null, null, null, null, null, 'CLASSCASTEXCEPTION(类转换异常)\r\n   INDEXOUTOFBOUNDSEXCEPTION(数组越界)\r\n   NULLPOINTEREXCEPTION(空指针)\r\n   ARRAYSTOREEXCEPTION(数据存储异常，操作数组时类型不一致)\r\n还有IO操作的BUFFEROVERFLOWEXCEPTION异常', '', '0', '2017-12-27 01:16:47', '61', '1');
INSERT INTO `topic` VALUES ('7198', '33', '4', '怎么自定义一个异常？', 'a117e847-c5ac-4e5c-aecc-1664e9f6f4c7.', null, null, null, null, null, null, ' 继承EXCEPTION，在构造函数里写上你希望这个异常做的事情', '例：\r\n \r\npublic class MyException extends Exception \r\n{\r\n public MyException (){ super();\r\n//可以省略 System.out.println(\"这是我自定义的一个异常\"); }\r\n }', '0', '2017-12-27 01:17:10', '61', '1');
INSERT INTO `topic` VALUES ('7199', '33', '4', '运行时异常与非运行时异常有什么区别？', '56dab266-f34a-464b-8713-31272063ac2a.', null, null, null, null, null, null, ' 异常分为CHECKED EXCEPTION和UNCHECKED EXCEPTION。 在编程中，我们能捕捉到的是前者，即CHECKED EXCEPTION.而UNCHECKDED EXCEPTION是我们不能预料到的，如运行时异常。', '', '0', '2017-12-27 01:17:35', '61', '1');
INSERT INTO `topic` VALUES ('7200', '33', '4', 'Java 提供了两类主要的异常 :runtime exception 和 checked exception', '572baa94-2bb1-47b1-ac8c-4660a051fa23.', null, null, null, null, null, null, 'CHECKED 异常也就是我们经常遇到的 IO 异常，以及 SQL 异常都是这种异常。 对于这种异常， JAVA 编译器强制要求我们必需对出现的这些异常进行 CATCH 。所以，面对这种异常不管我们是否愿意，只能自己去写一大堆 CATCH 块去处理可能的异常。\r\n但是另外一种异常： RUNTIME EXCEPTION ，也称运行时异常，我们可以不处理。当出现这样的异常时，总是由虚拟机 接管。比如：我们从来没有人去处理过 NULLPOINTEREXCEPTION 异常，它就是运行时异常，并且这种异常还是最常见的异常之一。', '', '0', '2017-12-27 01:17:53', '61', '1');
INSERT INTO `topic` VALUES ('7201', '3', '4', 'abstract class Name {\r\nprivate String name;\r\npublic abstract boolean isStupidName(String name) {}\r\n}\r\n大侠们，这有何错误?', '157ce3bd-a19d-4406-8e9b-1c509d49f630.', null, null, null, null, null, null, ': 错。ABSTRACT METHOD必须以分号结尾，且不带花括号。', '', '0', '2017-12-27 01:17:58', '65', '1');
INSERT INTO `topic` VALUES ('7202', '33', '4', 'catch捕获异常的顺序', '39313b51-54d3-441f-a587-3dde75963bfb.', null, null, null, null, null, null, '先子类,后父类, \r\n TRY{\r\n//当代码运行时候可能会发生异常的句子}\r\nCATCH{\r\n//处理异常的代码，让程序在异常之后执行该代码}\r\nFINALLY{\r\n无论是否有这里面的代码都要执行 通常是进行资源清楚和关闭打开的文件等}\r\n{THROWS 总是出现在方法的声明中，用来标明该方法可能会抛出的各种异常THROW 总是出现在方法体中，用来抛出一个异常异常主要分：运行时异常（RUNTIMEEXCEPTION 他的子类直接继承它 而它本身继承EXCEPTION）非运行时异常（直接继承EXCEPTION）在处理异常时候 可以使用多重CATCH 捕获异常排列顺序必须是从特殊到一般 最后一个是EXCEPTION类', '', '0', '2017-12-27 01:18:09', '61', '1');
INSERT INTO `topic` VALUES ('7203', '3', '4', 'public class Something {\r\nvoid doSomething () {\r\nprivate String s = \"\";\r\nint l = s.length();\r\n}\r\n}\r\n有错吗?', 'fcf5e7a3-e82c-48d6-af0e-4937500606fc.', null, null, null, null, null, null, '错。局部变量前不能放置任何访问修饰符 (PRIVATE，PUBLIC，和PROTECTED)。FINAL可以用来修饰局部变量\r\n(FINAL如同ABSTRACT和STRICTFP，都是非访问修饰符，STRICTFP只能修饰CLASS和METHOD而非VARIABLE)。', '', '0', '2017-12-27 01:18:27', '65', '1');
INSERT INTO `topic` VALUES ('7204', '33', '4', 'try里面有return ，是否执行finally以及执行的顺序问题', 'ed1bf226-bb17-49ab-a91c-40d71efe20a9.', null, null, null, null, null, null, '执行顺序无异常是TRY FINALLY RETURN\r\n         有异常并且CATCH中没有跳出程序块的语句时顺序是TRY CATCH FINALLY RETURN\r\n有异常并且CATCH中有跳出程序块的语句时是TRY CATCH（执行到跳出之前） 不管是否有异常,FINALLY 都最后执行,除非是碰到SYSTEM.EXIT(0)', '', '0', '2017-12-27 01:18:27', '61', '1');
INSERT INTO `topic` VALUES ('7205', '33', '4', '说说你是怎么处理异常的，throws、throw、try、catch、finally的含义？try中可以抛异常？', 'd0dea091-7b88-4cc1-b974-f381946234cd.', null, null, null, null, null, null, 'JAVA的异常处理是通过5个关键词来实现的：TRY、CATCH、THROW、THROWS和FINALLY。一般情况下是用TRY来执行一段程序，如 果出现异常，系统会抛出（THROWS）一个异常，这时候你可以通过它的类型来捕捉（CATCH）它，或最后（FINALLY）由缺省处理器来处理。 用TRY来指定一块预防所有\"异常\"的程序。紧跟在TRY程序后面，应包含一个CATCH子句来指定你想要捕捉的\"异常\"的类型。 THROW语句用来明确地抛出一个\"异常\"。 THROWS用来标明一个成员函数可能抛出的各种\"异常\"。 FINALLY为确保一段代码不管发生什么\"异常\"都被执行一段代码。 可 以在一个成员函数调用的外面写一个TRY语句，在这个成员函数内部写另一个TRY语句保护其他代码。每当遇到一个TRY语句，\"异常\"的框架就放到堆栈上 面，直到所有的TRY语句都完成。如果下一级的TRY语句没有对某种\"异常\"进行处理，堆栈就会展开，直到遇到有处理这种\"异常\"的TRY语句', '', '0', '2017-12-27 01:18:41', '61', '1');
INSERT INTO `topic` VALUES ('7206', '33', '4', '如何自定义异常', '19f563a2-0759-465f-99f9-b1f2e331f1b6.', null, null, null, null, null, null, '使用JAVA内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常。用户自定义异常类，只需继承EXCEPTION类即可。 在程序中使用自定义异常类，大体可分为以下几个步骤。 （1）创建自定义异常类。 （2）在方法中通过THROW关键字抛出异常对象。 （3）如果在当前抛出异常的方法中处理异常，可以使用TRY-CATCH语句捕获并处理；否则在方法的声明处通过THROWS关键字指明要抛出给方法调用者的异常，继续进行下一步操作。 （4）在出现异常方法的调用者中捕获并处理异常\r\n。\r\n\r\n检查型异常和非检查型异常的主要区别在于其处理方式。检查型异常需要使用 TRY, CATCH和FINALLY关键字在编译期进行处理，否则会出现编译器报错。对于非检查型异常则不需要这样做。JAVA中所有继承自 JAVA.LANG.EXCEPTION类的异常都是检查型异常，所有继承自RUNTIMEEXCEPTION的异常都被称为非检查型异常。\r\n', '', '0', '2017-12-27 01:19:08', '61', '1');
INSERT INTO `topic` VALUES ('7207', '33', '4', '什么是比特(Bit),什么是字节(Byte),什么是字符(Char),它们长度是多少,各有什么区别', '330846fb-97f7-4f95-a1a3-d579652db8fb.', null, null, null, null, null, null, 'BIT最小的二进制单位 ，是计算机的操作部分 取值0或者1\r\nBYTE是计算机操作数据的最小单位由8位BIT组成 取值（-128-127）\r\nCHAR是用户的可读写的最小单位，在JAVA里面由16位BIT组成 取值（0-65535）\r\nBIT 是最小单位 计算机 只能认识 0或者1 \r\n8个字节 是给计算机看的\r\n字符 是看到的东西  一个字符=二个字节', '', '0', '2017-12-27 01:19:28', '61', '1');
INSERT INTO `topic` VALUES ('7208', '33', '4', '什么是流,按照传输的单位,分成哪两种流,并且他们的父类叫什么流是指数据的传输', 'a0528f2c-a187-4826-8070-2123540a8ea1.', null, null, null, null, null, null, '字节流，字符流 \r\n字节流：INPUTSTREAM OUTPUTSTREAM\r\n字符流：READER WRITER', '', '0', '2017-12-27 01:19:49', '61', '1');
INSERT INTO `topic` VALUES ('7209', '33', '4', '流按照传输的方向可以分为哪两种？', 'ce5f5086-e8c9-427a-9b25-de23734998fa.', null, null, null, null, null, null, '输入输出相对于程序\r\n输入流INPUTSTREAM\r\n，输出流OUTPUTSTREAM', '', '0', '2017-12-27 01:20:08', '61', '1');
INSERT INTO `topic` VALUES ('7210', '33', '4', '按照实现功能分为哪两种,分别举例说明', 'b1cd02ee-0527-4bf9-a239-446864b6546e.', null, null, null, null, null, null, '节点流，处理流\r\n节点流：OUTPUTSTREAM\r\n处理流： OUTPUTSTREAMWRITER', '', '0', '2017-12-27 01:20:23', '61', '1');
INSERT INTO `topic` VALUES ('7212', '33', '4', 'BufferedReader属于哪种流,它主要是用来做什么的,它里面有那些经典的方法', '067e8d46-8fe1-45c7-8e2c-d6d4b1194b7b.', null, null, null, null, null, null, '属于处理流中的缓冲流，可以将读取的内容存在内存里面，有READLINE（）方法', '', '0', '2017-12-27 01:20:42', '61', '1');
INSERT INTO `topic` VALUES ('7214', '33', '4', '什么是节点流,什么是处理流,它们各有什么用处,处理流的创建有什么特征', '49cd4913-e76d-43b6-89f5-d46fcc2b4217.', null, null, null, null, null, null, '节点流 直接与数据源相连，用于输入或者输出\r\n处理流：在节点流的基础上对之进行加工，进行一些功能的扩展\r\n处理流的构造器必须要 传入节点流的子类', '', '0', '2017-12-27 01:20:56', '61', '1');
INSERT INTO `topic` VALUES ('7215', '33', '4', '如果我要对字节流进行大量的从硬盘读取,要用那个流,为什么', '0856ae9f-145b-4f13-bee1-bcd6f1cfbca4.', null, null, null, null, null, null, 'BUFFEREDINPUTSTREAM 使用缓冲流能够减少对硬盘的损伤', '', '0', '2017-12-27 01:21:12', '61', '1');
INSERT INTO `topic` VALUES ('7217', '33', '4', '如果我要打印出不同类型的数据到数据源,那么最适合的流是那个流,为什么', 'abd3ecf5-bbbd-46fd-b68b-20dc0cf8556f.', null, null, null, null, null, null, 'PRINTWRITER 可以打印各种数据类型', '', '0', '2017-12-27 01:21:31', '61', '1');
INSERT INTO `topic` VALUES ('7218', '33', '4', '怎么样把我们控制台的输出改成输出到一个文件里面,这个技术叫什么', '1e823d89-dfc6-4d80-8001-2e8ee1462e97.', null, null, null, null, null, null, 'SETOUT（PRINTWRITER,PRINTSTREAM）重定向', '', '0', '2017-12-27 01:21:45', '61', '1');
INSERT INTO `topic` VALUES ('7220', '33', '4', '怎么样把输出字节流转换成输出字符流,说出它的步骤', '6b8b1e6f-28ca-4926-9fbe-72e3d191eeef.', null, null, null, null, null, null, '使用 转换处理流OUTPUTSTREAMWRITER 可以将字节流转为字符流\r\nNEW OUTPUTSTREAMWRITER（NEW FILEOUTPUTSTREAM（FILE FILE））;', '', '0', '2017-12-27 01:22:11', '61', '1');
INSERT INTO `topic` VALUES ('7222', '33', '4', '把包括基本类型在内的数据和字符串按顺序输出到数据源，或者按照顺序从数据源读入，一般用哪两个流', '16d9f3a3-1577-472f-afbb-1dce8f86b9ce.', null, null, null, null, null, null, 'DATAINPUTSTREAM DATAOUTPUTSTREAM', '', '0', '2017-12-27 01:22:26', '61', '1');
INSERT INTO `topic` VALUES ('7224', '33', '4', '把一个对象写入数据源或者从一个数据源读出来,用哪两个流', '155dfa35-d8b1-4f2f-8d4d-1b4a4fefbe17.', null, null, null, null, null, null, 'OBJECTINPUTSTREAM OBJECTOUTPUTSTREAM', '', '0', '2017-12-27 01:22:39', '61', '1');
INSERT INTO `topic` VALUES ('7226', '33', '4', '什么叫对象序列化，什么是反序列化，实现对象序列化需要做哪些工作', '564ebbc5-0de8-40a8-9166-64fe4a6b6469.', null, null, null, null, null, null, '对象序列化，将对象以二进制的形式保存在硬盘上\r\n反序列化；将二进制的文件转化为对象读取\r\n实现SERIALIZABLE接口\r\n不想让字段放在硬盘上就加TRANSIENT', '', '0', '2017-12-27 01:23:00', '61', '1');
INSERT INTO `topic` VALUES ('7228', '33', '4', '如果在对象序列化的时候不想给一个字段的数据保存在硬盘上面,采用那个关键字?', '64ce3cef-b6f4-47d8-8ff1-4e5912d53d33.', null, null, null, null, null, null, 'TRANSIENT关键字', '', '0', '2017-12-27 01:23:19', '61', '1');
INSERT INTO `topic` VALUES ('7230', '33', '4', '在实现序列化接口是时候一般要生成一个serialVersionUID字段,它叫做什么,一般有什么用', '551d1ba3-b61a-4027-ae7f-838b32ffbb79.', null, null, null, null, null, null, '是版本号，要保持版本号的一致 来进行序列化\r\n为了防止序列化出错', '', '0', '2017-12-27 01:23:34', '61', '1');
INSERT INTO `topic` VALUES ('7232', '33', '4', 'InputStream里的read()返回的是什么,read(byte[] data)是什么意思,返回的是什么值', 'd1295784-644a-47cc-a65e-285f9ca9635b.', null, null, null, null, null, null, '返回的是所读取的字节的INT型（范围0-255）\r\nREAD（BYTE [ ] DATA）将读取的字节储存在这个数组\r\n返回的就是传入数组参数个数\r\nREAD  字节读取字节  字符读取字符', '', '0', '2017-12-27 01:23:53', '61', '1');
INSERT INTO `topic` VALUES ('7233', '33', '4', 'OutputStream里面的write()是什么意思,write(byte b[], int off, int len)这个方法里面的三个参数分别是什么意思', '01a1b060-0557-4222-a23e-919673e6c634.', null, null, null, null, null, null, 'WRITE将指定字节传入数据源\r\nBYTE B[ ]是BYTE数组\r\nB[OFF]是传入的第一个字符\r\nB[OFF+LEN-1]是传入的最后的一个字符 \r\nLEN是实际长度', '', '0', '2017-12-27 01:24:08', '61', '1');
INSERT INTO `topic` VALUES ('7235', '33', '4', '流一般需要不需要关闭,如果关闭的话在用什么方法,一般要在那个代码块里面关闭比较好，处理流是怎么关闭的，如果有多个流互相调用传入是怎么关闭的？', '6d3afd3b-4af4-454e-a1d6-65459fa2263a.', null, null, null, null, null, null, '流一旦打开就必须关闭，使用CLOSE方法\r\n放入FINALLY语句块中（FINALLY 语句一定会执行）\r\n调用的处理流就关闭处理流\r\n多个流互相调用只关闭最外层的流', '', '0', '2017-12-27 01:24:27', '61', '1');
INSERT INTO `topic` VALUES ('7236', '4', '4', 'HTTP请求的GET与POST方式的区别', '32352a34-34c7-481d-acd2-7bc0de8e93e5.', null, null, null, null, null, null, '（1）GET是从服务器上获取数据，POST是向服务器传送数据。\r\n在客户端，GET方式在通过URL提交数据，数据在URL中可以看到；POST方式，数据放置在HTML HEADER内提交。\r\n（2）对于GET方式，服务器端用REQUEST.QUERYSTRING获取变量的值，对于POST方式，服务器端用REQUEST.FORM获取提交的数据。\r\n（3） GET方式提交的数据最多只能有1024字节，而POST则没有此限制。\r\n（4）安全性问题。正如在（1）中提到，使用 GET 的时候，参数会显示在地址栏上，而 POST 不会。所以，如果这些数据是中文数据而且是非敏感数据，那么使用 GET；如果用户输入的数据不是中文字符而且包含敏感数据，那么还是使用 POST为好。', '', '0', '2017-12-27 01:24:56', '65', '1');
INSERT INTO `topic` VALUES ('7238', '33', '4', 'Java中的所有的流可以分为几大类,它们的名字是什么,各代表什么', '4dec3f0c-b18a-43b8-906e-18c36bf848f3.', null, null, null, null, null, null, '分为 字节输入流 INPUTSTREAM \r\n字节输出流 OUTPUTSTREAM\r\n字符输入流 READER\r\n字符输出流 WRITER\r\n所有流都是这四个流的子类', '', '0', '2017-12-27 01:25:29', '61', '1');
INSERT INTO `topic` VALUES ('7240', '33', '4', '说下常用的io流', 'b9a6eed6-0368-48e7-b759-e596a50564af.', null, null, null, null, null, null, 'INPUTSTREAM,\r\nOUTPUTSTREAM,\r\nFILEINPUTSTREAM,\r\nFILEOUTPUTSTREAM,\r\nBUFFEREDINPUTSTREAM,\r\nBUFFEREDOUTPUTSTREAM\r\nREADER,\r\nWRITER\r\nBUFFEREDREADER,BUFFEREDWRITER', '', '0', '2017-12-27 01:26:02', '61', '1');
INSERT INTO `topic` VALUES ('7242', '33', '1', '写一段代码读取一个序列化的对象一般使用哪种Stream？', 'a9a374b2-a6f1-4507-8243-0c9ce4ace14d.', 'InputStream', 'FileReader ', 'DataInputStream ', 'ObjectStream', '', '', 'D', '', '0', '2017-12-27 01:26:36', '61', '1');
INSERT INTO `topic` VALUES ('7243', '33', '4', 'io流怎样读取文件的？', '11bcedee-7d70-40ea-a5d6-6b51e2b167fd.', null, null, null, null, null, null, '使用FILE对象获取文件路径，通过字符流READER加入文件，使用字符缓存流BUFFEREDREADER处理READER，再定义一个字符串，循环遍历出文件。代码如下：\r\nFILE FILE = NEW FILE(\"D:/SPRING.TXT\");\r\nTRY {\r\nREADER READER = NEW FILEREADER(FILE);\r\nBUFFEREDREADER BUFFERED = NEW BUFFEREDREADER(READER);\r\nSTRING DATA = NULL;\r\nWHILE((DATA = BUFFERED.READLINE())!=NULL){\r\nSYSTEM.OUT.PRINTLN(DATA);\r\n}\r\n} CATCH (FILENOTFOUNDEXCEPTION E) {\r\nE.PRINTSTACKTRACE();\r\n} CATCH (IOEXCEPTION E) {\r\nE.PRINTSTACKTRACE();\r\n}', '', '0', '2017-12-27 01:26:56', '61', '1');
INSERT INTO `topic` VALUES ('7245', '33', '4', '说说你对io流的理解', '635d8970-826d-45ac-ba8c-f0d6cd5feefc.', null, null, null, null, null, null, 'IO流主要是用来处理输入输出问题，常用的IO流有INPUTSTREAM，OUTPUTSTREAM，READER，WRITER等', '', '0', '2017-12-27 01:27:24', '61', '1');
INSERT INTO `topic` VALUES ('7246', '3', '4', '讲讲mybatis的连接池。', '1f355b4d-0eba-4de2-b2fa-2fcb30e4b3b3.', null, null, null, null, null, null, '不使用数据库连接池时、正常使用数据库连接的情况下、当使用完毕之后我们就会调用其CLOSE()方法来关闭连接、避免资源浪费。但是当使用了数据库连接池之后、一个数据库连接被使用完之后就不再是调用其CLOSE方法关闭掉、而是应该将这个数据库连接放回连接池、那么我们就要拦截CONNECTION.CLOSE()方法、将这个CONNECTION放回连接池、而不是关闭。这样能够极大的减少频繁的关闭和建立连接，会提高程序的执行效率。\r\n数据库连接池，多用于并发访问状态，几百个客户端同时访问数据库，这个时候需要用连接池，因为有可能某个客户，没有关闭连接，而其他用户需要等待，这个时候使用连接池最佳。', '', '0', '2017-12-27 01:27:29', '65', '1');
INSERT INTO `topic` VALUES ('7247', '33', '4', 'JAVA的IO流和readLine方法', 'a9aa5fee-3701-4984-ba73-0548bae3f2e3.', null, null, null, null, null, null, 'JAVA的IO流用来处理输入输出问题，READLINE是BUFFEREDREADER里的一个方法，用来读取一行。', '', '0', '2017-12-27 01:27:37', '61', '1');
INSERT INTO `topic` VALUES ('7248', '3', '4', ' springMVC的原理', 'e7b4cf39-6adf-447c-ba0b-a647720abab3.', null, null, null, null, null, null, 'SPRINGMVC是一个基于MVC的WEB框架。MVC是一种设计模式：一套反复使用、多人知晓的，经过分类编写的，代码设计经验的总结。', '', '0', '2017-12-27 01:27:50', '65', '1');
INSERT INTO `topic` VALUES ('7249', '33', '4', '用什么把对象动态的写入磁盘中，写入要实现什么接口。', 'a13bd2ef-21f9-4751-aee0-e4497258155d.', null, null, null, null, null, null, 'OBJECTINPUTSTREAM，需要实现SERIALIZABLE接口', '', '0', '2017-12-27 01:27:52', '61', '1');
INSERT INTO `topic` VALUES ('7250', '33', '4', 'FileInputStream 创建详情，就是怎样的创建不报错，它列出了几种形式!', '781cd03a-38b6-4234-8e8e-ec7c3f0a98a2.', null, null, null, null, null, null, 'FILEINPUTSTREAM是INPUTSTREAM的子类，通过接口定义，子类实现创建FILEINPUTSTREAM,', '', '0', '2017-12-27 01:28:06', '61', '1');
INSERT INTO `topic` VALUES ('7251', '33', '4', '请问你在什么情况下会在你得java代码中使用可序列化？ 如何实现java序列化？', '4b5fb89d-d22d-421f-9454-5ceef884aead.', null, null, null, null, null, null, '把一个对象写入数据源或者从一个数据源读出来，使用可序列化，需要实现SERIALIZABLE接口', '', '0', '2017-12-27 01:28:23', '61', '1');
INSERT INTO `topic` VALUES ('7252', '3', '4', '普通类继承抽象类为什么一定要重写其中的抽象方法?', 'd3167950-35a9-45c6-9212-7e4abe813e44.', null, null, null, null, null, null, '必须要实现的，也就是要重写，如果不实现，子类无法对象实例化。', '', '0', '2017-12-27 01:29:40', '61', '1');
INSERT INTO `topic` VALUES ('7253', '3', '4', 'abstract为什么不能与private，final同时使用？', 'ad040008-b8f6-4ac4-916e-1f8a4788f4e0.', null, null, null, null, null, null, '抽象方法需要被子类重写 所以不能够用PRIVATE FINAL修饰', '', '0', '2017-12-27 01:30:19', '61', '1');
INSERT INTO `topic` VALUES ('7254', '33', '4', '继承最大好处?', '5f5ac2f0-1eba-4fbb-a264-129a0e939e38.', null, null, null, null, null, null, '可以对父类的方法进行重用，节省空间', '', '0', '2017-12-27 01:30:38', '61', '1');
INSERT INTO `topic` VALUES ('7255', '33', '4', '写出String类常见的5个方法,并详细解释?', 'e1274f70-e556-4d33-b5d3-75d5baf72461.', null, null, null, null, null, null, 'INDEXOF（）返回指定字符串在该字符串出现的序列\r\nSTARTSWITH()判断该字符串是否以指定字符开始\r\nCONCAT() 将指定字符串连接在该字符串的结尾\r\nLENGTH()返回字符串的长度\r\nSUBSTRING返回该字符串从索引开始 结束于字符串末尾 或者指定索引的一个子字符串', '', '0', '2017-12-27 01:30:57', '61', '1');
INSERT INTO `topic` VALUES ('7256', '33', '4', '普通方法的方法名可以与类名一致吗？', '0b4e53b5-8268-4ad9-9c3c-e446dfdc5e36.', null, null, null, null, null, null, '可以', '', '0', '2017-12-27 01:31:14', '61', '1');
INSERT INTO `topic` VALUES ('7257', '33', '4', ' 在什么情况下局部变量会覆盖全局变量？', '9b5b8d84-a37e-45d6-a7b6-970fab052f28.', null, null, null, null, null, null, '当局部变量名与全局变量名相同 类型相同', '', '0', '2017-12-27 01:31:30', '61', '1');
INSERT INTO `topic` VALUES ('7258', '3', '4', 'static 修饰的方法可否支持多态？', 'ffbb1eaf-36cd-4787-8faf-5e3a5ad3e30f.', null, null, null, null, null, null, '不支持多态,如果父类声明一个对象,子类实现这边变量,那么调用STATIC修饰的时候会调用父类的,而不是子类的.', '', '0', '2017-12-27 01:31:46', '61', '1');
INSERT INTO `topic` VALUES ('7259', '33', '4', '使用数组前应该注意的什么？', 'af026ca9-ad60-4805-b991-468facb1e4b3.', null, null, null, null, null, null, ' 数组下标是否越界 对数组进行初始化', '', '0', '2017-12-27 01:32:03', '61', '1');
INSERT INTO `topic` VALUES ('7260', '3', '4', 'Java语言最大的特点？', '41611419-e210-4d8c-8884-71088d307ab5.', null, null, null, null, null, null, '跨平台性(一次编译,多次执行)', '', '0', '2017-12-27 01:32:28', '61', '1');
INSERT INTO `topic` VALUES ('7261', '33', '4', '请你说说byte short char之间可以互相转换吗？为什么？', 'a3dd2198-8c6c-468d-8b6b-6edf800dd347.', null, null, null, null, null, null, '可以通过强转，可以范围小的转范围大的，子类可以转父类，反之则不行，有可能抛类型转化异常', '', '0', '2017-12-27 01:32:43', '61', '1');
INSERT INTO `topic` VALUES ('7262', '33', '4', '请说说引用和对象？', '85a7b074-60cc-45d4-a565-b78d99a06c42.', null, null, null, null, null, null, '对象和引用是分不开的，对象生成一个地址，引用则指向了这个地址\r\nA A=NEW A();\r\nA为引用 等号右边的是对象', '', '0', '2017-12-27 01:32:56', '61', '1');
INSERT INTO `topic` VALUES ('7263', '33', '4', '怎样将一个String添加到另一个String的后面？', '47767ff1-f31e-4168-8cdf-1dbc73077625.', null, null, null, null, null, null, '(STRINGBUFFER ，STRINGBUILDER)的APPEND方法\r\nCONCAT', '', '0', '2017-12-27 01:33:10', '61', '1');
INSERT INTO `topic` VALUES ('7264', '33', '4', '有几种数据类型？', 'a85f97aa-bb71-47bb-a881-9dcd5950fa72.', null, null, null, null, null, null, 'JAVA数据类型分基本数据类型和引用对象类型。', '', '0', '2017-12-27 01:33:23', '61', '1');
INSERT INTO `topic` VALUES ('7265', '33', '4', '传参有几种类型？有几种特殊类型？', '57a8055b-2dff-4408-9550-887bb2ee4e6d.', null, null, null, null, null, null, ' 基本数据类型 引用对象类型', '', '0', '2017-12-27 01:33:37', '61', '1');
INSERT INTO `topic` VALUES ('7266', '3', '4', '什么是匿名类,有什么好处', 'a3cfbfd8-8072-4cfb-83f7-489623132287.', null, null, null, null, null, null, ' 匿名类没有名字的类 ,封装性好,比较安全,用了一次便可以丢弃', '', '0', '2017-12-27 01:33:51', '61', '1');
INSERT INTO `topic` VALUES ('7267', '3', '4', 'jar是什么格式的文件,有什么好处', '06af2dfb-e592-4635-8bd6-e7fcbf8396bb.', null, null, null, null, null, null, '它允许将许多CLASS文件组合成一个压缩文件,方便管理CLASS文件', '', '0', '2017-12-27 01:34:08', '61', '1');
INSERT INTO `topic` VALUES ('7268', '3', '4', 'java和javac,javaw各有什么作用', '22824fbf-b241-46e3-a857-4ca1608aab77.', null, null, null, null, null, null, 'JAVA：运行程序\r\nJAVAC：编译JAVA文件至CLASS文件\r\nJAVAW: 不需要打开DOS窗口就可以运行\r\n', '', '0', '2017-12-27 01:34:27', '61', '1');
INSERT INTO `topic` VALUES ('7269', '33', '4', 'JDK，JRE，JVM分别是什么？它们之间有什么关系？', 'eb04fb67-a321-48c1-b4ae-c63fd02ca809.', null, null, null, null, null, null, '  JDK是JAVA开发环境，JRE是JAVA运行环境，JVM是JAVA虚拟机，JRE包含JVM。', '', '0', '2017-12-27 01:34:45', '61', '1');
INSERT INTO `topic` VALUES ('7270', '33', '4', '什么是环境变量？用户变量与系统变量有什么区别？', 'c254fa0f-0345-4301-bd04-942ec3b36482.', null, null, null, null, null, null, ' 环境变量相当给系统和用户程序设置参数的，具体起什么作用跟具体的环境变量有关，也可以说环境变量\r\n    是给WINDOWS命令指路的，让WINDOWS能找到可执行的命令。\r\n   用户变量只对当前用户有效\r\n   系统变量对所有用户有效\r\n   如果同一个命令在用户变量和系统变量都包含了，则会优先执行系统变量', '', '0', '2017-12-27 01:35:02', '61', '1');
INSERT INTO `topic` VALUES ('7271', '3', '4', 'Java中有哪些分支语句？', 'e3547dec-55c4-4b7c-94a5-e8f51e8fda8c.', null, null, null, null, null, null, ' 有IF，IF...ELSE,IF...ELSE IF...ELSE ,SWITCH', '', '0', '2017-12-27 01:35:16', '61', '1');
INSERT INTO `topic` VALUES ('7272', '3', '4', 'Java中有哪些关键字控制循环，它们有什么区别？', 'd05241b9-d037-46b0-8fca-6d46befd451f.', null, null, null, null, null, null, ' 有CONTINUE，BREAK，RETURN，\r\n   CONTINUE是终止本次循环\r\n   BREAK是终止循环\r\n   RETURN是结束方法', '', '0', '2017-12-27 01:35:31', '61', '1');
INSERT INTO `topic` VALUES ('7273', '33', '4', '数组的特征是什么?', '328fe317-2528-40ae-a236-e817089e3956.', null, null, null, null, null, null, '   1，数组一旦完成初始化数组的长度就不可以改变\r\n   2，数组中的元素类型必须是同一类型\r\n   3，数组不仅可以储存基本类型数据也可以储存引用类型的数据\r\n   4，数组本身是一种引用类型', '', '0', '2017-12-27 01:35:44', '61', '1');
INSERT INTO `topic` VALUES ('7274', '33', '4', '方法重载的要求？', '16e63454-10a9-4874-ab8f-e7b516fbb4cb.', null, null, null, null, null, null, '   在同一个方法里，方法名相同，参数列表不同（个数，类型，顺序）；\r\n', '', '0', '2017-12-27 01:36:11', '61', '1');
INSERT INTO `topic` VALUES ('7275', '3', '4', '成员变量与局部变量的区别？', '58ca5732-c299-462b-933f-892f9dd85f66.', null, null, null, null, null, null, '成员变量：有类成员变量（有STATIC修饰）和实例成员变量（无STATIC修饰）两种\r\n   局部变量：有代码块局部变量，形参，方法局部变量三种\r\n   区别：作用范围不同，成员变量对整个类有效，局部变量只对该方法或代码块有用\r\n定义成员变量是可以不初始化，局部变量除了形参之外，必须初始化', '', '0', '2017-12-27 01:36:25', '61', '1');
INSERT INTO `topic` VALUES ('7276', '3', '4', '列出Collection接口常用方法', 'fb9b2d4a-2f98-439d-86f1-15e47dbb487e.', null, null, null, null, null, null, '常用方法：ADD(),ADDALL(),REMOVE(),REMOVEALL(),RETAINALL(),SIZE()\r\n    ISEMPTY(),CONTAINS(),CONTAINSALL(),TOARRAY(),CLEAR(),ITERATOR()', '', '0', '2017-12-27 01:37:00', '61', '1');
INSERT INTO `topic` VALUES ('7277', '3', '4', '用两种方法遍历集合元素，要求写出详细代码', 'd42a265f-f15f-485b-9297-2d1b20032ed4.', null, null, null, null, null, null, '    第一种\r\nLIST<INTEGER> LIST=NEW ARRAYLIST<>();\r\nFOR（INT TEMP:LIST）{\r\nSYSTEM.OUT.PRINTLN(TEMP);\r\n}\r\n\r\n\r\n   第二种\r\nLIST<INTEGER> LIST=NEW ARRAYLIST<>();\r\nITERATOR<INTEGER> ITER=LIST.ITERATOR();\r\nWHILE(ITER.HASNEXT()){\r\nINT VALUE=ITER.NEXT();\r\nSYSTEM.OUT.PRINTLN(VALUE);\r\n}', '', '0', '2017-12-27 01:37:18', '61', '1');
INSERT INTO `topic` VALUES ('7278', '3', '4', 'Calendar对象里add和roll有什么区别', 'cbcfe360-4984-4b97-8f39-1f0e2fc1f343.', null, null, null, null, null, null, '    区别：ADD溢出时，会发生进位，ROLL溢出时，不会发生进位', '', '0', '2017-12-27 01:37:42', '61', '1');
INSERT INTO `topic` VALUES ('7279', '3', '4', '处理Checked异常的方法', '5ff1ff57-4d79-4d23-b59a-987722df65cd.', null, null, null, null, null, null, ' 1：当前方法明确知道如何处理异常，程序应用TRY...CATCH块来捕捉异常，然后在对应的CATCH修复该异常\r\n    2：当前方法不知道如何处理该异常，应该在定义方法时声明抛出该异常\r\n', '', '0', '2017-12-27 01:38:04', '61', '1');
INSERT INTO `topic` VALUES ('7280', '3', '4', 'TreeSet的两种排序方法   ', '2f9ff276-13ac-4e6a-add8-5439e36e3204.', null, null, null, null, null, null, '     自然排序：\r\n     CLASS USER IMPLEMENTS COMPAREABLE<USER>{\r\n     @OVERRIDE\r\n    PUBLIC INT COMPARETO(USER O1){\r\nIF(O1.GETID()==GETID()){\r\n  RETURN 0;\r\n}ELSE IF(O1.GETID()>GETID()){\r\n RETURN 1;\r\n}\r\nRETURN -1;\r\n    }\r\n     }\r\n     定制排序：\r\nTREESET<USER> TREE=NEW TREESET<>(NEW COMPARETOR<USER>(){\r\n   @OVERRIDE\r\n   PUBLIC INT COMPARE(USER O1,USER O2){\r\n   IF(O1.GETID()==O2.GETID()){\r\n       RETURN 0\r\n   }ELSE IF(O1.GETID()>O2.GETID()){\r\n       RETURN 1;\r\n   }\r\n   RETURN -1;\r\n   }\r\n});\r\n', '', '0', '2017-12-27 01:38:25', '61', '1');
INSERT INTO `topic` VALUES ('7281', '33', '4', '自定义泛型', '4e2ac2be-69ee-4e4e-8d0d-98973c43b3ae.', null, null, null, null, null, null, '  PUBLIC CLASS USER<T>{\r\n         T ID;\r\nT NAME;\r\n    }\r\n', '', '0', '2017-12-27 01:38:42', '61', '1');
INSERT INTO `topic` VALUES ('7282', '33', '4', '高级语言的分类以及区别', '8b644b34-028a-43d1-ad8d-1092f60b4b22.', null, null, null, null, null, null, '高级语言分为：编译性语言和解释性语言，\r\n    编译性语言：是指使用专门的翻译器，针对特定的平台（系统），将某种高级语言一次性翻译成该平台硬件执行的\r\n的机器码，并包装成该平台可识别的程序格式\r\n    解释性语言：是指使用专门的解释器对源程序逐行解释成该平台的机器码并立刻执行的语言\r\n    区别：解释性语言比编译性语言跨平台性要好\r\n 编译性语言效率要比解释性语言高\r\n', '', '0', '2017-12-27 01:39:01', '61', '1');
INSERT INTO `topic` VALUES ('7283', '33', '4', 'jvm如何实现跨平台的？', '15f5dacb-50ad-41df-8c42-98f09621b4fa.', null, null, null, null, null, null, 'JVM是跨平台的关键，只要为不同平台实现了相应的虚拟机，编译后的JAVA字节码就可以在该平台上运行。\r\n    显然，相同的字节码程序需要在不同的平台上运行，这几乎是不可能的，只有通过中间的转换器材可以实现\r\n    JVM就是这个转换器。', '', '0', '2017-12-27 01:39:15', '61', '1');
INSERT INTO `topic` VALUES ('7284', '3', '4', 'Java程序的运行步骤', '1596dec8-6488-43ce-a635-8df0748ee227.', null, null, null, null, null, null, '一，编译JAVA程序，生成CLASS文件\r\n二，运行CLASS文件\r\n', '', '0', '2017-12-27 01:39:28', '61', '1');
INSERT INTO `topic` VALUES ('7285', '3', '4', 'Java源文件命名规则', '5594a82f-96f1-476f-9c6d-84ead7f35ab0.', null, null, null, null, null, null, '1：JAVA源文件的后缀必须是.JAVA，不能是其他的后缀\r\n    2：在通常情况下，JAVA源文件的主文件可以是任意的，但有一种情况除外，\r\n       JAVA源文件里定义了一个PUBLIC，那么源文件的主文件名必须和PUBLIC类的类名相同。', '', '0', '2017-12-27 01:39:43', '61', '1');
INSERT INTO `topic` VALUES ('7286', '33', '4', '程序的三大结构', 'e965f514-d997-43eb-8a18-5df91fdbb026.', null, null, null, null, null, null, ' 顺序结构，选择结构（分支结构），循环结构三种结构。\r\n    选择结构又分为：IF和SWITCH，其中IF有IF（单选），IF...ELSE (双选)，IF...ELSE IF ...ELSE(多选)。\r\n    循环结构又分为：FOR，FOREACH，WHILE，DO...WHILE。', '', '0', '2017-12-27 01:39:56', '61', '1');
INSERT INTO `topic` VALUES ('7287', '33', '4', 'switch支持的类型以及注意的地方', 'e603a539-d324-4a66-92a8-3ca07b696bc8.', null, null, null, null, null, null, ' 支持的类型：INT，CHAR，SHORT，BYTE，枚举，STRING（JAVA1.7）\r\n    注意的地方：CASE后的BREAK不能省略，一旦省略，就会往满足后的条件和条件后面的代码执行', '', '0', '2017-12-27 01:40:16', '61', '1');
INSERT INTO `topic` VALUES ('7288', '33', '4', '类和对象的定义以及他们的关系', '00c24fcf-698d-44b5-9108-5692c74893b4.', null, null, null, null, null, null, '类：是指具有相同特征的一类事物的总称\r\n    对象：是一个具体存在的实体 \r\n    类是有多个对象组成的。', '', '0', '2017-12-27 01:40:32', '61', '1');
INSERT INTO `topic` VALUES ('7289', '3', '4', '有那些分隔符以及他们的作用', '5e6534d4-ba88-4a8e-a70c-0a047309d272.', null, null, null, null, null, null, '有分号(;),圆括号(()),方括号([]),花括号({}),圆点(.),空格\r\n    分号：作为一行语句的结束\r\n    圆括号：定义形参和传入实参\r\n    方括号：访问数组的元素\r\n    圆点：用来类和对象访问它的成员\r\n    花括号：定义一段代码块\r\n    空格：分割一条语句的不同部分，合理缩进JAVA代码', '', '0', '2017-12-27 01:41:00', '61', '1');
INSERT INTO `topic` VALUES ('7290', '33', '4', '标识符的规则', '91f90737-54eb-4b57-8765-ebfc555d2435.', null, null, null, null, null, null, '    1，标识符可以包含数字，字母，下划线，美元符，但数字不能打头\r\n    2，标识符不能是关键字和保留字，但可以包含关键字和保留字\r\n    3，标识符不能有空格\r\n    4，标识符只能包含美元符，但不能是其他的特殊符号', '', '0', '2017-12-27 01:41:13', '61', '1');
INSERT INTO `topic` VALUES ('7291', '33', '4', '什么是保留字和关键字？', '002db4c6-a0ed-4844-acc0-dd0ea59c63ae.', null, null, null, null, null, null, ' 保留字：是指JAVA现在还没有把它作为关键字，但在以后的版本中可能会把它当做关键字\r\n     关键字：是指具有特殊用途的单词\r\n', '', '0', '2017-12-27 01:41:26', '61', '1');
INSERT INTO `topic` VALUES ('7292', '33', '4', '八大基本类型以及字节数', '062eec29-1271-4823-a57c-6062aa762e0a.', null, null, null, null, null, null, 'BYTE    1个字节\r\n     SHORT   2个字节\r\n     INT     4个字节\r\n     LONG    8个字节\r\n     BOOLEAN 1位\r\n     CHAR    2个字节\r\n     FLOAT   4个字节\r\n     DOUBLE  8个字节\r\n', '', '0', '2017-12-27 01:41:40', '61', '1');
INSERT INTO `topic` VALUES ('7293', '33', '4', '整数常量的表示方法', '70135a99-fa3f-4d2b-9815-df7187dc27a0.', null, null, null, null, null, null, '二进制 用0B开头\r\n     八进制 用0开头\r\n     十六进制 用0X开头', '', '0', '2017-12-27 01:41:56', '61', '1');
INSERT INTO `topic` VALUES ('7294', '3', '4', '常用的转义字符', '14d1a4f7-aabe-44d2-bbb1-e5c29222030c.', null, null, null, null, null, null, ' \\N   换行符\r\n     \\T   制表符\r\n     \\R   回车符\r\n     \\B   退格符\r\n     \\“   双引号\r\n     \\\'   单引号\r\n     \\\\   反斜线', '', '0', '2017-12-27 01:42:12', '61', '1');
INSERT INTO `topic` VALUES ('7295', '3', '4', '浮点数的两种表达方式', '612ae105-92b4-47b2-a3e8-c7e0ea4e33ee.', null, null, null, null, null, null, ' 十进制数表达示和科学记数法', '', '0', '2017-12-27 01:42:32', '61', '1');
INSERT INTO `topic` VALUES ('7296', '3', '4', '变量的概念和定义以及常量的特点', '60c0557e-0407-48ca-a29e-2ae70664cb3c.', null, null, null, null, null, null, '  概念：变量是JAVA最基本的储存单位，它是用来储存信息的，变量在重新运行中值是可以改变的\r\n      定义：一个类型，一个变量名，也可以对其进行初始化\r\n      常量：在程序运行中值不可以改变的，用FINAL修饰，常量名一般用大写字母，多个单词需用下划线连接', '', '0', '2017-12-27 01:42:48', '61', '1');
INSERT INTO `topic` VALUES ('7297', '3', '4', '自动转换和强制转换', '42561caf-582c-4754-8679-394eb55f0689.', null, null, null, null, null, null, '自动转换：把某个基本类型的数值或变量直接赋给另一个基本类型的变量\r\n     强制转换：把范围大的数值或变量赋给范围小的变量', '', '0', '2017-12-27 01:43:48', '61', '1');
INSERT INTO `topic` VALUES ('7298', '33', '4', '有那些运算符？', 'a6186714-e422-48e7-b085-22bb6f71b66b.', null, null, null, null, null, null, '算术运算符\r\n     比较运算符\r\n     赋值运算符\r\n     逻辑运算符\r\n     位运算符\r\n     类型相关运算符', '', '0', '2017-12-27 01:44:02', '61', '1');
INSERT INTO `topic` VALUES ('7300', '3', '4', '数值的特征', 'd0855d63-a1c8-4494-9419-6a4f332e05ae.', null, null, null, null, null, null, '1，数值里的元素类型必须一致\r\n     2，数组一旦初始化结束，长度就确定下来了\r\n     3，数组不仅可以储存基本类型，也可以储存引用类型\r\n     4，数组本身也是一种引用类型\r\n', '', '0', '2017-12-27 01:46:56', '61', '1');
INSERT INTO `topic` VALUES ('7301', '3', '4', '数组的初始化', '7d1ad941-2b54-4399-b239-db608b965eb2.', null, null, null, null, null, null, ' 数组的初始化分为：静态初始化和动态初始化\r\n     静态初始化：由程序员赋值，系统给定长度\r\n     动态初始化：程序员给定长度，系统默认初始化\r\n     BYTE，SHORT，INT，LONG系统默认的初始化值为0\r\n     DOUBLE，FLOAT系统默认的初始化为0.0\r\n     CHAR系统默认的初始化为\\U0000\r\n     STRING和其他引用类型为NULL\r\n     BOOLEAN系统默认的初始值为FALSE\r\n', '', '0', '2017-12-27 01:47:10', '61', '1');
INSERT INTO `topic` VALUES ('7302', '3', '4', '方法属性的主要体现', '449c761c-5544-436c-b3e4-ff347251f92f.', null, null, null, null, null, null, '1，方法不能独立，只能在类里定义\r\n      2，从逻辑上来看，方法要么属于类本身，要么该类的一个对象\r\n      3，方法永远不能独立执行，执行方法必须是类或对象作为调用者', '', '0', '2017-12-27 01:49:14', '61', '1');
INSERT INTO `topic` VALUES ('7303', '33', '4', '可变长参数', 'fba15eb7-bbb2-446f-ab68-3b079db4d0c3.', null, null, null, null, null, null, '1，一个方法只能定义一个可变长参数\r\n     2，传入的实参可以是一个变量，也可以是一个数组\r\n     3，可变长参数只能放在方法形参的最后一个\r\n     4，可变长参数只能用数组来接收', '', '0', '2017-12-27 01:50:27', '61', '1');
INSERT INTO `topic` VALUES ('7304', '3', '4', '方法重载', '3d638784-910c-4962-babe-e44bb839efaa.', null, null, null, null, null, null, '方法重载：如果同一个类中包含了两个或两个以上方法的方法名相同，但形参列表不同，则叫方法重载\r\n     形参列表不同是指形参的个数，顺序，类型三个方面不同\r\n     注意的是方法重载与方法返回值类型，修饰符等其他部分没有任何关系', '', '0', '2017-12-27 01:50:41', '61', '1');
INSERT INTO `topic` VALUES ('7305', '3', '4', '变量的特点', 'ceb1366c-2105-43e3-bfbf-f8cf1c891a4c.', null, null, null, null, null, null, '1,在同一个类里，成员变量对整个类有效，一个类里不能定义两个同名的成员变量，即便一个是类成员，\r\n       一个是实例成员也不行\r\n     2，一个方法里不能定义两个同名的方法局部变量，形参和方法局部变量也不能同名\r\n     3，同一个方法里不同的代码块局部变量可以同名\r\n     4，如果先定义代码块局部变量，后定义方法局部变量，那么代码块局部变量和方法局部变量可以同名\r\n     5，JAVA允许成员变量和局部变量可以同名，如果方法局部变量和成员变量同名，那么局部变量会覆盖\r\n        成员变量，如果需要被覆盖的成员变量，则可以用THIS或类来作为调用者', '', '0', '2017-12-27 01:51:01', '61', '1');
INSERT INTO `topic` VALUES ('7306', '3', '4', '变量的使用规则', '1e3c2fcd-1960-4b12-a982-cd84e5e6dfb9.', null, null, null, null, null, null, '尽可能的缩小变量的作用范围，能使用局部变量就别使用成员变量，能使用代码块局部变量就别使用方法\r\n     局部变量，缩小变量作用范围，使得变量的生命周期变短，使得程序运行的性能更好\r\n     \r\n     使用成员变量的情况：\r\n     1，一个属性需要在同一个类里的几个方法里共享\r\n     2，用于保存类或对象运行时的状态信息\r\n     3，用于描述类和对象固有的信息', '', '0', '2017-12-27 01:51:17', '61', '1');
INSERT INTO `topic` VALUES ('7307', '3', '4', '封装的目的', '583d753c-074b-467b-a4a6-de4b316c6fbb.', null, null, null, null, null, null, '  1，隐藏类的实现细节，通过一些公共方法暴露该类的功能，从而加入一些逻辑控制语句，防止一些不合理的访问\r\n     2，便于修改，提高代码的可维护性\r\n     3，可进行数据检查，有利于对象信息的完整性', '', '0', '2017-12-27 01:51:35', '61', '1');
INSERT INTO `topic` VALUES ('7308', '33', '4', '访问控制符的分类', 'b210e677-4cb4-48a8-b863-cbddfa5f2196.', null, null, null, null, null, null, 'DEFAULT：包访问权限，可以访问同一个类中和同一个包中\r\n    PRIVATE：当前类访问权限，只能在同一个类中访问\r\n    PROTECTED：子类访问权限，在同一个类中，同一个包中，子类中（不同的包）可以访问\r\n    PUBLIC：公共访问权限，可以访问任意的类和包', '', '0', '2017-12-27 01:51:50', '61', '1');
INSERT INTO `topic` VALUES ('7309', '33', '4', 'package的作用以及定义', 'fade2752-464d-4de4-8946-70ca9a70000d.', null, null, null, null, null, null, ' 用于解决类的命名冲突，类文件管理等问题\r\n     定义：PACKAGE必须放在该类的非注释（除了注释）的第一行，一个类里只有一个PACKAGE', '', '0', '2017-12-27 01:52:05', '61', '1');
INSERT INTO `topic` VALUES ('7310', '3', '4', '编译带包名的类和运行带包名的类', '6c8037ba-99bf-49e6-9335-9502446423eb.', null, null, null, null, null, null, '1，类文件和指定的包在同一个目录下\r\n       JAVAC 目录/JAVA文件名+扩展名\r\n\r\n\r\n     2，类文件和指定的包不在同一个目录下\r\n       JAVAC -D . JAVA文件名+扩展名', '', '0', '2017-12-27 01:52:24', '61', '1');
INSERT INTO `topic` VALUES ('7311', '33', '4', '如何访问带包名的类', '5ad86c1c-1a02-41f2-8ab1-e0c1ce4c76c5.', null, null, null, null, null, null, '1，同一个包下可以自由访问\r\n     2，不同的包则需要带包名\r\n     3，用IMPORT导入包名', '', '0', '2017-12-27 01:52:42', '61', '1');
INSERT INTO `topic` VALUES ('7312', '33', '4', '重写父类方法的规则', 'f91a4fa6-ad27-4ae0-a46c-624fb06a1eb6.', null, null, null, null, null, null, '1，方法名相同\r\n     2，方法的形参列表相同\r\n     3，子类的返回值类型比父类的返回值类型要小或相等\r\n     4，子类声明抛出的异常类要比父类声明抛出的异常类小或相等\r\n     5，子类的访问权限要比父类的访问权限要大或相等\r\n     注意的是：重写父类的方法，要么两个是实例方法，要么两个是类方法，不能一个是实例方法，一个类方法', '', '0', '2017-12-27 01:52:57', '61', '1');
INSERT INTO `topic` VALUES ('7313', '33', '4', 'Field在继承体系中查找的顺序', '2ce024f0-5e80-434c-aa2d-06009c599ed0.', null, null, null, null, null, null, '1，查找该方法是否有该FIELD的局部变量\r\n     2，查找该类中是否有该FIELD\r\n     3，查找该类的直接父类，直接父类没有话，则就会一直上溯，直到OBJECT都没有找到，\r\n        系统则会重新编译错误', '', '0', '2017-12-27 01:53:11', '61', '1');
INSERT INTO `topic` VALUES ('7314', '33', '4', '强制类型转换需要注意的地方', 'a45bf2d6-8bec-4489-a515-809022b490f7.', null, null, null, null, null, null, ' 1，基本类型之间的转换只能发生在数值类型之间进行\r\n     2：引用类型之间的转换只能发生在具有继承关系的两个类型之间', '', '0', '2017-12-27 01:53:25', '61', '1');
INSERT INTO `topic` VALUES ('7315', '33', '4', '静态初始化块，初始化块和构造器的执行顺序', 'ededcfa2-264a-4c40-913b-b00251f3272b.', null, null, null, null, null, null, ' 1，最先执行JAVA.LANG.OBJECT类的静态初始化块，然后执行父类的静态初始化块，\r\n        最后执行该类的静态初始化块\r\n     2，先执行JAVA.LANG.OBJECT类的初始化块，然后执行JAVA.LANG.OBJECT的构造器\r\n        异常向下执行其父类的初始化块，开始执行其父类的构造器，最后执行该类的初始化块和构造器，\r\n最后返回该类的对象。', '', '0', '2017-12-27 01:53:40', '61', '1');
INSERT INTO `topic` VALUES ('7316', '33', '4', '什么是包装类？', '57b484b1-18a9-49e9-a161-7781d0fa20da.', null, null, null, null, null, null, '为了解决八大基本类型不能当做OBJECT类型使用的问题，JAVA提供了包装类的概念，分别为其定义了相应的\r\n     引用类型，称之为包装类，', '', '0', '2017-12-27 01:54:05', '61', '1');
INSERT INTO `topic` VALUES ('7317', '3', '4', '自动装箱和自动拆箱的概念以及之间的转换', '61c31b96-7254-453f-b359-d8ce6c4f4715.', null, null, null, null, null, null, '自动装箱：就是把一个基本类型直接赋给相对应的包装类变量，或者赋给OBJECT变量\r\n     自动拆箱：就是把包装类变量直接赋给相对应的基本类型变量\r\n     基本类型——>包装类：1，构造器 2，自动装箱 3，VALUEOF\r\n     包装类——>基本类型：1，自动拆箱 2，VALUE\r\n', '', '0', '2017-12-27 01:54:19', '61', '1');
INSERT INTO `topic` VALUES ('7318', '3', '4', '为什么要重写toString？', 'eee77a10-3eaf-47de-a280-4262f87c52d4.', null, null, null, null, null, null, '因为OBJECT里的TOSTRING打印出来的信息是一串看不懂得信息，如果用户需要自定义类实现自己想看到的\r\n     信息，就必须重写OBJECT类里TOSTRING方法', '', '0', '2017-12-27 01:54:37', '61', '1');
INSERT INTO `topic` VALUES ('7319', '3', '4', '为什么要重写equals方法以及重写equals方法的规则？', '6445e26e-d3a6-4a75-a482-22dc84124cb8.', null, null, null, null, null, null, '因为OBJECT类提供的EQUALS方法没有太大的实际意义，EQUALS方法和==比较引用类型时，\r\n     他们的规则是一样的，都是比较两个类型的地址，如果希望采用自定义的相等标准，则可采用\r\n     重写EQUALS方法来实现。\r\n     规则：\r\n        1，自反性：对于任意X，X.EQUALS(X)一定返回TRUE\r\n2，对称性：对于任意X和Y，X.EQUAL(Y)和Y.EQUALS(X)返回的结果是一样的\r\n3：一致性：对任意X和Y，如果对象中的等价比较的信息没有改变，那么调用X.EQUALS(Y)\r\n  多少次，返回的结果是一致的\r\n4：对任意不是NULL的X，X.EQUALS(NULL)必定返回FALSE', '', '0', '2017-12-27 01:54:54', '61', '1');
INSERT INTO `topic` VALUES ('7320', '33', '4', '抽象类的规则', '59708270-3a20-4fcf-9377-a05ad2df28f4.', null, null, null, null, null, null, ' 1，抽象类必须用ABSTRACT来修饰，抽象方法也必须用ABSTRACT来修饰，抽象方法不能有方法体\r\n     2，抽象类不能被实例化，无法使用NEW来调用抽象类的构造器来创建抽象类的实例\r\n     3，抽象类包含构造器，初始化块，属性，方法，枚举，内部类六种成分，抽象类的构造器主要\r\n        是让子类来调用的\r\n     4，含有抽象方法的类只能被定义为抽象类', '', '0', '2017-12-27 01:55:41', '61', '1');
INSERT INTO `topic` VALUES ('7321', '3', '4', '抽象类和接口需要注意的地方', '2c29942b-82ba-4dd1-aa11-868eb2d60f46.', null, null, null, null, null, null, ' 1，ABSTRACT和FINAL不能同时使用，ABSTRACT修饰的方法和类都必须被继承，而FINAL修饰的类和方法\r\n         是不能被继承和覆盖的\r\n     2，ABSTRACT不能修饰属性，局部变量和构造方法\r\n     3，ABSTRACT不能和STATIC同时使用，STATIC修饰的方法，是属于类本身，类可以直接调用，如果再用\r\n        ABSTRACT修饰的话，那么类调用没有方法体的方法，则会出错。\r\n     4，ABSTRACT不能和PRIVATE同时使用，PRIVATE修饰的方法是不能被继承的，而ABSTRACT修饰的方法则\r\n        是需要被继承的，所以两者不能同时使用', '', '0', '2017-12-27 01:55:56', '61', '1');
INSERT INTO `topic` VALUES ('7322', '3', '4', '成员内部类的语法', '068d0706-7359-46c6-b411-f7e8204e801d.', null, null, null, null, null, null, '   1，成员内部类可以是PRIVATE，PROTECTED，PUBLIC等任意修饰符\r\n     2，包含内部类在内的类文件编译生成N（内部类的个数）+1个CLASS文件，\r\n        成员内部类CLASS文件的形式总是为：外部类$内部类.CLASS\r\n     3，非静态内部类可以访问外部类的任意成员\r\n     4，静态外部类不能访问非静态内部类\r\n     5，在非静态内部类方法查找某个变量的顺序：内部类局部变量——>内部类成员变量——>外部类成员变量\r\n        ——>无（系统提示找不到）\r\n     6，如果外部类成员变量，内部类成员变量，内部类局部变量重名，则可是要THIS，外部类名.THIS来区分\r\n     7，外部类访问内部类的成员，需内部类创建对象来访问其实例成员\r\n     8，外部类的静态成员不能访问非静态内部类\r\n     9，非静态内部类不可以有静态初始化块，但可以有普通初始化块\r\n     10，非静态内部类可以有静态成员，也可以有非静态成员，静态内部类不能访问外部类的实例成员\r\n          但可以访问外部类的类成员', '', '0', '2017-12-27 01:56:26', '61', '1');
INSERT INTO `topic` VALUES ('7323', '33', '4', '枚举类和普通类的区别', '6d27a771-9f1a-428f-aa56-afb7c3656d5f.', null, null, null, null, null, null, '  1，枚举类可以实现一个到多个接口，使用ENUM定义的枚举类继承的JAVA.LANG.ENUM类，而不是继承OBJECT类\r\n     2，使用ENUM定义，非抽象的枚举类默认会使用FINAL修饰，因此枚举类不能派生子类\r\n     3，枚举类的构造器只能是PRIVATE修饰，如果省略了也会默认PRIVATE修饰\r\n     4，枚举类的实例都必须在类的第一行显示列出，否则枚举类就永远不能产生实例，列出这些实例时，\r\n        系统会自动添加PUBLIC STATIC FINAL修饰，无须程序员显示添加\r\n     5，所有的枚举类度提供了一个VALUES方法，该方法可以很方便的遍历所有的枚举值', '', '0', '2017-12-27 01:56:41', '61', '1');
INSERT INTO `topic` VALUES ('7324', '33', '4', '如何手动实现枚举类？', '78f2a883-aac7-430f-878f-bc4bf22ea06f.', null, null, null, null, null, null, '1，通过PRIVATE把构造器隐藏起来\r\n      2，把该类的所有实例都用PUBLIC STATIC FINAL修饰的类变量来保存\r\n      3，如果有必要，可以提供一些静态方法，允许其他程序根据特定参数来获取与之匹配的实例\r\n', '', '0', '2017-12-27 01:56:58', '61', '1');
INSERT INTO `topic` VALUES ('7325', '33', '4', 'Java集合的作用', 'c4ef3dd7-2904-4c1e-bf4c-96aa8da6c562.', null, null, null, null, null, null, 'JAVA集合是一种特别的有用的工具类，可以储存数量不等的多个对象，并可以实现常规的数据结构，如栈，队列，\r\n     列表等，JAVA集合还可以保存具有映射关系的关联数组', '', '0', '2017-12-27 01:57:47', '61', '1');
INSERT INTO `topic` VALUES ('7326', '33', '4', 'Java的分类', 'c708631c-9600-4400-a14e-d196474380f0.', null, null, null, null, null, null, ' SET：无序且不可以重复的集合\r\n     LIST：有序且可以重复的集合\r\n     QUEUE:代表一种队列集合\r\n     MAP：代表具有映射关系的集合', '', '0', '2017-12-27 01:58:01', '61', '1');
INSERT INTO `topic` VALUES ('7327', '33', '4', 'Vector和ArrayList的区别', '8ea0e2be-eb91-434e-a7d3-665fa0d61047.', null, null, null, null, null, null, 'VECTOR和ARRAYLIST都是以数组实现的\r\n     VECTOR是线程安全，ARRAYLIST是线程不安全', '', '0', '2017-12-27 01:58:14', '61', '1');
INSERT INTO `topic` VALUES ('7328', '3', '4', 'Stack常用的方法', '2b75c92b-93b7-4dcc-a106-e7ca692c4e10.', null, null, null, null, null, null, 'PEEK：获取STACK的第一个元素\r\n     POP：删除STACK的第一个元素\r\n     PUSH：将元素推进栈', '', '0', '2017-12-27 01:58:27', '61', '1');
INSERT INTO `topic` VALUES ('7329', '33', '4', 'Queue常用的方法', '076fc725-9b3f-4729-8101-2d00fd8a5922.', null, null, null, null, null, null, '  ADD：把元素加入队列的尾部\r\n     ELEMENT：获取队列的第一个元素\r\n     OFFER：把元素加入队列的尾部\r\n     PEEK：获取队列的第一个元素\r\n     POLL：删除队列的第一个元素\r\n     REMOVE：删除队列的第一个元素', '', '0', '2017-12-27 01:59:06', '61', '1');
INSERT INTO `topic` VALUES ('7330', '33', '4', 'Map常用的方法', '7d3de9e6-e7dc-488c-b006-b77f917ba3cc.', null, null, null, null, null, null, '     CLEAR：        清除MAP里的使用KEY—VALUE对\r\n     CONTAINSKEY：  查找MAP里是否包含了指定的KEY\r\n     CONTAINSVALUE：查找MAP里是否包含了指定的VALUE\r\n     ENTRYKEY：     返回MAP里KEY-VALUE对所组成的SET集合\r\n     GET：          获取MAP里指定KEY下的VALUE值\r\n     ISEMPTY：      判断MAP是否为空\r\n     KEYSET：       返回MAP里由KEY组成的SET集合\r\n     PUT：          向MAP里增加一个KEY-VALUE对\r\n     PUTALL：       向MAP里增加一个MAP集合\r\n     REMOVE：       删除MAP里的KEY-VALUE对\r\n     SIZE：         返回MAP里KEY-VALUE的个数\r\n     VALUES：       返回MAP里所有VALUE组成的COLLECTION', '', '0', '2017-12-27 01:59:22', '61', '1');
INSERT INTO `topic` VALUES ('7331', '33', '4', 'Collections集合工具类常用的方法', '44615907-db49-4923-bb40-6e9f08e5ff65.', null, null, null, null, null, null, ' REVERSE：反转指定LIST集合的元素顺序\r\n     SORT：   对LIST进行自然排序并按升序排列\r\n     SWAP：   对LIST的指定两个下标元素进行交换\r\n     ROTATE： LIST里的元素整体向后移动指定个数位置\r\n     MAX：    返回LIST里的最大的元素\r\n     MIN：    返回LIST里的最小的元素\r\n     FILL：   把集合里的所有元素都替换成指定的元素\r\n     FREQUENCY：统计指定元素出现的次数\r\n     REPLACEALL：用新的元素替换所有包含指定元素的旧元素\r\n     INDEXOFSUBLIST：查找子LIST在父LIST首次出现的位置\r\n     LASTINDEXOFSUBLIST：查找子LIST在父LIST最后出现的位置', '', '0', '2017-12-27 01:59:56', '61', '1');
INSERT INTO `topic` VALUES ('7332', '33', '4', 'Date和Calendar之间的转换', '20bb36f1-458b-45ce-b85d-ac70b4ad65b5.', null, null, null, null, null, null, 'CALENDAR——>DATE\r\n     CALENDAR CALENDAR=CALENDAR.GETINSTANCE();\r\n     DATE DATE=CALENDAR.GETTIME();\r\n\r\n\r\n     DATE——>CALENDAR\r\n     CALENDAR CALENAR=CALENDAR.GETINSTANCE();\r\n     CALENDAR.SETTIME(NEW DATE());', '', '0', '2017-12-27 02:00:25', '61', '1');
INSERT INTO `topic` VALUES ('7333', '33', '4', 'Calendar常用的方法', '0f47ac1e-69a1-4c37-8581-7b7478a7192a.', null, null, null, null, null, null, 'ADD：为给定的日历字段增加或减少时间量，当给定字段超过允许的范围时，会发生进位\r\n    GET：返回给定日历字段的值\r\n    ROLL：为给定的日历字段增加或减少时间量，当给定字段超过允许的范围时，不会发生进位\r\n    SET：将给定的日历字段设置为指定的值', '', '0', '2017-12-27 02:00:40', '61', '1');
INSERT INTO `topic` VALUES ('7334', '33', '4', '完成国际化的三个步骤', 'f06e94da-f1d3-416c-8cbd-471b6b93c35b.', null, null, null, null, null, null, '1，获取LOCALE对象\r\n     2，绑定资源文件\r\n     3，获取消息\r\n', '', '0', '2017-12-27 02:00:54', '61', '1');
INSERT INTO `topic` VALUES ('7335', '33', '4', '国际化涉及的三个类', 'f581687d-de5c-46dd-865c-498df62a8b0c.', null, null, null, null, null, null, ' 1，JAVA.UTIL.RESOURCEBUNDLE  加载国家，语言资源包\r\n     2，JAVA.UTIL.LOCALE    用于封装特定的国家/区域，语言环境\r\n     3，JAVA.UTIL.MESSAGEFORMAL  用于格式带占位符的字符串', '', '0', '2017-12-27 02:01:19', '61', '1');
INSERT INTO `topic` VALUES ('7336', '33', '4', 'NumberFormat对数字进行格式化的四种类型', '05ce01da-5845-4f6a-91cb-01bc3bacfbf1.', null, null, null, null, null, null, ' 1，GETCURRENCYINSTANCE  格式化货币语言环境\r\n     2，GETINTEGERINSTANCE   格式化整数语言环境\r\n     3，GETNUMBERINSTANCE    格式化通用数字语言环境\r\n     4，GETPERCENTINSTANCE   格式化百分比语言环境\r\n', '', '0', '2017-12-27 02:02:06', '61', '1');
INSERT INTO `topic` VALUES ('7337', '33', '4', '泛型的定义', '063ee955-fb1e-4dc4-bef6-54fd2449cb7c.', null, null, null, null, null, null, '泛型就是指定义类，接口，方法时使用的形参', '', '0', '2017-12-27 02:02:27', '61', '1');
INSERT INTO `topic` VALUES ('7338', '3', '4', '异常的五大关键字', 'ac15ace6-e2f0-4d81-84a2-f6e91555c4c6.', null, null, null, null, null, null, '   TRY,CATCH,FINALLY,THROW,THROWS', '', '0', '2017-12-27 02:03:43', '61', '1');
INSERT INTO `topic` VALUES ('7339', '33', '4', '异常的分类', 'eaaaa774-d262-40f6-974f-0d20da8fb4a4.', null, null, null, null, null, null, '分为CHECKED异常和RUNTIME异常\r\n      CHECKED异常：是在编译阶段出现的异常\r\n      RUNTIME异常：是程序运行中出现的异常', '', '0', '2017-12-27 02:04:00', '61', '1');
INSERT INTO `topic` VALUES ('7340', '3', '4', '什么时候使用类型通配符？', '4aade541-fe68-4627-a5e7-3f96060bbc9f.', null, null, null, null, null, null, ' 当我们定义集合形参时并不知道要定义什么类型，所以，为了表示各种泛型LIST的父类，我们就使用的泛型\r\n     通配符上限：只想表示它是某一类泛型LIST的父类', '', '0', '2017-12-27 02:04:15', '61', '1');
INSERT INTO `topic` VALUES ('7341', '33', '4', 'Error错误', '0fe692e9-9fec-461b-affa-7e733fda7cd3.', null, null, null, null, null, null, '一般是指与虚拟机相关的问题，如系统崩溃，虚拟机错误等，这种错误无法恢复或不可能捕捉，将导致\r\n     程序中断', '', '0', '2017-12-27 02:04:37', '61', '1');
INSERT INTO `topic` VALUES ('7342', '33', '4', '捕捉异常常用的几个方法', 'b89094c8-ef6d-42c5-b6d5-23d6788a0fdd.', null, null, null, null, null, null, ' 1，GETMESSAGE  返回该异常的详细描述字符串\r\n     2，PRINTSTACKTRACE 将该异常的跟踪栈信息输出到标准错误输出\r\n     3，PRINTSTACKTRACE（PRINTSTREAM S） 将该异常的跟踪栈信息输出到指定输出流\r\n     4，GETSTACKTRACE  返回该异常的跟踪栈信息', '', '0', '2017-12-27 02:04:50', '61', '1');
INSERT INTO `topic` VALUES ('7343', '33', '4', 'Tomcat 服务器的默认端口是多少？怎样修改 tomcat 的端口？', 'b6475f00-ae70-4f28-8c50-ed615a970c39.', null, null, null, null, null, null, '默认端口为 8080，可以通过 SERVICE.XML 的 CONNECTOR 元素的 PORT 属性来修改端口。', '', '0', '2017-12-27 07:37:40', '68', '1');
INSERT INTO `topic` VALUES ('7344', '3', '4', '多线程有几种实现方法,都是什么?同步的方法有几种，都是什么？', '012e61e2-262e-4a9f-a140-d4aa2242bbd8.', null, null, null, null, null, null, '多线程有两种实现方法：继承 THREAD 类或者实现 RUNNABLE 接口。\r\n实现同步也有两种方法：一种是同步方法，另一种是同步代码块。\r\n同步方法是在方法返回类型前面加上 SYNCHRONIZED 关键字\r\n同步代码块是SYNCHRONIZED (这里写需要同步的对象){...}', '', '0', '2017-12-27 07:38:50', '68', '1');
INSERT INTO `topic` VALUES ('7345', '3', '4', '写出执行下面的代码后的结果', 'a48ca0d3-a755-43f4-8380-509fd819af6f.png', null, null, null, null, null, null, 'HELLO :3.14 : 10', '', '0', '2017-12-27 07:40:09', '68', '1');
INSERT INTO `topic` VALUES ('7346', '3', '4', 'getSomething ()执行时发生 IllegalArgumentException 会出现什么样的结果？', 'a80bbf73-fba3-43d2-8bc7-7d1c9e6f0917.png', null, null, null, null, null, null, 'EXCEPTION', '', '0', '2017-12-27 07:47:26', '68', '1');
INSERT INTO `topic` VALUES ('7347', '3', '4', '.谈一下聚簇索引和非聚簇索引的区别以及各自的优缺点。', 'cbf7c806-a6c7-4d69-8743-c4e88bbf9414.', null, null, null, null, null, null, '聚集索引,表中存储的数据按照索引的顺序存储,检索效率比普通索引高,但对数据新增/修改/删除的\r\n影响比较大\r\n非聚集索引,不影响表中的数据存储顺序,检索效率比聚集索引低,对数据新增/修改/删除的影响很小', '', '0', '2017-12-27 07:48:16', '68', '1');
INSERT INTO `topic` VALUES ('7348', '33', '4', '死锁的必要条件？怎么克服？', 'c642a6dd-3c16-4e4f-a447-e0bf6932c61c.', null, null, null, null, null, null, '：产生死锁的四个必要条件：\r\n互斥条件：一个资源每次只能被一个进程使用。\r\n请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。这四个条件是死锁的必要条件只要系统发生死锁，这些条件必然成立，而只要上述条件之一不满足，就不会发生死锁。\r\n死锁的解决方法:A 撤消陷于死锁的全部进程 B 逐个撤消陷于死锁的进程，直到死锁不存在；C 从陷于死锁的进程中逐个强迫放弃所占用的资源，直至死锁消失。 D 从另外一些进程那里强行剥夺足够数量的资源分配给死锁进程，以解除死锁状态', '', '0', '2017-12-27 07:49:27', '68', '1');
INSERT INTO `topic` VALUES ('7349', '33', '4', '描述重做与回滚的认识;', '1840224c-8e5c-40cd-85d1-6b2c2122ced6.', null, null, null, null, null, null, '重做日志生成日志文件,是为将来恢复数据库使用的.\r\n回滚段保存未提交数据,是为支持事务而起作用的。', '', '0', '2017-12-27 07:49:50', '68', '1');
INSERT INTO `topic` VALUES ('7350', '33', '4', '引组织表,聚蔟表的用途;', '3c063532-0f53-4516-afd6-665b5bcd7626.', null, null, null, null, null, null, '索引组织表：数据按主码存储和排序，同索引结构一样，不过数据直接存储于主码后面。适用于信息.检索、空间和 OLAP 程序。索引组织表的适用情况：\r\nA.代码查找表。B.经常通过主码访问的表。C.构建自己的索引结构。D.加强数据的共同定位，要数据按特定顺序物理存储。E.经常用 BETWEEN„AND„对主码或唯一码进行查询。数据物理上分类查询。如一张订单表，按日期装载数据，想查单个客户不同时期的订货和统计情况。\r\n索引聚簇表：索引聚簇表是表相关的表共享同一数据块中的相同列，并把相关数据存储中同一个数据块上。创建索引聚簇表中最重要的是对 SIZE 参数有很好的估量，否则聚簇将会降低空间利用，降低效率。\r\n使用索引聚簇表的注意点：\r\nA 如果表中数据有大量 DML 操作的话，那么聚簇将不适用，因为会消极地影响到 DML 性能。B 聚簇中，全表扫描将受到影响。这是因为将扫描聚簇中不同表的数据，额外增加很多无用的数据。C 如果经常 TRUNCATE 表和装载表的话，聚簇将不适用。聚簇中的表无法被 TRUNCATE 的，这是因为每个块中不只是存储一张表的数据。\r\nSQL> TRUNCATE TABLE EMP;\r\nTRUNCATE TABLE EMPERROR AT LINE 1:\r\nORA-03292: TABLE TO BE TRUNCATED IS PART OFA CLUSTER\r\nD 如果大部分是读取操作，且通过聚簇码索引或聚簇表中其他索引来读取的话，聚簇将会比较适用。', '', '0', '2017-12-27 07:50:28', '68', '1');
INSERT INTO `topic` VALUES ('7351', '32', '4', '消耗资源的 SQL 的定位方法;', '1f6441bc-4e83-4ea1-a2ae-dac51d444a4c.', null, null, null, null, null, null, 'SELECTSQL_TEXT\r\nFROM V$SQL\r\nWHERE DISK_READS > 1000 OR (EXECUTIONS> 0 AND BUFFER_GETS/EXECUTIONS > 30000);\r\nSELECT * FROM (\r\nSELECT SQL_TEXT,BUFFER_GETS,DISK_READS FROMV$SQL\r\nORDER BY BUFFER_GETS,DISK_READS DESC)\r\nWHERE ROWNUM<=10;', '', '0', '2017-12-27 07:50:47', '68', '1');
INSERT INTO `topic` VALUES ('7352', '33', '4', '对触发器的认识;', 'c4e765ff-f475-4087-9b0f-48701270502f.', null, null, null, null, null, null, '触发器是表上的程序,主要提供数据添加、修改与删除后的程序处理方法，可以用来检查数据及进行数据更新，也可以分担一些前端应用程序撰写的逻辑规则。用场景: 触发器可以查询其他表，而且可以包含复杂的 SQL 语句。它们主要用于强制复杂的业务规则或要求。触发器的主要应用场合概括起来讲有以下几种：1).当向一张表中添加或删除记录时，需要在相关表中进行同步操作。比如，当为应用系统添加一个系统用户时，需要同时向权限表中添加该用户的缺省权限，此时就编写系统用户表的触发器在添加记录动作时触发。\r\n   2).当表上某列数据的值与其他表中的数据有联系时。比如，当某客户进行欠款消费，可以在生成订单时通过设计触发器判断该客户的累计欠款是否超出了最大限度。\r\n   3).当需要对某张表进行跟踪时。比如，当人事表中有人离职时，第一时间通知或更改相关表的值。', '', '0', '2017-12-27 07:51:05', '68', '1');
INSERT INTO `topic` VALUES ('7353', '33', '4', '.对 ORA-01555 错误的认识;', 'df3a2421-d774-4820-a067-de067118832d.', null, null, null, null, null, null, 'ORA-01555 错 误 产 生 的 原 因 ： 一 致 性 读 (CONSISTENT GET) 和 延 迟 块 清 除 (DELAYED BLOCK\r\nCLEANOUT)。', '', '0', '2017-12-27 07:51:20', '68', '1');
INSERT INTO `topic` VALUES ('7354', '33', '4', '将 ORACLE 数据库更改为归档模式；写出步骤', '66decda9-76df-465e-8a67-f610d8ca2c16.', null, null, null, null, null, null, '具体步骤如下：\r\n1)，以 EXP 方式在线备份数据库到指定位置；2)，观察当前数据库是以服务器参数文件(SPFILE)方式启动还是以参数文件(PFILE)方式启动：SQL> SHOW PARAMETER SPFILE;\r\nNAME                                                                 TYPE\r\n VALUE\r\n----------------------------------------------- ------------------------------\r\nSPFILE                                                            STRING       /HO\r\nME/DB/ORACLE/10G/DBS/SPFILE\r\n          XXXX.ORAVALUE 后有内容，说明数据库以服务器参数文件方式启动，这里的 SPFILE 文件对应的裸设备为/DEV/VGDATA/RSPFILE（通过查看/HOME/DB/ORACLE/10G/DBS/INITSID.ORA 文件内容获得）          ；\r\n3)，关闭所有实例（SHUTDOWN IMMEDIATE）        ；\r\n4)，任意选取一个实例，创建参数文件到指定路径：\r\nSQL>CREATEPFILE=\'/HOME/DB/ORACLE/PFILE.ORA\' FROM SPFILE;\r\n5)，修改 PFILE.ORA 文件，添加参数 CLUSTER_DATABASE=FALSE；\r\n6)，以修改之后的参数文件按 NOMOUNT 方式启动数据库：\r\nSQL>STARTUP NOMOUNTPFILE=\'/HOME/DB/ORACLE/PFILE.ORA\';\r\n7)，使数据库以 EXCLUSIVE 方式启动：\r\nSQL>ALTER DATABASE MOUNT EXCLUSIVE;\r\n8)，改变归档模式：\r\nSQL>ALTER DATABASE ARCHIVELOG;\r\n9)，将 PFILE 参数中的 CLUSTER_DATABASE 重新更改为“TRUE”；\r\n10)，更新服务器参数文件：\r\nSQL>CREATE SPFILE FROMPFILE=\'/HOME/DB/ORACLE/PFILE.ORA\';\r\n11)，关闭数据库实例；\r\nSQL>SHUTDOWM IMMEDIATE;\r\n12)，分别在两个节点上启动数据库：\r\nSQL>STARTUP;\r\n13)，在两个节点上分别检查归档模式是否更改成功：\r\nSQL>ARCHIVE LOG LIST;\r\nDATABASE LOG MODE                           ARCHIVE MODE\r\nAUTOMATIC ARCHIVAL                         ENABLED\r\nARCHIVE DESTINATION                      /HOME/DB/ORACLE/10G/DBS/ARCH\r\nOLDEST ONLINE LOG SEQUENCE         489\r\nNEXT LOG SEQUENCE TO ARCHIVE     491\r\nCURRENT LOG SEQUENCE                     491\r\n完成。', '', '0', '2017-12-27 07:52:04', '68', '1');
INSERT INTO `topic` VALUES ('7355', '32', '4', '把表 A 从表空间 TSP1 更改成表空间 TSP2 的方法', '572cc88b-c5ff-4753-8551-dfd76a6f5dbf.', null, null, null, null, null, null, 'ALTER TABLEA MOVE TABLESPACE TSP2', '', '0', '2017-12-27 07:52:52', '68', '1');
INSERT INTO `topic` VALUES ('7356', '32', '4', '删除表的列；', '9b29add1-46ba-4d51-8456-bde5ae28aa64.', null, null, null, null, null, null, 'ALERT TABLE表名 DROP 列名', '', '0', '2017-12-27 07:53:06', '68', '1');
INSERT INTO `topic` VALUES ('7357', '32', '4', '删除表空间的数据文件？', '72851927-446a-4b22-9737-ca4990feddc8.', null, null, null, null, null, null, '用 SQLPLUS 命令: DROP         TABLESPACE    TABLENAME   INCLUDING    CONTENTS\r\n就可以把所有相关的数据删除', '', '0', '2017-12-27 07:53:18', '68', '1');
INSERT INTO `topic` VALUES ('7358', '32', '4', '如何用 ALTER 命令把表数据加到缓存表里，清除呢？', '527c6e73-2e93-4299-afdd-26716263354d.', null, null, null, null, null, null, '添加：ALERTTABLE 表名 CACHE\r\n     清除：ALERT TABLE表名 NOCACHE', '', '0', '2017-12-27 07:53:39', '68', '1');
INSERT INTO `topic` VALUES ('7359', '32', '4', '数据的复制实现办法？', 'cf6ae90b-b5c4-4f11-8f34-ccd7f7787ba5.', null, null, null, null, null, null, '数据复制，就是将数据库中的数据拷贝到另外一个或多个不同的物理站点上，从而保持源数据\r\n库与目标数据库中指定数据的一致性。\r\n数据复制的实现方法：在具体的实现之前，首先要做好设计与规划。这就需要细致分析具体的业务情\r\n况，设计出一套能够满足业务需要的方案。通常在设计过程中，需要确定出要建立的数据库站点，各\r\n站点的类型，需要复制的数据对象，以及同步方式、冲突解决方案等内容。\r\n数据复制的实现主要包括以下几步：(1)创建复制站点。(2)创建组对象。(3)配置冲突解决方案。', '', '0', '2017-12-27 07:53:55', '68', '1');
INSERT INTO `topic` VALUES ('7360', '32', '4', '建立 ORACLE 数据库后，系统自带的两个用户是什么，相应的密码是什么？他们的身份是什么？ ', 'dc62744a-2da4-4d0e-a93e-c9b88052182a.', null, null, null, null, null, null, '用户        密码             身份\r\nSYSTEM  MANAGER       SYSDBA\r\nSYS  CHANGE_ON_INSTAL    SYSDPER', '', '0', '2017-12-27 07:54:13', '68', '1');
INSERT INTO `topic` VALUES ('7361', '32', '4', '在建立 ORACLE 数据库时，选择“事务处理”模板与选用“数据仓库”模板的\r\n区别是什么？', 'da5ef5cf-dc43-42c7-9fb2-80bbec74d38e.', null, null, null, null, null, null, '事物处理型:经常反馈给客户信息,处理大容量或超大容量的数据.\r\n        数据仓库型:主要频繁处理小型数据库,只是进行一些查询等操作.', '', '0', '2017-12-27 07:54:39', '68', '1');
INSERT INTO `topic` VALUES ('7362', '33', '4', '登陆 OMS 所使用的用户名和密码分别为什么？如果在登陆时，系统提示找不到服务，你应该如\r\n何处理？', 'ec09be1d-395c-4ccc-ae8c-05ed8778a6a5.', null, null, null, null, null, null, '用户名：SYSMAN,\r\n     密码：OEM_TEMP\r\n问题出现在服务器没有启动，只能通过手动的方法在 WINDOWS 管理工具下的策略中将服务器启动。', '', '0', '2017-12-27 07:55:32', '68', '1');
INSERT INTO `topic` VALUES ('7363', '32', '4', '请说出两种以上扩大数据库的方式', 'eae8caa1-fd52-4763-a448-2071b1731d64.', null, null, null, null, null, null, '1) 修改现有表空间的大小；\r\n    2)向表空间插入一个新的数据文件.', '', '0', '2017-12-27 07:55:49', '68', '1');
INSERT INTO `topic` VALUES ('7364', '33', '4', ' 在 ORACLE 中的物理文件包含哪四种？', 'a96682c7-6cee-4444-abc6-b9dea5cccef4.', null, null, null, null, null, null, '1)数据文件 扩展名为*.DBF\r\n     2)控制文件 扩展名为*.RTL\r\n     3)配置文件 扩展名为*.ORA\r\n     4)日志文件 扩展名为*.DBF', '', '0', '2017-12-27 07:56:08', '68', '1');
INSERT INTO `topic` VALUES ('7365', '33', '4', '. 日志文件（记录文件）有哪几种，分别介绍他们的工作模式。', '68a1d370-845b-48e7-adb7-e2b044fd4326.', null, null, null, null, null, null, '归档日志：当日志写满，完成一次循环之前建立一个副本。这样数据库就可以在损坏中得到恢\r\n复。恢复的过程相当于把建库的所有动作重新做一次。最安全的数据库工作方式，占用空间也最大\r\n非归档日志：日志写满后，直接覆盖，它只是部分地记录数据库操作，所以恢复能力有限。', '', '0', '2017-12-27 07:56:25', '68', '1');
INSERT INTO `topic` VALUES ('7366', '33', '4', '简要写出在 system 方案中建立序列 xl 的步骤。', 'f958004e-6ab8-4933-9c19-80e342ce1d63.', null, null, null, null, null, null, 'CREATE SQUENCE SYSTEM.XL\r\nSTART WHITH 1\r\nINCREMENT BY 1\r\nMINVALUE 1\r\nNOMAXVALUE\r\nNOCYCLE\r\nNOCACHE\r\nORDER;', '', '0', '2017-12-27 07:56:44', '68', '1');
INSERT INTO `topic` VALUES ('7367', '26', '4', '写出 SQL 语句，向表中插入一条记录，其中 ID 字段的值来自序列 XL。', '2b821a1c-f2d9-4503-bd29-1728fe70282b.', null, null, null, null, null, null, 'INSERT INTO SYSTEM.TABLE1 VALUES(XL.NEXTVAL,’TOM’,21,’男’,2000);', '', '0', '2017-12-27 07:57:13', '68', '1');
INSERT INTO `topic` VALUES ('7368', '3', '4', 'File访问文件常用的方法', '19eaf150-f5d9-49de-946c-2b873f27fd5f.', null, null, null, null, null, null, ' 1，GETNAME   返回FILE对象的文件名或目录名\r\n     2，GETPATH   返回FILE对象的文件或目录的路径\r\n     3，GETABSOLUTEFILE 返回FILE对象所对应的绝对路径对应的FILE对象 \r\n     4，GETABSOLUTEPATH 电话FILE对象的绝对路径名\r\n     5，RENAMETO   重命名FILE对象的文件名\r\n     6，GETPARENT  返回FILE对象的上一级的父目录', '', '0', '2017-12-27 07:57:41', '63', '1');
INSERT INTO `topic` VALUES ('7369', '32', '4', '用 SQL 语句创建个一个视图，这个视图用来显示 ID&gt;1000 的记录；', 'a4954c6c-d6fb-4cd2-abfb-fe4038221311.', null, null, null, null, null, null, 'CREATE VIEWST AS SELECT * FROM TABLE1 WHERE ID>1000;', '', '0', '2017-12-27 07:57:50', '68', '1');
INSERT INTO `topic` VALUES ('7370', '3', '4', '什么是节点流，什么是处理流，哪些流是节点流，哪些是处理流？', '552246b4-4680-477d-9f42-545c3f56d5a0.', null, null, null, null, null, null, ' 节点流：从/向一个特定的I/O设备读/写数据的流\r\n     处理流：对一个已存在的节点流进行连接和封装，通过封装后的流来实现数据的读/写功能\r\n     节点流有：\r\n        FILEINPUTSTREAM 访问文件   从文件中以字节的形式把信息读到JAVA程序中\r\nFILEOUTPUTSTREAM        访问文件   从JAVA程序中把信息以字节的形式写入文件中\r\nBYTEARRAYINPUTSTREAM    访问数组   从缓冲数组中以字节的形式把信息读中到JAVA程序\r\nBYTEARRAYOUTPUTSTREAM   访问数组   从JAVA程序中以字节的形式把信息写入缓冲数组里\r\n        FILEREADER 访问文件   从文件中以字符的形式把信息读到JAVA程序中\r\nFILEWRITER  访问文件   从JAVA程序中以字符的形式把信息写入文件中\r\nCHARARRAYREADER\r\n访问数组   从缓冲数组中以字符的形式把信息读中到JAVA程序\r\nCHARARRAYWRITER\r\n访问数组   从JAVA程序中以字符的形式把信息写入缓冲数组里\r\nSTRINGREADER  访问字符串 把字符串的字符流读到JAVA程序中\r\nSTRINGWRITER  访问字符串 把字符串写入到STRINGWRITER流中\r\n     处理流有：\r\nBUFFEREDINPUTSTREAM     缓冲流     从缓冲区里以字节的形式把信息读到JAVA程序中\r\nBUFFEREDOUTPUTSTREAM    缓冲流     把JAVA程序中的信息字节的形式写入缓冲区里\r\nPRINTSTREAM  打印流     把JAVA程序中信息以字节的形式打印到输出台或指定的文件里\r\nPUSHBACKINPUTSTREAM     推回输入流   把指定的字节重新推回到输入流中\r\n        OBJECTINPUTSTREAM       对象流     把文件中的对象信息以字节的形式读入到JAVA程序中\r\nOBJECTOUTPUTSTREAM      对象流     把对象以字节的形式写入到文件中，并以二进制的形式保存在文件里\r\nDATAINPUTSTREAM         特殊流     把文件中保存的八大基本类型和字符串读入到JAVA程序中\r\nDATAOUTPUTSTEAM         特殊流     把八大基本类型和字符串写入到指定的文件中\r\nBUFFEREDREADER          缓冲流     从缓冲区中把信息以字符的形式读入到JAVA程序中\r\nBUFFEREDWRITER\r\n缓冲流     把JAVA程序中信息以字符的形式写入到文件中\r\nPRINTWRITER  打印流     把JAVA程序中的信息以字符的形式打印到输出台或指定的文件中\r\nINPUTSTREAMREADER\r\n转换流     把文件的字节信息以字符的形式读入到JAVA程序中   \r\nOUTPUTSTREAMWRITER      转换流     从JAVA程序中把字符以字节的形式写入到指定的文件中\r\nPUSHBACKREADER\r\n推回输入流  把指定的字符重新推回到输入流中', '', '0', '2017-12-27 07:58:50', '63', '1');
INSERT INTO `topic` VALUES ('7371', '3', '4', '写出所遇到常见的异常', '62666d9b-561a-4c5e-b598-bc901fa12152.', null, null, null, null, null, null, 'FILENOTFOUNDEXCEPTION      找不到文件异常\r\n     IOEXCEPTION IO异常\r\n     NULLPOINTEREXCEPTION       空指针异常\r\n     ARRAYINDEXOUTOFBOUNDSEXCEPTION        数组越界异常\r\n     CLASSCASTEXCEPTION         类型强转异常\r\n     ARITHMETICEXCEPTION        算术异常\r\n     CLASSNOTFOUNDEXCEPTION     类找不到异常', '', '0', '2017-12-27 07:59:13', '63', '1');
INSERT INTO `topic` VALUES ('7372', '3', '4', '递归概述', '0fc6daa0-9770-4e19-afbf-70a41eabdffa.', null, null, null, null, null, null, '定义：递归就是在方法里自己调用自己\r\n       递归的出口：使用RETURN语句\r\n       好处：代码更加简洁清晰，可读性更好\r\n       坏处：递归太深的话，资源不够，或者直接栈溢出\r\n       经常使用的地方：迭代树和迭代链表\r\n', '', '0', '2017-12-27 08:00:05', '63', '1');
INSERT INTO `topic` VALUES ('7373', '3', '4', '队列和栈的比较', 'e7554c97-8935-4517-9b37-25f93816a48d.', null, null, null, null, null, null, ' 队列是先进先出（FIFO）\r\n       栈是后进先出（LIFO）\r\n', '', '0', '2017-12-27 08:00:38', '63', '1');
INSERT INTO `topic` VALUES ('7374', '3', '4', '二叉树的查询', '8d40b1e0-9e9e-479c-838c-1394a6d9f150.', null, null, null, null, null, null, '前序查询：中，左，右\r\n      中序查询：左，中，右\r\n      后序查询：左，右，中', '', '0', '2017-12-27 08:00:56', '63', '1');
INSERT INTO `topic` VALUES ('7375', '4', '4', '在项目中用过 Spring 的哪些方面？及用过哪些 Ajax 框架？', 'aa8e0e30-64a0-4118-bceb-00d98ff0c6f4.', null, null, null, null, null, null, '在项目使用过SPRING IOC ，AOP，DAO，ORM，还有上下文环境。\r\n     在项目使用过EXT,JUERY 等 AJAX 框架.', '', '0', '2017-12-27 08:01:03', '68', '1');
INSERT INTO `topic` VALUES ('7376', '4', '4', 'MVC 模式中 M，V，C 每个代表意义，并简述在 Struts 中 MVC 的表现方式。', '81fd6b93-19e5-4028-864f-7dd499ba8535.', null, null, null, null, null, null, 'MVC 是 MODEL-VIEW-CONTROLLER 的缩写，MODEL 代表的是应用的业务逻辑（通过JAVABEAN，EJB 组件\r\n实现）  ，VIEW 是应用的表示层（由 JSP 页面产生）CONTROLLER 是通过应用的处理过程控制，                    （一般是\r\n一个 SERVERT）通过这种设计模型把应用逻辑，处理过程和显示逻辑分成不同的组件实现，这些组件\r\n可以进行交互和重用。\r\n在 STRUTS 框架中 CONTROLLER 功能由 ACTIONSERVLET 和 ACTIONMAPPING 对象构成，    核心是一个 SERVLET\r\n类 型的对象 ACTIONSERVLET ，它 用来接 收客户 端的 请求 。 ACTIONSERVLET 包 括一 组基于 配置 的\r\nACTIONMAPPING 对象，每个 ACTIONMAPPING 对象实现了一个请求到一个具体的 MODEL 部分的 ACTION\r\n处理器对象之间的映射。           MODEL 部分由 ACTION 和 ACTIONFORM 对象构成。    所有的 ACTION 处理器对象都\r\n是开发者从 STRUTS 的 ACTION 类派生的子类。         ACTION 处理器对象封装了具体的处理逻辑，            调用业务逻\r\n辑模块，    并且把响应提交到合适的 VIEW 组件以产生响应。                STRUTS 提供的 ACTIONFORM 组件对象可以通\r\n过定义属性描述客户端表单数据，开发者可以从它派生子类对象，并利用它和 STRUTS 提供的自定义\r\n标记库相结合，       可以实现对客户端的表单数据的良好封装和支持，                    ACTION 处理器对象可以直接对它进\r\n行读写，而不再需要和REQUEST、RESPONSE 对象进行数据交互。通过 ACTIONFORM 组件对象实现了对\r\nVIEW 和 MODEL 之间交互的支持（VIEW 部分是通过 JSP 技术实现的）               。STRUTS 提供了自定义的标记库，\r\n通过这些自定义标记库可以非常容易地和系统的 MODEL 部分交互，通过使用这些自定义标记库创建的\r\nJSP 表单，可以实现对 MODEL 部分中的 ACTIONFORM 的映射，完成对用户数据的封装。\r\n ', '', '0', '2017-12-27 08:01:34', '68', '1');
INSERT INTO `topic` VALUES ('7377', '26', '4', ' 用于类和接口的关键字', '841740cf-84a4-4bfb-9634-1e4e1f1d16ba.', null, null, null, null, null, null, '定义类的是CLASS，如类文件的开头都是：PUBLIC CLASS 类名{ }\r\n定义接口的是INTERFACE，如PUBLIC INTERFACE 接口名{ }\r\n用于实现接口的是IMPLEMENTS。', '', '0', '2017-12-27 08:01:53', '63', '1');
INSERT INTO `topic` VALUES ('7378', '33', '4', '请解释分布式事务管理？', '3c73ade0-ffa5-4c67-9db8-9efe47d01b51.', null, null, null, null, null, null, '分布式事务是指事务的参与者、支持事务的服务器、资源服务器以及事务管理器分别位于不同\r\n的分布式系统的不同节点之上。为了实现分布式事务，需要使用下面将介绍的两阶段提交协议。阶\r\n段一：开始向事务涉及到的全部资源发送提交前信息。此时，事务涉及到的资源还有最后一次机会来\r\n异常结束事务。如果任意一个资源决定异常结束事务，则整个事务取消，不会进行资源的更新。否则，\r\n事务将正常执行，除非发生灾难性的失败。为了防止会发生灾难性的失败，所有资源的更新都会写入\r\n到日志中。这些日志是永久性的，因此，这些日志会幸免遇难并且在失败之后可以重新对所有资源进\r\n行更新。 阶段二：只在阶段一没有异常结束的时候才会发生。此时，所有能被定位和单独控制的资\r\n源管理器都将开始执行真正的数据更新。 在分布式事务两阶段提交协议中，有一个主事务管理器负\r\n责充当分布式事务协调器的角色。事务协调器负责整个事务并使之与网络中的其他事务管理器协同工\r\n作。 为了实现分布式事务，必须使用一种协议在分布式事务的各个参与者之间传递事务上下文信息，\r\nIIOP 便是这种协议。      这就要求不同开发商开发的事务参与者必须支持一种标准协议，                  才能实现分布式\r\n的事务。', '', '0', '2017-12-27 08:02:03', '68', '1');
INSERT INTO `topic` VALUES ('7379', '3', '4', '如何创建一个构造方法？要注意哪些？', '9ebfcbba-ed92-4185-bb2d-c1116eac728c.', null, null, null, null, null, null, '构造器是为了创建一个类的实例PLATYPUS P1 = NEW PLATYPUS();\r\n注意：方法名与类名一致', '', '0', '2017-12-27 08:02:24', '63', '1');
INSERT INTO `topic` VALUES ('7380', '33', '4', ' XML文档定义有几种形式？解析XML文档有哪几种方式？在项目中如何应用XML？', '5000bf9c-128e-4897-ab6b-7df40db7bedb.', null, null, null, null, null, null, '1）两种形式：DTD以及SCHEMA；\r\n    2）本质区别：SCHEMA本身是XML的，可以被XML解析器解析(这也是从DTD上发展SCHEMA的根本目的)；\r\n    3）解析方式：有DOM,SAX,STAX等：\r\n       DOM:处理大型文件时其性能下降的非常厉害。这个问题是由DOM的树结构所造成的，这种结构占用的内存较多，而且DOM必须在解析文件之前把整个文档装入内存,适合对XML的随机访问；\r\n       SAX:不同于DOM,SAX是事件驱动型的XML解析方式。它顺序读取XML文件，不需要一次全部装载整个文件。当遇到像文件开头，文档结束，或者标签开头与标签结束时，它会触发一个事件，用户通过在其回调事件中写入处理代码来处理XML文件，适合对XML的顺序访问；\r\n       STAX:STREAMING API FOR XML (STAX)。', '', '0', '2017-12-27 08:02:24', '68', '1');
INSERT INTO `topic` VALUES ('7381', '3', '4', '类的组成 和执行顺序', '61c4fce8-ad2d-4ac4-ab5c-1235565913f4.', null, null, null, null, null, null, '组成:属性 方法  静态块 非静态块\r\n执行顺序： 先父类,后子类,静态块 静态字段 非静态块 非静态字段 构造器 方法', '', '0', '2017-12-27 08:02:42', '63', '1');
INSERT INTO `topic` VALUES ('7382', '3', '4', 'main方法必须被什么修饰？', '7514efb6-1cfe-4d26-a9a2-1008ca160665.', null, null, null, null, null, null, '方法名必须是MAIN 是被PUBLIC STATIC VOID 修饰 传入STRING数组', '', '0', '2017-12-27 08:03:04', '63', '1');
INSERT INTO `topic` VALUES ('7383', '4', '4', '简述基于 Struts 框架 Web 应用的工作流程', 'd715b009-7f6f-47e6-903f-33e7dc318894.', null, null, null, null, null, null, '在 WEB 应用启动时就会加载初始化ACTIONSERVLET,ACTIONSERVLET 从 STRUTS-CONFIG.XML 文件\r\n中读取配置信息,把它们存放到各种配置对象中， 当 ACTIONSERVLET 接收到一个客户请求时,将执行\r\n如下流程.\r\n1)检索和用户请求匹配的 ACTIONMAPPING 实例,如果不存在,就返回请求路径无效信息;\r\n2)如果 ACTIONFORM 实例不存在,就创建一个ACTIONFORM 对象,把客户提交的表单数据保存到\r\nACTIONFORM 对象中;\r\n3)根据配置信息决定是否需要表单验证.如果需要验证,就调用 ACTIONFORM 的 VALIDATE()方法;\r\n4)如果 ACTIONFORM 的 VALIDATE()方法返回 NULL 或返回一个不包含ACTIONMESSAGE 的 ACTIONERRORS\r\n对象, 就表示表单验证成功;\r\n5)ACTIONSERVLET 根据 ACTIONMAPPING 所包含的映射信息决定将请求转发给哪个 ACTION,如果相应的\r\nACTION 实例不存在,就先创建这个实例,然后调用 ACTION 的 EXECUTE()方法;\r\n6)ACTION 的 EXECUTE()方法返回一个 ACTIONFORWARD 对象,ACTIONSERVLET 在把客户请求转发给\r\nACTIONFORWARD 对象指向的 JSP 组件;\r\n7)ACTIONFORWARD 对象指向 JSP 组件生成动态网页,返回给客户;', '', '0', '2017-12-27 08:03:26', '68', '1');
INSERT INTO `topic` VALUES ('7384', '3', '4', 'Bit 和byte是什么意思呢 他们之间的有什么关系呢', '2ca23391-52a1-4e4a-be48-a99ee08f3e95.', null, null, null, null, null, null, 'BIT中文名称是位，用以描述电脑数据量的最小单位\r\nBYTE字节是计算机信息技术用于存储容量和传输容量的最小单位。\r\n1BYTE =8BIT', '', '0', '2017-12-27 08:04:05', '68', '1');
INSERT INTO `topic` VALUES ('7385', '3', '4', ' 编写一个程序，用来计算 1 到 100 间所有整数的和是多少？', '7ea2d464-11c1-493f-a799-fd460228e31f.', null, null, null, null, null, null, 'PUBLIC STATIC VOID GETSUM()\r\n {\r\n  INT SUM = 0;\r\n  FOR(INT I=1;I<=100;I++)\r\n   {\r\n   SUM+=I;\r\n   }\r\n  SYSTEM.OUT.PRINTLN(\"和为：\"+SUM);\r\n }', '', '0', '2017-12-27 08:04:39', '68', '1');
INSERT INTO `topic` VALUES ('7386', '3', '4', '请简单写出用 JAVA 连接 Oracle 数据库，          并执行一条/SQL 语句。只需要写关键几条语句即可，', '3df236cd-6feb-4b1f-a51e-303c93a769da.', null, null, null, null, null, null, '                                                       （                  /SQL\r\n语句：SELECT*FROMT_USERS WHERE USERS_ID=‘1111’     ）\r\n解答：\r\n        CLASS.FORNAME(\"ORACLE.JDBC.ORACLEDRIVER\");\r\n        STRING URL = \"JDBC:ORACLE:THIN:@127.0.0.1:1521:ORCL\";\r\n        STRING USER = \"SCOTT\";\r\n        STRING PASSWORD = \"TIGER\";\r\n        CONNECTION CON = DRIVERMANAGER.GETCONNECTION(URL, USER, PASSWORD);\r\n        STATEMENT STM = CON.CREATESTATEMENT();\r\nRESULTSET RS = STM\r\n                .EXECUTEQUERY(\"SELECT*FROM T_USERS WHERE USERS_ID=\'1111\'\");\r\n        WHILE (RS.NEXT()) {\r\n            // 取值\r\n        }\r\n        RS.CLOSE();\r\n        STM.CLOSE();\r\n        CON.CLOSE();', '', '0', '2017-12-27 08:05:06', '68', '1');
INSERT INTO `topic` VALUES ('7387', '33', '4', ' 实现函数 public String[ ] array(List list)，其中参数 list 中元素类型为字符串', '9c380d4d-850f-422a-9253-a7183de6a5ec.', null, null, null, null, null, null, 'PUBLIC STRING[] ARRAY(LIST LIST) {\r\n       STRING[] ELEMENTDATA = NEW STRING[LIST.SIZE()];\r\n       FOR(INT I=0;I<LIST.SIZE();I++){\r\n            ELEMENTDATA[I]=(STRING)LIST.GET(I);\r\n       }\r\n       RETURN ELEMENTDATA ;\r\n    }', '', '0', '2017-12-27 08:05:50', '68', '1');
INSERT INTO `topic` VALUES ('7388', '6', '4', '简要描述 HTML5中的本地存储', '2a16dca6-6730-46c2-bec7-dd0039d9806d.', null, null, null, null, null, null, '\r\n很多时候我们会存储用户本地信息到电脑上，例如：比方说用户有一个填充了一半的长\r\n表格，然后突然网络连接断开了，这样用户希望你能存储这些信息到本地，当网络恢复的时\r\n他想获取这些信息然后发送到服务器进行存储。\r\n现代浏览器拥有的存储被叫做“LOCAL STORAGE”，用于存储这些信息。', '', '0', '2017-12-27 08:08:17', '68', '1');
INSERT INTO `topic` VALUES ('7389', '6', '4', '如何解决跨域问题?', '4a33e9c9-6209-4d80-85d6-b0d8938ed1a5.', null, null, null, null, null, null, '理解跨域的概念：协议、域名、端口都相同才同域，否则都是跨域\r\n\r\n出于安全考虑，服务器不允许AJAX跨域获取数据，但是可以跨域获取文件内容，所以基于这一点，可以动态创建SCRIPT标签，使用标签的SRC属性访问JS文件的形式获取JS脚本，并且这个JS脚本中的内容是函数调用，该函数调用的参数是服务器返回的数据，为了获取这里的参数数据，需要事先在页面中定义回调函数，在回调函数中处理服务器返回的数据，这就是解决跨域问题的主流解决方案', '', '0', '2017-12-27 08:09:04', '68', '1');
INSERT INTO `topic` VALUES ('7390', '6', '4', '页面编码和被请求的资源编码如果不一致如何处理？', '2f88db30-9797-4c85-b00b-23d1578d8a60.', null, null, null, null, null, null, '对于AJAX请求传递的参数，如果是GET请求方式，参数如果传递中文，在有些浏览器会乱码，不同的浏览器对参数编码的处理方式不同，所以对于GET请求的参数需要使用 ENCODEURICOMPONENT函数对参数进行编码处理，后台开发语言都有相应的解码API。对于POST请求不需要进行编码', '', '0', '2017-12-27 08:09:19', '68', '1');
INSERT INTO `topic` VALUES ('7391', '6', '4', '简述ajax 的过程。', 'fc5f5940-34cf-465b-8f9c-94e4fd29ec01.', null, null, null, null, null, null, '1. 创建XMLHTTPREQUEST对象,也就是创建一个异步调用对象\r\n\r\n2. 创建一个新的HTTP请求,并指定该HTTP请求的方法、URL及验证信息\r\n\r\n3. 设置响应HTTP请求状态变化的函数\r\n\r\n4. 发送HTTP请求\r\n\r\n5. 获取异步调用返回的数据\r\n\r\n6. 使用JAVASCRIPT和DOM实现局部刷新', '', '0', '2017-12-27 08:09:34', '68', '1');
INSERT INTO `topic` VALUES ('7392', '6', '4', '阐述一下异步加载JS。', '27302a21-fc45-454a-a9fc-aa9a0bc26d2c.', null, null, null, null, null, null, '1. 异步加载的方案： 动态插入 SCRIPT 标签\r\n\r\n2. 通过 AJAX 去获取 JS 代码，然后通过 EVAL 执行\r\n\r\n3. SCRIPT 标签上添加 DEFER 或者 ASYNC 属性\r\n\r\n4. 创建并插入 IFRAME，让它异步执行 JS', '', '0', '2017-12-27 08:09:48', '68', '1');
INSERT INTO `topic` VALUES ('7393', '6', '4', 'GET和POST的区别，何时使用POST？', 'c3107dd7-6c0f-4cbb-826f-a433e2ee026e.', null, null, null, null, null, null, 'GET：一般用于信息获取，使用URL传递参数，对所发送信息的数量也有限制，一般在2000个字符，有的浏览器是8000个字符\r\n\r\nPOST：一般用于修改服务器上的资源，对所发送的信息没有限制\r\n\r\n在以下情况中，请使用 POST 请求：\r\n\r\n1. 无法使用缓存文件（更新服务器上的文件或数据库）\r\n\r\n2. 向服务器发送大量数据（POST 没有数据量限制）\r\n\r\n3. 发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠', '', '0', '2017-12-27 08:10:22', '68', '1');
INSERT INTO `topic` VALUES ('7394', '32', '4', '内连接,左连接,右连接的区别', 'f926a0be-59be-49b4-9ec7-cbf9a23c8e66.', null, null, null, null, null, null, ' **内连接：指主表，从表中符合连接条件的记录全部显示\r\n **左连接：外连接方式，主要是显示主表，从表中符合连接条件的记录，并且主表中所有不符合连接条件的记录也要显示。\r\n **右连接：外连接方式，主要是显示主表，从表中所有符合连接条件的记录，并且从表中不符合的记录也要显示。', '', '0', '2017-12-27 08:10:39', '63', '1');
INSERT INTO `topic` VALUES ('7395', '5', '4', 'ajax 是什么?ajax 的交互模型?同步和异步的区别?如何解决跨域问题?', 'e6651531-9d18-41b0-a8e2-410e0fbf1e1a.', null, null, null, null, null, null, '1. 通过异步模式，提升了用户体验\r\n\r\n 2. 优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用\r\n\r\n3.  AJAX在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。', '', '0', '2017-12-27 08:10:42', '68', '1');
INSERT INTO `topic` VALUES ('7396', '32', '4', '存储过程 、函数 、游标 在项目中怎么用的', 'db6ad22e-85b2-4bc4-ad6d-5d2d7ea25802.', null, null, null, null, null, null, '**存储过程：能够批量执行的一组SQL语句，且容易控制事务。但没有返回值，可以通过设置IN OUT|OUT类型的参数返回结果\r\n **函数：    与过程相似，返回值类型，并且语句中有返回语句RETURN 变量；\r\n **游标：    是查询结果返回的结果集首地址指针。可以定义REF引用游标，依次取得记录并批量操作。', '', '0', '2017-12-27 08:11:00', '63', '1');
INSERT INTO `topic` VALUES ('7397', '32', '4', '索引是用来干什么的，有那些约束建立索引。说下你怎么使用索引的？使用索引的好处和坏处？', 'ad9945bf-d508-43c8-9889-60749b95277e.', null, null, null, null, null, null, '索引用于对指定字段查询时，提升查询速度。\r\n **主要有B树索引，位图索引，函数索引。\r\n **对查询频率比较高的字段做索引，但一张表不要做太多索引。\r\n **索引能提升查询效率，但它占用存储空间，且在更新数据时也会影响更新效率。', '', '0', '2017-12-27 08:11:20', '63', '1');
INSERT INTO `topic` VALUES ('7398', '6', '4', 'ajax请求的时候get 和post方式的区别', 'ba9de71a-1c05-45b8-a643-101bee7d7b08.', null, null, null, null, null, null, 'GET一般用来进行查询操作，URL地址有长度限制，请求的参数都暴露在URL地址当中，如果传递中文参数，需要自己进行编码操作，安全性较低。\r\n\r\nPOST请求方式主要用来提交数据，没有数据长度的限制，提交的数据内容存在于HTTP请求体中，数据不会暴漏在URL地址中。', '', '0', '2017-12-27 08:11:24', '68', '1');
INSERT INTO `topic` VALUES ('7399', '6', '4', '什么是Ajax和JSON，它们的优缺点。', '73a3b453-f2ee-40a4-966c-f0f449d5a472.', null, null, null, null, null, null, 'AJAX是全称是ASYNCHRONOUS JAVASCRIPT ANDXML，即异步JAVASCRIPT和XML，用于在WEB页面中实现异步数据交互，实现页面局部刷新。\r\n\r\n优点：可以使得页面不重载全部内容的情况下加载局部内容，降低数据传输量，避免用户不断刷新或者跳转页面，提高用户体验\r\n\r\n缺点：对搜索引擎不友好；要实现AJAX下的前后退功能成本较大；可能造成请求数的增加跨域问题限制；\r\n\r\nJSON是一种轻量级的数据交换格式，ECMA的一个子集\r\n\r\n优点：轻量级、易于人的阅读和编写，便于机器（JAVASCRIPT）解析，支持复合数据类型（数组、对象、字符串、数字）', '', '0', '2017-12-27 08:11:44', '68', '1');
INSERT INTO `topic` VALUES ('7400', '5', '4', 'http常见的状态码有那些？分别代表是什么意思？', '53298591-181e-4afc-810d-5ee3501be387.', null, null, null, null, null, null, '200 - 请求成功\r\n\r\n301 - 资源（网页等）被永久转移到其它URL\r\n\r\n404 - 请求的资源（网页等）不存在\r\n\r\n500 - 内部服务器错误', '', '0', '2017-12-27 08:12:00', '68', '1');
INSERT INTO `topic` VALUES ('7401', '5', '4', '一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？', '8683e4b1-edff-405a-917a-99408e2d7efa.', null, null, null, null, null, null, '分为4个步骤：\r\n\r\n1. 当发送一个 URL 请求时，不管这个 URL 是 WEB 页面的 URL 还是 WEB 页面上每个资源的 URL，浏览器都会开启一个线程来处理这个请求，同时在远程 DNS 服务器上启动一个 DNS 查询。这能使浏览器获得请求对应的 IP 地址。\r\n\r\n2. 浏览器与远程 WEB 服务器通过 TCP 三次握手协商来建立一个 TCP/IP 连接。该握手包括一个同步报文，一个同步-应答报文和一个应答报文，这三个报文在 浏览器和服务器之间传递。该握手首先由客户端尝试建立起通信，而后服务器应答并接受客户端的请求，最后由客户端发出该请求已经被接受的报文。\r\n\r\n3. 一旦 TCP/IP 连接建立，浏览器会通过该连接向远程服务器发送 HTTP 的 GET 请求。远程服务器找到资源并使用 HTTP 响应返回该资源，值为 200 的 HTTP 响应状态表示一个正确的响应。\r\n\r\n4. 此时，WEB 服务器提供资源服务，客户端开始下载资源。', '', '0', '2017-12-27 08:12:17', '68', '1');
INSERT INTO `topic` VALUES ('7402', '32', '1', ' Oracle数据库属于以下哪种数据库类型？', 'fcb364cc-f6e9-4e62-a13e-48bd4f449701.', '网状数据库', '关系数据库', '层次数据库', '面向对象数据库和关系数据库', '', '', 'B', '', '0', '2017-12-27 08:12:32', '63', '1');
INSERT INTO `topic` VALUES ('7403', '6', '4', 'Ajax包含下列技术：', 'a10fbb33-febd-4def-a8c4-176f4994e4f0.', null, null, null, null, null, null, '基于WEB标准（STANDARDS-BASEDPRESENTATION）XHTML+CSS的表示；\r\n使用 DOM（DOCUMENT OBJECTMODEL）进行动态显示及交互；\r\n使用 XML 和 XSLT 进行数据交换及相关操作；\r\n使用 XMLHTTPREQUEST 进行异步数据查询、检索；\r\n使用 JAVASCRIPT 将所有的东西绑定在一起。', '', '0', '2017-12-27 08:12:57', '68', '1');
INSERT INTO `topic` VALUES ('7404', '32', '4', '表空间描述,及作用?', 'd0f43005-9941-4656-ba40-0db60dbeda8c.', null, null, null, null, null, null, 'TABLESPACE  --表空间对应用户数据的存储，在创建用户时一般会指定表空间，如果没，默认为USERS.\r\n      存储用户的所有对象。\r\n       表空间包括：数据段SEGEMNET --数据区EXTENTS --数据块DATA BLOCK，\r\n       一个数据文件只能存储在一个表空间中。', '', '0', '2017-12-27 08:13:02', '63', '1');
INSERT INTO `topic` VALUES ('7405', '3', '4', '为什么要用线程池:', '4563b2b6-4c5e-4464-ac91-43f8e8e57b45.', null, null, null, null, null, null, '1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。\r\n2.可以根据系统的承受能力，调整线程池中工作线线程的数目，\r\n防止因为消耗过多的内存，而把服务器累趴下(每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机)。', '', '0', '2017-12-27 08:15:46', '63', '1');
INSERT INTO `topic` VALUES ('7406', '33', '4', 'jsp可以操作窗口吗？', '5fcc34c2-0ed3-4dfb-8cd8-aef8708f0956.', null, null, null, null, null, null, 'JSP不能够直接调用窗口，只能先 生成打开窗口的JS，再由JS调用', '', '0', '2017-12-27 08:16:59', '63', '1');
INSERT INTO `topic` VALUES ('7407', '33', '4', '.jsp的执行原理', '75764929-095c-4945-81c5-12830eef22c5.', null, null, null, null, null, null, '客户端发出请求(REQUEST)，JSP引擎将JSP页面翻译成SERVLET的JAVA源文件，在TOMCAT中将源文件编译成CLASS文件，并加载到内存中执行，把结果返回(RESPONSE)给客户端。', '', '0', '2017-12-27 08:17:31', '63', '1');
INSERT INTO `topic` VALUES ('7408', '33', '4', 'request ，response，session 和 application是怎么用的', '6fb1bc2c-9a13-41ad-8a3c-7783d15a77a2.', null, null, null, null, null, null, 'REQUEST是客户端向服务端发送请求\r\nRESPONSE是服务端对客户端请求做出响应\r\nSESSION在SERVLET中不能直接使用，需要通过GETSESSION()创建，如果没有设定它的生命周期，或者通过INVILDATE()方法销毁，关闭浏览器SESSION就会消失\r\nAPPLICATION不能直接创建，存在于服务器的内存中，由服务器创建和销毁', '', '0', '2017-12-27 08:18:13', '63', '1');
INSERT INTO `topic` VALUES ('7409', '4', '4', '什么是MyBatis?', '92ef9b89-9d28-476c-a358-224d95e8319c.', null, null, null, null, null, null, 'MYBATIS最早源自APACHE基金会的一个开源项目IBATIS,2010年这个项目由APACHE SOFTWARE FOUNDATION迁移到了GOOGLE CODE,并且改名为MYBATIS;MYBATIS是支持普通SQL查询,存储过程和高级映射的优秀持久层框架.MYBATIS封装了几乎所有的JDBC代码和参数的手工设置以及结果集的检索;MYBATIS使用简单的XML或注解做配置和定义映射关系,将JAVA的POJOS(PLAIN OLD JAVA OBJECTS)映射城数据库中的记录.', '', '0', '2017-12-27 08:20:04', '63', '1');
INSERT INTO `topic` VALUES ('7410', '3', '4', ' struts如何实现国际化 ', '8f3a1a0f-fc87-462d-988f-3d9398e4ec16.', null, null, null, null, null, null, '1. 在工程中加入STRUTS支持      2. 编辑APPLICATIONRESOURCE.PROPERTIES文件,在其中加入要使用国际化的信息, 例如： LABLE.WELCOME.CHINA=WELCOME!!!      3. 创建英文资源文件APPLICATIONRESOURCE_EN.PROPERITES      4. 创建临时中文资源文件APPLICATIONRESOURCE_TEMP.PROPERITES 例如：LABLE.WELCOM.CHINA=中国欢迎您!     5. 对临时中文资源文件进行编码转换。可以使用MYECLIPSE的插件,也可以在DOS下执行:        NATIVE2ASCII  -ENCODING  GB2312  APPLICATIONRESOURCE_TEMP.PROPERTIES  APPLICATIONRESOURCE_ZH_CN.PROPERTIES      6. 在JSP中加入STRUTS的BEAN标记库 <%@ TAGLIB URI=\"/WEB-INF/STRUTS-BEAN.TLD\" PREFIX=\"BEAN\"%>        显示信息： <BEAN:MESSAGE KEY=\"LABEL.WELCOME.CHINA\">  可以在STRUTS-CONFIG.XML文件中定义多个资源包，而每个资源包可使用KEY属性指定包的名称。', '', '0', '2017-12-27 08:32:47', '63', '1');
INSERT INTO `topic` VALUES ('7411', '3', '4', '什么是常量?常量的分类?字面值常量表现形式有哪些?', '49d9ad44-9615-49f4-8170-54daf0cadc06.', null, null, null, null, null, null, '在程序的运行过程中其值不发生改变的量。\r\n字面值常量： 1 14 \r\n自定义常量： INT MAX = 100;', '', '0', '2017-12-27 08:39:16', '63', '1');
INSERT INTO `topic` VALUES ('7412', '3', '4', '什么是标识符?由哪些部分组成?常见的命名规则有哪些?\r\n', '2c9db029-a26a-4c32-9caa-0369fdc44d55.', null, null, null, null, null, null, '标识符就是给类、接口、方法、变量名起的名字。常见的规则有：有数字、字母、_以及$符号组成，不能以数字开头，不能是JAVA中的关键字。', '', '0', '2017-12-27 08:39:38', '63', '1');
INSERT INTO `topic` VALUES ('7413', '3', '4', '什么是变量?变量的定义格式?要使用变量需要注意什么?', '5446531b-4ea6-4c4c-aa6d-15a1b879f1d2.', null, null, null, null, null, null, '在程序运行过程中，其值是可以在某个范围内发生改变的量。\r\n变量其实就是内存中一小块区域。\r\n由3部分组成：\r\n1，数据类型: 限定变量的取值\r\n2，变量名：方便使用。\r\n3，值： 如果没有值就没有意义。\r\n', '', '0', '2017-12-27 08:39:56', '63', '1');
INSERT INTO `topic` VALUES ('7414', '3', '4', '逻辑运算符有哪些都有什么作用？', '1d840e3f-e237-4b21-b28d-2b8baa30ba36.', null, null, null, null, null, null, '&:有FALSE则FALSE\r\n|:有TRUE则TRUE\r\n^:相同为FALSE，不同为TRUE。通过情侣关系来理解。\r\n!:非FALSE则TRUE,非TRUE则FALSE。偶数次不改变以前的真假。\r\n&&:和&的结果一样,但是具有短路效果。左边有FALSE,右边不执行。\r\n||:和|的结果一样,但是具有短路效果。左边有TRUE,右边不执行。\r\n', '', '0', '2017-12-27 08:40:23', '63', '1');
INSERT INTO `topic` VALUES ('7415', '3', '4', '位移运算符有什么不同？', '40447977-8f6d-4c11-9054-12ba1c6a61fc.', null, null, null, null, null, null, '要想操作，就必须把所有的数据转换为二进制。然后操作。\r\n\r\n\r\n<<:把数据向左移动，后边补0。其实相当与乘以2的移动位数次幂。\r\n>>:把数据向右移动，左边补是最高位的值。其实相当与除以2的移动位数次幂。\r\n>>>:把数据向右移动，左边补0。其实相当于除以2的移动位数次幂。', '', '0', '2017-12-27 08:40:45', '63', '1');
INSERT INTO `topic` VALUES ('7416', '3', '4', '对象是什么?什么时候需要使用对象?', '61746bc1-fcf2-4277-9de9-bcb2bff6e73c.', null, null, null, null, null, null, '对象是现实世界中实体的描述,是其自身所具有的状态特征及可以对这些状态施加的操作结合在一起所\r\n构成的独立实体.\r\n需要描绘具体事物的时候要使用对象.\r\n', '', '0', '2017-12-27 08:41:11', '63', '1');
INSERT INTO `topic` VALUES ('7417', '3', '4', '封装是什么?自己概述', '5f2d0a16-f19f-48b1-a556-edb2491f1e53.', null, null, null, null, null, null, '概念:把多个类中相同的内容抽取出来,单独定义到一个类(父类)中,再定义其他类(子类)的时候,继承父类即可.\r\n\r\n\r\n好处:1.提高了代码的复用性,降低了代码的重复率.2.提高了代码的维护性3.让类与类之间产生了关系,是多态的前提. \r\n', '', '0', '2017-12-27 08:41:33', '63', '1');
INSERT INTO `topic` VALUES ('7418', '3', '4', '匿名对象是什么?应用场景是什么?', '30fa81a8-efbc-4c28-83fb-f9d52c236cb8.', null, null, null, null, null, null, '匿名对象就是没有名字的对象，由于没有指向，所以效率较高一些。\r\n\r\n应用场景：A：调用方法。但是仅仅只限调用一次而已。B：匿名对象用作实际参数传递。', '', '0', '2017-12-27 08:41:58', '63', '1');
INSERT INTO `topic` VALUES ('7419', '3', '4', '构造方法的作用是什么?构造方法的特点是什么?构造方法的注意事项是什么?', '472aade2-2bdb-4d94-a21d-9ab6fbf3528a.', null, null, null, null, null, null, '构造方法的作用是初始化数据。特点是：名称和类名一致，并且没有返回值类型的修饰和返回值。\r\n\r\n\r\n注意：如果我们没有给构造方法，系统将给出一个无参构造方法。如果我们给出了构造方法，系统将不再提供构造方法。', '', '0', '2017-12-27 08:42:18', '63', '1');
INSERT INTO `topic` VALUES ('7420', '3', '4', '方法重写和方法重载的区别?重载可以改变返回值类型吗?', '9a69da10-36e4-4e7d-9416-5c428c704bff.', null, null, null, null, null, null, '方法重写：\r\n子类中出现和父类中一模一样的方法声明的方法。\r\n\r\n\r\n方法重载：\r\n同一个类中，出现方法名相同，参数列表不同的方法。\r\n跟返回值无关。', '', '0', '2017-12-27 08:42:51', '63', '1');
INSERT INTO `topic` VALUES ('7421', '3', '4', 'static关键字是什么?有什么特点?什么时候用呢?', 'f3bfe023-5474-415e-ad6c-cb3525faefbb.', null, null, null, null, null, null, ' STATIC关键字：是静态的意思，可以修饰类中成员变量和成员方法。\r\n\r\n        静态的特点：随着类的加载而加载、优先与对象而存在、被所有对象所共享、可以通过类名.静态的内容调用。', '', '0', '2017-12-27 08:43:11', '63', '1');
INSERT INTO `topic` VALUES ('7422', '3', '4', 'this和super的区别,以及应用场景? ', 'e8956491-c738-4f90-ae67-6307469d1118.', null, null, null, null, null, null, 'THIS:当前类的引用对象。谁调用代表谁。\r\nSUPER:父类的存储空间标识。可以理解为父类对象，谁调用代表谁父亲。\r\n应用场景：\r\nA:成员变量\r\nTHIS.成员变量  本类的成员变量\r\nSUPER.成员变量  父类的成员变量\r\nB:构造方法\r\nTHIS(...)  本类的构造方法\r\nSUPER(...)  父类的构造方法\r\nC:成员方法\r\nTHIS.成员方法()  本类的成员方法\r\nSUPER.成员方法() 父类的成员方法', '', '0', '2017-12-27 08:43:32', '63', '1');
INSERT INTO `topic` VALUES ('7423', '3', '4', '一个类的实例化过程有哪些步骤？', '04a9323d-d649-4584-ab2d-a4643f51f4e7.', null, null, null, null, null, null, 'STUDENT S = NEW STUDENT(); 在内存中到底执行了哪些步骤。\r\n\r\n      1，加载SUTDENT.CLASS文件进内存(类加载器)\r\n\r\n\r\n      2，在栈内存为 S 变量申请一个空间\r\n\r\n\r\n      3，在堆内存为STUDENT对象申请空间\r\n\r\n\r\n     4，对类中的成员变量进行默认初始化\r\n\r\n\r\n     5，对类中的成员变量进行显示初始化\r\n\r\n\r\n     6，有构造代码块就先执行构造代码块，如果没有，则省略\r\n\r\n\r\n     7，执行构造方法，通过构造方法对对对象数据进行初始化\r\n\r\n\r\n    8，堆内存中的数据初始化完毕，把内存值复制给 S 变量', '', '0', '2017-12-27 08:44:10', '63', '1');
INSERT INTO `topic` VALUES ('7424', '3', '4', '继承是什么?继承的好处是什么?Java中的继承特点是什么?', '10b281bf-e2ea-446b-b2e8-39eb01938d20.', null, null, null, null, null, null, ' 继承就是：把多个类中相同的内容提取出来，定义到一个类中。\r\n                   然后让这多个类和这个类产生一个关系，这多个类就具备该类的数据了。\r\n 这种关系叫：继承。\r\n\r\n\r\n        继承的好处是：提高代码的复用性，提高了代码的维护性,让类与类之间产生了一个关系，是多态的前提。\r\n\r\n\r\n        继承的特点是：JAVA中类只能够单继承，但是可以多层继承。', '', '0', '2017-12-27 08:44:35', '63', '1');
INSERT INTO `topic` VALUES ('7425', '3', '4', '子父类中构造方法的执行有什么特点?为什么要这样?', 'c12b3f17-b215-4f02-8842-599231d0913a.', null, null, null, null, null, null, '子类构造方法的执行，首先会去执行父类的构造方法。\r\n\r\n\r\n因为子类中可能直接访问了父类的数据，父类的数据要优先于子类的数据进行初始化。\r\n', '', '0', '2017-12-27 08:45:03', '63', '1');
INSERT INTO `topic` VALUES ('7426', '3', '4', '静态代码块，构造代码块，构造方法的执行顺序是什么?', '08277608-2dad-4c88-b453-3250f0edda21.', null, null, null, null, null, null, '静态代码块 -- 构造代码块 -- 构造方法', '', '0', '2017-12-27 08:45:26', '63', '1');
INSERT INTO `topic` VALUES ('7427', '3', '4', 'final关键字是什么，可以修饰什么，有什么特点?', 'ad1b2b8c-79fe-42fa-962f-a3b383da3fc7.', null, null, null, null, null, null, '  FINAL关键字：是最终意思，可以修饰类、方法、变量。\r\n修饰类：类不可以被继承。\r\n修饰方法：方法不可被重写\r\n修饰变量：变量为常量。', '', '0', '2017-12-27 08:45:43', '63', '1');
INSERT INTO `topic` VALUES ('7428', '3', '4', '多态是什么，前提是什么?', 'e4b3aec3-09d6-45ac-aa63-2d86b4e9fa8e.', null, null, null, null, null, null, ' 多态：对象在不同时刻表现出来的多种状态。是一种编译时期状态和运行时期状态不一致的现象。\r\n成员变量：编译看左边，运行看左边。\r\n成员方法：编译看左边，运行看右边。因为，普通成员方法可以重写，变量不可以。\r\n静态方法：编译看左边，运行看左边。', '', '0', '2017-12-27 08:45:59', '63', '1');
INSERT INTO `topic` VALUES ('7429', '3', '4', '多态的好处及弊端？如何解决多态的弊端。', 'aa12d930-78ed-44cf-b922-27a4af325ff7.', null, null, null, null, null, null, ' 好处：提高了程序的可维护性(前提要有继承保证)，和扩展性。\r\n  \r\n      弊端：不能使用子类的特有功能。\r\n', '', '0', '2017-12-27 08:46:17', '63', '1');
INSERT INTO `topic` VALUES ('7430', '3', '4', 'abstract不能和哪些关键字共存?', 'c01a627e-74ea-49ec-8c45-4cd0d1ddc74e.', null, null, null, null, null, null, 'FINAL: 冲突\r\nPRIVATE: 冲突\r\nSTATIC: 无意义', '', '0', '2017-12-27 08:46:48', '63', '1');
INSERT INTO `topic` VALUES ('7431', '3', '4', '抽象类和接口的区别? ', 'a1eebecf-8f35-4435-90bc-a6183fa17512.', null, null, null, null, null, null, '  A：成员区别\r\n  抽象类：\r\n成员变量:可以是变量，也可以是常量。\r\n构造方法:有。\r\n成员方法:有，可以是抽象的，也可以是非抽象的。\r\n\r\n 接口：\r\n成员变量:只能是常量。默认修饰符：PUBLCI STATIC FINAL\r\n构造方法:没有，子类数据的初始化默认走的是OJBECT类的构造方法。\r\n成员方法:只能是抽象的，默认修饰符是:PUBLIC ABSTRACT\r\n\r\n\r\nB：类与接口的关系区别\r\n类与类：\r\n继承关系，单继承。\r\n\r\n类与接口：\r\n实现关系，单实现、多实现。\r\n\r\n\r\n接口与接口：\r\n继承关系，单继承、多继承。\r\n\r\n\r\nC：设计理念的区别\r\n抽象类被继承体现的是：IS A的关系。抽象类中一般定义的是整个继承结构的共性功能。\r\n接口被实现体现的是：LIKE A的关系。接口中一般定义的是整个继承结构的扩展功能。\r\n\r\n', '', '0', '2017-12-27 08:47:21', '63', '1');
INSERT INTO `topic` VALUES ('7432', '3', '4', '什么是内部类？有什么特点？', '2e62754f-4e18-4412-ab18-448b48fef8b9.', null, null, null, null, null, null, '把类定义在其他类的内部，就被称为内部类。\r\n\r\n\r\n内部类的访问特点：\r\nA：内部类可以直接访问外部类的成员，包括私有。\r\nB：外部类要访问内部类的成员，必须创建对象。', '', '0', '2017-12-27 08:47:51', '63', '1');
INSERT INTO `topic` VALUES ('7433', '3', '4', '为什么内部类访问局部变量必须加final修饰？', '8da11608-32ee-424e-8c8e-08312cfa6ed5.', null, null, null, null, null, null, 'A: 防止在使用后数据发生改变。\r\nB: 延长变量的生命周期。', '', '0', '2017-12-27 08:48:08', '63', '1');
INSERT INTO `topic` VALUES ('7434', '3', '4', '集合和数组有什么区别？', '96b6ea7e-308e-4fe9-8de0-668612464277.', null, null, null, null, null, null, '集合: \r\n长度可以发生改变。\r\n只能存储对象类型，引用类型。\r\n可以存储任意类型的对象。\r\n数组:\r\n长度固定。\r\n可以存储基本类型，也可以存储引用数据类型。\r\n只能存储同一种类型的元素。', '', '0', '2017-12-27 08:48:35', '63', '1');
INSERT INTO `topic` VALUES ('7435', '3', '4', '集合有多少种？ 各自的特点是什么？', '56e452a7-4b61-4a85-8ede-3b764b3a25f3.', null, null, null, null, null, null, 'COLLECTION\r\n|--LIST 有序(存入和取出的顺序一致)，元素可重复\r\n|--ARRAYLIST\r\n底层数据结构是数组，查询快，增删慢。\r\n线程不安全，效率高。\r\n\r\n|--VECTOR\r\n底层数据结构是数组，查询快，增删慢。\r\n线程安全，效率低。\r\n\r\n|--LINKEDLIST\r\n底层数据结构是链表，查询慢，增删快。\r\n线程不安全，效率高。\r\n\r\n|--SET 无序的 元素唯一\r\n|--HASHSET\r\n|--TREESET\r\n', '', '0', '2017-12-27 08:48:56', '63', '1');
INSERT INTO `topic` VALUES ('7436', '3', '4', '泛型是什么?有什么用?在哪里用?泛型有什么好处和弊端？', '717cb72b-1795-414d-95f6-4228a204118d.', null, null, null, null, null, null, '泛型是一种把明确数据类型的工作推迟到创建对象或者调用方法的时候才去明确的特殊的数据类型。\r\n能优化程序设计，解决了黄色警告线问题。\r\n把运行时期的异常提前到了编译时间。\r\n避免了强制类型转换。\r\n好处：\r\n优化了程序的设计，解决了黄色警告线的问题。\r\n把运行时期的问题提前到了编译时期间解决了。\r\n避免了强制类型转换。\r\n\r\n\r\n弊端：让类型统一了，不能存储不同的数据类型了。\r\n', '', '0', '2017-12-27 08:49:16', '63', '1');
INSERT INTO `topic` VALUES ('7437', '3', '4', '用迭代器遍历集合的时候，用集合修改集合有没有问题？如果有，怎么解决？', '3c44d31b-28ce-426c-881d-7ccd931771b6.', null, null, null, null, null, null, '有问题，因为会出现并发修改异常。\r\n\r\n\r\n解决方法有多种，比如，我们可以不通过集合来修改集合，而使用迭代器来修改集合。\r\n像LISTITERATOR迭代器就有添加方法。', '', '0', '2017-12-27 08:49:36', '63', '1');
INSERT INTO `topic` VALUES ('7438', '3', '4', 'HashSet如何保证元素唯一性的呢?\r\n', '76888ff3-f2cc-485d-97da-a2da4dedf83d.', null, null, null, null, null, null, '底层数据结构是哈希表(散列表)。具体的是由一个元素是单向链表的数组组成。\r\n它依赖于两个方法：HASHCODE()和EQUALS()方法。\r\n执行顺序：\r\n先判断HASHCODE()是否相同，\r\n如果相同\r\n继承执行EQUALS()方法，看其返回值：\r\nTRUE:元素重复，不存储。\r\nFALSE:元素不重复，存储。\r\n如果不同\r\n存储。\r\n\r\n记住：\r\n看到HASHXXX结构的集合，就要知道，被该集合存储的元素要重写HASHCODE()和EQUALS()方法。\r\n而且，是自动生成的。', '', '0', '2017-12-27 08:49:59', '63', '1');
INSERT INTO `topic` VALUES ('7439', '3', '4', 'LinkedHashSet底层数据结构是什么？如何保证元素的唯一性的呢?', '01cd617b-3753-4a4f-b1e2-4718f4a6203a.', null, null, null, null, null, null, '底层由链表和哈希表组成。\r\n由链表保证有序。\r\n由哈希表保证唯一。\r\n', '', '0', '2017-12-27 08:50:26', '63', '1');
INSERT INTO `topic` VALUES ('7440', '3', '4', 'Map和Collection集合的区别？', '3aa18049-79b7-43f4-84d7-3990e91e4659.', null, null, null, null, null, null, 'A:MAP集合存储的是键值对形式的元素。\r\n COLLECTION集合存储的是单个的元素。\r\n\r\nB:MAP集合的键是唯一的。\r\n COLLECTION的子接口SET集合元素是唯一的。\r\n\r\nC:MAP集合的值是可以重复的。\r\n COLLECTION的子接口LIST集合的元素是可以重复的。\r\nD:MAP集合的数据结构仅对键有效,对值无效.\r\n COLLECTION的数据结构是针对元素有效的', '', '0', '2017-12-27 08:50:53', '63', '1');
INSERT INTO `topic` VALUES ('7441', '3', '4', '什么是递归？使用递归需要注意哪些？', '7dfd94d7-1612-4084-8366-ea5951a465f5.', null, null, null, null, null, null, '递归就是方法定义中调用方法本身的现象。\r\n\r\n\r\nA:递归一定要有出口，否则就是死递归。\r\nB:递归的次数不能太多，否则内存溢出。\r\nC:构造方法不能递归使用。', '', '0', '2017-12-27 08:51:39', '63', '1');
INSERT INTO `topic` VALUES ('7442', '3', '4', '基本的IO流有哪些？', '5dd19af2-6ca4-4634-9739-8f245d384ffc.', null, null, null, null, null, null, '字节流：INPUTSTREAM、OUTPUTSTREAM、FILEINPUTSTREAM、FILEOUTPUTSTREAM、\r\n字符流：WRITER、READER、FILEWRITER、FILEREADER、\r\n高效字节流：BUFFEREDINPUTSTREAM、BUFFEREDOUTPUTSTREAM\r\n高效字符流：BUFFEREDWRITER、BUFFEREDREADER\r\n最开始的时候，只有字节流，但是后来由于中文字符或者其他字符的出现，用两个字节才能表示。\r\n如果用字节流也是可以读写字符文件的数据的，但是比较麻烦。为了简化这种操作，就提供了字符流。', '', '0', '2017-12-27 08:52:19', '63', '1');
INSERT INTO `topic` VALUES ('7443', '3', '4', 'flush()和close()的区别？', '5dc4fc5d-77c0-4c3a-98d6-de56e9efabe1.', null, null, null, null, null, null, 'FLUSH():刷新缓冲区，流对象还可以继续使用。\r\nCLOSE():释放流资源，但是会先刷新一次缓冲区，操作完毕后，流对象不可以再使用。\r\n', '', '0', '2017-12-27 08:53:10', '63', '1');
INSERT INTO `topic` VALUES ('7444', '3', '4', '启动线程调用的是run()还是start()方法？run()和start()的区别是什么？', 'a5cbf430-ec1c-4fc4-ba2a-3bc5141812b6.', null, null, null, null, null, null, '启动线程调用的是START()\r\nRUN()封装了被线程执行的代码，START()是启动线程并调用RUN()方法。', '', '0', '2017-12-27 08:53:31', '63', '1');
INSERT INTO `topic` VALUES ('7445', '3', '4', '多线程有几种实现方案？分别是什么？如何操作？', '2a40340a-326b-47e4-90c3-c03cee0493aa.', null, null, null, null, null, null, '多线程有两种实现，分别是：\r\n\r\n1，继承THREAD类\r\n自定义类继承THREAD类，在类中重写RUN()方法，测试类中创建自定义类对象，并调用START()方法\r\n\r\n\r\n2，实现RUNNABLE接口\r\n自定义类实现RUNNABLE接口，重写RUN(）方法，测试类中创建自定义对象，\r\n创建THREAD对象，把自定义对象作为构造参数传递。调用THREAD类的START()方法。', '', '0', '2017-12-27 08:54:50', '63', '1');
INSERT INTO `topic` VALUES ('7446', '3', '4', '线程的生命周期？', 'b5c33441-3070-43b6-821b-771cbda19de1.', null, null, null, null, null, null, '新建： 创建线程对象\r\n就绪： 具备CUP执行资格，没有执行权，随时准备执行\r\n运行： 具备执行资格，执行权，执行RUN()中的代码\r\n堵塞： 是当线程运行到符合某个我们定义的条件时，它会停止下来等待唤醒\r\n死亡： RUN()结束了', '', '0', '2017-12-27 08:55:10', '63', '1');
INSERT INTO `topic` VALUES ('7447', '3', '4', '多线程为什么会出现安全问题？怎么解决呢？', '86dc6fc1-39af-4d96-9905-b2241b28df4b.', null, null, null, null, null, null, 'A：是多线程程序。\r\nB：有共享的数据。  C：针对共享数据有多条语句操作。\r\n \r\n只要我们把多线程环境中，把操作共享数据的操作，变成单线程就没有问题了。\r\nJAVA针对这种情况，就提供了同步技术： \r\nA：同步代码块\r\nB：同步方法\r\nC：JDK5以后的LOCK锁', '', '0', '2017-12-27 08:55:35', '63', '1');
INSERT INTO `topic` VALUES ('7448', '3', '4', '同步的锁对象分别是？', 'd38a6818-417f-4ecd-9d2b-527c5b6c22d8.', null, null, null, null, null, null, '代码块：任意对象\r\n方法：THIS\r\n静态方法：类名.CLASS', '', '0', '2017-12-27 08:55:53', '63', '1');
INSERT INTO `topic` VALUES ('7449', '3', '4', '线程死锁是什么，为什么有死锁，怎么解决死锁？', '5380a74a-4e84-4bfc-8f8e-b76e7ada3f3b.', null, null, null, null, null, null, ' 为了解决程序因占用资源，出现资源争抢，而出现的程序进入等待的状态（死锁）。\r\n        举例：有A和B两个线程，有CD 两把锁， A和B嵌套CD锁，A线程中有C，D锁，B线程中有D C两把锁，当两个线程运行时，就可能会出现死锁导致\r\n程序停滞的情况。\r\n        怎么解决：真正意义上来说，死锁是不能被解决的，死锁是多线程中的一个需要避免的重大的问题，当我们在编写程序时，可以给共享的资源加上另外一\r\n个把锁，控制资源的动态，同时可以设置线程的优先级使线程之间协调合理的利用CPU的时间。', '', '0', '2017-12-27 08:56:19', '63', '1');
INSERT INTO `topic` VALUES ('7450', '3', '4', '线程间的通信是什么？', 'b4143874-c3b5-4273-a3f7-b13a99539c7f.', null, null, null, null, null, null, '不同种类的线程针对同一个资源的操作。', '', '0', '2017-12-27 08:56:35', '63', '1');
INSERT INTO `topic` VALUES ('7451', '3', '4', 'UDP和TCP的区别？', '94681998-c609-427c-a7b3-1e35ac58dcc2.', null, null, null, null, null, null, 'UDP:不建立连接，数据打包传输，数据有限制，数据不可靠，速度快。\r\nTCP:建立连接，数据无限制，数据可靠，速度慢。', '', '0', '2017-12-27 08:57:10', '63', '1');
INSERT INTO `topic` VALUES ('7452', '3', '4', '请解释Java语言的跨平台特性。\r\n ', 'd78aabab-3118-42d5-8764-a965445cc106.', null, null, null, null, null, null, 'JAVA\r\n的跨平台特性也被称为可移植性。他的意思就是如果用\r\nJAVA\r\n语言编写一个应用，\r\n那么就可以在不同平台上运行，而不需要为不同平台单独运行开发。之所以能实现跨平\r\n台的特性。主要得益于\r\nJAVA\r\n虚拟机（\r\nJVM\r\n），\r\nJVM\r\n解释器在运行\r\nJAVA\r\n应用时根据当前平\r\n台进行解释，解释成符合当前平台规范的机器码，所以可以实现同样的应用在不同平台\r\n上都能运行。', '', '0', '2017-12-27 08:59:20', '63', '1');
INSERT INTO `topic` VALUES ('7453', '3', '4', '请列举JAVA语言的主要特点', '3d624239-1f51-4bf5-84d1-98d58c1de548.', null, null, null, null, null, null, 'JAVA\r\n语言有很多特点，主要包括①跨平台性：一个应用可以不经过修改直接运行到不\r\n同的平台上。②面向对象：\r\nJAVA\r\n语言是一门面向对面的语言，可以使用对象的属性和\r\n行为，可以使用面向对象的思想进行分析设计，并实现整个应用。③解释执行\r\nJAVA\r\n应\r\n用时，\r\nJVM\r\n中的解释器将解释类文件，生成符合当前平台的字节码。④自动回收：\r\nJAVA\r\n应用中的垃圾回收是自动进行的，\r\nJVM\r\n中的后台线程将监视内存中数据的使用，当内存中的数据不再被引用时，将被作为垃圾回收，而不需要程序员动手回收。', '', '0', '2017-12-27 09:00:04', '63', '1');
INSERT INTO `topic` VALUES ('7454', '3', '4', ' JDK是什么？JRE是什么？', '8ba91fba-0d92-4717-b42b-4b3c8f92bbc7.', null, null, null, null, null, null, 'JDK：JAVA开发工具包。JRE：JAVA运行时环境。', '', '0', '2017-12-27 09:03:07', '63', '1');
INSERT INTO `topic` VALUES ('7455', '3', '4', ' 什么是java的平台无关性？', '3072822c-1025-4f96-9297-08ace76f1d90.', null, null, null, null, null, null, '答：JAVA源文件被编译成字节码的形式，无论在什么系统环境下，只要有JAVA虚\r\n拟机就能运行这个字节码文件。也就是一处编写，处处运行。这就是JAVA的跨平台性。', '', '0', '2017-12-27 09:03:27', '63', '1');
INSERT INTO `topic` VALUES ('7456', '3', '4', '在一台电脑上配置java环境，path起什么作用？如何配置？', '1eedbff4-e6d4-46f0-ba63-d624a3b0dd55.', null, null, null, null, null, null, '答：PATH的作用是在DOS环境下，能在任意位置使用JDK目录中BIN文件夹中的\r\n可执行程序，来编译执行JAVA程序。', '', '0', '2017-12-27 09:03:46', '63', '1');
INSERT INTO `topic` VALUES ('7457', '3', '4', ' 解释什么是类的成员变量，局部变量，实例成员变量，类成员变量？', '5d72d187-8787-4a56-9866-6ea7920eb2da.', null, null, null, null, null, null, 'A) 变量定义部分所定义的变量被称为类的成员变量。\r\nB) 在方法体中定义的变量和方法的参数被称为局部变量。\r\nC) 成员变量又分为实例成员变量和类成员变量（STATIC修饰）。', '', '0', '2017-12-27 09:04:38', '63', '1');
INSERT INTO `topic` VALUES ('7458', '3', '4', '解释什么是类方法，什么是实例方法？', 'd3faa6ca-b690-4a26-8e4d-5673cf65edd9.', null, null, null, null, null, null, ' STATIC修饰的方法是类方法，无STATIC修饰的方法是实例方法。', '', '0', '2017-12-27 09:05:05', '63', '1');
INSERT INTO `topic` VALUES ('7459', '3', '4', '系统什么情况下会为类提供构造方法，提供什么样的构造方法？', 'bf78fc74-77cb-498f-bb00-5604e5c6a361.', null, null, null, null, null, null, '如果类中没有构造方法，系统会提供一个默认的构造方法，默认的构造方法是无参\r\n的。', '', '0', '2017-12-27 09:05:26', '63', '1');
INSERT INTO `topic` VALUES ('7460', '3', '4', ' package关键字有什么作用，使用中注意什么问题？', 'cf32a314-d9f6-453e-88ce-8cc5c92848ef.', null, null, null, null, null, null, 'PACKAGE指定一个类所在的包，该语句为源代码第一行。', '', '0', '2017-12-27 09:05:49', '63', '1');
INSERT INTO `topic` VALUES ('7461', '3', '4', ' final关键字可以用来修饰什么？分别起什么作用？', 'a5aec073-c9d3-4a48-a2fa-d417970f4829.', null, null, null, null, null, null, 'A) FINAL可以修饰类，这样的类不能被继承。\r\nB) FINAL可以修饰方法，这样的方法不能被重写。\r\nC) FINAL可以修饰变量，这样的变量的值不能被修改，是常量。', '', '0', '2017-12-27 09:06:29', '63', '1');
INSERT INTO `topic` VALUES ('7462', '3', '4', '简述什么是对象上转型？', '4a69aa0e-5583-4e15-892d-f94d79512ad8.', null, null, null, null, null, null, 'A) 假设，A 类是B 类的父类，当我们用子类创建一个对象，并把这个对象的引用放\r\n到父类的对象中时，我们称这个父类对象是子类对象的上转型对象。', '', '0', '2017-12-27 09:06:56', '63', '1');
INSERT INTO `topic` VALUES ('7463', '3', '4', '上转型对象可以操作什么？不可以操作什么？', '2601b21c-b2ed-4433-bb74-37ba3694cafc.', null, null, null, null, null, null, 'A) 上转对象不能操作子类新增的成员变量，失掉了这部分属性，不能使用子类新增的\r\n方法，失掉了一些功能 。\r\nB) 上转型对象可以操作子类继承或重写的成员变量，也可以使用子类继承的或重写的\r\n方法。', '', '0', '2017-12-27 09:07:13', '63', '1');
INSERT INTO `topic` VALUES ('7464', '3', '4', '什么是抽象类？什么是抽象方法？有什么特点？', '4dba4fdc-00b9-4f7d-8fb5-cf908e59a7cf.', null, null, null, null, null, null, 'A) 用关键字ABSTRACT修饰类称为抽象类，ABSTRACT类不能用NEW运算创建对象，必须\r\n产生其子类，由子类创建对象。\r\nB) 用关键字ABSTRACT修饰方法称为抽象方法，ABSTRACT方法，只允许声明，而不允许\r\n实现。', '', '0', '2017-12-27 09:07:31', '63', '1');
INSERT INTO `topic` VALUES ('7465', '3', '4', '一个类声明实现一个接口，那么这个类需要做什么工作？', '5a540bba-5fbd-4ba1-9284-02e7136fb437.', null, null, null, null, null, null, '实现接口里所有的方法，并且这些方法的访问权限必须是PUBLIC。', '', '0', '2017-12-27 09:07:53', '63', '1');
INSERT INTO `topic` VALUES ('7466', '3', '4', '什么是I/O流，有什么作用？', 'afc83c6a-1469-4324-ba04-900427392902.', null, null, null, null, null, null, 'A) 指数据输入输出的流， I/O 流提供一条通道程序，可以使用这条通道把源中的字\r\n节序列送给目的地。', '', '0', '2017-12-27 09:08:37', '63', '1');
INSERT INTO `topic` VALUES ('7467', '3', '4', '实现多线程的两种方法？', 'cb8e49fa-d982-4f14-aba7-4b6e70aaed46.', null, null, null, null, null, null, 'A) 从JAVA.LANG.THREAD类派生一个新的线程类，重写它的RUN()方法。\r\nB) 实现RUNNABLE接口，重写RUNABLE接口中的RUN()方法。', '', '0', '2017-12-27 09:08:56', '63', '1');
INSERT INTO `topic` VALUES ('7468', '3', '4', '什么是GC？为什么有GC？', '6a28ab73-e9e4-4b1d-baa3-0ab210c7acee.', null, null, null, null, null, null, 'A) GC是垃圾收集器。JAVA 程序员不用担心内存管理，因为垃圾收集器会自动进行管\r\n理。', '', '0', '2017-12-27 09:09:25', '63', '1');
INSERT INTO `topic` VALUES ('7469', '3', '4', '构造方法能否被重写？为什么？', '7c9f7d3f-8fec-4e3e-886f-32d7f8b1dbf3.', null, null, null, null, null, null, 'A) 不能，因为构造方法不能被继承，所以不能重写。', '', '0', '2017-12-27 09:09:44', '63', '1');
INSERT INTO `topic` VALUES ('7470', '3', '4', ' switch语句后括号里的表达式是什么类型？case后类型如何确定？', 'd21ee2c1-f97e-47cd-8d68-28c3917bfcb9.', null, null, null, null, null, null, 'A) CHAR，INT，BYTE，SHORT，枚举类型。\r\nB) CASE后面是一个常量，该常量类型由SWITCH后括号内表达式来确定。', '', '0', '2017-12-27 09:10:35', '63', '1');
INSERT INTO `topic` VALUES ('7471', '3', '4', ' switch语句后，default关键字起什么作用？break起什么作用？', '05bfce22-aadb-44be-b041-16476290e433.', null, null, null, null, null, null, 'DEFAULT：当用户指定的表达式与任何CASE都不匹配的时候，执行DEFAULT后的语句。 B) BREAK：退出当前CASE。', '', '0', '2017-12-27 09:10:50', '63', '1');
INSERT INTO `topic` VALUES ('7472', '3', '4', '简述一个java程序执行的过程?', 'dbb9d540-a902-4c30-a715-f0e15ed4ec71.', null, null, null, null, null, null, 'A) 首先编写JAVA源文件（扩展名为.JAVA的文本文档）。\r\nB) 用JAVAC命令把源文件编译成字节码文件（.CLASS文件）\r\nC) 用JAVA命令执行字节码文件。', '', '0', '2017-12-27 09:11:22', '63', '1');
INSERT INTO `topic` VALUES ('7473', '32', '4', '简述什么是关系型数据库？', 'dd604387-9e48-4c4b-99f3-ac841ff53f8d.', null, null, null, null, null, null, 'A) 所谓关系型数据库，是指采用了关系模型来组织数据的数据库。关系模型指的就是\r\n二维表格模型，而一个关系型数据库就是由二维表及其之间的联系组成的一个数据组织。\r\nB) 关系型数据库是由许多数据表（TABLE）所组成，表又是由许多记录（ROW 或RECORD）\r\n所组成，而纪录又是由许多的字段（COLUMN 或FILED）所组成。', '', '0', '2017-12-27 09:11:51', '63', '1');
INSERT INTO `topic` VALUES ('7474', '33', '4', ' JDBC含义？', '7870483f-c955-4dfd-8321-a36955fb8939.', null, null, null, null, null, null, 'JDBC(JAVA DATABASE CONNECTIVITY) JAVA数据库连接，是JAVA连接数据库的AIP。', '', '0', '2017-12-27 09:12:26', '63', '1');
INSERT INTO `topic` VALUES ('7475', '4', '4', '如何配置spring+struts? ', '7d284b91-fae1-4837-808b-34d419dcb01f.', null, null, null, null, null, null, '在STRUTS-CONFIG.XML加入一个插件，通过它加载APPLICATIONCONTEXT.XML\r\n 在STRUTS-CONFIG.XML修改ACTION-MAPPING标记，具体ACTION交给了DELEGATEACTIONPROXY\r\n 通过DELEGATEACTIONPROXY进入一SPRING的环境。\r\n 在SPRING的APPLICATIONCONTEXT.XML加入 ', '', '0', '2017-12-27 09:15:07', '63', '1');
INSERT INTO `topic` VALUES ('7476', '5', '4', 'javascript的typeof返回哪些数据类型', 'b0217def-8c5a-4f45-abd4-962162666f72.', null, null, null, null, null, null, '答案：基本数据类型：STRING,BOOLEAN,NUMBER,UNDEFINED, NULL,OBJECT 引用数据类型：OBJECT(ARRAY,DATE,REGEXP,FUNCTION) ', '', '0', '2017-12-27 09:26:52', '63', '1');
INSERT INTO `topic` VALUES ('7477', '5', '4', '当一个DOM节点被点击时候，我们希望能够执行一个函数，应该怎么做？ ', '876fb8b6-31fd-4604-b54e-7583dbf298a2.', null, null, null, null, null, null, '答案：直接在DOM里绑定事件：<DIV ONCLICK=”TEST()”></DIV> 在JS里通过ONCLICK绑定：XXX.ONCLICK = TEST  通过事件添加进行绑定：ADDEVENTLISTENER(XXX, ‘CLICK’, TEST)', '', '0', '2017-12-27 09:27:27', '63', '1');
INSERT INTO `topic` VALUES ('7478', '6', '4', 'Ajax同步和异步的区别，如何解决跨域问题?', 'dabdeb3c-9abb-475c-a314-f82277c30251.', null, null, null, null, null, null, '答案：  同步：脚本会停留并等待服务器发送回复然后再继续   异步：脚本允许页面继续其进程并处理可能的回复   跨域问题简单的理解就是因为JS同源策略的限制，A.COM域名下的JS无法操作B.COM或C.A.COM下的对象，具体场景如下： AJAX - AMY - 哈哈镜  PS：(1)如果是端口或者协议造成的跨域问题前端是无能为力的   (2) 在跨域问题上，域仅仅通过URL的首部来识别而不会尝试判断相同的IP地址对应的域或者两个域是否对应一个IP', '', '0', '2017-12-27 09:28:30', '63', '1');
INSERT INTO `topic` VALUES ('7479', '5', '4', 'Javascript中callee和caller的作用？', '7c42e98e-e75e-440a-ae87-1a3404ef4930.', null, null, null, null, null, null, '答案：CALLER是返回一个对函数的引用，该函数调用了当前函数；  CALLEE是返回正在被执行的FUNCTION函数，也就是所指定的FUNCTION对象的正文。', '', '0', '2017-12-27 09:30:11', '63', '1');
INSERT INTO `topic` VALUES ('7480', '5', '4', '函数声明与函数表达式的区别？', 'cde73e80-d746-4105-9c1e-ff8a1203d79e.', null, null, null, null, null, null, '答案：在JAVSCRIPT中，解析器在向执行环境中加载数据时，对函数声明和函数表达式并非是一视同 仁的，解析器会率先读取函数声明，并使其在执行任何 代码之前可用（可以访问），至于函数表达式，则必须等到解析器执行到它所在的代码行，才会真正被解析执行。', '', '0', '2017-12-27 09:30:35', '63', '1');
INSERT INTO `topic` VALUES ('7481', '5', '4', '在Javascript中什么是伪数组？如何将伪数组转化为标准数组？', 'adb41825-47eb-4f3b-bdbc-1d88a9b7905e.', null, null, null, null, null, null, '答案：伪数组（类数组）：无法直接调用数组方法或期望LENGTH属性有什么特殊的行为，但仍可以 对真正数组遍历方法来遍历它们。典型的是函数的 ARGUMENT参数，还有像调用 GETELEMENTSBYTAGNAME,DOCUMENT.CHILDNODES之类的,它们都返回 NODELIST对象都属于伪数组。可以使用ARRAY.PROTOTYPE.SLICE.CALL(FAKEARRAY)将数组转化为真正的ARRAY 对象。', '', '0', '2017-12-27 09:30:59', '63', '1');
INSERT INTO `topic` VALUES ('7482', '5', '4', '想实现一个对页面某个节点的拖曳？如何做？（使用原生JS）', '7e858e5f-a0c8-48e6-ab42-62b41436ed7f.', null, null, null, null, null, null, '答案：1.给需要拖拽的节点绑定MOUSEDOWN, MOUSEMOVE, MOUSEUP事件  2. MOUSEDOWN事件触发后，开始拖拽  3. MOUSEMOVE时，需要通过EVENT.CLIENTX和CLIENTY获取拖拽位置，并实时更新位置 4. MOUSEUP时，拖拽结束 5.  需要注意浏览器边界的情况', '', '0', '2017-12-27 09:31:29', '63', '1');
INSERT INTO `topic` VALUES ('7483', '6', '4', '将字符串”&lt;tr&gt;&lt;td&gt;{$id}&lt;/td&gt;&lt;td&gt;{$name}&lt;/td&gt;&lt;/tr&gt;”中的{$id}替换成10\r\n，{$name}替换成Tony （使用正则表达式）', '523f387c-d9d3-49d7-88b6-7bf4b1fb0206.', null, null, null, null, null, null, '答案：”<TR><TD>{$ID}</TD><TD>{$ID}_{$NAME}< /TD></TR>”.REPLACE(/{\\$ID}/G, ’ 10′).REPLACE(/{\\$NAME}/G, ‘TONY’);', '', '0', '2017-12-27 09:32:02', '63', '1');
INSERT INTO `topic` VALUES ('7484', '5', '4', '谈一谈你对javascript的理解，javascript能做什么\r\n', '3bdcb4ab-24f7-444a-90e1-131574b3914e.', null, null, null, null, null, null, '\r\n答案：JAVASCRIPT是主要用在WEB中的一种动态的解析型语言。  可以改变网页里的数据，根据用户点击等操作告诉服务器可以动态的改变网页的大小。 JAVASCRIPT是一种基于对象和事件驱动并具有相对安全性的客户端脚本语言,是一种轻量级的编程语言。同时也是一种广泛用于客户端WEB开发的脚本语言，常用来给HTML网页添加动态功能，比如响应用户的各种操作\r\n,可以将动态的文本放入 HTML 页面, 可以对事件作出响应, 可以读写 HTML 元素, 可被用来验证数据, 可被用来检测访问者的浏览器, 可被用来创建 COOKIES ', '', '0', '2017-12-27 09:32:35', '63', '1');
INSERT INTO `topic` VALUES ('7485', '5', '4', '在javascript中如何检测客户端的浏览器和操作系统类型\r\n', '089c5a26-39cf-4ffd-996a-2b4540c79e29.', null, null, null, null, null, null, '答案：VAR RESOLUTION = \"分辨率:\" + WINDOW.SCREEN.WIDTH + \"*\" + WINDOW.SCREEN.HEIGHT;,  VAR UA = WINDOW.NAVIGATOR.USERAGENT', '', '0', '2017-12-27 09:32:56', '63', '1');
INSERT INTO `topic` VALUES ('7486', '5', '4', 'Cookie在客户机上是如何存储的\r\n ', '27c6eb5e-2fe5-4004-8fd5-76339944eefc.', null, null, null, null, null, null, '答案：COOKIES就是服务器暂存放在你的电脑里的文本文件，好让服务器用来辨认你的计算机。当 你在浏览网站的时候，WEB服务器会先送一小小资料放在你的计算机上，\r\nCOOKIES 会帮你在网站上所打的文字或是一些选择都记录下来。当下次你再访问同一个网站，WEB服务器会先看看有没有它上次留下的COOKIES资料，有的话，就会依据COOKIE里的内容来判断使用者，送出特定的网页内容给你。\r\n', '', '0', '2017-12-27 09:33:14', '63', '1');
INSERT INTO `topic` VALUES ('7487', '5', '4', 'Prompt box是什么？它的返回值有什么用？', '1ce703da-84d5-4999-a2fd-61a6489687bb.', null, null, null, null, null, null, '答案：PROMPT() 方法用于显示可提示用户进行输入的对话框。如果用户单击提示框的取消按钮， 则返回 NULL。如果用户单击确认按钮，则返回输入字段当前显示的文本。  在用户点击确定按钮或取消按钮把对话框关闭之前，它将阻止用户对浏览器的所有输入。在调用  PROMPT() 时，将暂停对 JAVASCRIPT 代码的执行，在用户作出响应之前，不会执行下一条语句', '', '0', '2017-12-27 09:33:58', '63', '1');
INSERT INTO `topic` VALUES ('7488', '5', '4', '如何获取javascript所能表示的最大值和最小值？', '80d7ec5f-36ca-459d-8bff-652ac2582245.', null, null, null, null, null, null, '答案：ALERT(MATH.MAX.APPLY(NULL, A));//最大值  ALERT(MATH.MIN.APPLY(NULL, A));//最小值', '', '0', '2017-12-27 09:34:31', '63', '1');
INSERT INTO `topic` VALUES ('7489', '5', '4', 'Null和Undefined有和区别与联系\r\n ', 'f16c311b-c8f4-4290-b2be-b20efba2fcbe.', null, null, null, null, null, null, '答案：NULL :表示无值;  UNDEFINED : 表示一个未声明的变量，或已声明但没有赋值的变量，或一个并不存在的对象属性。', '', '0', '2017-12-27 09:35:13', '63', '1');
INSERT INTO `topic` VALUES ('7490', '5', '4', 'JavaScript与Java的比较 ', '02f0bee6-5b7d-46cb-aa9c-15b30d350af1.', null, null, null, null, null, null, 'A. 使用背景不同：JAVA是基于C++、面向对象的程序设计语言（OBJECT ORIENTED LANGUAGE）；JAVASCRIPT是一种脚本语言，是一种基于对象的，面向非程序设计人员的编程语言。和JAVA不同，JAVASCRIPT没有提供抽象、继承、多态等有关面向对象程序设计语言的许多功能。   B. 运行环境不同：JAVASCRIPT源代码无须编译，嵌入HTML文档中的JAVASCRIPT源代码实际上是作为HTML文档WEB页的一部分存在的。浏览器浏览包含JAVASCRIPT源代码的HTML文档页时，由浏览器自带的脚本引擎对该HTML文档进行分析、识别、解释并执行用JAVASCRIPT编写的源代码。而JAVA则不同，JAVA 源代码必须进行编译、连接后才能运行。', '', '0', '2017-12-27 09:41:06', '63', '1');
INSERT INTO `topic` VALUES ('7491', '5', '4', '什么是内部对象和内置函数 ？', '16d986b7-7ee7-42a9-a55f-6077608ab336.', null, null, null, null, null, null, 'JAVASCRIPT提供了一些常用的内部对象和函数（预定义函数），用户不需要用脚本来实现这些功能，称它们为内部对象和内置函数。（STRING对象，MATH对象，DATE对象，使用ARRAY数组对象，其它的内置对象：函数对象、数值对象、和布尔对象等。）  开发工具：一个程序不是只有简单的语句构成的，往往用到大量的标准函数，同时，还会使用到内置对象。要使用一个工具进行软件开发，必须要熟悉该工具所提供的标准函数、内置对象等。', '', '0', '2017-12-27 09:41:27', '63', '1');
INSERT INTO `topic` VALUES ('7492', '5', '4', '什么是事件和事件驱动? ', '46327256-da5e-4312-b8bc-8fbe060625c7.', null, null, null, null, null, null, '鼠标或热键操作我们称之为事件（EVENT），事件将激活相应的程序或函数，这些程序或函数称为事件处理程序（EVENT HANDLER）。就是采用事件驱动（EVENT-DRIVEN）。  JAVASCRIPT中鼠标或热键的动作引发的主要事件很多。可以通过DREAMWEAVER的行为面板来看不同的浏览器能够处理的事件。', '', '0', '2017-12-27 09:42:52', '63', '1');
INSERT INTO `topic` VALUES ('7493', '4', '4', '讲下servlet的执行流程。doGet和doPost的区别', '947d2372-ef6f-4c6d-9550-c80bea6f4c41.', null, null, null, null, null, null, 'SERVLET的执行流程也就是SERVLET的生命周期，当服务器启动的时候生命周期开始，然后通过INIT()《启动顺序根据WEB.XML里的STARTUP-ON-LOAD来确定加载顺序》方法初始化SERVLET，再根据不同请求调用DOGET或DOPOST方法，最后再通过DESTROY()方法进行销毁。\r\nDOGET和DOPOST都是接受用户请求的方法，DOGET处理GET请求，DOPOST处理POST请求，DOGET用于地址栏提交，DOPOST用于表单提交，在页面提交数据时，GET的数据大小有限制4K，POST没有限制，GET请求提交的数据会在地址栏显示，POST不显示，所以POST比GET安全.\r\n', '', '0', '2017-12-27 09:44:33', '75', '1');
INSERT INTO `topic` VALUES ('7494', '4', '4', '当service有一个实例变量，doGet和doPost去调用这个变量，会出现什么问题，你是如何解决的。', '94202d95-3c1c-4c17-8eb6-5d7750bebec5.', null, null, null, null, null, null, '会出现线程不安全问题。无论是DOGET还是DOPOST去调用，服务器端处理的过程都是一样的，那么我们可以把处理过程单独写在另外一个方法HANDLE里，让两个方法都去调用HANDLE，根据不同请求去调用不同的方法。', '', '0', '2017-12-27 09:44:52', '75', '1');
INSERT INTO `topic` VALUES ('7495', '4', '4', '有三台服务器，如果在一台服务器上登陆了这个用户，其他两台就不能再登陆这个用户，使用session共享，你是怎么做的。', 'f7aeba0c-f9f3-49f7-b397-1b446dcb9c8c.', null, null, null, null, null, null, '把所有的SESSION的数据保存到MYSQL服务器上，所有WEB服务器都来这台MYSQL服务器来获取SESSION数据。', '', '0', '2017-12-27 09:45:09', '75', '1');
INSERT INTO `topic` VALUES ('7496', '4', '4', '写一个自定义标签要继承什么类', '5066e036-c043-4981-a464-adce56bb6653.', null, null, null, null, null, null, 'SIMPLETAGSUPPORT，一般调用DOTAG方法\r\n或者实现SIMPLETAG接口\r\n', '', '0', '2017-12-27 09:45:22', '75', '1');
INSERT INTO `topic` VALUES ('7497', '4', '4', 'Jsp如何处理json', '779bff4f-4b32-4db1-8d57-5ca02f08afc2.', null, null, null, null, null, null, '在 JSP 中处理 JSON，通常需要配套使用 JQUERY 控件，并且导入一些 COMMON JAR 包。使用 JQUERY 控件是因为它能有效的解析并且展示 JSON 数据，导入COMMON 则是因为 JAVA 中的对象并不是纯粹的数据，需要通过这些 JAR 包的处理使之转化成真实数据。', '', '0', '2017-12-27 09:45:37', '75', '1');
INSERT INTO `topic` VALUES ('7498', '4', '4', '如何处理servlet的线程不安全问题', '6b9a9080-9b19-4335-995d-fe592f8ea56f.', null, null, null, null, null, null, '线程安全就是多线程操作同一个对象不会有问题，线程同步一般来保护线程安全，所以可以在SERVLET的线程里面加上同步方法或同步块。（SYNCHRONIZED）可以保证在同一时间只有一个线程访问，（使用同步块会导致性能变差，最好不去使用实例变量）', '', '0', '2017-12-27 09:45:49', '75', '1');
INSERT INTO `topic` VALUES ('7499', '4', '4', 'Jsp的重定向和转发的流程有什么区别', '28510c1d-92fe-470c-83c3-28adfebfcbe2.', null, null, null, null, null, null, '重定向是客户端行为，转发是服务器端行为\r\n重定向时服务器产生两次请求，转发产生一次请求，重定向时可以转发到项目以外的任何网址，转发只能在当前项目里转发\r\n重定向会导致REQUEST对象信息丢失。转发则不会\r\n转发的URL不会变,REQUEST.GETREQUESTDISPATCH（）。FORWARD()\r\n重定向的URL会改变,RESPONSE.GETREDIRECT();\r\n', '', '0', '2017-12-27 09:46:06', '75', '1');
INSERT INTO `topic` VALUES ('7500', '4', '4', 'Jsp和servlet的区别', 'bf2d727c-52f1-481a-bb2e-f06954c9f130.', null, null, null, null, null, null, 'JSP的可读性强，容易维护，并且JSP在最后会编译成SERVLET\r\nSERVLET容易调试\r\n', '', '0', '2017-12-27 09:46:18', '75', '1');
INSERT INTO `topic` VALUES ('7501', '4', '4', '下面符合jsp代码的是：3', '4085cd2d-6198-433d-a925-5134072da411.', null, null, null, null, null, null, '1).VAR A = DOCUMENT.GETELEMETNBYID(\"ID\");\r\n2).VAR A = DOCUMENT.GETELEMENTBYID(\"NAME\");\r\n3).IF(COURSE(\"如果是对的\")RETURN FALSE\r\n4).FOR(INT I=0;I<10;I++){}\r\n', '', '0', '2017-12-27 09:46:36', '75', '1');
INSERT INTO `topic` VALUES ('7502', '4', '4', 'session的主要几个方法的区别', 'faf09f07-9cf7-4d33-9f75-b059dddee367.', null, null, null, null, null, null, 'SESSION不能通过NEW创建，需要通过调用GETSESSION()或者GETSESSION(TRUE)方法创建，GETSESSION()是自动创建SESSION，GETSESSION(TRUE)是强制创建SESSION，SETATTRIBUTE()方法可以用于传值，GETATTRIBUTE()可以用于取值\r\n（第一次创建SESSION的时候，就是访问第一次一个JSP页面<这个页面的PAGE指令 没有设置SESSION=FALSE>） \r\n销毁SESSION调用INVALIDATE方法\r\n通过SETMAXINACTIVEINTERVAL()可以设定SESSION的生存时间(WEB.XML可以设置SESSION的生存时间)\r\n', '', '0', '2017-12-27 09:47:02', '75', '1');
INSERT INTO `topic` VALUES ('7503', '4', '4', 'jsp的九大内置对象，三大指令，七大动作的具体功能', 'b037e922-fc1d-438c-a265-ea28d7f25966.', null, null, null, null, null, null, 'JSP九大内置对象:\r\nPAGECONTEXT ：只对当前JSP页面有效，里面封装了基本的REQUEST和SESSION的对象\r\nREQUEST ：对当前请求进行封装\r\nSESSION ：浏览器会话对象，浏览器范围内有效\r\nAPPLICATION ：应用程序对象，对整个WEB工程都有效\r\nOUT ：页面打印对象，在JSP页面打印字符串\r\nRESPONSE ：返回服务器端信息给用户\r\nCONFIG ：单个SERVLET的配置对象，相当于SERVLETCONFIG对象\r\nPAGE ：当前页面对象，也就是THIS\r\nEXCEPTION ：错误页面的EXCEPTION对象，如果指定的是错误页面，这个就是异常对象\r\n三大指令：\r\nPAGE ：指令是针对当前页面的指令\r\nINCLUDE ：用于指定如何包含另一个页面\r\nTAGLIB ：用于定义和指定自定义标签\r\n七大动作：\r\nFORWARD，执行页面跳转，将请求的处理转发到另一个页面\r\nPARAM ：用于传递参数\r\nINCLUDE ：用于动态引入一个JSP页面\r\nPLUGIN ：用于下载JAVABEAN或APPLET到客户端执行\r\nUSEBEAN ：使用JAVABEAN\r\nSETPROPERTY ：修改JAVABEAN实例的属性值\r\nGETPROPERTY ：获取JAVABEAN实例的属性值\r\n', '', '0', '2017-12-27 09:47:30', '75', '1');
INSERT INTO `topic` VALUES ('7504', '4', '4', '获取页面的元素和值有几种方式，分别说一下', '78a0091d-e0a2-4d7a-a903-22bccbb07672.', null, null, null, null, null, null, 'REQUEST.GETPARAMETER() 返回客户端的请求参数与值\r\nREQUEST.GETPARAMETERNAMES() 返回所有可用属性名的枚举\r\nREQUEST.GETPARAMETERVALUES() 返回包含参数的所有值的数组\r\n', '', '0', '2017-12-27 09:47:43', '75', '1');
INSERT INTO `topic` VALUES ('7505', '32', '4', '试述数据、数据库、数据库系统、数据库管理系统的概念。', '199bfab0-c2dc-4684-9b45-c8e73167f570.', null, null, null, null, null, null, '数据：描述事物的符号记录称为数据  数据库：数据库是长期储存在计算机内的、有组织的、可共享的数据集合。 数据库系统：数据库系统是指在计算机系统中引入数据库后的系统构成，一 般由数据库、数据库管理系统（及其开发工具）、应用系统、数据库管理员构成。  数据库管理系统：数据库管理系统是位于用户与操作系统之间的一层数据管理软件 ', '', '0', '2017-12-27 09:47:48', '63', '1');
INSERT INTO `topic` VALUES ('7506', '4', '4', 'servlet和javaScript的区别，他们分别是什么作用', 'b30cac7c-84cd-4ff4-b06d-47f173940624.', null, null, null, null, null, null, '一个是服务端，一个是客户端\r\nSERVLET是独立于平台和协议的服务器端的JAVA应用程序，可以动态生成WEB页面，并采用响应--请求的模式提供WEB服务\r\nJAVASCRIPT是一种解释性语言，用于向HTML页面提供交互行为，通常被直接嵌入在HTML页面中\r\nSERVLET是JAVA语言编写的WEB应用\r\nJS是基于HTML上的一种解释语言\r\n', '', '0', '2017-12-27 09:48:02', '75', '1');
INSERT INTO `topic` VALUES ('7507', '4', '1', '转发http请求一般有两种方法，response.sendRedirect和request.forward。resquest.setAttribute()中设置的值不会丢失？', '13083594-f258-4dc1-8017-917d1ed429cb.', 'sendRedirect ', 'forward ', '两个都不能', '两个都可以', '', '', 'B', '', '0', '2017-12-27 09:49:21', '75', '1');
INSERT INTO `topic` VALUES ('7508', '4', '4', 'HTML和Servlet的异同', '7b2a0269-bd83-45fd-8b70-8917cb394cd6.', null, null, null, null, null, null, '不同：\r\nHTML是静态，SERVLET是动态\r\nHTML页面由服务器直接返回，\r\nSERVLET是用来处理客户请求，并返回HTML页面\r\n//SERVLET需要服务器调用SERVLET方法生成动态HTML页面，且需要在WEB.XML中配置URL路径\r\n', '', '0', '2017-12-27 09:49:49', '75', '1');
INSERT INTO `topic` VALUES ('7509', '4', '4', '会话跟踪有哪些，他们的区别是什么', '954a9e3c-a267-48e8-a885-5dd9ac8f1e7a.', null, null, null, null, null, null, 'COOKIE，SESSION和APPLICATION，\r\nCOOKIE是HTTP对象，客户端与服务端都可以操纵\r\nCOOKIE是在客户端保持状态，SESSION是在服务器端保持状态，由于COOKIE是保存在客户端本地的，所以数据很容易被窃取，当访问量很多时，使用SESSION则会降低服务器的性能，APPLICATION的作用域是整个工程里只有一个，可以在不同浏览器之间共享数据，所有人都可以共享，因此APPLICATION也是不安全的\r\n', '', '0', '2017-12-27 09:50:05', '75', '1');
INSERT INTO `topic` VALUES ('7510', '3', '4', '你认为项目中最重要的过程是那些？', 'f9732209-adbe-454e-bee0-beecc697443a.', null, null, null, null, null, null, '分析、设计阶段  尽量找出进度的优先级', '', '0', '2017-12-27 09:51:45', '62', '1');
INSERT INTO `topic` VALUES ('7511', '33', '4', '如果给你一个4-6人的team，怎么分配？', '7030f428-7162-4d8f-98b0-a8e426be84ae.', null, null, null, null, null, null, '挑选一技术过硬的人作为我的替补。其它人平均分配任务，每周进行全面的任务分配，每个人领取一周的工作量\r\n，每天汇报进度', '', '0', '2017-12-27 09:52:18', '62', '1');
INSERT INTO `topic` VALUES ('7512', '33', '4', '简述软件开发文档?', '6bac5995-e5fd-4759-a6c7-734db94095be.', null, null, null, null, null, null, '需求分析、概要设计、详细设计、操作手册、测试计划', '', '0', '2017-12-27 09:52:43', '62', '1');
INSERT INTO `topic` VALUES ('7513', '33', '4', '你认为一个项目如何才正确？', '18c92d36-e6d2-4f67-87f3-426c3020866b.', null, null, null, null, null, null, '是企业利益最大化。', '', '0', '2017-12-27 09:53:41', '62', '1');
INSERT INTO `topic` VALUES ('7514', '4', '4', 'mybatis的优缺点？', '4216bb36-c6a2-4d02-b141-ced55f9e1a79.', null, null, null, null, null, null, '  优点：SQL写在XML中，便于统一管理和优化\r\n               提供映射标签，支持对象和数据库的ORM字段关系映射\r\n               可以对SQL进行优化\r\n  缺点： SQL工作量大\r\n                 MYBAGTIS移植姓不好\r\n                 不支持级联 ', '', '0', '2017-12-27 09:54:22', '62', '1');
INSERT INTO `topic` VALUES ('7515', '4', '4', 'maven是什么?有什么作用？', '14235931-7cc4-442e-8e69-6169443e64d5.', null, null, null, null, null, null, ' 是一个项目管理、构建工具\r\n作用：帮助下载JAR   寻找依赖，帮助下载依赖   热部署、热编译', '', '0', '2017-12-27 09:55:13', '62', '1');
INSERT INTO `topic` VALUES ('7516', '33', '4', '事务隔离级别有哪4种？', '4e7dc9b5-d009-476c-af8c-1af918b706e1.', null, null, null, null, null, null, 'SERIALIZABLE(串行化)\r\n REPEATABLE READ（可重复读）\r\nREAD COMMITED（读已提交数据）\r\n READ UNCOMMITTED（读未提交数据）', '    Serializable(串行化)：一个事务在执行过程中完全看不到其他事物对数据库所做的更新（事务执行的时候不允许别的事务并发执行，事务只能一个接着一个地执行，而不能并发执行）\r\n   Repeatable Read（可重复读）：一个事务在执行过程中可以看到其它事务已经提交的新插入的记录，但是不能看到其它事务对已有记录的更新\r\n  Read Commited（读已提交数据）：一个事务在执行过程中可以看到其它事务已经提交的新插入的记录，而且能看到其它事务已经提交的对已有记录的更新。\r\n   Read Uncommitted（读未提交数据）：一个事务在执行过程中可以看到其它事务没有提交的新插入的记录的更新，而且能看其它事务没有提交到对已有记录的更新', '0', '2017-12-27 09:57:08', '62', '1');
INSERT INTO `topic` VALUES ('7517', '4', '4', 'session和application的作用', 'd4622351-c984-4fc7-affc-c94cb1c03b46.', null, null, null, null, null, null, 'SESSION用于客户端与服务器之间保持状态的解决方案，数据保存在服务器内存中，底层是有COOKIE实现的\r\nAPPLICATION的作用域是整个工程里只有一个，可以在不同浏览器之间共享数据，所有人都可以共享，因此APPLICATION是不安全的\r\n', '', '0', '2017-12-27 09:59:26', '75', '1');
INSERT INTO `topic` VALUES ('7518', '5', '4', '说说jsp的隐藏对象有哪些', 'e800abb8-2291-4509-a4fa-03edb4bbbe5f.', null, null, null, null, null, null, 'REQUEST,OUT,RESPONSE , PAGECONTEXT , SESSION , APPLICATION , CONFIG , PAGE , EXCEPTION，也即JSP的九大内置对象', '', '0', '2017-12-27 09:59:45', '75', '1');
INSERT INTO `topic` VALUES ('7519', '33', '1', '下列属于事务传播特性说法不正确的是', 'b9581133-58f3-43a3-9910-357bba7b529e.', 'PROPAGATION_REQUIRED: 如果存在一个事务，则支持当前事务。如果没有事务则开启', 'PROPAGATION_SUPPORTS: 如果存在一个事务，支持当前事务。如果没有事务，则非事务的执行', ' PROPAGATION_MANDATORY: 如果已经存在一个事务，支持当前事务。如果没有一个活动的事务，则抛出异常。', 'PROPAGATION_REQUIRES: 总是开启一个新的事务。如果一个事务已经存在，则将这个存在的事务挂起', 'PROPAGATION_NOT_SUPPORTED: 总是非事务地执行，并挂起任何存在的事务。', '', 'D', '', '0', '2017-12-27 09:59:57', '62', '1');
INSERT INTO `topic` VALUES ('7520', '4', '4', '为什么在session少放对象', 'bf0e001e-3dac-4c8c-88ab-e5cb695f0979.', null, null, null, null, null, null, '因为SESSION底层是由COOKIE实现的，当客户端的COOKIE被禁用后，SESSION也会失效，且应尽量少向SESSION中保存信息，SESSION的数据保存在服务器端，当有大量SESSION时，会降低服务器的性能', '', '0', '2017-12-27 10:00:10', '75', '1');
INSERT INTO `topic` VALUES ('7521', '4', '4', '服务端怎么判断浏览器是否支持cookie', 'b8fcbd2a-bb11-4383-8ce8-dea5be0dc9ec.', null, null, null, null, null, null, '可以使用JAVASCRIPT的方法NAVIGATOR.COOKIEENABLED判断浏览器是否支持COOKIE', '', '0', '2017-12-27 10:00:21', '75', '1');
INSERT INTO `topic` VALUES ('7522', '4', '4', 'Request和session的取值区别，以及出现乱码的解决方式（不能在java代码中设置）', 'a6b1e07a-ad73-408b-9c6c-1adc464b23d4.', null, null, null, null, null, null, 'REQUEST可以通过GETATTRIBUTE()方法直接取值，也可通过GETPARAMETER()取值\r\nSESSION需要通过REQUEST.GETSESSION().GETATTRIBUTE()才能取值\r\nREQUEST是针对一次请求，SESSION是针对整个会话\r\n      在页面通过CONTENTTYPE，PAGEENCODING，CONTENT设置编码格式，必须要一致\r\n', '', '0', '2017-12-27 10:00:39', '75', '1');
INSERT INTO `topic` VALUES ('7523', '33', '4', 'shiro 是什么', '0ab3b12b-cb54-4367-b38f-c84d65e22155.', null, null, null, null, null, null, 'APACHE SHIRO 是一个强大易用的JAVA安全框架，提供了认证、授权、加密和会话管理等功能', '认证 ：验证用户来核实他们的身份\r\n授权：\r\n会话管理', '0', '2017-12-27 10:00:49', '62', '1');
INSERT INTO `topic` VALUES ('7524', '5', '4', 'jsp页面跳转', 'cdfe44f2-43b3-47c5-8d2e-6db8bdef199b.', null, null, null, null, null, null, 'JSP页面跳转有两种方式，FORWARD和REDIRECT（转发和重定向）\r\nFORWARD只能在当前项目里跳转，只产生一次请求，REQUEST保存的变量不会丢失，URL地址不会改变\r\nREDIRECT可跳转到项目以外的任何页面，产生两次请求，REQUEST保存的变量会全部丢失，URL地址会发生改变，变化为第二个请求的地址\r\n', '', '0', '2017-12-27 10:00:52', '75', '1');
INSERT INTO `topic` VALUES ('7525', '4', '4', '认证 ：验证用户来核实他们的身份\r\n授权：\r\n会话管理', '2390c02d-4c78-4602-950b-ffa015c95e5a.', null, null, null, null, null, null, '      （1）每一个URI代表一种资源；\r\n\r\n　　（2）客户端和服务器之间，传递这种资源的某种表现层；\r\n\r\n　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现\"表现层状态转化\"', '', '0', '2017-12-27 10:01:26', '62', '1');
INSERT INTO `topic` VALUES ('7526', '5', '4', '说出jsp内置对象以及方法', '2d185307-94e9-460a-8b8c-2d3c5f2cca48.', null, null, null, null, null, null, 'REQUEST：客户端发送请求\r\nSETCHARACTERENCODING(STRING ARG0)：设置编码格式\r\nGETCHARACTERENCODING()：获取编码格式\r\nGETREQUESTDISPATCHER(STRING PATH)：返回一个REQUESTDISPATCHER对象 \r\nRESPONSE：服务器端返回信息给用户\r\nSETATTRIBUTE(\"NAME\",OBJECT OBJ)：设置名字为NAME的REQUEST参数的值，该值是由OBJECT类型的OBJ指定\r\nGETATTRIBUTE(\"NAME\")：返回NAME属性值\r\nGETATTRIBUTENAMES()：返回所有可用属性名的枚举\r\nSETCHARACTERENCODING(STRING CHARSET)：设置编码格式\r\nGETCHARACTERENCODING()：获取编码格式\r\nSENDREDIRECT(STRING LOCATION)：返回对包装的响应对象调用 \r\nPAGECONTEXT：网页的属性是在这里管理的\r\nSETATTRIBUTE(\"NAME\",OBJECT OBJ)：设置名字为NAME的REQUEST参数的值，该值是由OBJECT类型的OBJ指定\r\nGETATTRIBUTE(\"NAME\")：返回NAME属性值\r\nGETATTRIBUTENAMES()：返回所有可用属性名的枚举 \r\nSESSION：与请求有关的会话期\r\nSETATTRIBUTE(\"NAME\",OBJECT OBJ)：设置名字为NAME的REQUEST参数的值，该值是由OBJECT类型的OBJ指定\r\nGETATTRIBUTE(\"NAME\")：返回NAME属性值\r\nGETATTRIBUTENAMES()：返回所有可用属性名的枚举\r\nINVALIDATE()：使当前会话失效\r\nSETMAXINACTIVEINTERVAL()：指定在SERVLET容器使此会话失效之前客户端请求之间的时间间隔，以秒为单位。负数时间指示会话永远不会超时\r\nGETMAXINACTIVELNTERVAL()：返回SERVLET 容器在客户端访问之间将使此会话保持打开状态的最大时间间隔，以秒为单位。在此间隔之后，SERVLET 容器将使会话无效 \r\nAPPLICATION：SERVLET正在执行的内容\r\nSETATTRIBUTE(\"NAME\",OBJECT OBJ)：设置名字为NAME的REQUEST参数的值，该值是由OBJECT类型的OBJ指定\r\nGETATTRIBUTE(\"NAME\")：返回NAME属性值 \r\nOUT：用来传送回应的输出\r\nPRINT()：打印信息\r\nPRINTLN()：换行打印信息 \r\nCONFIG：SERVLET的构架部件\r\nGETINITPARAMETER(STRING PARAMNARNE)：从WEB.XML中获取指定名称的值\r\nGETINITPARAMETERNAMES()：从WEB.XML中获取所有的名称\r\nPAGE：JSP页面本身\r\nEXCEPTION：针对错误网页，未捕捉的例外\r\nGETMESSAGE()：返回异常的详细信息\r\nGETCLASS()：返回异常的名称\r\n', '', '0', '2017-12-27 10:02:03', '75', '1');
INSERT INTO `topic` VALUES ('7527', '33', '4', '有几种方式将页面的值传到后台', 'e48c979c-dd7b-4422-a23f-bb959f973a64.', null, null, null, null, null, null, '可通过FORM表单的GET或POST将值传递到后台，也可通过SETATTRIBUTE()方法将值传递到后台', '', '0', '2017-12-27 10:02:21', '75', '1');
INSERT INTO `topic` VALUES ('7528', '33', '4', 'WEB 前端如何优化（写出四条）？', 'cce18639-a25c-4ae9-927b-8e30d837f861.', null, null, null, null, null, null, '减少HTTP请求的数量（合并CSS、JS、图片）\r\n  利用浏览器的缓存机制\r\n  利用GZIP压缩机制：只针对文本类资源有效\r\n  把CSS文件放在HTML开头\r\n  把JAVASCRIPT文件放在HTML结尾\r\n  避免CSS表达式（判断浏览器）\r\n  使用JAVASCRIPT压缩\r\n  减少DNS查找\r\n  避免重定向\r\n  使用AJAX', '', '0', '2017-12-27 10:02:25', '62', '1');
INSERT INTO `topic` VALUES ('7529', '4', '4', '一个form表单的值如何获取', '6abb58b5-fc77-4c65-98b9-2530ffa29738.', null, null, null, null, null, null, '在SERVLET中通过REQUEST.GETPARAMETER()方法可以获取表单的值\r\n或者是REQUEST.GETPARAMETERVALUSE();\r\n', '', '0', '2017-12-27 10:02:38', '75', '1');
INSERT INTO `topic` VALUES ('7530', '4', '4', '传递参数到后台有几种方式', 'b440dd92-fb84-4453-9629-b1ffba38d428.', null, null, null, null, null, null, '表单传参,URL传参,JQUERY.AJAX传参', '', '0', '2017-12-27 10:02:50', '75', '1');
INSERT INTO `topic` VALUES ('7531', '4', '4', 'Jsp中父页面中怎么拿到子页面的表单元素，不是拿值怎么拿', 'a8cc4b98-3838-4a1b-a90d-5f335d8c228f.', null, null, null, null, null, null, '通过设置属性SETATTRIBUTE()，通过GETATTRIBUTE()拿值，GETPARAMETER()方法可以做到', '', '0', '2017-12-27 10:03:04', '75', '1');
INSERT INTO `topic` VALUES ('7532', '4', '4', '定义一个String类型的字符串，如果重定向之后还能不能获得这个数据', 'e6542983-7ec7-4144-9da2-ce3a48b3b46f.', null, null, null, null, null, null, '不能', '', '0', '2017-12-27 10:03:26', '75', '1');
INSERT INTO `topic` VALUES ('7533', '33', '4', '404和500是什么意思', 'b8fe9e5f-58c1-474f-86d1-077537d19a52.', null, null, null, null, null, null, '404 ：找不到URL请求的路径，一般是工程名不对或者拼写错误\r\n500 ：服务器内部错误，一般是服务器内部代码编写错误，也有可能是抛异常导致\r\n', '', '0', '2017-12-27 10:03:39', '75', '1');
INSERT INTO `topic` VALUES ('7534', '5', '4', '写出5种JSTL常用标签', '0a31e99c-f870-4956-91ab-d829cd138b17.', null, null, null, null, null, null, '<C:IF>，<C:ITEM>，<C:FOREACH>，<C:OUT>，<C:SET>', '', '0', '2017-12-27 10:03:56', '75', '1');
INSERT INTO `topic` VALUES ('7535', '33', '4', '在项目名和页面路径都没有错的情况下为什么会报404错误，它有什么原理在里面', '7f6fe9fd-6908-4d50-b401-21502ccab22d.', null, null, null, null, null, null, '工程名不对或者拼写错误，404错误一般是找不到客户端请求的文件', '', '0', '2017-12-27 10:04:13', '75', '1');
INSERT INTO `topic` VALUES ('7536', '5', '4', 'Jsp页面把一个元素隐藏的方法', '3ba81e8a-c467-4e32-a5cd-193a5c008939.', null, null, null, null, null, null, '通过使用属性HIDDEN可以将元素隐藏', '', '0', '2017-12-27 10:04:40', '75', '1');
INSERT INTO `topic` VALUES ('7537', '4', '4', 'Session，application，cookie的区别', '051d8db8-7bbb-40e9-9f05-9555b8bfcd89.', null, null, null, null, null, null, 'SESSION不能通过NEW创建，要通过调用GETSESSION()方法创建，数据保存在服务器端，单个客户端SESSION是共享的，底层是由COOKIE实现的，大小没有限制\r\nAPPLICATION的作用域是整个工程只有共享一个，生命周期比SESSION大\r\nCOOKIE需要通过NEW创建，数据保存在客户端中，COOKIE保存的数据不能超过4K，不安全\r\n', '', '0', '2017-12-27 10:04:59', '75', '1');
INSERT INTO `topic` VALUES ('7538', '5', '4', 'Jsp里有那些标签', '4d8aa345-99f0-4244-afbe-58c540badf83.', null, null, null, null, null, null, 'JSP:INCLUDE等', '', '0', '2017-12-27 10:05:24', '75', '1');
INSERT INTO `topic` VALUES ('7539', '33', '4', '怎么判断用户请求时是第一次，如果客户端和服务端断开怎么连到上一次操作', 'f4e2d5be-8387-4f53-8500-0795c2bd1f87.', null, null, null, null, null, null, '通过SESSION中的ISNEW()可以判断是否是新用户', '', '0', '2017-12-27 10:05:43', '75', '1');
INSERT INTO `topic` VALUES ('7540', '33', '4', '请说下会话跟踪技术', 'd93df776-769a-4b44-94eb-11fdf48e9088.', null, null, null, null, null, null, '会话跟踪技术是用于维持客户端和服务器端通信的技术。\r\n通过SESSION，COOKIE或者APPLICATION可实现会话跟踪\r\n', '', '0', '2017-12-27 10:05:57', '75', '1');
INSERT INTO `topic` VALUES ('7541', '4', '4', '如果创建servlet实例不用构造方法，怎么创建一个servlet实例', 'dce15202-3ffc-4add-9efa-146c50aacd61.', null, null, null, null, null, null, 'WEB容器会自动为SERVLET写一个无参的构造器，它使用CLASS.FORNAME(\"\").NEWINSTANCE()反射来创建SERVLET实例的', '', '0', '2017-12-27 10:06:10', '75', '1');
INSERT INTO `topic` VALUES ('7542', '4', '4', 'pageContext有什么作用', 'f28c3504-46c9-4ccd-9d86-a86eedc43092.', null, null, null, null, null, null, '可以使用PAGECONTEXT对象来设定属性，并指定属性的作用范围,提供了对JSP页面内所有的对象及名字空间的访问', '', '0', '2017-12-27 10:06:59', '75', '1');
INSERT INTO `topic` VALUES ('7543', '3', '4', '线程的基本概念、线程的基本状态以及状态之间的关系', '13761435-56bb-4690-9fbd-e46f18d98b44.', null, null, null, null, null, null, '线程指在程序执行过程中，能够执行程序代码的一个执行单位，每个程序至少都有一个线程，也就是程序本身。\r\nJAVA中的线程有四种状态分别是：运行、就绪、挂起、结束。', '', '0', '2017-12-27 10:07:13', '50', '1');
INSERT INTO `topic` VALUES ('7544', '4', '4', 'Servlet是单例还是多例', 'c66d6474-9cde-421d-988d-da4a2b01c359.', null, null, null, null, null, null, '是单例的，可以提高性能', '', '0', '2017-12-27 10:07:13', '75', '1');
INSERT INTO `topic` VALUES ('7545', '33', '4', 'Filter与拦截器怎么执行的', '92d5c037-25a3-4fac-953d-09f7a10871fa.', null, null, null, null, null, null, '首先初始化过滤器，然后服务器组织过滤器链，所有的请求都必须需要先通过过滤器链，\r\n过滤器链是一个栈，遵循先进后出的原则 ，所有的请求需要经过一个一个的过滤器，执行顺序要根据WEB.XML里配置的<FILTER-MAPPING>的位置前后执行，每个过滤器之间通过CHAIN.DOFILTER连接， 最后抵达真正请求的资源，执行完后再从过滤器链退出\r\n', '', '0', '2017-12-27 10:07:30', '75', '1');
INSERT INTO `topic` VALUES ('7546', '5', '4', 'Jsp中如何进行分页，项目中如何进行分页？', '8e2212bf-522f-4df9-9445-9ed40f076854.', null, null, null, null, null, null, '需要上一页和下一页的超链接(至少需要这两个)，通过计算当前页的页码获取下一页数据\r\n的起始位置，然后在 MYSQL 中查询，如果使用 ORACLE 则需要另外计算下一页数据的结\r\n束位置。\r\n使用HIBERNATE框架，它可以针对不同的数据库自动产生为你分页的代码。\r\n\r\n', '', '0', '2017-12-27 10:07:46', '75', '1');
INSERT INTO `topic` VALUES ('7548', '5', '4', '使用js在一个div中追加10个复选框，选中复选框的时候弹出选中个数。\r\n追加一个复选框\r\n', '19454f08-0645-4be6-b33a-b874d63246ca.', null, null, null, null, null, null, 'VAR CHECKBOX=DOCUMENT.CREATEELEMENT(\"INPUT\");\r\nCHECKBOX.SETATTRIBUTE(\"TYPE\",\"CHECKBOX\");\r\nCHECKBOX.SETATTRIBUTE(\"ID\",\'123456\');\r\n弹出选中框的个数\r\nVAR INPUTS = DOCUMENT.GETELEMENTSBYNAME(\"CB[]\");\r\nVAR CHECKED_COUNTS = 0;\r\nFOR(VAR I=0;I<INPUTS.LENGTH;I++){\r\n  IF(INPUTS[I].CHECKED){\r\n    CHECKED_COUNTS++;\r\n  }\r\n}\r\nALERT(CHECKED_COUNTS);\r\n', '', '0', '2017-12-27 10:09:09', '75', '1');
INSERT INTO `topic` VALUES ('7549', '5', '4', 'JS对象节点的 插入、复制、删除。?', 'add88b6a-2746-4a6c-a20a-44a132264d4f.', null, null, null, null, null, null, 'ICON \r\n用到的方法和属性： \r\n1.获取某个节点的父节点 \r\nPARENTNODE属性 \r\n2.获取某个节点的子节点集合 \r\nCHILDNODES属性 \r\n3.创键一个新的节点 \r\nCREATETEXTNODE(节点文本内容) DOCUMENT对象的方法 在某些浏览器上兼容性不是很好 \r\nCREATEELEMENT(对象) DOCUMENT对象的方法 例如：DOCUMENT.CREATEELEMENT(\"A\"); \r\n4.给某个节点对象添加属性和属性值 \r\nSETATTRIBUTE(属性，属性值); 例如：ANODE.SETATTRIBUTE(\"HREF\",\"HTTP://WWW.BAIDU.COM/\"); \r\n5.替换某个节点下的子节点 \r\nREPLACECHILD(新节点，原子节点); \r\n6.将某个节点添加到一个节点下 \r\nAPPENDCHILD(要添加的节点) \r\n7.克隆某个节点\r\nCLONENODE() 不传参数和传入TRUE参数一样，表示克隆该节点包括子节点 \r\n', '', '0', '2017-12-27 10:09:49', '75', '1');
INSERT INTO `topic` VALUES ('7550', '5', '4', '实现HTML全选，全取消', '935ee029-770d-4966-a443-f2185e064f76.', null, null, null, null, null, null, 'FUNCTION CHECKALL() { \r\n    //把所有参与选择的CHECKBOX使用相同的NAME，这里为\"NUM_IID\" \r\n    VAR ELES = DOCUMENT.GETELEMENTSBYNAME(\"NUM_IID\"); \r\n    VAR I = 0; \r\n    // 如果是全选状态，则取消所有的选择 \r\n    IF (ISSELECTALL() == TRUE) { \r\n        FOR ( I = 0; I < ELES.LENGTH; I++) { \r\n            ELES[I].CHECKED = FALSE; \r\n        } \r\n        DOCUMENT.GETELEMENTBYID(\"SELECTALL\").CHECKED = FALSE; \r\n    } ELSE { \r\n        // 否则选中每一个CHECKBOX \r\n        FOR ( I = 0; I < ELES.LENGTH; I++) { \r\n            ELES[I].CHECKED = TRUE; \r\n        } \r\n    } \r\n} \r\n// 判断当前是否为全选状态 \r\nFUNCTION ISSELECTALL() { \r\n    VAR ISSELECTED = TRUE; \r\n    VAR ELES = DOCUMENT.GETELEMENTSBYNAME(\"NUM_IID\"); \r\n    FOR (VAR I = 0; I < ELES.LENGTH; I++) { \r\n        IF (ELES[I].CHECKED != TRUE) { \r\n            ISSELECTED = FALSE; \r\n        } \r\n    } \r\n    RETURN ISSELECTED; \r\n} \r\n// 选择任意一个非全选CHECKBOX \r\nFUNCTION CHECKONE() { \r\n    IF (ISSELECTALL()) { \r\n        DOCUMENT.GETELEMENTBYID(\"SELECTALL\").CHECKED = TRUE; \r\n    } ELSE { \r\n        DOCUMENT.GETELEMENTBYID(\"SELECTALL\").CHECKED = FALSE; \r\n    } \r\n}\r\n\r\n', '', '0', '2017-12-27 10:10:57', '75', '1');
INSERT INTO `topic` VALUES ('7551', '5', '4', '用JavaScript显示当前时间，格式：年-月-日 时:分:秒', 'ab9d724f-227e-494c-9622-3fcb1c2e74a8.', null, null, null, null, null, null, 'VAR NOW= NEW DATE();\r\nVAR YEAR=NOW.GETYEAR();\r\nVAR MONTH=NOW.GETMONTH()+1;\r\nVAR DAY=NOW.GETDATE();\r\nVAR HOUR=NOW.GETHOURS();\r\nVAR MINUTE=NOW.GETMINUTES();\r\nVAR SECOND=NOW.GETSECONDS();\r\n    ALERT(YEAR+\"-\"+MONTH+\"-\"+DAY+\" \"+HOUR+\":\"+\":\"+MINUTE+\":\"+SECOND);\r\n', '', '0', '2017-12-27 10:11:17', '75', '1');
INSERT INTO `topic` VALUES ('7552', '3', '1', '请看下列关于java程序代码的说明正确的是（）\r\n\r\n', '3fab6136-eb24-4b30-8f8a-a9a5ceb29b4b.png', ' \r\n\r\n5\r\n\r\n行不能通过编译，因为引用了私有静态变量\r\n\r\n', '10行不能通过编译，因为x是私有静态变量\r\n\r\n', '程序通过编译，输出结果为：x=103', '程序通过编译，输出结果为：x=102 ', '', '', 'D', '', '0', '2017-12-27 10:11:19', '62', '1');
INSERT INTO `topic` VALUES ('7553', '5', '4', '在javascript中用代码实现trim()函数的功能', '02b4572a-0ba7-4a14-8e33-b8270bfecfee.', null, null, null, null, null, null, '//删除左右两端的空格\r\nFUNCTION TRIM(STR){\r\n   RETURN STR.REPLACE(/(^\\S*)|(\\S*$)/G, \"\");\r\n}\r\n \r\n//删除左边的空格\r\nFUNCTION LTRIM(STR){\r\n   RETURN STR.REPLACE(/(^\\S*)/G,\"\");\r\n}\r\n \r\n//删除右边的空格\r\nFUNCTION RTRIM(STR){\r\n   RETURN STR.REPLACE(/(\\S*$)/G,\"\");\r\n}\r\n', '', '0', '2017-12-27 10:11:33', '75', '1');
INSERT INTO `topic` VALUES ('7554', '5', '4', 'JS实现多线程', '6175575f-1577-4e1f-a5e6-bf5015bec62a.', null, null, null, null, null, null, 'SETTIEMOUT：在指定的毫秒数后调用指定的代码段；SETINTERNAL：在指定的时间间隔内（MS）循环调用指定的代码段。通过这两个函数可以实现', '', '0', '2017-12-27 10:11:46', '75', '1');
INSERT INTO `topic` VALUES ('7555', '3', '4', '说说weblogic中一个Domain的缺省目录结构?比如要将一个简单的helloWorld.jsp放入何目录下,然的在浏览器上就可打入 http://主机:端口号//helloword.jsp就可以看到运行结果了?又比如这其中用到了一个自己写的javaBean该如何办?', '435a4885-06e8-42e5-8c43-95590dd37bb8.', null, null, null, null, null, null, 'DOMAIN目录服务器目录APPLICATIONS，将应用目录放在此目录下将可以作为应用访问，如果是WEB应用，应用目录需要满足WEB应用目录要求，JSP文件可以直接放在应用目录中，JAVABEAN需要放在应用目录的WEB-INF目录的CLASSES目录中，设置服务器的缺省应用将可以实现在浏览器上无需输入应用名。', '', '0', '2017-12-27 10:12:02', '50', '1');
INSERT INTO `topic` VALUES ('7556', '3', '1', '下列关于for循环和while循环的说法中哪个是正确的？', '7274e386-532c-4b59-bfd5-8130e9e7e3a5.', 'while\r\n\r\n循环能实现的操作，\r\n\r\nfor\r\n\r\n循环也都能实现\r\n\r\n', 'while循环判断条件一般是程序结果，for循环判断条件一般是非程序结果', '两种循环任何时候都可替换', '两种循环结构中都必须有循环体，循环体不能为空\r\n\r\n ', '', '', 'D', '', '0', '2017-12-27 10:13:22', '62', '1');
INSERT INTO `topic` VALUES ('7557', '3', '1', '测试AAAA', 'a8a66bb2-f07f-4351-8a5c-05dccbb1b6b3.jpg', 'A', 'B', 'C', 'D', '', '', 'A', '测试数据aaa', null, null, '1', '1');

-- ----------------------------
-- Table structure for visit
-- ----------------------------
DROP TABLE IF EXISTS `visit`;
CREATE TABLE `visit` (
  `visitID` int(11) NOT NULL AUTO_INCREMENT COMMENT '回访编号',
  `visitContext` varchar(500) DEFAULT NULL COMMENT '回访内容',
  `visitDate` datetime DEFAULT NULL COMMENT '回访时间',
  `studentID` int(11) DEFAULT NULL COMMENT '学号',
  `visitType` int(11) DEFAULT NULL COMMENT '回访类型(电话，短信)',
  PRIMARY KEY (`visitID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='回访记录';

-- ----------------------------
-- Records of visit
-- ----------------------------

-- ----------------------------
-- Table structure for vote
-- ----------------------------
DROP TABLE IF EXISTS `vote`;
CREATE TABLE `vote` (
  `voteID` int(11) NOT NULL AUTO_INCREMENT COMMENT '投票编号',
  `voteTitle` varchar(255) DEFAULT NULL COMMENT '投票主题',
  `voteImage` varchar(255) DEFAULT NULL COMMENT '图片',
  `item1` varchar(255) DEFAULT NULL COMMENT '选项1',
  `item2` varchar(255) DEFAULT NULL,
  `item3` varchar(255) DEFAULT NULL,
  `item4` varchar(255) DEFAULT NULL,
  `item5` varchar(255) DEFAULT NULL,
  `item6` varchar(255) DEFAULT NULL,
  `item7` varchar(255) DEFAULT NULL,
  `item8` varchar(255) DEFAULT NULL,
  `item9` varchar(255) DEFAULT NULL,
  `item10` varchar(255) DEFAULT NULL,
  `item11` varchar(255) DEFAULT NULL,
  `item12` varchar(255) DEFAULT NULL,
  `item13` varchar(255) DEFAULT NULL,
  `item14` varchar(255) DEFAULT NULL,
  `item15` varchar(255) DEFAULT NULL,
  `selectType` int(11) DEFAULT NULL COMMENT '选择模式',
  `stopDate` datetime DEFAULT NULL COMMENT '截止时间',
  `votePrivacy` int(11) DEFAULT NULL COMMENT '投票隐私',
  `visibleLevel` varchar(255) DEFAULT NULL COMMENT '可见级别',
  PRIMARY KEY (`voteID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='参与决策';

-- ----------------------------
-- Records of vote
-- ----------------------------

-- ----------------------------
-- Table structure for votedetail
-- ----------------------------
DROP TABLE IF EXISTS `votedetail`;
CREATE TABLE `votedetail` (
  `detailID` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `voteID` int(11) DEFAULT NULL COMMENT '投票编号',
  `teacherID` int(11) DEFAULT NULL COMMENT '老师编号',
  `studentID` int(11) DEFAULT NULL,
  `parentID` int(11) DEFAULT NULL COMMENT '家长编号',
  `selectItem` varchar(255) DEFAULT NULL COMMENT '选项（A,B,C,D,E）',
  PRIMARY KEY (`detailID`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT='参与决策明细';

-- ----------------------------
-- Records of votedetail
-- ----------------------------

-- ----------------------------
-- Table structure for workhistory
-- ----------------------------
DROP TABLE IF EXISTS `workhistory`;
CREATE TABLE `workhistory` (
  `historyID` int(11) NOT NULL AUTO_INCREMENT COMMENT '记录编号',
  `studentID` int(11) DEFAULT NULL COMMENT '学号',
  `workID` int(11) DEFAULT NULL COMMENT '作业编号',
  `createDate` datetime DEFAULT NULL COMMENT '标注日期',
  `isComplete` smallint(6) DEFAULT NULL COMMENT '0(未知) 1(完成) 2(未完成)',
  PRIMARY KEY (`historyID`)
) ENGINE=InnoDB AUTO_INCREMENT=21 DEFAULT CHARSET=utf8 COMMENT='作业历史记录';

-- ----------------------------
-- Records of workhistory
-- ----------------------------
INSERT INTO `workhistory` VALUES ('1', '1', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('2', '2', '1', '2018-05-01 14:31:45', '0');
INSERT INTO `workhistory` VALUES ('3', '3', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('4', '4', '1', '2018-05-01 14:31:45', '0');
INSERT INTO `workhistory` VALUES ('5', '5', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('6', '6', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('7', '7', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('8', '8', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('9', '9', '1', '2018-05-01 14:31:45', '0');
INSERT INTO `workhistory` VALUES ('10', '10', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('11', '1', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('12', '2', '1', '2018-05-01 14:31:45', '0');
INSERT INTO `workhistory` VALUES ('13', '3', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('14', '4', '1', '2018-05-01 14:31:45', '0');
INSERT INTO `workhistory` VALUES ('15', '5', '1', '2018-05-01 14:31:45', '0');
INSERT INTO `workhistory` VALUES ('16', '6', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('17', '7', '1', '2018-05-01 14:31:45', '0');
INSERT INTO `workhistory` VALUES ('18', '8', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('19', '9', '1', '2018-05-01 14:31:45', '1');
INSERT INTO `workhistory` VALUES ('20', '10', '1', '2018-05-01 14:31:45', '1');

-- ----------------------------
-- Table structure for workimages
-- ----------------------------
DROP TABLE IF EXISTS `workimages`;
CREATE TABLE `workimages` (
  `imgid` int(11) NOT NULL AUTO_INCREMENT COMMENT '编号',
  `imgName` varchar(255) DEFAULT NULL COMMENT '图片名称',
  `thumbnail` varchar(255) DEFAULT NULL COMMENT '缩略图',
  `createDate` datetime DEFAULT NULL COMMENT '创建时间',
  `imgType` int(11) DEFAULT NULL COMMENT '图片类型（1、正常截图、2、复制截图）',
  `studentid` int(11) DEFAULT NULL COMMENT '学号',
  `workid` int(11) DEFAULT NULL COMMENT '作业编号',
  `classid` int(11) DEFAULT NULL,
  PRIMARY KEY (`imgid`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=utf8 COMMENT='作业截图表';

-- ----------------------------
-- Records of workimages
-- ----------------------------
INSERT INTO `workimages` VALUES ('1', '84_186_3_no_2018-06-05_13_51_08_04e0fa24.ma', '1', '2018-06-04 10:45:33', '1', '2', '173', '2');
INSERT INTO `workimages` VALUES ('2', '84_186_3_no_2018-06-05_13_53_08_27c63158.ma', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');
INSERT INTO `workimages` VALUES ('3', '84_186_3_no_2018-06-05_13_55_08_5d391e8c.ma', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');
INSERT INTO `workimages` VALUES ('4', '84_186_3_no_2018-06-05_13_57_08_19fe65cd.ma', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');
INSERT INTO `workimages` VALUES ('5', '84_186_3_no_2018-06-05_13_59_08_a2f9cedd.ma', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');
INSERT INTO `workimages` VALUES ('6', 'db0218dd-5abf-442d-b62b-3d996a6d6da8.jpg', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');
INSERT INTO `workimages` VALUES ('7', '8bc445c8-47e3-4cd9-86aa-e3ed7d94ed34.jpg', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');
INSERT INTO `workimages` VALUES ('8', 'da21ecce-1615-4291-a568-5ba0567f65d6.jpg', '2', '2018-06-04 10:45:46', '2', '1', '173', '2');
INSERT INTO `workimages` VALUES ('9', 'db0218dd-5abf-442d-b62b-3d996a6d6da8.jpg', '1', '2018-06-04 10:45:46', '2', '1', '173', '2');
INSERT INTO `workimages` VALUES ('10', 'db0218dd-5abf-442d-b62b-3d996a6d6da8.jpg', '1', '2018-06-04 10:45:46', '2', '1', '173', '2');
INSERT INTO `workimages` VALUES ('11', '934c2c5b-743a-441e-a61d-00f992c8726e.jpg', '2', '2018-06-04 10:45:46', '2', '1', '173', '2');
INSERT INTO `workimages` VALUES ('12', '334d4c77-1295-4715-b85b-333a2e9244ef.jpg', '2', '2018-06-04 10:45:46', '2', '1', '173', '2');
INSERT INTO `workimages` VALUES ('13', 'db0218dd-5abf-442d-b62b-3d996a6d6da8.jpg', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');
INSERT INTO `workimages` VALUES ('14', '334d4c77-1295-4715-b85b-333a2e9244ef.jpg', '2', '2018-06-04 10:45:46', '2', '2', '173', '2');

-- ----------------------------
-- Table structure for worklog
-- ----------------------------
DROP TABLE IF EXISTS `worklog`;
CREATE TABLE `worklog` (
  `logid` int(11) NOT NULL AUTO_INCREMENT COMMENT '日志编号',
  `beginDate` datetime DEFAULT NULL COMMENT '开始时间',
  `endDate` datetime DEFAULT NULL COMMENT '结束时间',
  `diffDate` int(11) DEFAULT NULL COMMENT '差异时间',
  `wordCount` int(11) DEFAULT NULL COMMENT '输入字数',
  `lastIP` varchar(30) DEFAULT NULL COMMENT '最后登录IP',
  `classid` int(11) DEFAULT NULL COMMENT '年级编号',
  `stuid` int(11) DEFAULT NULL COMMENT '学生编号',
  `workid` int(11) DEFAULT NULL COMMENT '作业编号',
  PRIMARY KEY (`logid`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8 COMMENT='作业日志表';

-- ----------------------------
-- Records of worklog
-- ----------------------------
INSERT INTO `worklog` VALUES ('1', '2018-05-10 10:43:23', '2018-06-04 10:43:28', '222', '222', '222', '2', '2', '173');
INSERT INTO `worklog` VALUES ('2', '2018-05-22 10:43:23', '2018-06-04 10:43:28', '222', '222', '222', '2', '2', '173');
INSERT INTO `worklog` VALUES ('3', '2018-05-22 10:43:23', '2018-06-04 10:43:28', '222', '222', '222', '2', '1', '173');
INSERT INTO `worklog` VALUES ('4', '2018-05-22 10:43:23', '2018-06-04 10:43:28', '222', '222', '222', '2', '5', '173');
INSERT INTO `worklog` VALUES ('5', '2018-05-22 10:43:23', '2018-06-04 10:43:28', '222', '222', '222', '2', '6', '173');
INSERT INTO `worklog` VALUES ('6', '2018-05-22 10:43:23', '2018-06-04 10:43:28', '222', '222', '222', '2', '3', '173');
INSERT INTO `worklog` VALUES ('7', '2018-05-22 10:43:23', '2018-06-04 10:43:28', '222', '222', '222', '2', '4', '173');

-- ----------------------------
-- Table structure for workplan
-- ----------------------------
DROP TABLE IF EXISTS `workplan`;
CREATE TABLE `workplan` (
  `planid` int(11) NOT NULL AUTO_INCREMENT COMMENT '计划编号',
  `ClassName` varchar(255) CHARACTER SET utf8 DEFAULT NULL COMMENT '班级名称',
  `classid` int(11) DEFAULT NULL COMMENT '班级编号',
  `zhouyi` int(11) DEFAULT NULL COMMENT '周一',
  `zhouer` int(11) DEFAULT NULL COMMENT '周二',
  `zhousan` int(11) DEFAULT NULL,
  `zhousi` int(11) DEFAULT NULL,
  `zhouwu` int(11) DEFAULT NULL,
  `zhouliu` int(11) DEFAULT NULL,
  `zhouri` int(11) DEFAULT NULL,
  PRIMARY KEY (`planid`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1 COMMENT='作业生成计划';

-- ----------------------------
-- Records of workplan
-- ----------------------------
INSERT INTO `workplan` VALUES ('1', 'TCMP058', '1', '1', '0', '1', '0', '1', '1', '0');
INSERT INTO `workplan` VALUES ('2', 'TCMP062', '2', '0', '1', '0', '1', '0', '1', '0');

-- ----------------------------
-- View structure for newview
-- ----------------------------
DROP VIEW IF EXISTS `newview`;
CREATE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER  VIEW `newview` AS select `questionpaper`.`questionName` AS `questionName`,`customtest`.`startDate` AS `startDate`,`customtest`.`endDate` AS `endDate`,`questionpaper`.`answerDate` AS `answerDate`,`questionpaper`.`topicCount` AS `topicCount`,`questionpaper`.`sumScore` AS `sumScore`,`questionpaper`.`allocation` AS `allocation`,`questionpaper`.`creationDate` AS `creationDate`,`questionpaper`.`createdBy` AS `createdBy`,`questionpaper`.`remark` AS `remark`,`testbg`.`topicId` AS `topicId`,`testbg`.`choose` AS `choose`,`testbg`.`inTest` AS `inTest`,`questionpaper`.`questionId` AS `questionId` from ((`testbg` join `customtest`) join `questionpaper`) ;
